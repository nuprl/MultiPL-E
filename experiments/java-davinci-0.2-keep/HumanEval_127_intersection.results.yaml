name: HumanEval_127_intersection
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppl3fai7c.java:32: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // Write your code here\n\
    \        long start = Math.max(interval1.getValue0(), interval2.getValue0());\n\
    \        long end = Math.min(interval1.getValue1(), interval2.getValue1());\n\
    \        if (start > end) return \"NO\";\n        return isPrime(end - start +\
    \ 1) ? \"YES\" : \"NO\";\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp41tc4qcf.java:30: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0kasccwj.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2gqe283m.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n\
    \        }\n        if (length == 2) {\n            return \"YES\";\n        }\n\
    \        for (long i = 2; i < length; i++) {\n            if (length % i == 0)\
    \ {\n                return \"NO\";\n            }\n        }\n        return\
    \ \"YES\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i <= Math.sqrt(length);\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        long length = end - start + 1;\n        if\
    \ (length < 0) {\n            return \"NO\";\n        }\n        if (length ==\
    \ 1) {\n            return \"YES\";\n        }\n        if (length == 2) {\n \
    \           return \"NO\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplfkeizjr.java:32: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    long length = end - start + 1;\n        if (length <= 0) return \"NO\";\n\
    \        if (length == 1) return \"YES\";\n        if (length == 2) return \"\
    NO\";\n        for (long i = 2; i < length; i++) {\n            if (length % i\
    \ == 0) return \"NO\";\n        }\n        return \"YES\";\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)),\
    \ (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfp0tcmhr.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        for (long i = 2; i < length;\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp67aec49t.java:32: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn24axq7e.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        for (long i = 2; i < length;\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        for (long i = 2; i < length;\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // Your code here\n      \
    \  return \"\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        for (long i = 2; i < length;\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps5hgb5dh.java:32: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn6oz2f57.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbwnv9jmj.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe7fm3gn7.java:32: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (isPrime(length)) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps4ccxjze.java:33: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // TODO: implement your code\
    \ here\n        return \"\";\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi88t1jrq.java:32: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpns29y3aq.java:32: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i <= Math.sqrt(length);\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcbebgrtr.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4t63n7xy.java:32: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        long length = end - start + 1;\n        if\
    \ (length < 0) {\n            return \"NO\";\n        }\n        if (length ==\
    \ 1) {\n            return \"YES\";\n        }\n        if (length == 2) {\n \
    \           return \"NO\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnlej6y1h.java:32: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n\
    \        }\n        if (length == 2) {\n            return \"YES\";\n        }\n\
    \        for (long i = 2; i < length; i++) {\n            if (length % i == 0)\
    \ {\n                return \"NO\";\n            }\n        }\n        return\
    \ \"YES\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpem5zrfzs.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) return \"NO\";\n        return\
    \ isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyjcs1735.java:29: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprphew6wr.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmper6diecf.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvaj7r0wc.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfz8r_vsi.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // Your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (isPrime(length)) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa86rhep3.java:33: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length < 2)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i * i <= length;\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n\
    \        }\n        if (length == 2) {\n            return \"YES\";\n        }\n\
    \        for (long i = 2; i < length; i++) {\n            if (length % i == 0)\
    \ {\n                return \"NO\";\n            }\n        }\n        return\
    \ \"YES\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) return \"NO\";\n        long length = end - start + 1;\n\
    \        if (length == 1) return \"NO\";\n        if (length == 2) return \"YES\"\
    ;\n        for (long i = 2; i < length; i++) {\n            if (length % i ==\
    \ 0) return \"NO\";\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    long length = end - start + 1;\n        if (length <= 0) {\n            return\
    \ \"NO\";\n        }\n        if (length == 1) {\n            return \"YES\";\n\
    \        }\n        if (length == 2) {\n            return \"NO\";\n        }\n\
    \        if (length % 2 == 0) {\n            return \"NO\";\n        }\n     \
    \   for (long i = 3; i * i <= length; i += 2) {\n            if (length % i ==\
    \ 0) {\n                return \"NO\";\n            }\n        }\n        return\
    \ \"YES\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        for (long i = 2; i < length;\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpabahlssu.java:32: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpovmv97s4.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i <= Math.sqrt(length);\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  return \"\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp91pzoh9p.java:32: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa38he_a4.java:32: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6eji5svm.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        return isPrime(length) ? \"YES\" : \"NO\";\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvkxjax8n.java:33: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i <= Math.sqrt(length);\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i <= Math.sqrt(length);\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp98fmjfqn.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // Your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    long length = end - start + 1;\n        if (length <= 0) {\n            return\
    \ \"NO\";\n        }\n        return isPrime(length) ? \"YES\" : \"NO\";\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp8sdb6um.java:33: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        for (long i = 2; i < length;\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    long length = end - start + 1;\n        if (length <= 0) {\n            return\
    \ \"NO\";\n        }\n        return isPrime(length) ? \"YES\" : \"NO\";\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphbpq6rpt.java:33: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpof41ip2w.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // Your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) return \"NO\";\n        return isPrime(end - start + 1)\
    \ ? \"YES\" : \"NO\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5k7pyssb.java:30: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp325lvdf5.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyz9iweih.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        if (length % 2 == 0) {\n         \
    \   return \"NO\";\n        }\n        for (long i = 3; i * i <= length; i +=\
    \ 2) {\n            if (length % i == 0) {\n                return \"NO\";\n \
    \           }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (isPrime(length)) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2fy7tfr9.java:33: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start1 = interval1.getValue0();\n\
    \        long end1 = interval1.getValue1();\n        long start2 = interval2.getValue0();\n\
    \        long end2 = interval2.getValue1();\n        long start = Math.max(start1,\
    \ start2);\n        long end = Math.min(end1, end2);\n        if (start > end)\
    \ {\n            return \"NO\";\n        }\n        long length = end - start\
    \ + 1;\n        if (length == 1) {\n            return \"NO\";\n        }\n  \
    \      if (length == 2) {\n            return \"YES\";\n        }\n        for\
    \ (long i = 2; i < length; i++) {\n            if (length % i == 0) {\n      \
    \          return \"NO\";\n            }\n        }\n        return \"YES\";\n\
    \n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        if (length % 2 == 0) {\n         \
    \   return \"NO\";\n        }\n        for (long i = 3; i * i <= length; i +=\
    \ 2) {\n            if (length % i == 0) {\n                return \"NO\";\n \
    \           }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        if (interval1.getValue0()\
    \ > interval2.getValue1() || interval2.getValue0() > interval1.getValue1()) {\n\
    \            return \"NO\";\n        }\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        long length = end - start + 1;\n        return\
    \ isPrime(length) ? \"YES\" : \"NO\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpae4sm0se.java:32: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2r2bpc3n.java:32: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start1 = interval1.getValue0();\n\
    \        long end1 = interval1.getValue1();\n        long start2 = interval2.getValue0();\n\
    \        long end2 = interval2.getValue1();\n        long start = Math.max(start1,\
    \ start2);\n        long end = Math.min(end1, end2);\n        if (start > end)\
    \ {\n            return \"NO\";\n        }\n        long length = end - start\
    \ + 1;\n        if (length == 1) {\n            return \"NO\";\n        }\n  \
    \      if (length == 2) {\n            return \"YES\";\n        }\n        for\
    \ (long i = 2; i < length; i++) {\n            if (length % i == 0) {\n      \
    \          return \"NO\";\n            }\n        }\n        return \"YES\";\n\
    \n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long len = end - start + 1;\n        if (len == 1) {\n \
    \           return \"NO\";\n        }\n        if (len == 2) {\n            return\
    \ \"YES\";\n        }\n        for (long i = 2; i * i <= len; i++) {\n       \
    \     if (len % i == 0) {\n                return \"NO\";\n            }\n   \
    \     }\n        return \"YES\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i <= Math.sqrt(length);\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        if (isPrime(end - start + 1)) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7kmp0x1g.java:31: error: cannot find symbol\n        if (isPrime(end\
    \ - start + 1)) {\n            ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        for (long i = 2; i < length;\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwpa3oq3f.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n\
    \        }\n        if (length == 2) {\n            return \"YES\";\n        }\n\
    \        for (long i = 2; i < length; i++) {\n            if (length % i == 0)\
    \ {\n                return \"NO\";\n            }\n        }\n        return\
    \ \"YES\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        for (long i = 2; i < length;\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzz5oc7x2.java:32: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk1_t3wxh.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf80ji0c8.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy96s8wie.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n\
    \        }\n        if (length == 2) {\n            return \"YES\";\n        }\n\
    \        for (long i = 2; i < length; i++) {\n            if (length % i == 0)\
    \ {\n                return \"NO\";\n            }\n        }\n        return\
    \ \"YES\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt8asj6_v.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i <= Math.sqrt(length);\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) return \"NO\";\n        long\
    \ length = end - start + 1;\n        if (length == 1) return \"NO\";\n       \
    \ if (length == 2) return \"YES\";\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) return \"NO\";\n        }\n        return\
    \ \"YES\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaghhncp4.java:32: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        if (isPrime(end - start + 1)) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx4f1cb6a.java:31: error: cannot find symbol\n        if (isPrime(end\
    \ - start + 1)) {\n            ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) return \"NO\";\n        long\
    \ length = end - start + 1;\n        if (length == 1) return \"NO\";\n       \
    \ if (length == 2) return \"YES\";\n        for (long i = 2; i <= Math.sqrt(length);\
    \ i++) {\n            if (length % i == 0) return \"NO\";\n        }\n       \
    \ return \"YES\";\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"NO\"\
    )));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1gx9cpzn.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpph3wv06a.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n\
    \        }\n        for (long i = 2; i < length; i++) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    long length = end - start + 1;\n        if (length <= 0) return \"NO\";\n\
    \        return isPrime(length) ? \"YES\" : \"NO\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp14xpbin6.java:31: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ene9dka.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) return \"NO\";\n        long\
    \ len = end - start + 1;\n        if (len == 1) return \"NO\";\n        if (len\
    \ == 2) return \"YES\";\n        for (long i = 2; i * i <= len; i++) {\n     \
    \       if (len % i == 0) return \"NO\";\n        }\n        return \"YES\";\n\
    \n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long len\
    \ = end - start + 1;\n        if (len == 1) {\n            return \"NO\";\n  \
    \      }\n        if (len == 2) {\n            return \"YES\";\n        }\n  \
    \      for (long i = 2; i < len; i++) {\n            if (len % i == 0) {\n   \
    \             return \"NO\";\n            }\n        }\n        return \"YES\"\
    ;\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  return \"\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i <= Math.sqrt(length);\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        if (length % 2 == 0) {\n         \
    \   return \"NO\";\n        }\n        for (long i = 3; i * i <= length; i +=\
    \ 2) {\n            if (length % i == 0) {\n                return \"NO\";\n \
    \           }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphkcv8_rn.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) return \"NO\";\n        long length = end - start + 1;\n\
    \        if (length == 1) return \"NO\";\n        if (length == 2) return \"YES\"\
    ;\n        for (long i = 2; i <= Math.sqrt(length); i++) {\n            if (length\
    \ % i == 0) return \"NO\";\n        }\n        return \"YES\";\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)),\
    \ (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        long length = end - start + 1;\n        if\
    \ (length < 0) {\n            return \"NO\";\n        }\n        if (length ==\
    \ 1) {\n            return \"YES\";\n        }\n        if (length == 2) {\n \
    \           return \"NO\";\n        }\n        for (long i = 2; i <= Math.sqrt(length);\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        if (isPrime(end\
    \ - start + 1)) {\n            return \"YES\";\n        }\n        return \"NO\"\
    ;\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzq5f4oz6.java:32: error: cannot find symbol\n        if (isPrime(end\
    \ - start + 1)) {\n            ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    long length = end - start + 1;\n        if (length <= 0) {\n            return\
    \ \"NO\";\n        }\n        return isPrime(length) ? \"YES\" : \"NO\";\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv2aavm7t.java:33: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (isPrime(length)) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ykd8p0e.java:33: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  return \"\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx8gx7oia.java:32: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n\
    \        }\n        if (length == 2) {\n            return \"YES\";\n        }\n\
    \        for (long i = 2; i <= Math.sqrt(length); i++) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) return \"NO\";\n        return isPrime(end - start + 1)\
    \ ? \"YES\" : \"NO\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptf4lplxl.java:30: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1ivq2b4e.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n\
    \        }\n        for (long i = 2; i < length; i++) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // Write your code here\n\
    \        long start = Math.max(interval1.getValue0(), interval2.getValue0());\n\
    \        long end = Math.min(interval1.getValue1(), interval2.getValue1());\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        long\
    \ length = end - start + 1;\n        if (length == 1) {\n            return \"\
    NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n  \
    \      }\n        for (long i = 2; i < length; i++) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // Write your code here\n\
    \        long start = Math.max(interval1.getValue0(), interval2.getValue0());\n\
    \        long end = Math.min(interval1.getValue1(), interval2.getValue1());\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        long\
    \ length = end - start + 1;\n        if (length == 1) {\n            return \"\
    NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n  \
    \      }\n        if (length % 2 == 0) {\n            return \"NO\";\n       \
    \ }\n        for (long i = 3; i * i <= length; i += 2) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        for (long i = 2; i < length;\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfhpi03td.java:32: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvddugmqu.java:32: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        for (long i = 2; i < length;\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4_jn6vvn.java:32: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code goes here\n \
    \       long start = Math.max(interval1.getValue0(), interval2.getValue0());\n\
    \        long end = Math.min(interval1.getValue1(), interval2.getValue1());\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        long\
    \ length = end - start + 1;\n        if (length == 1) {\n            return \"\
    NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n  \
    \      }\n        for (long i = 2; i < length; i++) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe5amvi44.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    long length = end - start + 1;\n        if (length < 0) {\n            return\
    \ \"NO\";\n        }\n        if (length == 1) {\n            return \"YES\";\n\
    \        }\n        for (long i = 2; i < length; i++) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long len = end - start + 1;\n        if (len == 1) {\n \
    \           return \"NO\";\n        }\n        if (len == 2) {\n            return\
    \ \"YES\";\n        }\n        for (long i = 2; i * i <= len; i++) {\n       \
    \     if (len % i == 0) {\n                return \"NO\";\n            }\n   \
    \     }\n        return \"YES\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n\
    \        }\n        for (long i = 2; i < length; i++) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_kywpyoj.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        if (length % 2 == 0) {\n         \
    \   return \"NO\";\n        }\n        for (long i = 3; i * i <= length; i +=\
    \ 2) {\n            if (length % i == 0) {\n                return \"NO\";\n \
    \           }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpclw_d4q_.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (isPrime(length)) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp21pd0ols.java:33: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    long len = end - start + 1;\n        if (len <= 0) {\n            return\
    \ \"NO\";\n        }\n        if (len == 1) {\n            return \"YES\";\n \
    \       }\n        if (len == 2) {\n            return \"NO\";\n        }\n  \
    \      for (long i = 2; i * i <= len; i++) {\n            if (len % i == 0) {\n\
    \                return \"NO\";\n            }\n        }\n        return \"YES\"\
    ;\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6h5slkhn.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        long length = end - start + 1;\n        if\
    \ (length <= 0) {\n            return \"NO\";\n        }\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps_vc_y5e.java:32: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // Your code here\n      \
    \  long start1 = interval1.getValue0();\n        long end1 = interval1.getValue1();\n\
    \        long start2 = interval2.getValue0();\n        long end2 = interval2.getValue1();\n\
    \        long start = Math.max(start1, start2);\n        long end = Math.min(end1,\
    \ end2);\n        if (start > end) {\n            return \"NO\";\n        }\n\
    \        long length = end - start + 1;\n        if (length == 1) {\n        \
    \    return \"NO\";\n        }\n        if (length == 2) {\n            return\
    \ \"YES\";\n        }\n        for (long i = 2; i < length; i++) {\n         \
    \   if (length % i == 0) {\n                return \"NO\";\n            }\n  \
    \      }\n        return \"YES\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        if (isPrime(end - start + 1)) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkbgswo58.java:31: error: cannot find symbol\n        if (isPrime(end\
    \ - start + 1)) {\n            ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i <= Math.sqrt(length);\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n\
    \        }\n        for (long i = 2; i < length; i++) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // Write your code here\n\
    \        long start = Math.max(interval1.getValue0(), interval2.getValue0());\n\
    \        long end = Math.min(interval1.getValue1(), interval2.getValue1());\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        long\
    \ length = end - start + 1;\n        return isPrime(length) ? \"YES\" : \"NO\"\
    ;\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuqfy5sd1.java:33: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i <= Math.sqrt(length);\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        if (length % 2 == 0) {\n         \
    \   return \"NO\";\n        }\n        for (long i = 3; i * i <= length; i +=\
    \ 2) {\n            if (length % i == 0) {\n                return \"NO\";\n \
    \           }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5bj97dok.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1f27k6p2.java:32: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd_bz9e3f.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprcaic057.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwno7krcr.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  return \"\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1hj20nz0.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        long length = end - start + 1;\n        if\
    \ (length < 0) {\n            return \"NO\";\n        }\n        if (length ==\
    \ 1) {\n            return \"YES\";\n        }\n        if (length == 2) {\n \
    \           return \"NO\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n\
    \        }\n        if (length == 2) {\n            return \"YES\";\n        }\n\
    \        for (long i = 2; i < length; i++) {\n            if (length % i == 0)\
    \ {\n                return \"NO\";\n            }\n        }\n        return\
    \ \"YES\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        for (long i = 2; i < length;\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpykrv42yb.java:32: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy6m0amge.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i <= Math.sqrt(length);\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvv_yae5l.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    long length = end - start + 1;\n        if (length <= 0) {\n            return\
    \ \"NO\";\n        }\n        if (length == 1) {\n            return \"YES\";\n\
    \        }\n        for (long i = 2; i < length; i++) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long len = end - start + 1;\n        if (len == 1) {\n \
    \           return \"NO\";\n        }\n        if (len == 2) {\n            return\
    \ \"YES\";\n        }\n        for (long i = 2; i < len; i++) {\n            if\
    \ (len % i == 0) {\n                return \"NO\";\n            }\n        }\n\
    \        return \"YES\";\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        for (long i = 2; i * i <=\
    \ length; i++) {\n            if (length % i == 0) {\n                return \"\
    NO\";\n            }\n        }\n        return \"YES\";\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)),\
    \ (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplmm39q7v.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        long length = end - start + 1;\n        if\
    \ (length < 0) {\n            return \"NO\";\n        }\n        if (length ==\
    \ 1) {\n            return \"YES\";\n        }\n        if (length == 2) {\n \
    \           return \"NO\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (isPrime(length)) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa9p43jle.java:33: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7mb914w0.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        if (length % 2 == 0) {\n         \
    \   return \"NO\";\n        }\n        for (long i = 3; i * i <= length; i +=\
    \ 2) {\n            if (length % i == 0) {\n                return \"NO\";\n \
    \           }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        for (long i = 2; i < length;\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp06qrgxof.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n\
    \        }\n        if (length == 2) {\n            return \"YES\";\n        }\n\
    \        for (long i = 2; i < length; i++) {\n            if (length % i == 0)\
    \ {\n                return \"NO\";\n            }\n        }\n        return\
    \ \"YES\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0997hbfg.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdhmdmqa9.java:31: error: cannot find symbol\n        return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n\
    \        }\n        for (long i = 2; i < length; i++) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n\
    \        }\n        if (length == 2) {\n            return \"YES\";\n        }\n\
    \        for (long i = 2; i < length; i++) {\n            if (length % i == 0)\
    \ {\n                return \"NO\";\n            }\n        }\n        return\
    \ \"YES\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i < length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        for (long i = 2; i <= Math.sqrt(length);\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    long length = end - start + 1;\n        if (length < 0) {\n            return\
    \ \"NO\";\n        }\n        if (length == 1) {\n            return \"YES\";\n\
    \        }\n        if (length == 2) {\n            return \"NO\";\n        }\n\
    \        for (long i = 2; i < length; i++) {\n            if (length % i == 0)\
    \ {\n                return \"NO\";\n            }\n        }\n        return\
    \ \"YES\";\n\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        // your code here\n      \
    \  long start = Math.max(interval1.getValue0(), interval2.getValue0());\n    \
    \    long end = Math.min(interval1.getValue1(), interval2.getValue1());\n    \
    \    if (start > end) {\n            return \"NO\";\n        }\n        long length\
    \ = end - start + 1;\n        return isPrime(length) ? \"YES\" : \"NO\";\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2arx_1pl.java:33: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"NO\";\n        }\n        for (long i = 2; i < length;\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
    \ 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l,\
    \ -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Error: Unable to initialize main class Problem\nCaused by: java.lang.NoClassDefFoundError:\
    \ org/javatuples/Pair\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
    \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
    \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
    \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
    \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
    \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
    \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiimy3ros.java:32: error: cannot find symbol\n        if (isPrime(length))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two intervals,\n    // where each interval\
    \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
    \ The given intervals are closed which means that the interval (start, end)\n\
    \    // includes both start and end.\n    // For each given interval, it is assumed\
    \ that its start is less or equal its end.\n    // Your task is to determine whether\
    \ the length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n  \
    \  // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1),\
    \ (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Long, Long>\
    \ interval1, Pair<Long, Long> interval2) {\n        long start = Math.max(interval1.getValue0(),\
    \ interval2.getValue0());\n        long end = Math.min(interval1.getValue1(),\
    \ interval2.getValue1());\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((\"\
    YES\")));\n    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcxb81zil.java:32: error: cannot find symbol\n        return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
