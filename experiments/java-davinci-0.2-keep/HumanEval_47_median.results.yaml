name: HumanEval_47_median
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int size = l.size();\n        if (size % 2 == 0) {\n            return\
    \ (l.get(size / 2) + l.get(size / 2 - 1)) / 2.0f;\n        } else {\n        \
    \    return l.get(size / 2);\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpken5yi1j.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        if (l.size()\
    \ % 2 == 0) {\n            return (l.get(l.size() / 2) + l.get(l.size() / 2 -\
    \ 1)) / 2.0f;\n        } else {\n            return l.get(l.size() / 2);\n   \
    \     }\n\n    }\n    public static void main(String[] args) {\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\
    \ == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3p_nnv78.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        // TODO:\
    \ implement this method.\n        Collections.sort(l);\n        int size = l.size();\n\
    \        float median = 0;\n        if (size % 2 == 0) {\n            median =\
    \ (l.get(size / 2) + l.get(size / 2 - 1)) / 2.0f;\n        } else {\n        \
    \    median = l.get(size / 2);\n        }\n        return median;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l,\
    \ (long)20l)))) == (8.0f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (float)5l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l)))) == (5.5f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)1l, (long)3l, (long)9l, (long)9l, (long)2l, (long)7l)))) == (float)7l);\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfez7nzqw.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpamecml4h.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        // Write\
    \ your code here.\n        Collections.sort(l);\n        int n = l.size();\n \
    \       if(n%2==0)\n            return (l.get(n/2-1)+l.get(n/2))/2;\n        else\n\
    \            return l.get(n/2);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplrw0udo8.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2) + l.get(l.size()\
    \ / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(l.size() / 2);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\
    \ == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvzdye6tw.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tkg5k2_.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe3aq4_2c.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        // TODO:\
    \ Implement median.\n        Collections.sort(l);\n        int len = l.size();\n\
    \        if (len % 2 == 0) {\n            return (l.get(len / 2) + l.get(len /\
    \ 2 - 1)) / 2.0f;\n        } else {\n            return l.get(len / 2);\n    \
    \    }\n\n    }\n    public static void main(String[] args) {\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\
    \ == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        // TODO:\
    \ Implement median.\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxgxpgxrn.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2) + l.get(l.size()\
    \ / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(l.size() / 2);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\
    \ == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        // Write\
    \ your code here.\n        Collections.sort(l);\n        int n = l.size();\n \
    \       if(n%2==0)\n            return (l.get(n/2-1)+l.get(n/2))/2;\n        else\n\
    \            return l.get(n/2);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz9kzc_6b.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        // TODO:\
    \ Implement this function.\n        Collections.sort(l);\n        int size = l.size();\n\
    \        if (size % 2 == 0) {\n            return (l.get(size / 2) + l.get(size\
    \ / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(size / 2);\n \
    \       }\n\n    }\n    public static void main(String[] args) {\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\
    \ == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        if (l.size() % 2 == 0) {\n            int mid = l.size() / 2;\n     \
    \       return (l.get(mid) + l.get(mid - 1)) / 2.0f;\n        } else {\n     \
    \       return l.get(l.size() / 2);\n        }\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l,\
    \ (long)20l)))) == (8.0f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (float)5l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l)))) == (5.5f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)1l, (long)3l, (long)9l, (long)9l, (long)2l, (long)7l)))) == (float)7l);\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnxj6qtfb.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps88ujfmq.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2\
    \ == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0f;\n    \
    \    } else {\n            return l.get(n / 2);\n        }\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l,\
    \ (long)20l)))) == (8.0f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (float)5l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l)))) == (5.5f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)1l, (long)3l, (long)9l, (long)9l, (long)2l, (long)7l)))) == (float)7l);\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0cdt2dv4.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        // TODO:\
    \ Implement this function.\n        Collections.sort(l);\n        int size = l.size();\n\
    \        if (size % 2 == 0) {\n            return (l.get(size / 2) + l.get(size\
    \ / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(size / 2);\n \
    \       }\n\n    }\n    public static void main(String[] args) {\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\
    \ == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        // TODO:\
    \ Implement median\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp25bffd1.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpudaklsb6.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpncq7hmhc.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpga_cr6y7.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        float median;\n        if (l.size() % 2 == 0)\n            median = ((float)l.get(l.size()/2)\
    \ + (float)l.get(l.size()/2 - 1))/2;\n        else\n            median = (float)\
    \ l.get(l.size()/2);\n        return median;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l,\
    \ (long)20l)))) == (8.0f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (float)5l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l)))) == (5.5f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)1l, (long)3l, (long)9l, (long)9l, (long)2l, (long)7l)))) == (float)7l);\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2) + l.get(l.size()\
    \ / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(l.size() / 2);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\
    \ == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int mid = l.size() / 2;\n        if (l.size() % 2 == 0) {\n         \
    \   return (l.get(mid - 1) + l.get(mid)) / 2.0f;\n        } else {\n         \
    \   return l.get(mid);\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2) + l.get(l.size()\
    \ / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(l.size() / 2);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\
    \ == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_8bxkgp8.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2) + l.get(l.size()\
    \ / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(l.size() / 2);\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\
    \ == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        // TODO:\
    \ implement this function.\n        return 0;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(median((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l,\
    \ (long)20l)))) == (8.0f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (float)5l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l)))) == (5.5f));\n    assert(median((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)1l, (long)3l, (long)9l, (long)9l, (long)2l, (long)7l)))) == (float)7l);\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzzje2b0x.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> median([3,\
    \ 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    //\
    \ 15.0\n    public static float median(ArrayList<Long> l) {\n        Collections.sort(l);\n\
    \        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n\
    \ / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(n\
    \ / 2);\n        }\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))) == (float)3l);\n    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l,\
    \ (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));\n    assert(median((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l,\
    \ (long)2l, (long)7l)))) == (float)7l);\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
