name: HumanEval_46_fib4
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        } else if (n == 1) {\n            return 0;\n   \
    \     } else if (n == 2) {\n            return 2;\n        } else if (n == 3)\
    \ {\n            return 0;\n        } else {\n            long a = 0;\n      \
    \      long b = 0;\n            long c = 2;\n            long d = 0;\n       \
    \     for (long i = 4; i <= n; i++) {\n                long temp = a + b + c +\
    \ d;\n                a = b;\n                b = c;\n                c = d;\n\
    \                d = temp;\n            }\n            return a + b + c + d;\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_s52dje8.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long[] fib = new long[4];\n\
    \        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3]\
    \ = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[3] = fib[0] +\
    \ fib[1] + fib[2] + fib[3];\n            fib[0] = fib[1];\n            fib[1]\
    \ = fib[2];\n            fib[2] = fib[3];\n        }\n        return fib[3];\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoyi9weze.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long[] fib = new long[4];\n\
    \        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3]\
    \ = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[3] = fib[0] +\
    \ fib[1] + fib[2] + fib[3];\n            fib[0] = fib[1];\n            fib[1]\
    \ = fib[2];\n            fib[2] = fib[3];\n        }\n        return fib[3];\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf8fjgncj.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzh3c9pau.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i\
    \ = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n            a =\
    \ b;\n            b = c;\n            c = d;\n            d = temp;\n        }\n\
    \        return a + b + c + d;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp9pejht9.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp49ywevrf.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1dqi9awl.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long e = a + b + c + d;\n            a = b;\n            b = c;\n       \
    \     c = d;\n            d = e;\n        }\n        return a + b + c + d;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpno26lih4.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long[] fibs = new long[4];\n        fibs[0] = 0;\n\
    \        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3] = 0;\n        for\
    \ (int i = 4; i <= n; i++) {\n            long temp = fibs[0] + fibs[1] + fibs[2]\
    \ + fibs[3];\n            fibs[0] = fibs[1];\n            fibs[1] = fibs[2];\n\
    \            fibs[2] = fibs[3];\n            fibs[3] = temp;\n        }\n    \
    \    return fibs[3];\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n < 0) {\n    \
    \        throw new IllegalArgumentException(\"n must be non-negative\");\n   \
    \     }\n        if (n == 0) {\n            return 0;\n        }\n        if (n\
    \ == 1) {\n            return 0;\n        }\n        if (n == 2) {\n         \
    \   return 2;\n        }\n        if (n == 3) {\n            return 0;\n     \
    \   }\n        long[] fibs = new long[4];\n        fibs[0] = 0;\n        fibs[1]\
    \ = 0;\n        fibs[2] = 2;\n        fibs[3] = 0;\n        for (int i = 4; i\
    \ <= n; i++) {\n            long sum = 0;\n            for (int j = 0; j < 4;\
    \ j++) {\n                sum += fibs[j];\n            }\n            for (int\
    \ j = 0; j < 3; j++) {\n                fibs[j] = fibs[j+1];\n            }\n\
    \            fibs[3] = sum;\n        }\n        return fibs[3];\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        long e = 0;\n        for (int i = 4; i <=\
    \ n; i++) {\n            e = a + b + c + d;\n            a = b;\n            b\
    \ = c;\n            c = d;\n            d = e;\n        }\n        return e;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhz2dis1.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0jhwc8oq.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Write your\
    \ code here\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn0ru41ln.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long[] arr = new long[4];\n\
    \        arr[0] = 0;\n        arr[1] = 0;\n        arr[2] = 2;\n        arr[3]\
    \ = 0;\n        for (int i = 4; i <= n; i++) {\n            long temp = arr[0]\
    \ + arr[1] + arr[2] + arr[3];\n            arr[0] = arr[1];\n            arr[1]\
    \ = arr[2];\n            arr[2] = arr[3];\n            arr[3] = temp;\n      \
    \  }\n        return arr[3];\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me\n        return 0;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprrz2lfpl.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        throw new UnsupportedOperationException(\"\
    Not implemented\");\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented\n\tat Problem.fib4(tmpbcptrax3.java:23)\n\tat Problem.main(tmpbcptrax3.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn6264qyb.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_zwvmne6.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long[] fib = new long[4];\n\
    \        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3]\
    \ = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[3] = fib[0] +\
    \ fib[1] + fib[2] + fib[3];\n            fib[0] = fib[1];\n            fib[1]\
    \ = fib[2];\n            fib[2] = fib[3];\n        }\n        return fib[3];\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnpod9_2.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4c54ye76.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (int i = 4; i\
    \ <= n; i++) {\n            long temp = a + b + c + d;\n            a = b;\n \
    \           b = c;\n            c = d;\n            d = temp;\n        }\n   \
    \     return a + b + c + d;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7hzeu_ci.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i\
    \ <= n; i++) {\n            long e = a + b + c + d;\n            a = b;\n    \
    \        b = c;\n            c = d;\n            d = e;\n        }\n        return\
    \ a + b + c + d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpshcip9ni.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long[] fib4 = new long[4];\n\
    \        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]\
    \ = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4[3] = fib4[0]\
    \ + fib4[1] + fib4[2] + fib4[3];\n            fib4[0] = fib4[1];\n           \
    \ fib4[1] = fib4[2];\n            fib4[2] = fib4[3];\n        }\n        return\
    \ fib4[3];\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb08iuo96.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcr3mz_wp.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        } else if (n == 1) {\n            return 0;\n   \
    \     } else if (n == 2) {\n            return 2;\n        } else if (n == 3)\
    \ {\n            return 0;\n        } else {\n            long a = 0;\n      \
    \      long b = 0;\n            long c = 2;\n            long d = 0;\n       \
    \     for (long i = 4; i <= n; i++) {\n                long temp = a + b + c +\
    \ d;\n                a = b;\n                b = c;\n                c = d;\n\
    \                d = temp;\n            }\n            return a + b + c + d;\n\
    \        }\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmefuklev.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n\
    \        for (long i = 3; i <= n; i++) {\n            e = a + b + c + d;\n   \
    \         a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsn8x8n7m.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprv12rkg.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long[] fibs = new long[4];\n        fibs[0] = 0;\n\
    \        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3] = 0;\n        for\
    \ (int i = 4; i <= n; i++) {\n            long sum = 0;\n            for (int\
    \ j = 0; j < 4; j++) {\n                sum += fibs[j];\n            }\n     \
    \       for (int j = 0; j < 3; j++) {\n                fibs[j] = fibs[j+1];\n\
    \            }\n            fibs[3] = sum;\n        }\n        return fibs[3];\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjg05_kbx.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        long e = 0;\n        for (int i = 4; i <=\
    \ n; i++) {\n            e = a + b + c + d;\n            a = b;\n            b\
    \ = c;\n            c = d;\n            d = e;\n        }\n        return e;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuebxelh1.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i\
    \ <= n; i++) {\n            long temp = a + b + c + d;\n            a = b;\n \
    \           b = c;\n            c = d;\n            d = temp;\n        }\n   \
    \     return a + b + c + d;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzitpcnf8.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            e = a + b + c + d;\n       \
    \     a = b;\n            b = c;\n            c = d;\n            d = e;\n   \
    \     }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i\
    \ <= n; i++) {\n            long temp = a + b + c + d;\n            a = b;\n \
    \           b = c;\n            c = d;\n            d = temp;\n        }\n   \
    \     return a + b + c + d;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9riz2rv1.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            e = a + b + c + d;\n       \
    \     a = b;\n            b = c;\n            c = d;\n            d = e;\n   \
    \     }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_mz28jte.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n < 0) {\n    \
    \        throw new IllegalArgumentException(\"n must be non-negative\");\n   \
    \     }\n        if (n < 4) {\n            return n * (n - 1);\n        }\n  \
    \      long a = 0;\n        long b = 0;\n        long c = 2;\n        long d =\
    \ 0;\n        for (long i = 4; i <= n; i++) {\n            long e = a + b + c\
    \ + d;\n            a = b;\n            b = c;\n            c = d;\n         \
    \   d = e;\n        }\n        return a + b + c + d;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp41kefd1i.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i\
    \ <= n; i++) {\n            long temp = a + b + c + d;\n            a = b;\n \
    \           b = c;\n            c = d;\n            d = temp;\n        }\n   \
    \     return a + b + c + d;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg689clc3.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpea32iccx.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3xd8pxq6.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ this method.\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiaqwbx69.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpci4x3yvl.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2yaz8md2.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmrjul19c.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long[] fib4 = new long[4];\n\
    \        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]\
    \ = 0;\n        if (n < 4) {\n            return fib4[(int)n];\n        }\n  \
    \      for (int i = 4; i <= n; i++) {\n            long temp = fib4[0] + fib4[1]\
    \ + fib4[2] + fib4[3];\n            fib4[0] = fib4[1];\n            fib4[1] =\
    \ fib4[2];\n            fib4[2] = fib4[3];\n            fib4[3] = temp;\n    \
    \    }\n        return fib4[3];\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n\
    \        for (long i = 3; i <= n; i++) {\n            e = a + b + c + d;\n   \
    \         a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppvdk0jpv.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            e = a + b + c + d;\n       \
    \     a = b;\n            b = c;\n            c = d;\n            d = e;\n   \
    \     }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxg1fnskg.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // Your code here\n\
    \        return 0;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpafb0t_0r.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp21iyby78.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long[] fibs = new long[4];\n        fibs[0] = 0;\n\
    \        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3] = 0;\n        for\
    \ (int i = 4; i <= n; i++) {\n            long next = fibs[0] + fibs[1] + fibs[2]\
    \ + fibs[3];\n            fibs[0] = fibs[1];\n            fibs[1] = fibs[2];\n\
    \            fibs[2] = fibs[3];\n            fibs[3] = next;\n        }\n    \
    \    return fibs[3];\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsj76dgy2.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprrr121hp.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ this function.\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy2ijcyt6.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n\
    \        for (long i = 3; i <= n; i++) {\n            e = a + b + c + d;\n   \
    \         a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg0ezjob9.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i\
    \ <= n; i++) {\n            long e = a + b + c + d;\n            a = b;\n    \
    \        b = c;\n            c = d;\n            d = e;\n        }\n        return\
    \ a + b + c + d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe4neniz0.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppuysnigi.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long[] fibs = new long[4];\n\
    \        fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3]\
    \ = 0;\n        for (int i = 4; i <= n; i++) {\n            long temp = fibs[0]\
    \ + fibs[1] + fibs[2] + fibs[3];\n            fibs[0] = fibs[1];\n           \
    \ fibs[1] = fibs[2];\n            fibs[2] = fibs[3];\n            fibs[3] = temp;\n\
    \        }\n        return fibs[3];\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ this function\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5zcam5x1.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long[] fib4 = new long[4];\n        fib4[0] = 0;\n\
    \        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        for\
    \ (int i = 4; i <= n; i++) {\n            long temp = fib4[0] + fib4[1] + fib4[2]\
    \ + fib4[3];\n            fib4[0] = fib4[1];\n            fib4[1] = fib4[2];\n\
    \            fib4[2] = fib4[3];\n            fib4[3] = temp;\n        }\n    \
    \    return fib4[3];\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ this function.\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ec7cp1d.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n < 0) throw new\
    \ IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (long i = 4; i <= n; i++) {\n       \
    \     long temp = a + b + c + d;\n            a = b;\n            b = c;\n   \
    \         c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpculidioc.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i\
    \ <= n; i++) {\n            long temp = a + b + c + d;\n            a = b;\n \
    \           b = c;\n            c = d;\n            d = temp;\n        }\n   \
    \     return a + b + c + d;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyx69lwwl.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpclwva48g.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgz023rvm.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i\
    \ = 3; i <= n; i++) {\n            long temp = a + b + c + d;\n            a =\
    \ b;\n            b = c;\n            c = d;\n            d = temp;\n        }\n\
    \        return a + b + c + d;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp18k59tz3.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long[] fib4 = new long[4];\n\
    \        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]\
    \ = 0;\n        if (n <= 3) {\n            return fib4[(int)n];\n        }\n \
    \       long[] fib4_n = new long[4];\n        fib4_n[0] = 1;\n        fib4_n[1]\
    \ = 0;\n        fib4_n[2] = 0;\n        fib4_n[3] = 0;\n        for (long i =\
    \ 4; i <= n; i++) {\n            long[] temp = new long[4];\n            temp[0]\
    \ = fib4_n[0] * fib4[0] + fib4_n[1] * fib4[1] + fib4_n[2] * fib4[2] + fib4_n[3]\
    \ * fib4[3];\n            temp[1] = fib4_n[0] * fib4[1] + fib4_n[1] * fib4[2]\
    \ + fib4_n[2] * fib4[3];\n            temp[2] = fib4_n[0] * fib4[2] + fib4_n[1]\
    \ * fib4[3];\n            temp[3] = fib4_n[0] * fib4[3];\n            fib4_n =\
    \ temp;\n        }\n        return fib4_n[0];\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcjm74rvo.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbl7xhn2f.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzo2vtqzd.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp44v4ay7l.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp1nbbgg6.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeadz0w6p.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i\
    \ <= n; i++) {\n            long temp = a + b + c + d;\n            a = b;\n \
    \           b = c;\n            c = d;\n            d = temp;\n        }\n   \
    \     return a + b + c + d;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ukewmrt.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_bjl5wm.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfdr4uhcn.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        long sum = 0;\n        for (int i = 4; i\
    \ <= n; i++) {\n            sum = a + b + c + d;\n            a = b;\n       \
    \     b = c;\n            c = d;\n            d = sum;\n        }\n        return\
    \ sum;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long[] fibs = new long[4];\n\
    \        fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3]\
    \ = 0;\n        for (int i = 4; i <= n; i++) {\n            long temp = fibs[0]\
    \ + fibs[1] + fibs[2] + fibs[3];\n            fibs[0] = fibs[1];\n           \
    \ fibs[1] = fibs[2];\n            fibs[2] = fibs[3];\n            fibs[3] = temp;\n\
    \        }\n        return fibs[3];\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long[] fib4 = new long[4];\n\
    \        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]\
    \ = 0;\n        long[] fib4_new = new long[4];\n        fib4_new[0] = 0;\n   \
    \     fib4_new[1] = 0;\n        fib4_new[2] = 2;\n        fib4_new[3] = 0;\n \
    \       for (int i = 4; i <= n; i++) {\n            fib4_new[0] = fib4[1] + fib4[2]\
    \ + fib4[3];\n            fib4_new[1] = fib4[0];\n            fib4_new[2] = fib4[1];\n\
    \            fib4_new[3] = fib4[2];\n            fib4 = fib4_new;\n        }\n\
    \        return fib4[0];\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprt405to5.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplo30qnf8.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n\
    \        for (long i = 4; i <= n; i++) {\n            e = a + b + c + d;\n   \
    \         a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfk1zhsf9.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcekhg7zs.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprvvbwm8o.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        long e = 0;\n        for (long i = 4; i <=\
    \ n; i++) {\n            e = a + b + c + d;\n            a = b;\n            b\
    \ = c;\n            c = d;\n            d = e;\n        }\n        return e;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr9rsvmes.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm2o3piqk.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcl3peqe8.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long[] fibs = new long[4];\n\
    \        fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3]\
    \ = 0;\n        for (int i = 4; i <= n; i++) {\n            long sum = 0;\n  \
    \          for (int j = 0; j < 4; j++) {\n                sum += fibs[j];\n  \
    \          }\n            for (int j = 0; j < 3; j++) {\n                fibs[j]\
    \ = fibs[j+1];\n            }\n            fibs[3] = sum;\n        }\n       \
    \ return fibs[3];\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7_6poqo2.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long[] fib4 = new long[4];\n\
    \        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]\
    \ = 0;\n        if (n < 4) {\n            return fib4[(int)n];\n        }\n  \
    \      for (int i = 4; i <= n; i++) {\n            long temp = fib4[0] + fib4[1]\
    \ + fib4[2] + fib4[3];\n            fib4[0] = fib4[1];\n            fib4[1] =\
    \ fib4[2];\n            fib4[2] = fib4[3];\n            fib4[3] = temp;\n    \
    \    }\n        return fib4[3];\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk1f6js7k.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me\n        return 0;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsavkjcrx.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: implement\
    \ me\n        return 0;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_zig8wpp.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw733k8xz.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr5i3r16e.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcw_clje1.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n\
    \        for (long i = 4; i <= n; i++) {\n            e = a + b + c + d;\n   \
    \         a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9cjan4m.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i\
    \ = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n            a =\
    \ b;\n            b = c;\n            c = d;\n            d = temp;\n        }\n\
    \        return a + b + c + d;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8agtoids.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ this function.\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv8hifkai.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n < 0) {\n    \
    \        throw new IllegalArgumentException(\"n must be >= 0\");\n        }\n\
    \        if (n == 0) {\n            return 0;\n        }\n        if (n == 1)\
    \ {\n            return 0;\n        }\n        if (n == 2) {\n            return\
    \ 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n   \
    \     long a = 0;\n        long b = 0;\n        long c = 2;\n        long d =\
    \ 0;\n        for (long i = 4; i <= n; i++) {\n            long temp = a + b +\
    \ c + d;\n            a = b;\n            b = c;\n            c = d;\n       \
    \     d = temp;\n        }\n        return a + b + c + d;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpubnm9s8j.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long[] fib4 = new long[4];\n        fib4[0] = 0;\n\
    \        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        for\
    \ (int i = 4; i <= n; i++) {\n            long temp = fib4[3];\n            fib4[3]\
    \ = fib4[2] + fib4[1] + fib4[0] + fib4[3];\n            fib4[0] = fib4[1];\n \
    \           fib4[1] = fib4[2];\n            fib4[2] = temp;\n        }\n     \
    \   return fib4[3];\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps37nyd9w.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long[] fib4 = new long[4];\n\
    \        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]\
    \ = 0;\n        for (int i = 4; i <= n; i++) {\n            long temp = fib4[0]\
    \ + fib4[1] + fib4[2] + fib4[3];\n            fib4[0] = fib4[1];\n           \
    \ fib4[1] = fib4[2];\n            fib4[2] = fib4[3];\n            fib4[3] = temp;\n\
    \        }\n        return fib4[3];\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (int i = 4; i\
    \ <= n; i++) {\n            long temp = a + b + c + d;\n            a = b;\n \
    \           b = c;\n            c = d;\n            d = temp;\n        }\n   \
    \     return a + b + c + d;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaih05oas.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdc3u50iy.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8yf10n_.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu14swtpk.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoegqeyc6.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n\
    \        for (long i = 4; i <= n; i++) {\n            e = a + b + c + d;\n   \
    \         a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i\
    \ <= n; i++) {\n            long e = a + b + c + d;\n            a = b;\n    \
    \        b = c;\n            c = d;\n            d = e;\n        }\n        return\
    \ a + b + c + d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20vjxwtn.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5gb0_wao.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long[] fib = new long[4];\n\
    \        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3]\
    \ = 0;\n        for (int i = 4; i <= n; i++) {\n            long temp = fib[0]\
    \ + fib[1] + fib[2] + fib[3];\n            fib[0] = fib[1];\n            fib[1]\
    \ = fib[2];\n            fib[2] = fib[3];\n            fib[3] = temp;\n      \
    \  }\n        return fib[3];\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt3se_4ww.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n < 0) {\n    \
    \        throw new IllegalArgumentException(\"n must be non-negative\");\n   \
    \     }\n        long[] fib4 = new long[4];\n        fib4[0] = 0;\n        fib4[1]\
    \ = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        if (n <= 3) {\n  \
    \          return fib4[(int)n];\n        }\n        long[] fib4_new = new long[4];\n\
    \        for (int i = 4; i <= n; i++) {\n            fib4_new[0] = fib4[1] + fib4[2]\
    \ + fib4[3] + fib4[0];\n            fib4_new[1] = fib4[2] + fib4[3] + fib4[0]\
    \ + fib4[1];\n            fib4_new[2] = fib4[3] + fib4[0] + fib4[1] + fib4[2];\n\
    \            fib4_new[3] = fib4[0] + fib4[1] + fib4[2] + fib4[3];\n          \
    \  fib4 = fib4_new;\n        }\n        return fib4[0];\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmk8wrg6p.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppeil9anf.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n\
    \        for (long i = 4; i <= n; i++) {\n            e = a + b + c + d;\n   \
    \         a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2dhobv0m.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long[] fibs = new long[4];\n        fibs[0] = 0;\n\
    \        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3] = 0;\n        for\
    \ (int i = 4; i <= n; i++) {\n            long temp = fibs[0] + fibs[1] + fibs[2]\
    \ + fibs[3];\n            fibs[0] = fibs[1];\n            fibs[1] = fibs[2];\n\
    \            fibs[2] = fibs[3];\n            fibs[3] = temp;\n        }\n    \
    \    return fibs[3];\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long[] fibs = new long[4];\n        fibs[0] = 0;\n\
    \        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3] = 0;\n        for\
    \ (int i = 4; i <= n; i++) {\n            long temp = fibs[0] + fibs[1] + fibs[2]\
    \ + fibs[3];\n            fibs[0] = fibs[1];\n            fibs[1] = fibs[2];\n\
    \            fibs[2] = fibs[3];\n            fibs[3] = temp;\n        }\n    \
    \    return fibs[3];\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0zt0ocgb.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long[] fib = new long[4];\n        fib[0] = 0;\n\
    \        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (int\
    \ i = 4; i <= n; i++) {\n            long temp = fib[0] + fib[1] + fib[2] + fib[3];\n\
    \            fib[0] = fib[1];\n            fib[1] = fib[2];\n            fib[2]\
    \ = fib[3];\n            fib[3] = temp;\n        }\n        return fib[3];\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long[] fib4 = new long[4];\n\
    \        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]\
    \ = 0;\n        if (n < 4) {\n            return fib4[(int)n];\n        }\n  \
    \      long[] fib4_new = new long[4];\n        for (int i = 4; i <= n; i++) {\n\
    \            fib4_new[0] = fib4[1] + fib4[2] + fib4[3];\n            fib4_new[1]\
    \ = fib4[0];\n            fib4_new[2] = fib4[1];\n            fib4_new[3] = fib4[2];\n\
    \            fib4 = fib4_new;\n        }\n        return fib4[0];\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6aez7pob.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        long e = 0;\n        for (int i = 4; i <=\
    \ n; i++) {\n            e = a + b + c + d;\n            a = b;\n            b\
    \ = c;\n            c = d;\n            d = e;\n        }\n        return e;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n < 0) {\n    \
    \        throw new IllegalArgumentException(\"n must be non-negative\");\n   \
    \     }\n        if (n == 0) {\n            return 0;\n        }\n        if (n\
    \ == 1) {\n            return 0;\n        }\n        if (n == 2) {\n         \
    \   return 2;\n        }\n        if (n == 3) {\n            return 0;\n     \
    \   }\n        long[] fib4 = new long[4];\n        fib4[0] = 0;\n        fib4[1]\
    \ = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        for (int i = 4; i\
    \ <= n; i++) {\n            long temp = fib4[3];\n            fib4[3] = fib4[2]\
    \ + fib4[1] + fib4[0] + fib4[3];\n            fib4[0] = fib4[1];\n           \
    \ fib4[1] = fib4[2];\n            fib4[2] = temp;\n        }\n        return fib4[3];\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n < 0) {\n    \
    \        throw new IllegalArgumentException(\"n must be non-negative\");\n   \
    \     }\n        if (n == 0) {\n            return 0;\n        }\n        if (n\
    \ == 1) {\n            return 0;\n        }\n        if (n == 2) {\n         \
    \   return 2;\n        }\n        if (n == 3) {\n            return 0;\n     \
    \   }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n       \
    \ long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long temp\
    \ = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = temp;\n        }\n        return a + b + c + d;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbb36p80_.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp14tofo0z.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgyqkevn7.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5oocan0l.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbh_vlc0c.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp393tsaf1.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptj_7ew5f.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n < 4) {\n    \
    \        return n;\n        }\n        long a = 0;\n        long b = 0;\n    \
    \    long c = 2;\n        long d = 0;\n        for (long i = 4; i <= n; i++) {\n\
    \            d = a + b + c;\n            a = b;\n            b = c;\n        \
    \    c = d;\n        }\n        return d;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_v522ulq.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n < 0) {\n    \
    \        throw new IllegalArgumentException(\"n must be non-negative\");\n   \
    \     }\n        if (n == 0) {\n            return 0;\n        }\n        if (n\
    \ == 1) {\n            return 0;\n        }\n        if (n == 2) {\n         \
    \   return 2;\n        }\n        if (n == 3) {\n            return 0;\n     \
    \   }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n       \
    \ long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long temp\
    \ = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = temp;\n        }\n        return a + b + c + d;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxmwgspx9.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxx44m9po.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3bqfulhx.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n\
    \        for (long i = 3; i <= n; i++) {\n            e = a + b + c + d;\n   \
    \         a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp51bj5c_8.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa7ybtm45.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me\n        return 0;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmu45vt4u.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (int i = 4; i\
    \ <= n; i++) {\n            long temp = a + b + c + d;\n            a = b;\n \
    \           b = c;\n            c = d;\n            d = temp;\n        }\n   \
    \     return a + b + c + d;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvunvexe4.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ this function.\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpav0u0u4e.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxumqbxne.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n < 0) {\n    \
    \        throw new IllegalArgumentException(\"n must be non-negative\");\n   \
    \     }\n        if (n == 0) {\n            return 0;\n        }\n        if (n\
    \ == 1) {\n            return 0;\n        }\n        if (n == 2) {\n         \
    \   return 2;\n        }\n        if (n == 3) {\n            return 0;\n     \
    \   }\n        long[] fibs = new long[4];\n        fibs[0] = 0;\n        fibs[1]\
    \ = 0;\n        fibs[2] = 2;\n        fibs[3] = 0;\n        for (int i = 4; i\
    \ <= n; i++) {\n            long newFib = fibs[0] + fibs[1] + fibs[2] + fibs[3];\n\
    \            fibs[0] = fibs[1];\n            fibs[1] = fibs[2];\n            fibs[2]\
    \ = fibs[3];\n            fibs[3] = newFib;\n        }\n        return fibs[3];\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n < 0) {\n    \
    \        throw new IllegalArgumentException(\"n must be non-negative\");\n   \
    \     }\n        if (n == 0) {\n            return 0;\n        }\n        if (n\
    \ == 1) {\n            return 0;\n        }\n        if (n == 2) {\n         \
    \   return 2;\n        }\n        if (n == 3) {\n            return 0;\n     \
    \   }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n       \
    \ long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long temp\
    \ = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = temp;\n        }\n        return a + b + c + d;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9cjnoadk.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ this function.\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7z3xmpdd.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me\n        return 0;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpka2wpqmo.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // Fill in your code\
    \ here.\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeb2gf2i1.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprrlzxcgx.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        } else if (n == 1) {\n            return 0;\n   \
    \     } else if (n == 2) {\n            return 2;\n        } else if (n == 3)\
    \ {\n            return 0;\n        } else {\n            long a = 0;\n      \
    \      long b = 0;\n            long c = 2;\n            long d = 0;\n       \
    \     long e = 0;\n            for (long i = 4; i <= n; i++) {\n             \
    \   e = a + b + c + d;\n                a = b;\n                b = c;\n     \
    \           c = d;\n                d = e;\n            }\n            return\
    \ e;\n        }\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv0lpph8e.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n\
    \        for (long i = 4; i <= n; i++) {\n            e = a + b + c + d;\n   \
    \         a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuq5v0gtc.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp893csdg2.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i\
    \ <= n; i++) {\n            long temp = a + b + c + d;\n            a = b;\n \
    \           b = c;\n            c = d;\n            d = temp;\n        }\n   \
    \     return a + b + c + d;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph62kzc9w.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxapbrbqf.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long[] fibs = new long[4];\n\
    \        fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3]\
    \ = 0;\n        for (int i = 4; i <= n; i++) {\n            long next = fibs[0]\
    \ + fibs[1] + fibs[2] + fibs[3];\n            fibs[0] = fibs[1];\n           \
    \ fibs[1] = fibs[2];\n            fibs[2] = fibs[3];\n            fibs[3] = next;\n\
    \        }\n        return fibs[3];\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            e = a + b + c + d;\n       \
    \     a = b;\n            b = c;\n            c = d;\n            d = e;\n   \
    \     }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwfp5uwkj.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_xwn8g4j.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ this function.\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qyghdt5.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv1ot8t1b.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph58gwfjf.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n\
    \        for (long i = 4; i <= n; i++) {\n            e = a + b + c + d;\n   \
    \         a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgtjndd35.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i\
    \ <= n; i++) {\n            long tmp = a + b + c + d;\n            a = b;\n  \
    \          b = c;\n            c = d;\n            d = tmp;\n        }\n     \
    \   return a + b + c + d;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpby0o_bd2.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long next = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = next;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp49_vlz31.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdm_6qh89.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long[] fibs = new long[4];\n\
    \        fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3]\
    \ = 0;\n        for (int i = 4; i <= n; i++) {\n            long sum = 0;\n  \
    \          for (int j = 0; j < 4; j++) {\n                sum += fibs[j];\n  \
    \          }\n            for (int j = 0; j < 3; j++) {\n                fibs[j]\
    \ = fibs[j+1];\n            }\n            fibs[3] = sum;\n        }\n       \
    \ return fibs[3];\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7wp4swfv.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1llhk7fy.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgwhiv56x.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n <= 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n    \
    \    for (int i = 4; i <= n; i++) {\n            e = a + b + c + d;\n        \
    \    a = b;\n            b = c;\n            c = d;\n            d = e;\n    \
    \    }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i\
    \ = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n            a =\
    \ b;\n            b = c;\n            c = d;\n            d = temp;\n        }\n\
    \        return a + b + c + d;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qohjrab.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long e = a + b + c + d;\n            a = b;\n            b = c;\n       \
    \     c = d;\n            d = e;\n        }\n        return a + b + c + d;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa5w40wj1.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = temp;\n        }\n        return a + b + c +\
    \ d;\n\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpppibturi.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long temp = d;\n            d = a + b + c + d;\n            a = b;\n    \
    \        b = c;\n            c = temp;\n        }\n        return d;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (int i = 4; i <= n; i++) {\n        \
    \    long e = a + b + c + d;\n            a = b;\n            b = c;\n       \
    \     c = d;\n            d = e;\n        }\n        return a + b + c + d;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_dep3o1_.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        long[] fib4 = new long[4];\n        fib4[0] = 0;\n        fib4[1]\
    \ = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        if (n < 4) {\n   \
    \         return fib4[(int)n];\n        }\n        long[] fib4_n = new long[4];\n\
    \        fib4_n[0] = 0;\n        fib4_n[1] = 0;\n        fib4_n[2] = 2;\n    \
    \    fib4_n[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4_n[0]\
    \ = fib4_n[1] + fib4_n[2] + fib4_n[3];\n            fib4_n[1] = fib4_n[2];\n \
    \           fib4_n[2] = fib4_n[3];\n            fib4_n[3] = fib4_n[0];\n     \
    \   }\n        return fib4_n[0];\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9z5dm9zs.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppjaijly8.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9s0u_3jb.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            e = a + b + c + d;\n       \
    \     a = b;\n            b = c;\n            c = d;\n            d = e;\n   \
    \     }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n < 0) {\n    \
    \        throw new IllegalArgumentException(\"n must be non-negative\");\n   \
    \     }\n        if (n == 0) {\n            return 0;\n        }\n        if (n\
    \ == 1) {\n            return 0;\n        }\n        if (n == 2) {\n         \
    \   return 2;\n        }\n        if (n == 3) {\n            return 0;\n     \
    \   }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n       \
    \ long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long temp\
    \ = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = temp;\n        }\n        return a + b + c + d;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp5ggrh6e.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5u3ufdva.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        throw new UnsupportedOperationException(\"\
    Not implemented\");\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented\n\tat Problem.fib4(tmpg2n3706c.java:23)\n\tat Problem.main(tmpg2n3706c.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfo_fhtv7.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        long e = 0;\n        for (int i = 4; i <=\
    \ n; i++) {\n            e = a + b + c + d;\n            a = b;\n            b\
    \ = c;\n            c = d;\n            d = e;\n        }\n        return e;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Write your\
    \ code here.\n        return 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpngw0jac7.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpci9h2gga.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr406lx3h.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n\
    \        for (long i = 4; i <= n; i++) {\n            e = a + b + c + d;\n   \
    \         a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpokigq8zv.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        long a = 0;\n     \
    \   long b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n\
    \        for (long i = 4; i <= n; i++) {\n            e = a + b + c + d;\n   \
    \         a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return e;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // YOUR CODE HERE\n\
    \        return 0;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmooa4nkn.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfmg330o5.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me\n        return 0;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ka22m1b.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i\
    \ <= n; i++) {\n            long temp = a + b + c + d;\n            a = b;\n \
    \           b = c;\n            c = d;\n            d = temp;\n        }\n   \
    \     return a + b + c + d;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpinje6fx9.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 2;\n        }\n        if\
    \ (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i\
    \ <= n; i++) {\n            long temp = a + b + c + d;\n            a = b;\n \
    \           b = c;\n            c = d;\n            d = temp;\n        }\n   \
    \     return a + b + c + d;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoksv_ruv.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        // TODO: Implement\
    \ me!\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplm4zc_gt.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n\
    \    // 14\n    public static long fib4(long n) {\n        return 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpycj2fzu7.java:27)\n"
  exit_code: 1
  status: Exception
