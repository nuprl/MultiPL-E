name: HumanEval_24_largest_divisor
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largest = 1;\n        for\
    \ (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n           \
    \     largest = i;\n            }\n        }\n        return largest;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpji2i4map.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long divisor = n - 1;\n      \
    \  while (n % divisor != 0) {\n            divisor--;\n        }\n        return\
    \ divisor;\n\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4__oyi40.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n    \
    \            largestDivisor = i;\n                break;\n            }\n    \
    \    }\n        return largestDivisor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmhr750wh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = 1;\n       \
    \ for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n       \
    \         maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long divisor = n - 1;\n      \
    \  while (n % divisor != 0) {\n            divisor--;\n        }\n        return\
    \ divisor;\n\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return -1;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpktzdipsj.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long max = 0;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                max = i;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return -1;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppz3m0u39.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largest = 1;\n        for\
    \ (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long divisor = n - 1;\n      \
    \  while (n % divisor != 0) {\n            divisor--;\n        }\n        return\
    \ divisor;\n\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long max = 0;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                max = i;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return -1;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long i = n - 1;\n        while\
    \ (i > 0) {\n            if (n % i == 0) {\n                return i;\n      \
    \      }\n            i--;\n        }\n        return -1;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa6dqbpwo.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long max = 0;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                max = i;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long divisor = n - 1;\n      \
    \  while (n % divisor != 0) {\n            divisor--;\n        }\n        return\
    \ divisor;\n\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpstimagyy.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long max = 0;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                max = i;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long max = 1;\n        for (long\
    \ i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        // TODO: Implement this function\n\
    \        return 0;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxoevd8_o.java:18)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpenjql8d8.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long i = n - 1;\n        while\
    \ (i > 0) {\n            if (n % i == 0) {\n                return i;\n      \
    \      }\n            i--;\n        }\n        return 0;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        // >>> largest_divisor(15)\n \
    \       // 5\n        long largestDivisor = 1;\n        for (long i = 2; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n\
    \            }\n        }\n        return largestDivisor;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        // >>> largest_divisor(15)\n \
    \       // 5\n        // >>> largest_divisor(80)\n        // 40\n        // >>>\
    \ largest_divisor(13)\n        // 1\n        // >>> largest_divisor(65535)\n \
    \       // 3\n        // >>> largest_divisor(4294967295)\n        // 536870911\n\
    \        // >>> largest_divisor(18446744073709551615)\n        // 4611686018427387903\n\
    \        long largestDivisor = 1;\n        for (long i = 2; i < n; i++) {\n  \
    \          if (n % i == 0) {\n                largestDivisor = i;\n          \
    \  }\n        }\n        return largestDivisor;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxlx2w2ho.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0975n4mh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largest = 1;\n        for\
    \ (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2vx_klqd.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        // TODO: Implement this function\n\
    \        return 0;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwizmogm0.java:18)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long max = 1;\n        for (long\
    \ i = 2; i < n; i++) {\n            if (n % i == 0) {\n                max = i;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        // >>> largest_divisor(15)\n \
    \       // 5\n        // >>> largest_divisor(80)\n        // 40\n        // >>>\
    \ largest_divisor(13)\n        // 1\n        // >>> largest_divisor(65535)\n \
    \       // 32767\n        // >>> largest_divisor(2**16-1)\n        // 65535\n\
    \        // >>> largest_divisor(2**16+1)\n        // 1\n        // >>> largest_divisor(2**31-1)\n\
    \        // 2147483647\n        // >>> largest_divisor(2**31+1)\n        // 1\n\
    \        // >>> largest_divisor(2**63-1)\n        // 9223372036854775807\n   \
    \     // >>> largest_divisor(2**63+1)\n        // 1\n        // >>> largest_divisor(2**127-1)\n\
    \        // 170141183460469231731687303715884105727\n        // >>> largest_divisor(2**127+1)\n\
    \        // 1\n        // >>> largest_divisor(2**255-1)\n        // 57896044618658097711785492504343953926634992332820282019728792003956564819949\n\
    \        // >>> largest_divisor(2**255+1)\n        // 1\n        // >>> largest_divisor(2**511-1)\n\
    \        // 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096\n\
    \        // >>> largest_divisor(2**511+1)\n        // 1\n        // >>> largest_divisor(2**1023-1)\n\
    \        // 1797693134862315907729305190789024733617976978942306572734300811577326758055009631327084773224075360211201138798713933576587897688144166224928\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn9yhywar.java:47: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        // Your code here\n        return\
    \ 0;\n\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpizfa2noy.java:18)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largest = 0;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largest = 0;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return -1;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largest = 1;\n        for\
    \ (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpored37uc.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largest = 1;\n        for\
    \ (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpinm013i8.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long max = 1;\n        for (long\
    \ i = 2; i < n; i++) {\n            if (n % i == 0) {\n                max = i;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        // >>> largest_divisor(15)\n \
    \       // 5\n        // >>> largest_divisor(80)\n        // 40\n        // >>>\
    \ largest_divisor(13)\n        // 1\n        // >>> largest_divisor(65535)\n \
    \       // 32767\n        // >>> largest_divisor(2**100-1)\n        // 68719476735\n\
    \        // >>> largest_divisor(2**1000-1)\n        // 524287\n        // >>>\
    \ largest_divisor(2**10000-1)\n        // 8191\n        // >>> largest_divisor(2**100000-1)\n\
    \        // 127\n        // >>> largest_divisor(2**1000000-1)\n        // 3\n\
    \        // >>> largest_divisor(2**10000000-1)\n        // 1\n        // >>> largest_divisor(2**100000000-1)\n\
    \        // 1\n        // >>> largest_divisor(2**1000000000-1)\n        // 1\n\
    \        // >>> largest_divisor(2**10000000000-1)\n        // 1\n        // >>>\
    \ largest_divisor(2**100000000000-1)\n        // 1\n        // >>> largest_divisor(2**1000000000000-1)\n\
    \        // 1\n        // >>> largest_divisor(2**10000000000000-1)\n        //\
    \ 1\n        // >>> largest_divisor(2**100000000000000-1)\n        // 1\n    \
    \    // >>> largest_divisor(2**1000000000000000-1)\n        // 1\n        // >>>\
    \ largest_divisor(2**10000000000000000-1)\n        // 1\n        // >>> largest_divisor(2**100000000000000000-1)\n\
    \        // 1\n        // >>> largest_divisor(2**1000000000000000000-1)\n    \
    \    // 1\n        // >>> largest_divisor(2**10000000000000000000-1)\n       \
    \ // 1\n        // >>> largest_divisor(2**100000000000000000000-1)\n        //\
    \ 1\n        // >>> largest_divisor(2**1000000000000000000000-1)\n        // 1\n\
    \        // >>> largest_divis\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpna2kv9ig.java:62: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long max = n;\n        for (long\
    \ i = 2; i < n; i++) {\n            if (n % i == 0) {\n                max = i;\n\
    \            }\n        }\n        return max;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1lmc29zg.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largest = 1;\n        for\
    \ (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largest = 0;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7icag1f7.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long max = 1;\n        for (long\
    \ i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                max\
    \ = i;\n            }\n        }\n        return max;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long result = 0;\n        for\
    \ (long i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n            \
    \    result = i;\n                break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfxbs9q5c.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return -1;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long maxDivisor = n - 1;\n   \
    \     while (n % maxDivisor != 0) {\n            maxDivisor--;\n        }\n  \
    \      return maxDivisor;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 0;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjef3bn46.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp56d_9zp0.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long result = 0;\n        for\
    \ (long i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n            \
    \    result = i;\n                break;\n            }\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprz4vzcgv.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largest = 1;\n        for\
    \ (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        for (long i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return -1;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static long largestDivisor(long n) {\n        long largestDivisor = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
