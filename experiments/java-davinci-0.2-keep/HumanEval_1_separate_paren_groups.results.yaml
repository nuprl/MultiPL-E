name: HumanEval_1_separate_paren_groups
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprdp_t7ba.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6wddgpfx.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi1573u_t.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               paren_groups.add(paren_string.substring(start, end + 1));\n  \
    \              start = end + 1;\n            }\n        }\n        return paren_groups;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplkyi4f_o.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6dz9vii7.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa37tfsej.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptlqzsfxa.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_kl0l0g.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp122ecovi.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5l36d3ai.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int count = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                count++;\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                count--;\n            }\n            if (count ==\
    \ 0) {\n                result.add(paren_string.substring(start, i + 1));\n  \
    \              start = i + 1;\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprfs0qcop.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                start = i;\n            }\n            if (paren_string.charAt(i)\
    \ == ')') {\n                end = i;\n                result.add(paren_string.substring(start,\
    \ end + 1));\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppad_58ad.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl9ceedyu.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                open--;\n\
    \            }\n            if (open == 0) {\n                end = i;\n     \
    \           result.add(paren_string.substring(start, end + 1));\n            \
    \    start = end + 1;\n            }\n        }\n        return result;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8amznzo1.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ex_d7ql.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpad8ox_15.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm1lzyv_.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptigdj5un.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpilfrf0_v.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvgk_te0m.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (char c : paren_string.toCharArray())\
    \ {\n            if (c == ' ') {\n                continue;\n            }\n \
    \           if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                stack.pop();\n                if (stack.isEmpty())\
    \ {\n                    result.add(sb.toString());\n                    sb =\
    \ new StringBuilder();\n                }\n            }\n            sb.append(c);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3pf3iv2a.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn38u4d0a.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkckh_h6d.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7aofhbxv.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprnubpksp.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgv_u1ymj.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdoulre8z.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3m_m9f9.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr7hjopto.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprem3zx74.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8s9b6et1.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaz49vc86.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkhdivg5r.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_vd8nit3.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmfs4ypm1.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgwq6cbwe.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int open_paren_count = 0;\n        int start_index\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  char c = paren_string.charAt(i);\n            if (c == '(') {\n           \
    \     open_paren_count++;\n            } else if (c == ')') {\n              \
    \  open_paren_count--;\n            }\n            if (open_paren_count == 0)\
    \ {\n                paren_groups.add(paren_string.substring(start_index, i +\
    \ 1));\n                start_index = i + 1;\n            }\n        }\n     \
    \   return paren_groups;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv3_ivon_.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_bw8h5fz.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz6g_m24.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp26xrdtgd.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    paren_groups.add(paren_string.substring(start, end\
    \ + 1));\n                }\n            }\n        }\n        return paren_groups;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ykfcdr1.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbk6sshns.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int i = 0;\n        int j = 0;\n       \
    \ int count = 0;\n        while (i < paren_string.length()) {\n            if\
    \ (paren_string.charAt(i) == '(') {\n                count++;\n            } else\
    \ if (paren_string.charAt(i) == ')') {\n                count--;\n           \
    \ }\n            if (count == 0) {\n                result.add(paren_string.substring(j,\
    \ i + 1));\n                j = i + 1;\n            }\n            i++;\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7_1niqg2.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3trp8lw4.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ixalbfh.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3c_aehu6.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23xfj6g_.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\
    \        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            sb.append(paren_string.charAt(i));\n            if\
    \ (count == 0) {\n                result.add(sb.toString());\n               \
    \ sb = new StringBuilder();\n            }\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphoa_f2t6.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               paren_groups.add(paren_string.substring(start, end + 1));\n  \
    \              start = end + 1;\n            }\n        }\n        return paren_groups;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxxb4y6ey.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphweujy5v.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpip0mk1tq.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg9gtfv19.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (open\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ open++;\n            } else if (paren_string.charAt(i) == ')') {\n         \
    \       open--;\n                if (open == 0) {\n                    end = i;\n\
    \                    result.add(paren_string.substring(start, end + 1));\n   \
    \             }\n            }\n        }\n        return result;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoql3qwdg.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zxt1ok1.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwnc4dby9.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpenih8kc2.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7myq7vf4.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9sqh1kr6.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp207glbs_.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i + 1;\n\
    \                result.add(paren_string.substring(start, end));\n           \
    \     start = end;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpukxup2vm.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               groups.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return groups;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpakrdmcye.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpim8l398_.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprkuu0lhy.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxpcc6h99.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2iizkvuw.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0u7131fh.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy4oawjgd.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdpuar6f4.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpros_39rw.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw8k7_q0p.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppgchr6y3.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               groups.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return groups;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo0mwt_rz.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            paren_groups.add(paren_string.substring(start, end + 1));\n     \
    \           start = end + 1;\n            }\n        }\n        return paren_groups;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5s0d4lm8.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfyuy3mmk.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5wkzw3yp.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk74jiv_s.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o1_7spu.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl75mrq6b.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp77cdhirj.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjq3dxnxc.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv8hsdr75.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1k349i44.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpod7pteh1.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd9u_e4yy.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxphrnqxy.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpupxrk0pd.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open_paren_count = 0;\n        int start_index\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  if (paren_string.charAt(i) == '(') {\n                open_paren_count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                open_paren_count--;\n\
    \            }\n            if (open_paren_count == 0) {\n                result.add(paren_string.substring(start_index,\
    \ i + 1));\n                start_index = i + 1;\n            }\n        }\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ppisj_1.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf9efi92o.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptcni6zjl.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9n8mb5n.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp42qzokua.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxx5fth_4.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp90geix76.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp17qsy95_.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (open\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ open++;\n            } else if (paren_string.charAt(i) == ')') {\n         \
    \       open--;\n                if (open == 0) {\n                    end = i;\n\
    \                    result.add(paren_string.substring(start, end + 1));\n   \
    \             }\n            }\n        }\n        return result;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjlf2c5jp.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        return null;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.separateParenGroups(String)\"\
    \ is null\n\tat Problem.main(tmptu453wyh.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open_parens = 0;\n        int start_index\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  if (paren_string.charAt(i) == '(') {\n                open_parens++;\n    \
    \        } else if (paren_string.charAt(i) == ')') {\n                open_parens--;\n\
    \            }\n            if (open_parens == 0) {\n                result.add(paren_string.substring(start_index,\
    \ i + 1));\n                start_index = i + 1;\n            }\n        }\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8t3krqik.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt1tri34a.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxh8f9oo6.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    groups.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return groups;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfgowb6i7.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfhhay5pu.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo9fri764.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               paren_groups.add(paren_string.substring(start, end + 1));\n  \
    \              start = end + 1;\n            }\n        }\n        return paren_groups;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1lafjcbh.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9gr6_nqf.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ntxgwdc.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(')\
    \ {\n                open++;\n                sb.append('(');\n            } else\
    \ if (paren_string.charAt(i) == ')') {\n                close++;\n           \
    \     sb.append(')');\n            }\n            if (open == close) {\n     \
    \           result.add(sb.toString());\n                sb = new StringBuilder();\n\
    \                open = 0;\n                close = 0;\n            }\n      \
    \  }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvzt11u9g.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsctwqo6b.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9tkm1sb.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprp50ysmu.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpui_ojp0z.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv0g_xmlk.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjru90y6v.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyjhsug5c.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdc4wx80q.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphz_a3hv0.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open_count = 0;\n        int close_count\
    \ = 0;\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n\
    \            if (c == '(') {\n                open_count++;\n            } else\
    \ if (c == ')') {\n                close_count++;\n            }\n           \
    \ if (open_count == close_count) {\n                if (open_count != 0) {\n \
    \                   result.add(sb.toString());\n                    sb = new StringBuilder();\n\
    \                }\n                open_count = 0;\n                close_count\
    \ = 0;\n            } else {\n                sb.append(c);\n            }\n \
    \       }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmo4rz8j2.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppb_9b9xd.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptwl7mf61.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               paren_groups.add(paren_string.substring(start, end + 1));\n  \
    \              start = end + 1;\n            }\n        }\n        return paren_groups;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1r9nnwl.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_8talxcr.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaj73nihl.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhhc7og9.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdyvh3uzq.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdkenmxo2.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpukacu42w.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        // TODO: Implement this\
    \ function\n        return null;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.separateParenGroups(String)\"\
    \ is null\n\tat Problem.main(tmp6aasuya5.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> groups\
    \ = new ArrayList<String>();\n        int open = 0;\n        int start = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                open++;\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                open--;\n            }\n            if (open == 0)\
    \ {\n                groups.add(paren_string.substring(start, i + 1));\n     \
    \           start = i + 1;\n            }\n        }\n        return groups;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8090lg7e.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcw4m00ry.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjuypdjgv.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpblwuhuxc.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                open--;\n\
    \            }\n            if (open == 0) {\n                end = i;\n     \
    \           result.add(paren_string.substring(start, end + 1));\n            \
    \    start = end + 1;\n            }\n        }\n        return result;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb0r3d6q3.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpivhh3r6n.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n\
    \            if (c == ' ') {\n                continue;\n            }\n     \
    \       if (c == '(') {\n                stack.push(c);\n            } else if\
    \ (c == ')') {\n                stack.pop();\n                if (stack.empty())\
    \ {\n                    result.add(sb.toString());\n                    sb =\
    \ new StringBuilder();\n                }\n            }\n            sb.append(c);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt93ml_vm.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq9slag40.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu7f22o17.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmne9ms7a.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo05ntyi8.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i + 1;\n\
    \                result.add(paren_string.substring(start, end));\n           \
    \     start = end;\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpze7ei70j.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw6e1m7k9.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int open_paren_count = 0;\n        int start_index\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  char c = paren_string.charAt(i);\n            if (c == '(') {\n           \
    \     open_paren_count++;\n            } else if (c == ')') {\n              \
    \  open_paren_count--;\n            }\n            if (open_paren_count == 0)\
    \ {\n                paren_groups.add(paren_string.substring(start_index, i +\
    \ 1));\n                start_index = i + 1;\n            }\n        }\n     \
    \   return paren_groups;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4b9p1kge.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n\
    \            if (c == ' ') {\n                continue;\n            }\n     \
    \       if (c == '(') {\n                stack.push(c);\n            } else if\
    \ (c == ')') {\n                stack.pop();\n                if (stack.isEmpty())\
    \ {\n                    result.add(sb.toString());\n                    sb =\
    \ new StringBuilder();\n                }\n            }\n            sb.append(c);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp527cx_8h.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmposre5_n9.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5bfo1d74.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl28g53hb.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgzfetiqq.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph8k1v0gz.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp39wzrtc3.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int open_parens = 0;\n        int start_index\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  if (paren_string.charAt(i) == '(') {\n                open_parens++;\n    \
    \        } else if (paren_string.charAt(i) == ')') {\n                open_parens--;\n\
    \            }\n            if (open_parens == 0) {\n                paren_groups.add(paren_string.substring(start_index,\
    \ i + 1));\n                start_index = i + 1;\n            }\n        }\n \
    \       return paren_groups;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpndlcl1ar.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1wvblij5.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       while (end < paren_string.length()) {\n            if (paren_string.charAt(end)\
    \ == '(') {\n                start = end;\n                int count = 1;\n  \
    \              while (count > 0) {\n                    end++;\n             \
    \       if (paren_string.charAt(end) == '(') {\n                        count++;\n\
    \                    } else if (paren_string.charAt(end) == ')') {\n         \
    \               count--;\n                    }\n                }\n         \
    \       result.add(paren_string.substring(start, end + 1));\n            }\n \
    \           end++;\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt4_1617r.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkx_g8_i8.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp218z8teu.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcxd_oolm.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc6f5uer9.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps4emey2j.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu5x2fdnh.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxsfhldty.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn5jt77me.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n\
    \            if (c == ' ') {\n                continue;\n            }\n     \
    \       if (c == '(') {\n                stack.push(c);\n            } else if\
    \ (c == ')') {\n                stack.pop();\n                if (stack.isEmpty())\
    \ {\n                    result.add(sb.toString());\n                    sb =\
    \ new StringBuilder();\n                }\n            }\n            sb.append(c);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1m8wy36c.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72vryqvh.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkfwbzabc.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7x9y253q.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsyaj3irt.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> groups\
    \ = new ArrayList<String>();\n        int open_count = 0;\n        int start_index\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  if (paren_string.charAt(i) == '(') {\n                open_count++;\n     \
    \       } else if (paren_string.charAt(i) == ')') {\n                open_count--;\n\
    \            }\n            if (open_count == 0) {\n                groups.add(paren_string.substring(start_index,\
    \ i + 1));\n                start_index = i + 1;\n            }\n        }\n \
    \       return groups;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkex5bq5f.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7r1abcpq.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (open\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ open++;\n            } else if (paren_string.charAt(i) == ')') {\n         \
    \       open--;\n                if (open == 0) {\n                    end = i;\n\
    \                    paren_groups.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return paren_groups;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1u4rk0kr.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8jt_00di.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm49aci7d.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplndilv3g.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpchdzzubm.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpato02xj0.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jwrcsoc.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy_79y9f7.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    paren_groups.add(paren_string.substring(start, end\
    \ + 1));\n                }\n            }\n        }\n        return paren_groups;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7zv4awp0.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> groups\
    \ = new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\
    \        int open_parens = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(')\
    \ {\n                open_parens++;\n                sb.append(c);\n         \
    \   } else if (c == ')') {\n                open_parens--;\n                sb.append(c);\n\
    \            } else if (c == ' ') {\n                continue;\n            }\n\
    \            if (open_parens == 0) {\n                groups.add(sb.toString());\n\
    \                sb = new StringBuilder();\n            }\n        }\n       \
    \ return groups;\n\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsd51p4op.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5rv5pbfq.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3c5ss2k.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8zi5_y4m.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvtd0c1im.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpid442qwr.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkwk0ezzs.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8vvlur80.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i + 1;\n\
    \                result.add(paren_string.substring(start, end));\n           \
    \     start = end;\n                open = 0;\n                close = 0;\n  \
    \          }\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"\
    ((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm239bl_i.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr5vh95ut.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwnlb24ky.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp31hjmmqy.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                open--;\n\
    \            }\n            if (open == 0) {\n                end = i;\n     \
    \           result.add(paren_string.substring(start, end + 1));\n            \
    \    start = end + 1;\n            }\n        }\n        return result;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplpr5rjyq.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                start = i;\n            }\n            if (paren_string.charAt(i)\
    \ == ')') {\n                end = i;\n                result.add(paren_string.substring(start,\
    \ end + 1));\n            }\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ck6p5x6.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int open_parens = 0;\n        int start_index\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  if (paren_string.charAt(i) == '(') {\n                open_parens++;\n    \
    \        } else if (paren_string.charAt(i) == ')') {\n                open_parens--;\n\
    \            }\n            if (open_parens == 0) {\n                paren_groups.add(paren_string.substring(start_index,\
    \ i + 1));\n                start_index = i + 1;\n            }\n        }\n \
    \       return paren_groups;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"(()())\", (String)\"((()))\", (String)\"\
    ()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"()\"\
    , (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpquvcslng.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwqhie8fv.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4a7sxrld.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3og39tfm.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2th4gzwh.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                if (count\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ count++;\n            } else if (paren_string.charAt(i) == ')') {\n        \
    \        count--;\n                if (count == 0) {\n                    end\
    \ = i;\n                    result.add(paren_string.substring(start, end + 1));\n\
    \                }\n            }\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuasumb72.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int open = 0;\n        int close = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                end = i;\n \
    \               result.add(paren_string.substring(start, end + 1));\n        \
    \        start = end + 1;\n                open = 0;\n                close =\
    \ 0;\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()())\"\
    , (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3qv7o4rr.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int open = 0;\n        int close = 0;\n\
    \        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                close++;\n\
    \            }\n            if (open == close) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwic7pd48.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> paren_groups\
    \ = new ArrayList<String>();\n        int i = 0;\n        while (i < paren_string.length())\
    \ {\n            int j = i;\n            int count = 0;\n            while (j\
    \ < paren_string.length()) {\n                if (paren_string.charAt(j) == '(')\
    \ {\n                    count++;\n                } else if (paren_string.charAt(j)\
    \ == ')') {\n                    count--;\n                }\n               \
    \ if (count == 0) {\n                    break;\n                }\n         \
    \       j++;\n            }\n            paren_groups.add(paren_string.substring(i,\
    \ j + 1));\n            i = j + 1;\n        }\n        return paren_groups;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg3b2d9bn.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                result.add(paren_string.substring(start,\
    \ i + 1));\n                start = i + 1;\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9r50deg1.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String>\
    \ separateParenGroups(String paren_string) {\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int start = 0;\n        int end = 0;\n \
    \       int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                count--;\n\
    \            }\n            if (count == 0) {\n                end = i;\n    \
    \            result.add(paren_string.substring(start, end + 1));\n           \
    \     start = end + 1;\n            }\n        }\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    (()())\", (String)\"((()))\", (String)\"()\", (String)\"((())()())\")))));\n \
    \   assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"((()))\", (String)\"(((())))\")))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((new ArrayList<String>(Arrays.asList((String)\"(()(())((())))\"\
    )))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    ()\", (String)\"(())\", (String)\"(()())\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprnaee35y.java:36)\n"
  exit_code: 1
  status: Exception
