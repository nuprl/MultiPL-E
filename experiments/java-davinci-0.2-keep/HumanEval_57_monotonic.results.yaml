name: HumanEval_57_monotonic
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n      \
    \          decreasing = false;\n            }\n            if (l.get(i) < l.get(i\
    \ - 1)) {\n                increasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   return l.stream().reduce(Long::compareTo).get() <= 0;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb6ukz3rv.java:17: error: no suitable method found for reduce(Long::compareTo)\n\
    \        return l.stream().reduce(Long::compareTo).get() <= 0;\n             \
    \            ^\n    method Stream.reduce(BinaryOperator<Long>) is not applicable\n\
    \      (argument mismatch; bad return type in method reference\n          int\
    \ cannot be converted to Long)\n    method Stream.<U>reduce(U,BiFunction<U,? super\
    \ Long,U>,BinaryOperator<U>) is not applicable\n      (cannot infer type-variable(s)\
    \ U\n        (actual and formal argument lists differ in length))\n  where U,T\
    \ are type-variables:\n    U extends Object declared in method <U>reduce(U,BiFunction<U,?\
    \ super T,U>,BinaryOperator<U>)\n    T extends Object declared in interface Stream\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            } else if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i - 1) > l.get(i)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i -\
    \ 1) < l.get(i)) {\n                decreasing = false;\n            }\n     \
    \   }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   int n = l.size();\n        if (n == 1) {\n            return true;\n     \
    \   }\n        long prev = l.get(0);\n        boolean increasing = true;\n   \
    \     boolean decreasing = true;\n        for (int i = 1; i < n; i++) {\n    \
    \        long curr = l.get(i);\n            if (curr > prev) {\n             \
    \   decreasing = false;\n            }\n            if (curr < prev) {\n     \
    \           increasing = false;\n            }\n            prev = curr;\n   \
    \     }\n        return increasing || decreasing;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   return l.stream().allMatch(x -> x >= l.get(0)) || l.stream().allMatch(x ->\
    \ x <= l.get(0));\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00kzw8er.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return false;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp61q8t814.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n\
    \                decreasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i - 1)) {\n                increasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            } else if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            } else if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            } else if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1))\
    \ {\n                decreasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        long diff\
    \ = l.get(1) - l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       long newDiff = l.get(i) - l.get(i - 1);\n            if (newDiff * diff\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ true;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        if (l.size() == 1) {\n            return true;\n   \
    \     }\n        boolean increasing = true;\n        boolean decreasing = true;\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i\
    \ - 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1))\
    \ {\n                decreasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        long diff\
    \ = l.get(1) - l.get(0);\n        for (int i = 2; i < l.size(); i++) {\n     \
    \       long newDiff = l.get(i) - l.get(i - 1);\n            if (diff * newDiff\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ true;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            } else if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1))\
    \ {\n                decreasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        boolean decreasing = l.get(0) > l.get(1);\n\
    \        for (int i = 1; i < l.size() - 1; i++) {\n            if (increasing\
    \ && l.get(i) > l.get(i + 1)) {\n                return false;\n            }\n\
    \            if (decreasing && l.get(i) < l.get(i + 1)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        if (l.size()\
    \ == 1) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing) {\n                if (l.get(i) > l.get(i + 1)) {\n           \
    \         return false;\n                }\n            } else {\n           \
    \     if (l.get(i) < l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            }\n        }\n        return true;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1))\
    \ {\n                decreasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            } else if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   return l.stream().sorted().equals(l) || l.stream().sorted(Collections.reverseOrder()).equals(l);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgqlltopw.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   return l.stream().allMatch(x -> x >= l.get(0)) || l.stream().allMatch(x ->\
    \ x <= l.get(0));\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6nju122y.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1))\
    \ {\n                decreasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1))\
    \ {\n                decreasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   // TODO: Implement me\n        return false;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp847watxx.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1))\
    \ {\n                decreasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   return l.stream().reduce(0L, (a, b) -> a == 0 ? b : a * b) >= 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3hyvl2bw.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        long last\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
    \ < last) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) > last) {\n                decreasing = false;\n            }\n  \
    \          last = l.get(i);\n        }\n        return increasing || decreasing;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   return l.stream().allMatch(x -> x >= l.get(0)) || l.stream().allMatch(x ->\
    \ x <= l.get(0));\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp62kgkytx.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        long last\
    \ = l.get(0);\n        boolean increasing = true;\n        for (int i = 1; i <\
    \ l.size(); i++) {\n            long current = l.get(i);\n            if (current\
    \ > last) {\n                if (!increasing) {\n                    return false;\n\
    \                }\n            } else if (current < last) {\n               \
    \ if (increasing) {\n                    increasing = false;\n               \
    \ }\n            }\n            last = current;\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   return l.stream().reduce(new Pair<Long, Long>(0L, 0L), (p, x) -> {\n     \
    \       if (p.getValue0() == 0) {\n                return new Pair<Long, Long>(x,\
    \ 0L);\n            } else {\n                if (p.getValue1() == 0) {\n    \
    \                if (x > p.getValue0()) {\n                        return new\
    \ Pair<Long, Long>(x, 1L);\n                    } else if (x < p.getValue0())\
    \ {\n                        return new Pair<Long, Long>(x, -1L);\n          \
    \          } else {\n                        return new Pair<Long, Long>(x, 0L);\n\
    \                    }\n                } else {\n                    if (x >\
    \ p.getValue0() && p.getValue1() == 1) {\n                        return new Pair<Long,\
    \ Long>(x, 1L);\n                    } else if (x < p.getValue0() && p.getValue1()\
    \ == -1) {\n                        return new Pair<Long, Long>(x, -1L);\n   \
    \                 } else {\n                        return new Pair<Long, Long>(x,\
    \ 0L);\n                    }\n                }\n            }\n        }).getValue1()\
    \ != 0;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp60_fqgjb.java:17: error: no suitable method found for reduce(Pair<Long,Long>,(p,x)->{\
    \ i[...]} } })\n        return l.stream().reduce(new Pair<Long, Long>(0L, 0L),\
    \ (p, x) -> {\n                         ^\n    method Stream.reduce(Long,BinaryOperator<Long>)\
    \ is not applicable\n      (argument mismatch; Pair<Long,Long> cannot be converted\
    \ to Long)\n    method Stream.<U>reduce(U,BiFunction<U,? super Long,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1))\
    \ {\n                decreasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
    \ < prev) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) > prev) {\n                decreasing = false;\n            }\n  \
    \          prev = l.get(i);\n        }\n        return increasing || decreasing;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   return l.stream().reduce(new Pair<Long, Long>(l.get(0), 0L), (x, y) -> {\n\
    \            if (x.getValue1() == 0) {\n                return new Pair<Long,\
    \ Long>(y, y - x.getValue0());\n            } else {\n                return new\
    \ Pair<Long, Long>(y, y - x.getValue0());\n            }\n        }).getValue1()\
    \ >= 0;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzb0hta1l.java:17: error: no suitable method found for reduce(Pair<Long,Long>,(x,y)->{\
    \ i[...]; } })\n        return l.stream().reduce(new Pair<Long, Long>(l.get(0),\
    \ 0L), (x, y) -> {\n                         ^\n    method Stream.reduce(Long,BinaryOperator<Long>)\
    \ is not applicable\n      (argument mismatch; Pair<Long,Long> cannot be converted\
    \ to Long)\n    method Stream.<U>reduce(U,BiFunction<U,? super Long,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(l.size() - 1);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (increasing && l.get(i - 1) > l.get(i)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i -\
    \ 1) < l.get(i)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   return l.stream().allMatch(x -> x >= l.get(0)) || l.stream().allMatch(x ->\
    \ x <= l.get(0));\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqfabxa6j.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        long diff\
    \ = l.get(1) - l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       long newDiff = l.get(i) - l.get(i - 1);\n            if (newDiff * diff\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ true;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1))\
    \ {\n                decreasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   // Your code here.\n        return false;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp77xg05zw.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   return false;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_6pdy306.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1))\
    \ {\n                decreasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = false;\n        boolean decreasing = false;\n        for (int i\
    \ = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n    \
    \            increasing = true;\n            }\n            if (l.get(i) < l.get(i\
    \ - 1)) {\n                decreasing = true;\n            }\n        }\n    \
    \    return !(increasing && decreasing);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   // Write your code here.\n        return false;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzxkcg1ax.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   return l.stream().sorted().equals(l) || l.stream().sorted(Collections.reverseOrder()).equals(l);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo4ilsv5r.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   return l.stream().reduce(0L, (a, b) -> a == 0 ? b : b - a) >= 0;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhxyqqjx.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            } else if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   return l.stream().allMatch(x -> x >= l.get(0)) || l.stream().allMatch(x ->\
    \ x <= l.get(0));\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplub13t3u.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   long prev = l.get(0);\n        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n         \
    \   long curr = l.get(i);\n            if (curr > prev) {\n                decreasing\
    \ = false;\n            } else if (curr < prev) {\n                increasing\
    \ = false;\n            }\n            prev = curr;\n        }\n        return\
    \ increasing || decreasing;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   return l.stream().sorted().collect(Collectors.toList()).equals(l) || l.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList()).equals(l);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        int direction = 0;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long curr = l.get(i);\n            if (direction == 0) {\n\
    \                if (curr > prev) {\n                    direction = 1;\n    \
    \            } else if (curr < prev) {\n                    direction = -1;\n\
    \                }\n            } else if (direction == 1) {\n               \
    \ if (curr < prev) {\n                    return false;\n                }\n \
    \           } else if (direction == -1) {\n                if (curr > prev) {\n\
    \                    return false;\n                }\n            }\n       \
    \     prev = curr;\n        }\n        return true;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   return l.stream().reduce(new Pair<Long, Long>(l.get(0), l.get(0))\n      \
    \                          , (p, x) -> {\n                                   \
    \ if (p.getValue0() < p.getValue1() && x < p.getValue1()) {\n                \
    \                        return new Pair<Long, Long>(p.getValue0(), x);\n    \
    \                                } else if (p.getValue0() > p.getValue1() && x\
    \ > p.getValue1()) {\n                                        return new Pair<Long,\
    \ Long>(p.getValue0(), x);\n                                    } else {\n   \
    \                                     return new Pair<Long, Long>(p.getValue0(),\
    \ p.getValue1());\n                                    }\n                   \
    \             }).getValue0() == l.get(0);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6hl_r6db.java:17: error: no suitable method found for reduce(Pair<Long,Long>,(p,x)->{\
    \ i[...]; } })\n        return l.stream().reduce(new Pair<Long, Long>(l.get(0),\
    \ l.get(0))\n                         ^\n    method Stream.reduce(Long,BinaryOperator<Long>)\
    \ is not applicable\n      (argument mismatch; Pair<Long,Long> cannot be converted\
    \ to Long)\n    method Stream.<U>reduce(U,BiFunction<U,? super Long,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() < 2) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        int sign\
    \ = 0;\n        for (int i = 1; i < l.size(); i++) {\n            int s = Long.signum(l.get(i)\
    \ - l.get(i - 1));\n            if (s == 0) {\n                continue;\n   \
    \         }\n            if (sign == 0) {\n                sign = s;\n       \
    \     } else if (sign != s) {\n                return false;\n            }\n\
    \        }\n        return true;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Long> l) {\n     \
    \   boolean inc = true;\n        boolean dec = true;\n        for (int i = 1;\
    \ i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n         \
    \       inc = false;\n            }\n            if (l.get(i) > l.get(i - 1))\
    \ {\n                dec = false;\n            }\n        }\n        return inc\
    \ || dec;\n\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
