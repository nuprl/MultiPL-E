{
  "name": "HumanEval_43_pairs_sum_to_zero",
  "language": "swift",
  "prompt": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    var i: Int\n    var j: Int\n    var sum: Int\n    var count: Int\n    var result: Bool\n    var found: Bool\n    var _ = i\n    var _ = j\n    var _ = sum\n    var _ = count\n    var _ = result\n    var _ = found\n    for i = 0 to len(l) - 1 {\n        for j = i + 1 to len(l) {\n            sum = l[i] + l[j]\n            count = 0\n            found = false\n            for k = 0 to len(l) - 1 {\n                if l[k] == sum {\n                    count = count + 1\n                    found = true\n                }\n            }\n            if count == 2 {\n                result = true\n                break\n            }\n        }\n        if result == true {\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpt8zl857c.swift:28:11: error: expected 'in' after for-each pattern\n    for i = 0 to len(l) - 1 {\n          ^\n/tmp/tmpt8zl857c.swift:28:11: error: expected Sequence expression for for-each loop\n    for i = 0 to len(l) - 1 {\n          ^\n/tmp/tmpt8zl857c.swift:29:15: error: expected 'in' after for-each pattern\n        for j = i + 1 to len(l) {\n              ^\n/tmp/tmpt8zl857c.swift:29:15: error: expected Sequence expression for for-each loop\n        for j = i + 1 to len(l) {\n              ^\n/tmp/tmpt8zl857c.swift:33:19: error: expected 'in' after for-each pattern\n            for k = 0 to len(l) - 1 {\n                  ^\n/tmp/tmpt8zl857c.swift:33:19: error: expected Sequence expression for for-each loop\n            for k = 0 to len(l) - 1 {\n                  ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = l[i]\n        for j = i + 1; j < len(l); j++ {\n            if sum == l[j] {\n                return false\n            }\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpn8boioqb.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn8boioqb.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn8boioqb.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return l[0] != l[1]\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l)-1] == 0 {\n        return false\n    }\n    for i := 1; i < len(l)-1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpgshen11g.swift:31:12: error: expected type\n    for i := 1; i < len(l)-1; i++ {\n           ^\n            <#type#>\n/tmp/tmpgshen11g.swift:31:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l)-1; i++ {\n           ^\n/tmp/tmpgshen11g.swift:31:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l)-1; i++ {\n           ^\n/tmp/tmpgshen11g.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpgshen11g.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpgshen11g.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpgshen11g.swift:28:10: error: cannot find 'len' in scope\n    if l[len(l)-1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i = 0; i < len(l); i++ {\n        sum += l[i]\n        if sum == 0 {\n            j = i + 1\n            break\n        }\n    }\n    if j == 0 {\n        return false\n    }\n    for j = i + 1; j < len(l); j++ {\n        if l[j] != 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpk9pf9cd4.swift:22:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk9pf9cd4.swift:32:5: error: C-style for statement has been removed in Swift 3\n    for j = i + 1; j < len(l); j++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk9pf9cd4.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    if l[0] == l[len(l) - 1] {\n        return false\n    }\n    if l[0] == -l[len(l) - 1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == l[i - 1] + l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpozd2l7g3.swift:34:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpozd2l7g3.swift:34:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpozd2l7g3.swift:34:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpozd2l7g3.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpozd2l7g3.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpozd2l7g3.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n/tmp/tmpozd2l7g3.swift:28:18: error: cannot find 'len' in scope\n    if l[0] == l[len(l) - 1] {\n                 ^~~\n/tmp/tmpozd2l7g3.swift:31:19: error: cannot find 'len' in scope\n    if l[0] == -l[len(l) - 1] {\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + l[i + 1] == 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpjxwy2h4o.swift:29:12: error: expected type\n    for i := 0; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpjxwy2h4o.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpjxwy2h4o.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpjxwy2h4o.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpjxwy2h4o.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpjxwy2h4o.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum += l[i]\n        if sum == 0 {\n            j = i + 1\n            break\n        }\n    }\n    \n    if j == 0 {\n        return false\n    }\n    \n    for j = i + 1; j < len(l); j++ {\n        if l[j] != 0 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmprjfgvj1n.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprjfgvj1n.swift:36:5: error: C-style for statement has been removed in Swift 3\n    for j = i + 1; j < len(l); j++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprjfgvj1n.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    var count: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                count++\n            }\n        }\n    }\n    \n    return count == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpyw59jn20.swift:25:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyw59jn20.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyw59jn20.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    var i = 0\n    var j = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    for i = 0; i < len(l); i++ {\n        if sum == 0 {\n            j = i + 1\n            for j < len(l) {\n                if l[i] == l[j] {\n                    return false\n                }\n                j += 1\n            }\n            return true\n        }\n        sum -= l[i]\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmp_uhnh8pz.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_uhnh8pz.swift:28:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_uhnh8pz.swift:31:19: error: expected 'in' after for-each pattern\n            for j < len(l) {\n                  ^\n/tmp/tmp_uhnh8pz.swift:31:19: error: unary operator cannot be separated from its operand\n            for j < len(l) {\n                  ^~\n                   \n/tmp/tmp_uhnh8pz.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp_uhnh8pz.swift:31:19: error: '<' is not a prefix unary operator\n            for j < len(l) {\n                  ^\n/tmp/tmp_uhnh8pz.swift:31:21: error: cannot find 'len' in scope\n            for j < len(l) {\n                    ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return true\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmppdyv60cp.swift:31:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmppdyv60cp.swift:31:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmppdyv60cp.swift:31:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmppdyv60cp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmppdyv60cp.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmppdyv60cp.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmppdyv60cp.swift:28:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        if l[i] == 0 {\n            j = i\n            sum = 0\n            \n            for j < len(l) {\n                if l[j] != 0 {\n                    sum += l[j]\n                    break\n                }\n            }\n            \n            if sum == 0 {\n                return true\n            }\n        }\n        \n        i += 1\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmp3mn3ynff.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmp3mn3ynff.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmp3mn3ynff.swift:29:19: error: expected 'in' after for-each pattern\n            for j < len(l) {\n                  ^\n/tmp/tmp3mn3ynff.swift:29:19: error: unary operator cannot be separated from its operand\n            for j < len(l) {\n                  ^~\n                   \n/tmp/tmp3mn3ynff.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp3mn3ynff.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmp3mn3ynff.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmp3mn3ynff.swift:29:19: error: '<' is not a prefix unary operator\n            for j < len(l) {\n                  ^\n/tmp/tmp3mn3ynff.swift:29:21: error: cannot find 'len' in scope\n            for j < len(l) {\n                    ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return l[0] != l[1]\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[1] == 0 {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] > 0 {\n        return false\n    }\n    if l[1] > 0 {\n        return false\n    }\n    if l[0] < 0 {\n        return false\n    }\n    if l[1] < 0 {\n        return false\n    }\n    if l[0] == 1 {\n        return false\n    }\n    if l[1] == 1 {\n        return false\n    }\n    if l[0] == -1 {\n        return false\n    }\n    if l[1] == -1 {\n        return false\n    }\n    if l[0] == -l[1] {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] == -l[1] {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] == -l[1] {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] == -l[1] {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] == -l[1] {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] == -l[1] {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] == -l[1] {\n        \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmp1dhdau4l.swift:119:61: error: expected '}' at end of brace statement\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)\n                                                            ^\n/tmp/tmp1dhdau4l.swift:15:42: note: to match this opening '{'\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n                                         ^\n/tmp/tmp1dhdau4l.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp1dhdau4l.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp1dhdau4l.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp1dhdau4l.swift:99:6: error: operator functions can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < len(l) {\n        if l[i] == 0 {\n            sum = 0\n            j = i + 1\n            for j < len(l) {\n                if l[j] != 0 {\n                    sum += l[j]\n                    break\n                }\n                j += 1\n            }\n            if sum == 0 {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpb13o8mgj.swift:22:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpb13o8mgj.swift:22:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpb13o8mgj.swift:26:19: error: expected 'in' after for-each pattern\n            for j < len(l) {\n                  ^\n/tmp/tmpb13o8mgj.swift:26:19: error: unary operator cannot be separated from its operand\n            for j < len(l) {\n                  ^~\n                   \n/tmp/tmpb13o8mgj.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpb13o8mgj.swift:22:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpb13o8mgj.swift:22:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpb13o8mgj.swift:26:19: error: '<' is not a prefix unary operator\n            for j < len(l) {\n                  ^\n/tmp/tmpb13o8mgj.swift:26:21: error: cannot find 'len' in scope\n            for j < len(l) {\n                    ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    \n    for i := 1; i < len(l); i++ {\n        if l[i] == 0 {\n            return false\n        }\n    }\n    \n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n        if l[i] + l[i + 1] == 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmp7eizgvr9.swift:29:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp7eizgvr9.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp7eizgvr9.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp7eizgvr9.swift:35:12: error: expected type\n    for i := 0; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp7eizgvr9.swift:35:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp7eizgvr9.swift:35:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp7eizgvr9.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp7eizgvr9.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp7eizgvr9.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var k = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = l[i]\n        for j = i + 1; j < len(l); j++ {\n            if sum == 0 {\n                return true\n            }\n            if l[j] == sum {\n                k++\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmp4y18hddb.swift:25:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4y18hddb.swift:27:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4y18hddb.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n        if l[i] == l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmp8y_yy9h5.swift:28:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp8y_yy9h5.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp8y_yy9h5.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp8y_yy9h5.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp8y_yy9h5.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp8y_yy9h5.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    var count = 0\n    \n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n        if sum == 0 {\n            count += 1\n        }\n    }\n    \n    return count == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpw0xmv7lu.swift:23:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpw0xmv7lu.swift:23:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpw0xmv7lu.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpw0xmv7lu.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = l[i]\n        for j = i + 1; j < len(l); j++ {\n            if sum == 0 {\n                return true\n            }\n            sum += l[j]\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpq9eexgc9.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq9eexgc9.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq9eexgc9.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i, j int\n    var sum int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpai6njza3.swift:20:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var i, j int\n             ^\n/tmp/tmpai6njza3.swift:20:14: note: join the identifiers together\n    var i, j int\n           ~~^~~\n           jint\n/tmp/tmpai6njza3.swift:20:14: note: join the identifiers together with camel-case\n    var i, j int\n           ~~^~~\n           jInt\n/tmp/tmpai6njza3.swift:21:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum int\n            ^\n/tmp/tmpai6njza3.swift:21:13: note: join the identifiers together\n    var sum int\n        ~~~~^~~\n        sumint\n/tmp/tmpai6njza3.swift:21:13: note: join the identifiers together with camel-case\n    var sum int\n        ~~~~^~~\n        sumInt\n/tmp/tmpai6njza3.swift:23:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpai6njza3.swift:24:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpai6njza3.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpai6njza3.swift:20:9: error: type annotation missing in pattern\n    var i, j int\n        ^\n/tmp/tmpai6njza3.swift:20:12: error: type annotation missing in pattern\n    var i, j int\n           ^\n/tmp/tmpai6njza3.swift:21:9: error: type annotation missing in pattern\n    var sum int\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // Create a map of the values in l\n    m := make(map[Int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n    \n    // Create a map of the values in l\n    m2 := make(map[Int]bool)\n    for _, v := range l {\n        m2[v] = true\n    }\n    \n    // Check if there are two distinct elements in l that sum to zero\n    for k, v := range m {\n        if v && m2[-k] {\n            return true\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzlir6hop.swift:21:6: error: consecutive statements on a line must be separated by ';'\n    m := make(map[Int]bool)\n     ^\n     ;\n/tmp/tmpzlir6hop.swift:21:7: error: expected expression\n    m := make(map[Int]bool)\n      ^\n/tmp/tmpzlir6hop.swift:22:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpzlir6hop.swift:22:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpzlir6hop.swift:28:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpzlir6hop.swift:28:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpzlir6hop.swift:33:10: error: expected 'in' after for-each pattern\n    for k, v := range m {\n         ^\n/tmp/tmpzlir6hop.swift:33:10: error: expected Sequence expression for for-each loop\n    for k, v := range m {\n         ^\n/tmp/tmpzlir6hop.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpzlir6hop.swift:21:5: error: cannot find 'm' in scope\n    m := make(map[Int]bool)\n    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = l[i]\n        for j = i + 1; j < len(l); j++ {\n            if sum == 0 {\n                return true\n            }\n            sum += l[j]\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpq9eexgc9.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq9eexgc9.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq9eexgc9.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l)-1] == 0 {\n        return false\n    }\n    for i := 0; i < len(l)-1; i++ {\n        if l[i] + l[i+1] == 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmp255q6mxd.swift:28:12: error: expected type\n    for i := 0; i < len(l)-1; i++ {\n           ^\n            <#type#>\n/tmp/tmp255q6mxd.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l)-1; i++ {\n           ^\n/tmp/tmp255q6mxd.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l)-1; i++ {\n           ^\n/tmp/tmp255q6mxd.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp255q6mxd.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp255q6mxd.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l)-1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return l[0] != l[1]\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[1] == 0 {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] > 0 {\n        return false\n    }\n    if l[1] > 0 {\n        return false\n    }\n    if l[0] < 0 {\n        return false\n    }\n    if l[1] < 0 {\n        return false\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[1] > l[0] {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp5mienw0j.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp5mienw0j.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp5mienw0j.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // Create a map of the elements in the array\n    m := make(map[Int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n    \n    // Create a list of the elements in the array\n    l := make([]Int, len(m))\n    i := 0\n    for k := range m {\n        l[i] = k\n        i += 1\n    }\n    \n    // Sort the list\n    sort.Ints(l)\n    \n    // Iterate over the list\n    for i := 0; i < len(l)-1; i += 2 {\n        if l[i] + l[i+1] == 0 {\n            return true\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp474vsytr.swift:21:6: error: consecutive statements on a line must be separated by ';'\n    m := make(map[Int]bool)\n     ^\n     ;\n/tmp/tmp474vsytr.swift:21:7: error: expected expression\n    m := make(map[Int]bool)\n      ^\n/tmp/tmp474vsytr.swift:22:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp474vsytr.swift:22:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp474vsytr.swift:29:12: error: expected type\n    for k := range m {\n           ^\n            <#type#>\n/tmp/tmp474vsytr.swift:29:12: error: expected 'in' after for-each pattern\n    for k := range m {\n           ^\n/tmp/tmp474vsytr.swift:29:12: error: expected Sequence expression for for-each loop\n    for k := range m {\n           ^\n/tmp/tmp474vsytr.swift:38:12: error: expected type\n    for i := 0; i < len(l)-1; i += 2 {\n           ^\n            <#type#>\n/tmp/tmp474vsytr.swift:38:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l)-1; i += 2 {\n           ^\n/tmp/tmp474vsytr.swift:38:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l)-1; i += 2 {\n           ^\n/tmp/tmp474vsytr.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp474vsytr.swift:21:5: error: cannot find 'm' in scope\n    m := make(map[Int]bool)\n    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    var count = 0\n    \n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n        count += 1\n    }\n    \n    if count == 2 {\n        return true\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpjfk486ij.swift:23:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpjfk486ij.swift:23:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpjfk486ij.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpjfk486ij.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var count = 0\n    var sum = 0\n    \n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n        if sum == 0 {\n            count++\n        }\n    }\n    \n    return count >= 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpws4c0m2d.swift:23:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpws4c0m2d.swift:23:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpws4c0m2d.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpws4c0m2d.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = 0\n        for j < len(l) {\n            if i != j {\n                sum += l[i] + l[j]\n            }\n            j += 1\n        }\n        if sum == 0 {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpsdw0yf7q.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpsdw0yf7q.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpsdw0yf7q.swift:26:15: error: expected 'in' after for-each pattern\n        for j < len(l) {\n              ^\n/tmp/tmpsdw0yf7q.swift:26:15: error: unary operator cannot be separated from its operand\n        for j < len(l) {\n              ^~\n               \n/tmp/tmpsdw0yf7q.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpsdw0yf7q.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpsdw0yf7q.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpsdw0yf7q.swift:26:15: error: '<' is not a prefix unary operator\n        for j < len(l) {\n              ^\n/tmp/tmpsdw0yf7q.swift:26:17: error: cannot find 'len' in scope\n        for j < len(l) {\n                ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i, j int\n    var sum int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpai6njza3.swift:20:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var i, j int\n             ^\n/tmp/tmpai6njza3.swift:20:14: note: join the identifiers together\n    var i, j int\n           ~~^~~\n           jint\n/tmp/tmpai6njza3.swift:20:14: note: join the identifiers together with camel-case\n    var i, j int\n           ~~^~~\n           jInt\n/tmp/tmpai6njza3.swift:21:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum int\n            ^\n/tmp/tmpai6njza3.swift:21:13: note: join the identifiers together\n    var sum int\n        ~~~~^~~\n        sumint\n/tmp/tmpai6njza3.swift:21:13: note: join the identifiers together with camel-case\n    var sum int\n        ~~~~^~~\n        sumInt\n/tmp/tmpai6njza3.swift:23:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpai6njza3.swift:24:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpai6njza3.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpai6njza3.swift:20:9: error: type annotation missing in pattern\n    var i, j int\n        ^\n/tmp/tmpai6njza3.swift:20:12: error: type annotation missing in pattern\n    var i, j int\n           ^\n/tmp/tmpai6njza3.swift:21:9: error: type annotation missing in pattern\n    var sum int\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    var count = 0\n    \n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n        if sum == 0 {\n            count += 1\n        }\n    }\n    \n    return count == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpw0xmv7lu.swift:23:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpw0xmv7lu.swift:23:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpw0xmv7lu.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpw0xmv7lu.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return l[0] != l[1]\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n        if l[i] == l[i - 1] + l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmppnkg247g.swift:31:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmppnkg247g.swift:31:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmppnkg247g.swift:31:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmppnkg247g.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmppnkg247g.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmppnkg247g.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmppnkg247g.swift:28:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // we need to use a map to store the sums\n    // since we are looking for two distinct elements\n    // that sum to zero\n    m := make(map[Int]bool)\n    \n    // we need to iterate over the array\n    // and check if the sum is already in the map\n    // if it is, we return false\n    for _, v := range l {\n        if _, ok := m[v]; ok {\n            return false\n        }\n        m[v] = true\n    }\n    \n    // if we get here, we know that there are two distinct elements\n    // that sum to zero\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpl7jze2du.swift:23:6: error: consecutive statements on a line must be separated by ';'\n    m := make(map[Int]bool)\n     ^\n     ;\n/tmp/tmpl7jze2du.swift:23:7: error: expected expression\n    m := make(map[Int]bool)\n      ^\n/tmp/tmpl7jze2du.swift:28:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpl7jze2du.swift:28:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpl7jze2du.swift:29:18: error: expected '{' after 'if' condition\n        if _, ok := m[v]; ok {\n                 ^\n/tmp/tmpl7jze2du.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpl7jze2du.swift:23:5: error: cannot find 'm' in scope\n    m := make(map[Int]bool)\n    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp30wu3r0l.swift:28:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp30wu3r0l.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp30wu3r0l.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp30wu3r0l.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp30wu3r0l.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp30wu3r0l.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // If the first element is 0, then the second element must be 0\n    if l[0] == 0 {\n        return false\n    }\n    \n    // If the first element is not 0, then the second element must be 0\n    if l[1] != 0 {\n        return false\n    }\n    \n    // If the first element is 0, then the second element must be 0\n    if l[0] == 0 {\n        return false\n    }\n    \n    // If the first element is not 0, then the second element must be 0\n    if l[1] != 0 {\n        return false\n    }\n    \n    // If the first element is 0, then the second element must be 0\n    if l[0] == 0 {\n        return false\n    }\n    \n    // If the first element is not 0, then the second element must be 0\n    if l[1] != 0 {\n        return false\n    }\n    \n    // If the first element is 0, then the second element must be 0\n    if l[0] == 0 {\n        return false\n    }\n    \n    // If the first element is not 0, then the second element must be 0\n    if l[1] != 0 {\n        return false\n    }\n    \n    // If the first element is 0, then the second element must be 0\n    if l[0] == 0 {\n        return false\n    }\n    \n    // If the first element is not 0, then the second element must be 0\n    if l[1] != 0 {\n        return false\n    }\n    \n    // If the first element is 0, then the second element must be 0\n    if l[0] == 0 {\n        return false\n    }\n    \n    // If the first element is not 0, then the second element must be 0\n    if l[1] != 0 {\n        return false\n    }\n    \n    // If the first element is 0, then the second element must be 0\n    if l[0] == 0 {\n        return false\n    }\n    \n    // If the first element is not 0, then the second element must be 0\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpw8xv2ru8.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    var i, j Int\n    var sum Int\n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmphe2rq73j.swift:16:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var i, j Int\n             ^\n/tmp/tmphe2rq73j.swift:16:14: note: join the identifiers together\n    var i, j Int\n           ~~^~~\n           jInt\n/tmp/tmphe2rq73j.swift:17:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum Int\n            ^\n/tmp/tmphe2rq73j.swift:17:13: note: join the identifiers together\n    var sum Int\n        ~~~~^~~\n        sumInt\n/tmp/tmphe2rq73j.swift:18:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphe2rq73j.swift:19:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphe2rq73j.swift:16:9: error: type annotation missing in pattern\n    var i, j Int\n        ^\n/tmp/tmphe2rq73j.swift:16:12: error: type annotation missing in pattern\n    var i, j Int\n           ^\n/tmp/tmphe2rq73j.swift:17:9: error: type annotation missing in pattern\n    var sum Int\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum += l[i]\n        if sum == 0 {\n            j = i + 1\n            break\n        }\n    }\n    \n    if j == 0 {\n        return false\n    }\n    \n    for j = i + 1; j < len(l); j++ {\n        if l[i] == l[j] {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmplxps29gp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplxps29gp.swift:36:5: error: C-style for statement has been removed in Swift 3\n    for j = i + 1; j < len(l); j++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplxps29gp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // We will use a hash table to store the pairs.\n    // The key is the sum of the two numbers, and the value is the number of times\n    // that pair occurs in the array.\n    // The hash table is initialized with a default capacity of 16 elements.\n    // We will resize it as needed.\n    pairs := make(map[Int]Int, 16)\n    \n    // We will use a hash table to store the pairs.\n    // The key is the sum of the two numbers, and the value is the number of times\n    // that pair occurs in the array.\n    // The hash table is initialized with a default capacity of 16 elements.\n    // We will resize it as needed.\n    pairs_sum := make(map[Int]Int, 16)\n    \n    // We will use a hash table to store the pairs.\n    // The key is the sum of the two numbers, and the value is the number of times\n    // that pair occurs in the array.\n    // The hash table is initialized with a default capacity of 16 elements.\n    // We will resize it as needed.\n    pairs_sum_to_zero := make(map[Int]Int, 16)\n    \n    // We will use a hash table to store the pairs.\n    // The key is the sum of the two numbers, and the value is the number of times\n    // that pair occurs in the array.\n    // The hash table is initialized with a default capacity of 16 elements.\n    // We will resize it as needed.\n    pairs_sum_to_zero_2 := make(map[Int]Int, 16)\n    \n    // We will use a hash table to store the pairs.\n    // The key is the sum of the two numbers, and the value is the number of times\n    // that pair occurs in the array.\n    // The hash table is initialized with a default capacity of 16 elements.\n    // We will resize it as needed.\n    pairs_sum_to_zero_3 := make(map[Int]Int, 16)\n    \n    // We will use a hash table to store the pairs.\n    // The key is the sum of the two numbers, and the value\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpccv8ep6s.swift:25:10: error: consecutive statements on a line must be separated by ';'\n    pairs := make(map[Int]Int, 16)\n         ^\n         ;\n/tmp/tmpccv8ep6s.swift:25:11: error: expected expression\n    pairs := make(map[Int]Int, 16)\n          ^\n/tmp/tmpccv8ep6s.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpccv8ep6s.swift:25:5: error: cannot find 'pairs' in scope\n    pairs := make(map[Int]Int, 16)\n    ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < len(l) {\n        sum = l[i] + l[j]\n        if sum == 0 {\n            return true\n        }\n        if sum < 0 {\n            j = j + 1\n        } else {\n            i = i + 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp_kqe5qre.swift:22:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmp_kqe5qre.swift:22:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmp_kqe5qre.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp_kqe5qre.swift:22:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmp_kqe5qre.swift:22:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = l[i] + l[j]\n        if sum == 0 {\n            return true\n        }\n        \n        if sum > 0 {\n            j++\n        } else {\n            i++\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpdxddiqee.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpdxddiqee.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpdxddiqee.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpdxddiqee.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpdxddiqee.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return l[0] != l[1]\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpo02l4et2.swift:31:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpo02l4et2.swift:31:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpo02l4et2.swift:31:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpo02l4et2.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpo02l4et2.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpo02l4et2.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpo02l4et2.swift:28:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return l[0] != l[1]\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpo02l4et2.swift:31:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpo02l4et2.swift:31:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpo02l4et2.swift:31:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpo02l4et2.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpo02l4et2.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpo02l4et2.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpo02l4et2.swift:28:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = l[i] + l[j]\n        if sum == 0 {\n            return true\n        }\n        if sum < 0 {\n            j++\n        } else {\n            i++\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpcb1a454i.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpcb1a454i.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpcb1a454i.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpcb1a454i.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpcb1a454i.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = l[i]\n        for j = i + 1; j < len(l); j++ {\n            if sum == 0 {\n                return true\n            }\n            sum += l[j]\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpq9eexgc9.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq9eexgc9.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq9eexgc9.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    if l[0] == l[len(l) - 1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n        if l[i] == l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp4we12pb7.swift:31:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp4we12pb7.swift:31:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp4we12pb7.swift:31:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp4we12pb7.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp4we12pb7.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp4we12pb7.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n/tmp/tmp4we12pb7.swift:28:18: error: cannot find 'len' in scope\n    if l[0] == l[len(l) - 1] {\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = 0\n        for j = 0; j < len(l); j++ {\n            if i != j {\n                sum += l[i] + l[j]\n            }\n        }\n        if sum == 0 {\n            return true\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpqxqp743f.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqxqp743f.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = 0; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqxqp743f.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return l[0] != l[1]\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpo02l4et2.swift:31:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpo02l4et2.swift:31:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpo02l4et2.swift:31:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpo02l4et2.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpo02l4et2.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpo02l4et2.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpo02l4et2.swift:28:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpkdip8qx9.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpkdip8qx9.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpkdip8qx9.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var k = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = 0\n        for j = 0; j < len(l); j++ {\n            if i != j {\n                sum += l[j]\n            }\n        }\n        if sum == 0 {\n            k++\n        }\n    }\n    \n    return k == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpzkl_uo31.swift:25:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzkl_uo31.swift:27:9: error: C-style for statement has been removed in Swift 3\n        for j = 0; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzkl_uo31.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = l[i] + l[j]\n        if sum == 0 {\n            return true\n        }\n        \n        if sum < 0 {\n            j = j + 1\n        } else {\n            i = i + 1\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpxs2s1bia.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpxs2s1bia.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpxs2s1bia.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpxs2s1bia.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpxs2s1bia.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // set up a map to store the sums\n    m := make(map[Int]Bool)\n    \n    // iterate over the array\n    for i := 0; i < len(l); i++ {\n        // if the current element is not in the map, add it\n        if _, ok := m[l[i]]; !ok {\n            m[l[i]] = true\n        }\n        \n        // if the current element is in the map, remove it\n        if _, ok := m[-l[i]]; ok {\n            m[-l[i]] = false\n        }\n    }\n    \n    // if there are two elements in the map that are true, return true\n    if len(m) == 2 {\n        return true\n    }\n    \n    // otherwise return false\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpgiituxhe.swift:21:6: error: consecutive statements on a line must be separated by ';'\n    m := make(map[Int]Bool)\n     ^\n     ;\n/tmp/tmpgiituxhe.swift:21:7: error: expected expression\n    m := make(map[Int]Bool)\n      ^\n/tmp/tmpgiituxhe.swift:24:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpgiituxhe.swift:24:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpgiituxhe.swift:24:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpgiituxhe.swift:26:18: error: expected '{' after 'if' condition\n        if _, ok := m[l[i]]; !ok {\n                 ^\n/tmp/tmpgiituxhe.swift:31:18: error: expected '{' after 'if' condition\n        if _, ok := m[-l[i]]; ok {\n                 ^\n/tmp/tmpgiituxhe.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpgiituxhe.swift:21:5: error: cannot find 'm' in scope\n    m := make(map[Int]Bool)\n    ^\n/tmp/tmpgiituxhe.swift:37:8: error: cannot find 'len' in scope\n    if len(m) == 2 {\n       ^~~\n/tmp/tmpgiituxhe.swift:37:12: error: cannot find 'm' in scope\n    if len(m) == 2 {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = l[i]\n        for j = i + 1; j < len(l); j++ {\n            if sum == 0 {\n                return true\n            } else if sum < 0 {\n                sum = sum * -1\n            } else {\n                sum = sum + l[j]\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpyx9jxs_6.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyx9jxs_6.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyx9jxs_6.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    if l[0] == l[len(l) - 1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == l[i - 1] + l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpgscj9xro.swift:31:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpgscj9xro.swift:31:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpgscj9xro.swift:31:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpgscj9xro.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpgscj9xro.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpgscj9xro.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n/tmp/tmpgscj9xro.swift:28:18: error: cannot find 'len' in scope\n    if l[0] == l[len(l) - 1] {\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // Create a map of the elements in the array\n    m := make(map[Int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n    \n    // Create a map of the pairs that sum to zero\n    pairs := make(map[Int]bool)\n    for k, v := range m {\n        if v {\n            pairs[k] = true\n        }\n    }\n    \n    // If there are two distinct pairs that sum to zero, return true\n    if len(pairs) == 2 {\n        return true\n    }\n    \n    // Otherwise, return false\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpa6pl55hc.swift:21:6: error: consecutive statements on a line must be separated by ';'\n    m := make(map[Int]bool)\n     ^\n     ;\n/tmp/tmpa6pl55hc.swift:21:7: error: expected expression\n    m := make(map[Int]bool)\n      ^\n/tmp/tmpa6pl55hc.swift:22:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpa6pl55hc.swift:22:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpa6pl55hc.swift:28:10: error: expected 'in' after for-each pattern\n    for k, v := range m {\n         ^\n/tmp/tmpa6pl55hc.swift:28:10: error: expected Sequence expression for for-each loop\n    for k, v := range m {\n         ^\n/tmp/tmpa6pl55hc.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpa6pl55hc.swift:21:5: error: cannot find 'm' in scope\n    m := make(map[Int]bool)\n    ^\n/tmp/tmpa6pl55hc.swift:35:8: error: cannot find 'len' in scope\n    if len(pairs) == 2 {\n       ^~~\n/tmp/tmpa6pl55hc.swift:35:12: error: cannot find 'pairs' in scope\n    if len(pairs) == 2 {\n           ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        if l[i] == 0 {\n            continue\n        }\n        for j := i + 1; j < len(l); j++ {\n            if l[j] == 0 {\n                continue\n            }\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpp2ayqyb9.swift:30:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpp2ayqyb9.swift:30:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpp2ayqyb9.swift:30:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpp2ayqyb9.swift:38:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpp2ayqyb9.swift:38:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpp2ayqyb9.swift:38:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpp2ayqyb9.swift:42:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpp2ayqyb9.swift:42:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpp2ayqyb9.swift:42:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpp2ayqyb9.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpp2ayqyb9.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpp2ayqyb9.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // Create a map of the values in the list\n    m := make(map[Int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n    \n    // Iterate over the map and check if there are two distinct values\n    // that sum to zero\n    for k, v := range m {\n        if v {\n            for _, v2 := range l {\n                if v2 == k {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpxf4m3xcy.swift:21:6: error: consecutive statements on a line must be separated by ';'\n    m := make(map[Int]bool)\n     ^\n     ;\n/tmp/tmpxf4m3xcy.swift:21:7: error: expected expression\n    m := make(map[Int]bool)\n      ^\n/tmp/tmpxf4m3xcy.swift:22:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpxf4m3xcy.swift:22:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpxf4m3xcy.swift:28:10: error: expected 'in' after for-each pattern\n    for k, v := range m {\n         ^\n/tmp/tmpxf4m3xcy.swift:28:10: error: expected Sequence expression for for-each loop\n    for k, v := range m {\n         ^\n/tmp/tmpxf4m3xcy.swift:30:18: error: expected 'in' after for-each pattern\n            for _, v2 := range l {\n                 ^\n/tmp/tmpxf4m3xcy.swift:30:18: error: expected Sequence expression for for-each loop\n            for _, v2 := range l {\n                 ^\n/tmp/tmpxf4m3xcy.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpxf4m3xcy.swift:21:5: error: cannot find 'm' in scope\n    m := make(map[Int]bool)\n    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = l[i]\n        for j < len(l) {\n            if sum == l[j] {\n                return true\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpdc0v3v_s.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpdc0v3v_s.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpdc0v3v_s.swift:26:15: error: expected 'in' after for-each pattern\n        for j < len(l) {\n              ^\n/tmp/tmpdc0v3v_s.swift:26:15: error: unary operator cannot be separated from its operand\n        for j < len(l) {\n              ^~\n               \n/tmp/tmpdc0v3v_s.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpdc0v3v_s.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpdc0v3v_s.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpdc0v3v_s.swift:26:15: error: '<' is not a prefix unary operator\n        for j < len(l) {\n              ^\n/tmp/tmpdc0v3v_s.swift:26:17: error: cannot find 'len' in scope\n        for j < len(l) {\n                ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        if l[0] == 0 || l[1] == 0 {\n            return true\n        }\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[1] == 0 {\n        return false\n    }\n    if l[2] == 0 {\n        return true\n    }\n    if l[0] + l[1] == 0 {\n        return true\n    }\n    if l[0] + l[2] == 0 {\n        return true\n    }\n    if l[1] + l[2] == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpbjmpps95.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpbjmpps95.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpbjmpps95.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i, j int\n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp2k_m94_s.swift:20:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var i, j int\n             ^\n/tmp/tmp2k_m94_s.swift:20:14: note: join the identifiers together\n    var i, j int\n           ~~^~~\n           jint\n/tmp/tmp2k_m94_s.swift:20:14: note: join the identifiers together with camel-case\n    var i, j int\n           ~~^~~\n           jInt\n/tmp/tmp2k_m94_s.swift:21:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2k_m94_s.swift:22:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2k_m94_s.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp2k_m94_s.swift:20:9: error: type annotation missing in pattern\n    var i, j int\n        ^\n/tmp/tmp2k_m94_s.swift:20:12: error: type annotation missing in pattern\n    var i, j int\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i, j, sum = 0, 0, 0\n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpzyqcklsv.swift:20:24: error: expected pattern\n    var i, j, sum = 0, 0, 0\n                       ^\n/tmp/tmpzyqcklsv.swift:21:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzyqcklsv.swift:22:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzyqcklsv.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpzyqcklsv.swift:20:9: error: type annotation missing in pattern\n    var i, j, sum = 0, 0, 0\n        ^\n/tmp/tmpzyqcklsv.swift:20:12: error: type annotation missing in pattern\n    var i, j, sum = 0, 0, 0\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    var count: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                count += 1\n            }\n        }\n    }\n    \n    return count == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpt14j3a37.swift:25:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt14j3a37.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt14j3a37.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[1] == 0 {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] == -l[1] {\n        return false\n    }\n    if l[0] == l[1] + l[2] {\n        return false\n    }\n    if l[0] == l[1] + l[2] + l[3] {\n        return false\n    }\n    if l[0] == l[1] + l[2] + l[3] + l[4] {\n        return false\n    }\n    if l[0] == l[1] + l[2] + l[3] + l[4] + l[5] {\n        return false\n    }\n    if l[0] == l[1] + l[2] + l[3] + l[4] + l[5] + l[6] {\n        return false\n    }\n    if l[0] == l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] {\n        return false\n    }\n    if l[0] == l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] {\n        return false\n    }\n    if l[0] == l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] {\n        return false\n    }\n    if l[0] == l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10] {\n        return false\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpmk62ujct.swift:84:61: error: expected '}' at end of brace statement\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)\n                                                            ^\n/tmp/tmpmk62ujct.swift:15:42: note: to match this opening '{'\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n                                         ^\n/tmp/tmpmk62ujct.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpmk62ujct.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpmk62ujct.swift:64:6: error: operator functions can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    var count = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n        if sum == 0 {\n            count++\n        }\n    }\n    \n    return count == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp0zfosbwh.swift:22:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp0zfosbwh.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp0zfosbwh.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp0zfosbwh.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = 0\n        for j = i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmphb98b92g.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphb98b92g.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphb98b92g.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    if l[0] == l[len(l) - 1] {\n        return false\n    }\n    if l[0] > 0 {\n        return false\n    }\n    if l[len(l) - 1] > 0 {\n        return false\n    }\n    if l[0] < 0 {\n        return false\n    }\n    if l[len(l) - 1] < 0 {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n        if l[i] == l[i + 1] {\n            return false\n        }\n        if l[i] == l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpnx3wjlto.swift:43:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpnx3wjlto.swift:43:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpnx3wjlto.swift:43:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpnx3wjlto.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpnx3wjlto.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpnx3wjlto.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n/tmp/tmpnx3wjlto.swift:28:18: error: cannot find 'len' in scope\n    if l[0] == l[len(l) - 1] {\n                 ^~~\n/tmp/tmpnx3wjlto.swift:34:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] > 0 {\n         ^~~\n/tmp/tmpnx3wjlto.swift:40:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] < 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // we use a map to store the sums of the elements\n    // in the array\n    m := make(map[Int]bool)\n    \n    // we iterate over the elements in the array\n    for i := 0; i < len(l); i++ {\n        // if the element is not in the map,\n        // we add it to the map\n        if _, ok := m[l[i]]; !ok {\n            m[l[i]] = true\n        }\n        \n        // if the element is in the map,\n        // we check if the sum of the element\n        // and the previous element is zero\n        if _, ok := m[l[i] - l[i-1]]; ok {\n            return true\n        }\n    }\n    \n    // if we reach this point,\n    // we know that there are no\n    // two elements in the array that\n    // sum to zero\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp7zl2hn20.swift:22:6: error: consecutive statements on a line must be separated by ';'\n    m := make(map[Int]bool)\n     ^\n     ;\n/tmp/tmp7zl2hn20.swift:22:7: error: expected expression\n    m := make(map[Int]bool)\n      ^\n/tmp/tmp7zl2hn20.swift:25:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp7zl2hn20.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp7zl2hn20.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp7zl2hn20.swift:28:18: error: expected '{' after 'if' condition\n        if _, ok := m[l[i]]; !ok {\n                 ^\n/tmp/tmp7zl2hn20.swift:35:18: error: expected '{' after 'if' condition\n        if _, ok := m[l[i] - l[i-1]]; ok {\n                 ^\n/tmp/tmp7zl2hn20.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp7zl2hn20.swift:22:5: error: cannot find 'm' in scope\n    m := make(map[Int]bool)\n    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        if l[0] == 0 || l[1] == 0 {\n            return true\n        }\n        return false\n    }\n    if len(l) % 2 == 0 {\n        return false\n    }\n    for i := 1; i < len(l); i += 2 {\n        if l[i] == 0 {\n            return false\n        }\n        if l[i] == l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp5cr1xlf9.swift:31:12: error: expected type\n    for i := 1; i < len(l); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp5cr1xlf9.swift:31:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i += 2 {\n           ^\n/tmp/tmp5cr1xlf9.swift:31:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i += 2 {\n           ^\n/tmp/tmp5cr1xlf9.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp5cr1xlf9.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp5cr1xlf9.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp5cr1xlf9.swift:28:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum += l[i]\n        if sum == 0 {\n            j = i + 1\n            break\n        }\n        i += 1\n    }\n    \n    if j == 0 {\n        return false\n    }\n    \n    for j < len(l) {\n        if l[j] != l[j - 1] {\n            return true\n        }\n        j += 1\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpqy0kq5i5.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpqy0kq5i5.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpqy0kq5i5.swift:37:11: error: expected 'in' after for-each pattern\n    for j < len(l) {\n          ^\n/tmp/tmpqy0kq5i5.swift:37:11: error: unary operator cannot be separated from its operand\n    for j < len(l) {\n          ^~\n           \n/tmp/tmpqy0kq5i5.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpqy0kq5i5.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpqy0kq5i5.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpqy0kq5i5.swift:37:11: error: '<' is not a prefix unary operator\n    for j < len(l) {\n          ^\n/tmp/tmpqy0kq5i5.swift:37:13: error: cannot find 'len' in scope\n    for j < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp30wu3r0l.swift:28:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp30wu3r0l.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp30wu3r0l.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp30wu3r0l.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp30wu3r0l.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp30wu3r0l.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp30wu3r0l.swift:28:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp30wu3r0l.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp30wu3r0l.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp30wu3r0l.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp30wu3r0l.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp30wu3r0l.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i, j, sum = 0, 0, 0\n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpzyqcklsv.swift:20:24: error: expected pattern\n    var i, j, sum = 0, 0, 0\n                       ^\n/tmp/tmpzyqcklsv.swift:21:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzyqcklsv.swift:22:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzyqcklsv.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpzyqcklsv.swift:20:9: error: type annotation missing in pattern\n    var i, j, sum = 0, 0, 0\n        ^\n/tmp/tmpzyqcklsv.swift:20:12: error: type annotation missing in pattern\n    var i, j, sum = 0, 0, 0\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return l[0] != l[1]\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[1] == 0 {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] + l[1] == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp5drs04h8.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp5drs04h8.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp5drs04h8.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = l[i] + l[j]\n        if sum == 0 {\n            return true\n        }\n        \n        if sum < 0 {\n            j = j + 1\n            if j == len(l) {\n                j = 0\n            }\n        } else {\n            i = i + 1\n            if i == len(l) {\n                i = 0\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpfkvzqb5v.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpfkvzqb5v.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpfkvzqb5v.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpfkvzqb5v.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpfkvzqb5v.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    var i: Int\n    var j: Int\n    var sum: Int\n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpgkek_7dg.swift:22:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgkek_7dg.swift:23:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgkek_7dg.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return true\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[1] == 0 {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] + l[1] == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp2xjjxnne.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp2xjjxnne.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp2xjjxnne.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        if l[0] == 0 || l[1] == 0 {\n            return true\n        }\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[1] == 0 {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] + l[1] == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp14pld7ku.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp14pld7ku.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp14pld7ku.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    var i: Int\n    var j: Int\n    var sum: Int\n    var count: Int\n    var result: Bool\n    var _ = i\n    var _ = j\n    var _ = sum\n    var _ = count\n    var _ = result\n    for i = 0 to len(l) - 1 {\n        for j = i + 1 to len(l) {\n            sum = l[i] + l[j]\n            count = 0\n            if sum == 0 {\n                count = count + 1\n            }\n            if count > 1 {\n                result = true\n                break\n            }\n        }\n        if result {\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpjlal5xq7.swift:26:11: error: expected 'in' after for-each pattern\n    for i = 0 to len(l) - 1 {\n          ^\n/tmp/tmpjlal5xq7.swift:26:11: error: expected Sequence expression for for-each loop\n    for i = 0 to len(l) - 1 {\n          ^\n/tmp/tmpjlal5xq7.swift:27:15: error: expected 'in' after for-each pattern\n        for j = i + 1 to len(l) {\n              ^\n/tmp/tmpjlal5xq7.swift:27:15: error: expected Sequence expression for for-each loop\n        for j = i + 1 to len(l) {\n              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // Create a map of all the elements in the array\n    m := make(map[Int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n    \n    // Iterate through the map and check if there are two elements\n    // that sum to zero\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpxn3f33hr.swift:21:6: error: consecutive statements on a line must be separated by ';'\n    m := make(map[Int]bool)\n     ^\n     ;\n/tmp/tmpxn3f33hr.swift:21:7: error: expected expression\n    m := make(map[Int]bool)\n      ^\n/tmp/tmpxn3f33hr.swift:22:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpxn3f33hr.swift:22:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpxn3f33hr.swift:28:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpxn3f33hr.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpxn3f33hr.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpxn3f33hr.swift:29:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpxn3f33hr.swift:29:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpxn3f33hr.swift:29:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpxn3f33hr.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpxn3f33hr.swift:21:5: error: cannot find 'm' in scope\n    m := make(map[Int]bool)\n    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] + l[i + 1] == 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp7h2rwsqi.swift:28:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp7h2rwsqi.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp7h2rwsqi.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp7h2rwsqi.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp7h2rwsqi.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp7h2rwsqi.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var count = 0\n    var sum = 0\n    \n    for i := 0; i < len(l); i++ {\n        if l[i] > 0 {\n            count++\n            sum += l[i]\n        }\n    }\n    \n    if count == 2 {\n        return true\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        if l[i] > 0 {\n            sum -= l[i]\n        }\n    }\n    \n    if sum == 0 {\n        return true\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpyt80e59l.swift:23:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpyt80e59l.swift:23:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpyt80e59l.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpyt80e59l.swift:38:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpyt80e59l.swift:38:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpyt80e59l.swift:38:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpyt80e59l.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    var count = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n        count += 1\n    }\n    \n    if count == 1 {\n        return false\n    }\n    \n    if sum % 2 == 0 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpqm_0745a.swift:22:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpqm_0745a.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpqm_0745a.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpqm_0745a.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        if l[0] == 0 || l[1] == 0 {\n            return true\n        }\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[1] == 0 {\n        return false\n    }\n    if l[2] == 0 {\n        return true\n    }\n    if l[0] + l[1] == 0 {\n        return true\n    }\n    if l[0] + l[2] == 0 {\n        return true\n    }\n    if l[1] + l[2] == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpbjmpps95.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpbjmpps95.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpbjmpps95.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = l[i]\n        for j = i + 1; j < len(l); j++ {\n            if sum == 0 {\n                return true\n            }\n            sum += l[j]\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpg78culkl.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg78culkl.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg78culkl.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    var i: Int\n    var j: Int\n    var sum: Int\n    var count: Int\n    var result: Bool\n    \n    result = false\n    \n    for i = 0 to len(l) - 1 {\n        for j = i + 1 to len(l) {\n            sum = l[i] + l[j]\n            count = 0\n            \n            while sum != 0 {\n                if sum % 2 == 1 {\n                    count += 1\n                }\n                sum /= 2\n            }\n            \n            if count == 2 {\n                result = true\n                break\n            }\n        }\n        \n        if result == true {\n            break\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpowoueqxn.swift:24:11: error: expected 'in' after for-each pattern\n    for i = 0 to len(l) - 1 {\n          ^\n/tmp/tmpowoueqxn.swift:24:11: error: expected Sequence expression for for-each loop\n    for i = 0 to len(l) - 1 {\n          ^\n/tmp/tmpowoueqxn.swift:25:15: error: expected 'in' after for-each pattern\n        for j = i + 1 to len(l) {\n              ^\n/tmp/tmpowoueqxn.swift:25:15: error: expected Sequence expression for for-each loop\n        for j = i + 1 to len(l) {\n              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i, j, sum = 0, 0, 0\n    for i = 0; i < len(l); i++ {\n        sum += l[i]\n        if sum == 0 {\n            j = i + 1\n            while j < len(l) && l[j] == 0 {\n                j += 1\n            }\n            if j < len(l) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpqli505fs.swift:20:24: error: expected pattern\n    var i, j, sum = 0, 0, 0\n                       ^\n/tmp/tmpqli505fs.swift:21:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqli505fs.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpqli505fs.swift:20:9: error: type annotation missing in pattern\n    var i, j, sum = 0, 0, 0\n        ^\n/tmp/tmpqli505fs.swift:20:12: error: type annotation missing in pattern\n    var i, j, sum = 0, 0, 0\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the pairs\n    // we use a map to store the\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpu19wpl_s.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        if l[0] == 0 {\n            return true\n        }\n        return false\n    }\n    if len(l) % 2 == 0 {\n        return false\n    }\n    if l[0] == 0 {\n        return true\n    }\n    if l[1] == 0 {\n        return true\n    }\n    if l[0] == l[1] {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpwv17p6wu.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpwv17p6wu.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpwv17p6wu.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpwv17p6wu.swift:28:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return true\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[1] == 0 {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] + l[1] == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp2xjjxnne.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp2xjjxnne.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp2xjjxnne.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < len(l) {\n        sum = l[i] + l[j]\n        if sum == 0 {\n            return true\n        }\n        if sum < 0 {\n            j = j + 1\n        } else {\n            i = i + 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp_kqe5qre.swift:22:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmp_kqe5qre.swift:22:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmp_kqe5qre.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp_kqe5qre.swift:22:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmp_kqe5qre.swift:22:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        if l[0] == 0 && l[1] == 0 {\n            return true\n        }\n        return false\n    }\n    if l[0] == 0 {\n        return pairs_sum_to_zero(l[1:])\n    }\n    if l[1] == 0 {\n        return pairs_sum_to_zero(l[0:])\n    }\n    if l[0] == l[1] {\n        return pairs_sum_to_zero(l[0:])\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp2wh669dq.swift:29:37: error: expected ',' separator\n        return pairs_sum_to_zero(l[1:])\n                                    ^\n                                    ,\n/tmp/tmp2wh669dq.swift:29:37: error: expected expression in list of expressions\n        return pairs_sum_to_zero(l[1:])\n                                    ^\n/tmp/tmp2wh669dq.swift:32:37: error: expected ',' separator\n        return pairs_sum_to_zero(l[0:])\n                                    ^\n                                    ,\n/tmp/tmp2wh669dq.swift:32:37: error: expected expression in list of expressions\n        return pairs_sum_to_zero(l[0:])\n                                    ^\n/tmp/tmp2wh669dq.swift:35:37: error: expected ',' separator\n        return pairs_sum_to_zero(l[0:])\n                                    ^\n                                    ,\n/tmp/tmp2wh669dq.swift:35:37: error: expected expression in list of expressions\n        return pairs_sum_to_zero(l[0:])\n                                    ^\n/tmp/tmp2wh669dq.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp2wh669dq.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp2wh669dq.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp2wh669dq.swift:29:34: error: missing argument label 'l:' in call\n        return pairs_sum_to_zero(l[1:])\n                                 ^\n                                 l: \n/tmp/tmp2wh669dq.swift:29:35: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n        return pairs_sum_to_zero(l[1:])\n                                  ^\n/tmp/tmp2wh669dq.swift:32:34: error: missing argument label 'l:' in call\n        return pairs_sum_to_zero(l[0:])\n                                 ^\n                                 l: \n/tmp/tmp2wh669dq.swift:32:35: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n        return pairs_sum_to_zero(l[0:])\n                                  ^\n/tmp/tmp2wh669dq.swift:35:3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    var i, j Int\n    var sum Int\n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmphe2rq73j.swift:16:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var i, j Int\n             ^\n/tmp/tmphe2rq73j.swift:16:14: note: join the identifiers together\n    var i, j Int\n           ~~^~~\n           jInt\n/tmp/tmphe2rq73j.swift:17:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum Int\n            ^\n/tmp/tmphe2rq73j.swift:17:13: note: join the identifiers together\n    var sum Int\n        ~~~~^~~\n        sumInt\n/tmp/tmphe2rq73j.swift:18:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphe2rq73j.swift:19:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphe2rq73j.swift:16:9: error: type annotation missing in pattern\n    var i, j Int\n        ^\n/tmp/tmphe2rq73j.swift:16:12: error: type annotation missing in pattern\n    var i, j Int\n           ^\n/tmp/tmphe2rq73j.swift:17:9: error: type annotation missing in pattern\n    var sum Int\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + l[i + 1] == 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpazprqqb2.swift:28:12: error: expected type\n    for i := 0; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpazprqqb2.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpazprqqb2.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpazprqqb2.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpazprqqb2.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpazprqqb2.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = l[i] + l[j]\n        if sum == 0 {\n            return true\n        }\n        \n        if sum < 0 {\n            j = j + 1\n        } else {\n            i = i + 1\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpxs2s1bia.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpxs2s1bia.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpxs2s1bia.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpxs2s1bia.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpxs2s1bia.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    var count = 0\n    \n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n        if sum == 0 {\n            count++\n        }\n    }\n    \n    return count == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp5kvt06ho.swift:23:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp5kvt06ho.swift:23:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp5kvt06ho.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp5kvt06ho.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return true\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = l[i]\n        for j = i + 1; j < len(l); j++ {\n            if sum == l[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp2r1xv78z.swift:30:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2r1xv78z.swift:32:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2r1xv78z.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp2r1xv78z.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp2r1xv78z.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // Create a map of the elements in the array.\n    m := make(map[Int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n    \n    // Check if there are two elements in the array that sum to zero.\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpvagy6d0h.swift:21:6: error: consecutive statements on a line must be separated by ';'\n    m := make(map[Int]bool)\n     ^\n     ;\n/tmp/tmpvagy6d0h.swift:21:7: error: expected expression\n    m := make(map[Int]bool)\n      ^\n/tmp/tmpvagy6d0h.swift:22:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpvagy6d0h.swift:22:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpvagy6d0h.swift:27:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpvagy6d0h.swift:27:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpvagy6d0h.swift:27:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpvagy6d0h.swift:28:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpvagy6d0h.swift:28:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpvagy6d0h.swift:28:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpvagy6d0h.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpvagy6d0h.swift:21:5: error: cannot find 'm' in scope\n    m := make(map[Int]bool)\n    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < len(l) {\n        if l[i] > 0 {\n            sum += l[i]\n            j = i\n        }\n        i += 1\n    }\n    if sum == 0 {\n        return false\n    }\n    for j < len(l) {\n        if l[j] > 0 {\n            sum -= l[j]\n        }\n        j += 1\n    }\n    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpq_tj9rf1.swift:22:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpq_tj9rf1.swift:22:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpq_tj9rf1.swift:32:11: error: expected 'in' after for-each pattern\n    for j < len(l) {\n          ^\n/tmp/tmpq_tj9rf1.swift:32:11: error: unary operator cannot be separated from its operand\n    for j < len(l) {\n          ^~\n           \n/tmp/tmpq_tj9rf1.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpq_tj9rf1.swift:22:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpq_tj9rf1.swift:22:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpq_tj9rf1.swift:32:11: error: '<' is not a prefix unary operator\n    for j < len(l) {\n          ^\n/tmp/tmpq_tj9rf1.swift:32:13: error: cannot find 'len' in scope\n    for j < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        if l[i] == 0 {\n            continue\n        }\n        \n        sum = 0\n        for j < len(l) {\n            if l[j] == 0 {\n                break\n            }\n            \n            sum += l[j]\n            j += 1\n        }\n        \n        if sum == 0 {\n            return true\n        }\n        \n        i += 1\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpkghfpp55.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpkghfpp55.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpkghfpp55.swift:30:15: error: expected 'in' after for-each pattern\n        for j < len(l) {\n              ^\n/tmp/tmpkghfpp55.swift:30:15: error: unary operator cannot be separated from its operand\n        for j < len(l) {\n              ^~\n               \n/tmp/tmpkghfpp55.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpkghfpp55.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpkghfpp55.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpkghfpp55.swift:30:15: error: '<' is not a prefix unary operator\n        for j < len(l) {\n              ^\n/tmp/tmpkghfpp55.swift:30:17: error: cannot find 'len' in scope\n        for j < len(l) {\n                ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = l[i]\n        for j < len(l) {\n            if sum == l[j] {\n                return false\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpxobpolt6.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpxobpolt6.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpxobpolt6.swift:26:15: error: expected 'in' after for-each pattern\n        for j < len(l) {\n              ^\n/tmp/tmpxobpolt6.swift:26:15: error: unary operator cannot be separated from its operand\n        for j < len(l) {\n              ^~\n               \n/tmp/tmpxobpolt6.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpxobpolt6.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpxobpolt6.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpxobpolt6.swift:26:15: error: '<' is not a prefix unary operator\n        for j < len(l) {\n              ^\n/tmp/tmpxobpolt6.swift:26:17: error: cannot find 'len' in scope\n        for j < len(l) {\n                ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + l[i + 1] == 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpazprqqb2.swift:28:12: error: expected type\n    for i := 0; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpazprqqb2.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpazprqqb2.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpazprqqb2.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpazprqqb2.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpazprqqb2.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = l[i] + l[j]\n        if sum == 0 {\n            return true\n        }\n        \n        if sum > 0 {\n            j++\n        } else {\n            i++\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpdxddiqee.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpdxddiqee.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpdxddiqee.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpdxddiqee.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpdxddiqee.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + l[i + 1] == 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpazprqqb2.swift:28:12: error: expected type\n    for i := 0; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpazprqqb2.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpazprqqb2.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpazprqqb2.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpazprqqb2.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpazprqqb2.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = l[i]\n        for j = i + 1; j < len(l); j++ {\n            if sum == l[j] {\n                return false\n            }\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpn8boioqb.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn8boioqb.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn8boioqb.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    var i: Int\n    var j: Int\n    var sum: Int\n    var count: Int\n    var result: Bool\n    \n    result = false\n    for i = 0 to len(l) - 1 {\n        for j = i + 1 to len(l) {\n            sum = l[i] + l[j]\n            count = 0\n            while sum > 0 {\n                count += 1\n                sum -= 1\n            }\n            if count == 2 {\n                result = true\n                break\n            }\n        }\n        if result == true {\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpq7edj91h.swift:23:11: error: expected 'in' after for-each pattern\n    for i = 0 to len(l) - 1 {\n          ^\n/tmp/tmpq7edj91h.swift:23:11: error: expected Sequence expression for for-each loop\n    for i = 0 to len(l) - 1 {\n          ^\n/tmp/tmpq7edj91h.swift:24:15: error: expected 'in' after for-each pattern\n        for j = i + 1 to len(l) {\n              ^\n/tmp/tmpq7edj91h.swift:24:15: error: expected Sequence expression for for-each loop\n        for j = i + 1 to len(l) {\n              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // Create a map of the values in the array.\n    m := make(map[Int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n    \n    // Iterate over the values in the map.\n    for v := range m {\n        // If the value is not zero, then it is not a pair.\n        if v != 0 {\n            return false\n        }\n    }\n    \n    // If there are no pairs, then the array is not a pair.\n    return len(m) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpxp2_i4ql.swift:21:6: error: consecutive statements on a line must be separated by ';'\n    m := make(map[Int]bool)\n     ^\n     ;\n/tmp/tmpxp2_i4ql.swift:21:7: error: expected expression\n    m := make(map[Int]bool)\n      ^\n/tmp/tmpxp2_i4ql.swift:22:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpxp2_i4ql.swift:22:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpxp2_i4ql.swift:27:12: error: expected type\n    for v := range m {\n           ^\n            <#type#>\n/tmp/tmpxp2_i4ql.swift:27:12: error: expected 'in' after for-each pattern\n    for v := range m {\n           ^\n/tmp/tmpxp2_i4ql.swift:27:12: error: expected Sequence expression for for-each loop\n    for v := range m {\n           ^\n/tmp/tmpxp2_i4ql.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpxp2_i4ql.swift:21:5: error: cannot find 'm' in scope\n    m := make(map[Int]bool)\n    ^\n/tmp/tmpxp2_i4ql.swift:35:12: error: cannot find 'len' in scope\n    return len(m) == 0\n           ^~~\n/tmp/tmpxp2_i4ql.swift:35:16: error: cannot find 'm' in scope\n    return len(m) == 0\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    var i: Int\n    var j: Int\n    var sum: Int\n    var count: Int\n    var result: Bool\n    var found: Bool\n    var i_prev: Int\n    var j_prev: Int\n    var sum_prev: Int\n    var count_prev: Int\n    var i_prev_prev: Int\n    var j_prev_prev: Int\n    var sum_prev_prev: Int\n    var count_prev_prev: Int\n    var i_prev_prev_prev: Int\n    var j_prev_prev_prev: Int\n    var sum_prev_prev_prev: Int\n    var count_prev_prev_prev: Int\n    var i_prev_prev_prev_prev: Int\n    var j_prev_prev_prev_prev: Int\n    var sum_prev_prev_prev_prev: Int\n    var count_prev_prev_prev_prev: Int\n    var i_prev_prev_prev_prev_prev: Int\n    var j_prev_prev_prev_prev_prev: Int\n    var sum_prev_prev_prev_prev_prev: Int\n    var count_prev_prev_prev_prev_prev: Int\n    var i_prev_prev_prev_prev_prev_prev: Int\n    var j_prev_prev_prev_prev_prev_prev: Int\n    var sum_prev_prev_prev_prev_prev_prev: Int\n    var count_prev_prev_prev_prev_prev_prev: Int\n    var i_prev_prev_prev_prev_prev_prev_prev: Int\n    var j_prev_prev_prev_prev_prev_prev_prev: Int\n    var sum_prev_prev_prev_prev_prev_prev_prev: Int\n    var count_prev_prev_prev_prev_prev_prev_prev: Int\n    var i_prev_prev_prev_prev_prev_prev_prev_prev: Int\n    var j_prev_prev_prev_prev_prev_prev_prev_prev: Int\n    var sum_prev_prev_prev_prev_prev_prev_prev_prev: Int\n    var count_prev_prev_prev_prev_prev_prev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpjl1tuifx.swift:53:9: error: type annotation missing in pattern\n    var count_prev_prev_prev_prev_prev_prev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var count = 0\n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n        if sum == 0 {\n            count++\n        }\n    }\n    \n    return count == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpu16fkkc2.swift:22:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpu16fkkc2.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpu16fkkc2.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpu16fkkc2.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = 0\n        for j < len(l) {\n            if i != j {\n                sum += l[i] + l[j]\n            }\n            j += 1\n        }\n        if sum == 0 {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpsdw0yf7q.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpsdw0yf7q.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpsdw0yf7q.swift:26:15: error: expected 'in' after for-each pattern\n        for j < len(l) {\n              ^\n/tmp/tmpsdw0yf7q.swift:26:15: error: unary operator cannot be separated from its operand\n        for j < len(l) {\n              ^~\n               \n/tmp/tmpsdw0yf7q.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpsdw0yf7q.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpsdw0yf7q.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpsdw0yf7q.swift:26:15: error: '<' is not a prefix unary operator\n        for j < len(l) {\n              ^\n/tmp/tmpsdw0yf7q.swift:26:17: error: cannot find 'len' in scope\n        for j < len(l) {\n                ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return l[0] != l[1]\n    }\n    \n    var i = 0\n    var j = 0\n    var k = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = 0\n        for j = 0; j < len(l); j++ {\n            if i != j {\n                sum += l[j]\n            }\n        }\n        if sum == 0 {\n            for k = 0; k < len(l); k++ {\n                if i != k && l[i] == l[k] {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpguqwgsmh.swift:31:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpguqwgsmh.swift:33:9: error: C-style for statement has been removed in Swift 3\n        for j = 0; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpguqwgsmh.swift:39:13: error: C-style for statement has been removed in Swift 3\n            for k = 0; k < len(l); k++ {\n            ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpguqwgsmh.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpguqwgsmh.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpguqwgsmh.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        if l[0] == 0 || l[1] == 0 {\n            return true\n        }\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[1] == 0 {\n        return false\n    }\n    if l[2] == 0 {\n        return true\n    }\n    if l[0] + l[1] == 0 {\n        return true\n    }\n    if l[0] + l[2] == 0 {\n        return true\n    }\n    if l[1] + l[2] == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpbjmpps95.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpbjmpps95.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpbjmpps95.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    var count = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n        if sum == 0 {\n            count++\n        }\n    }\n    return count >= 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp99dcpahr.swift:22:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp99dcpahr.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp99dcpahr.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp99dcpahr.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    var i: Int\n    var j: Int\n    var sum: Int\n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpgkek_7dg.swift:22:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgkek_7dg.swift:23:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgkek_7dg.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = 0\n        for j < len(l) {\n            if i != j {\n                sum += l[i] + l[j]\n            }\n            j += 1\n        }\n        if sum == 0 {\n            return true\n        }\n        i += 1\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpfy02ee87.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpfy02ee87.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpfy02ee87.swift:26:15: error: expected 'in' after for-each pattern\n        for j < len(l) {\n              ^\n/tmp/tmpfy02ee87.swift:26:15: error: unary operator cannot be separated from its operand\n        for j < len(l) {\n              ^~\n               \n/tmp/tmpfy02ee87.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpfy02ee87.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpfy02ee87.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpfy02ee87.swift:26:15: error: '<' is not a prefix unary operator\n        for j < len(l) {\n              ^\n/tmp/tmpfy02ee87.swift:26:17: error: cannot find 'len' in scope\n        for j < len(l) {\n                ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        if l[i] == 0 {\n            continue\n        }\n        \n        sum = 0\n        for j < len(l) {\n            if l[j] == 0 {\n                break\n            }\n            \n            sum += l[j]\n            j += 1\n        }\n        \n        if sum == 0 {\n            return true\n        }\n        \n        i += 1\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpkghfpp55.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpkghfpp55.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpkghfpp55.swift:30:15: error: expected 'in' after for-each pattern\n        for j < len(l) {\n              ^\n/tmp/tmpkghfpp55.swift:30:15: error: unary operator cannot be separated from its operand\n        for j < len(l) {\n              ^~\n               \n/tmp/tmpkghfpp55.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpkghfpp55.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpkghfpp55.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpkghfpp55.swift:30:15: error: '<' is not a prefix unary operator\n        for j < len(l) {\n              ^\n/tmp/tmpkghfpp55.swift:30:17: error: cannot find 'len' in scope\n        for j < len(l) {\n                ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        if l[i] == 0 {\n            sum = 0\n            j = i\n            i = i + 1\n            continue\n        }\n        \n        if l[i] < 0 {\n            sum = sum + l[i]\n            i = i + 1\n            continue\n        }\n        \n        if l[i] > 0 {\n            sum = sum - l[i]\n            i = i + 1\n            continue\n        }\n    }\n    \n    if sum == 0 {\n        return true\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpa5kvuiwf.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpa5kvuiwf.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpa5kvuiwf.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpa5kvuiwf.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpa5kvuiwf.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = l[i]\n        for j = i + 1; j < len(l); j++ {\n            if sum == l[j] {\n                return false\n            }\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpn8boioqb.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn8boioqb.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn8boioqb.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    var count = 0\n    \n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n        count += 1\n    }\n    \n    if count == 0 {\n        return false\n    }\n    \n    if sum % 2 == 0 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpjc39rdan.swift:23:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpjc39rdan.swift:23:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpjc39rdan.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpjc39rdan.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return l[0] != l[1]\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[1] == 0 {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] > 0 {\n        return false\n    }\n    if l[1] > 0 {\n        return false\n    }\n    if l[0] < 0 {\n        return false\n    }\n    if l[1] < 0 {\n        return false\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[1] > l[0] {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp5mienw0j.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp5mienw0j.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp5mienw0j.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        if l[i] == 0 {\n            sum = 0\n            j = i + 1\n            \n            for j < len(l) {\n                if l[j] == 0 {\n                    sum += l[j]\n                    j += 1\n                } else {\n                    break\n                }\n            }\n            \n            if sum == 0 {\n                return true\n            }\n        }\n        \n        i += 1\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp53aq1gsk.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmp53aq1gsk.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmp53aq1gsk.swift:29:19: error: expected 'in' after for-each pattern\n            for j < len(l) {\n                  ^\n/tmp/tmp53aq1gsk.swift:29:19: error: unary operator cannot be separated from its operand\n            for j < len(l) {\n                  ^~\n                   \n/tmp/tmp53aq1gsk.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp53aq1gsk.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmp53aq1gsk.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmp53aq1gsk.swift:29:19: error: '<' is not a prefix unary operator\n            for j < len(l) {\n                  ^\n/tmp/tmp53aq1gsk.swift:29:21: error: cannot find 'len' in scope\n            for j < len(l) {\n                    ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // we use a map to store the sums\n    // we use a set to store the pairs\n    // we use a list to store the values\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we have found a pair\n    // we use a boolean to store whether we\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpjlk9lr0a.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return true\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[1] == 0 {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] + l[1] == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp2xjjxnne.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp2xjjxnne.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp2xjjxnne.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    var i: Int\n    var j: Int\n    var sum: Int\n    var count: Int\n    var result: Bool\n    for i = 0 to len(l) - 1 {\n        for j = i + 1 to len(l) {\n            sum = l[i] + l[j]\n            count = 0\n            while sum != 0 {\n                if sum % 2 == 0 {\n                    count += 1\n                }\n                sum /= 2\n            }\n            if count == 2 {\n                result = true\n                break\n            }\n        }\n        if result {\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp2wob0yw3.swift:21:11: error: expected 'in' after for-each pattern\n    for i = 0 to len(l) - 1 {\n          ^\n/tmp/tmp2wob0yw3.swift:21:11: error: expected Sequence expression for for-each loop\n    for i = 0 to len(l) - 1 {\n          ^\n/tmp/tmp2wob0yw3.swift:22:15: error: expected 'in' after for-each pattern\n        for j = i + 1 to len(l) {\n              ^\n/tmp/tmp2wob0yw3.swift:22:15: error: expected Sequence expression for for-each loop\n        for j = i + 1 to len(l) {\n              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    var i, j Int\n    var sum Int\n    var count Int\n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                count++\n            }\n        }\n    }\n    if count == 2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpolv3qnbs.swift:16:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var i, j Int\n             ^\n/tmp/tmpolv3qnbs.swift:16:14: note: join the identifiers together\n    var i, j Int\n           ~~^~~\n           jInt\n/tmp/tmpolv3qnbs.swift:17:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum Int\n            ^\n/tmp/tmpolv3qnbs.swift:17:13: note: join the identifiers together\n    var sum Int\n        ~~~~^~~\n        sumInt\n/tmp/tmpolv3qnbs.swift:18:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var count Int\n              ^\n/tmp/tmpolv3qnbs.swift:18:15: note: join the identifiers together\n    var count Int\n        ~~~~~~^~~\n        countInt\n/tmp/tmpolv3qnbs.swift:19:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpolv3qnbs.swift:20:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpolv3qnbs.swift:16:9: error: type annotation missing in pattern\n    var i, j Int\n        ^\n/tmp/tmpolv3qnbs.swift:16:12: error: type annotation missing in pattern\n    var i, j Int\n           ^\n/tmp/tmpolv3qnbs.swift:17:9: error: type annotation missing in pattern\n    var sum Int\n        ^\n/tmp/tmpolv3qnbs.swift:18:9: error: type annotation missing in pattern\n    var count Int\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = l[i]\n        for j = i + 1; j < len(l); j++ {\n            if sum == l[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp4u645mm0.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4u645mm0.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4u645mm0.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var count = 0\n    var sum = 0\n    \n    for i := 0; i < len(l); i++ {\n        if l[i] > 0 {\n            count++\n            sum += l[i]\n        }\n    }\n    \n    if count == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        if l[i] > 0 && l[i] < sum/count {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpv3b6gvdp.swift:23:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpv3b6gvdp.swift:23:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpv3b6gvdp.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpv3b6gvdp.swift:34:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpv3b6gvdp.swift:34:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpv3b6gvdp.swift:34:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpv3b6gvdp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    var count: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            count = 0\n            \n            for k := 0; k < len(l); k++ {\n                if sum == l[k] {\n                    count += 1\n                }\n            }\n            \n            if count > 1 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpz1swfy19.swift:25:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz1swfy19.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz1swfy19.swift:30:20: error: expected type\n            for k := 0; k < len(l); k++ {\n                   ^\n                    <#type#>\n/tmp/tmpz1swfy19.swift:30:20: error: expected 'in' after for-each pattern\n            for k := 0; k < len(l); k++ {\n                   ^\n/tmp/tmpz1swfy19.swift:30:20: error: expected Sequence expression for for-each loop\n            for k := 0; k < len(l); k++ {\n                   ^\n/tmp/tmpz1swfy19.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        if l[0] == 0 || l[1] == 0 {\n            return true\n        }\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[1] == 0 {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] + l[1] == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp14pld7ku.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp14pld7ku.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp14pld7ku.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = 0\n        for j < len(l) {\n            if i != j {\n                sum += l[i] + l[j]\n            }\n            j += 1\n        }\n        if sum == 0 {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpsdw0yf7q.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpsdw0yf7q.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpsdw0yf7q.swift:26:15: error: expected 'in' after for-each pattern\n        for j < len(l) {\n              ^\n/tmp/tmpsdw0yf7q.swift:26:15: error: unary operator cannot be separated from its operand\n        for j < len(l) {\n              ^~\n               \n/tmp/tmpsdw0yf7q.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpsdw0yf7q.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpsdw0yf7q.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpsdw0yf7q.swift:26:15: error: '<' is not a prefix unary operator\n        for j < len(l) {\n              ^\n/tmp/tmpsdw0yf7q.swift:26:17: error: cannot find 'len' in scope\n        for j < len(l) {\n                ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = l[i]\n        for j = i + 1; j < len(l); j++ {\n            if sum == 0 {\n                return true\n            }\n            sum += l[j]\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpq9eexgc9.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq9eexgc9.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq9eexgc9.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = l[i]\n        for j = i + 1; j < len(l); j++ {\n            if sum == 0 {\n                return true\n            }\n            sum += l[j]\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpg78culkl.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg78culkl.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg78culkl.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // initialize the sum to zero\n    var sum = 0\n    \n    // iterate through the array\n    for i := 0; i < len(l); i++ {\n        // if the current element is zero, then we need to\n        // check if the next element is zero\n        if l[i] == 0 {\n            // if the next element is zero, then we need to\n            // check if the previous element is zero\n            if i == len(l) - 1 {\n                return false\n            } else if l[i + 1] == 0 {\n                return true\n            }\n        } else {\n            // if the current element is not zero, then we need\n            // to add it to the sum\n            sum += l[i]\n        }\n    }\n    \n    // if the sum is zero, then we need to check if the\n    // previous element is zero\n    if sum == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmphrn19036.swift:24:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmphrn19036.swift:24:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmphrn19036.swift:24:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmphrn19036.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < len(l) {\n        if l[i] == 0 {\n            sum += l[i]\n            j = i\n        }\n        i += 1\n    }\n    if sum == 0 {\n        return false\n    }\n    for j < len(l) {\n        if l[j] == 0 {\n            sum -= l[j]\n        }\n        j += 1\n    }\n    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmprsv8lzjy.swift:22:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmprsv8lzjy.swift:22:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmprsv8lzjy.swift:32:11: error: expected 'in' after for-each pattern\n    for j < len(l) {\n          ^\n/tmp/tmprsv8lzjy.swift:32:11: error: unary operator cannot be separated from its operand\n    for j < len(l) {\n          ^~\n           \n/tmp/tmprsv8lzjy.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprsv8lzjy.swift:22:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmprsv8lzjy.swift:22:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmprsv8lzjy.swift:32:11: error: '<' is not a prefix unary operator\n    for j < len(l) {\n          ^\n/tmp/tmprsv8lzjy.swift:32:13: error: cannot find 'len' in scope\n    for j < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    var i: Int\n    var j: Int\n    var sum: Int\n    var count: Int\n    var result: Bool\n    var found: Bool\n    var i_index: Int\n    var j_index: Int\n    var i_value: Int\n    var j_value: Int\n    var i_value_index: Int\n    var j_value_index: Int\n    var i_value_value: Int\n    var j_value_value: Int\n    var i_value_value_index: Int\n    var j_value_value_index: Int\n    var i_value_value_value: Int\n    var j_value_value_value: Int\n    var i_value_value_value_index: Int\n    var j_value_value_value_index: Int\n    var i_value_value_value_value: Int\n    var j_value_value_value_value: Int\n    var i_value_value_value_value_index: Int\n    var j_value_value_value_value_index: Int\n    var i_value_value_value_value_value: Int\n    var j_value_value_value_value_value: Int\n    var i_value_value_value_value_value_index: Int\n    var j_value_value_value_value_value_index: Int\n    var i_value_value_value_value_value_value: Int\n    var j_value_value_value_value_value_value: Int\n    var i_value_value_value_value_value_value_index: Int\n    var j_value_value_value_value_value_value_index: Int\n    var i_value_value_value_value_value_value_value: Int\n    var j_value_value_value_value_value_value_value: Int\n    var i_value_value_value_value_value_value_value_index: Int\n    var j_value_value_value_value_value_value_value_index: Int\n    var i_value_value_value_value_value_value_value_value: Int\n    var j_value_value_value_value_value_value_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpxmwt2csr.swift:53:9: error: type annotation missing in pattern\n    var j_value_value_value_value_value_value_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        for j < len(l) {\n            if i != j {\n                sum = l[i] + l[j]\n                if sum == 0 {\n                    return true\n                }\n            }\n            j += 1\n        }\n        i += 1\n        j = i\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmput5vw3lv.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmput5vw3lv.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmput5vw3lv.swift:25:15: error: expected 'in' after for-each pattern\n        for j < len(l) {\n              ^\n/tmp/tmput5vw3lv.swift:25:15: error: unary operator cannot be separated from its operand\n        for j < len(l) {\n              ^~\n               \n/tmp/tmput5vw3lv.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmput5vw3lv.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmput5vw3lv.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmput5vw3lv.swift:25:15: error: '<' is not a prefix unary operator\n        for j < len(l) {\n              ^\n/tmp/tmput5vw3lv.swift:25:17: error: cannot find 'len' in scope\n        for j < len(l) {\n                ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = l[i] + l[j]\n        if sum == 0 {\n            return true\n        }\n        if sum < 0 {\n            j = j + 1\n        } else {\n            i = i + 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmporwyajiw.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmporwyajiw.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmporwyajiw.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmporwyajiw.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmporwyajiw.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = 0\n        for j = 0; j < len(l); j++ {\n            if i != j {\n                sum += l[i] + l[j]\n            }\n        }\n        if sum == 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpibu98e5c.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpibu98e5c.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = 0; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpibu98e5c.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    var i, j Int\n    var sum Int\n    var count Int\n    var result Bool\n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                count++\n            }\n        }\n    }\n    if count == 2 {\n        result = true\n    } else {\n        result = false\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpsgwrqpas.swift:16:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var i, j Int\n             ^\n/tmp/tmpsgwrqpas.swift:16:14: note: join the identifiers together\n    var i, j Int\n           ~~^~~\n           jInt\n/tmp/tmpsgwrqpas.swift:17:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum Int\n            ^\n/tmp/tmpsgwrqpas.swift:17:13: note: join the identifiers together\n    var sum Int\n        ~~~~^~~\n        sumInt\n/tmp/tmpsgwrqpas.swift:18:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var count Int\n              ^\n/tmp/tmpsgwrqpas.swift:18:15: note: join the identifiers together\n    var count Int\n        ~~~~~~^~~\n        countInt\n/tmp/tmpsgwrqpas.swift:19:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result Bool\n               ^\n/tmp/tmpsgwrqpas.swift:19:16: note: join the identifiers together\n    var result Bool\n        ~~~~~~~^~~~\n        resultBool\n/tmp/tmpsgwrqpas.swift:20:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsgwrqpas.swift:21:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsgwrqpas.swift:16:9: error: type annotation missing in pattern\n    var i, j Int\n        ^\n/tmp/tmpsgwrqpas.swift:16:12: error: type annotation missing in pattern\n    var i, j Int\n           ^\n/tmp/tmpsgwrqpas.swift:17:9: error: type annotation missing in pattern\n    var sum Int\n        ^\n/tmp/tmpsgwrqpas.swift:18:9: error: type annotation missing in pattern\n    var count Int\n        ^\n/tmp/tmpsgwrqpas.swift:19:9: error: type annotation missing in pattern\n    var result Bool\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n        if l[i] == l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmp8y_yy9h5.swift:28:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp8y_yy9h5.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp8y_yy9h5.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp8y_yy9h5.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp8y_yy9h5.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp8y_yy9h5.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        if l[0] == 0 || l[1] == 0 {\n            return true\n        }\n        return false\n    }\n    if l[0] == 0 {\n        return pairs_sum_to_zero(l[1:])\n    }\n    if l[1] == 0 {\n        return pairs_sum_to_zero(l[0:])\n    }\n    if l[0] + l[1] == 0 {\n        return true\n    }\n    return pairs_sum_to_zero(l[0:]) || pairs_sum_to_zero(l[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpeft1065k.swift:29:37: error: expected ',' separator\n        return pairs_sum_to_zero(l[1:])\n                                    ^\n                                    ,\n/tmp/tmpeft1065k.swift:29:37: error: expected expression in list of expressions\n        return pairs_sum_to_zero(l[1:])\n                                    ^\n/tmp/tmpeft1065k.swift:32:37: error: expected ',' separator\n        return pairs_sum_to_zero(l[0:])\n                                    ^\n                                    ,\n/tmp/tmpeft1065k.swift:32:37: error: expected expression in list of expressions\n        return pairs_sum_to_zero(l[0:])\n                                    ^\n/tmp/tmpeft1065k.swift:37:33: error: expected ',' separator\n    return pairs_sum_to_zero(l[0:]) || pairs_sum_to_zero(l[1:])\n                                ^\n                                ,\n/tmp/tmpeft1065k.swift:37:33: error: expected expression in list of expressions\n    return pairs_sum_to_zero(l[0:]) || pairs_sum_to_zero(l[1:])\n                                ^\n/tmp/tmpeft1065k.swift:37:61: error: expected ',' separator\n    return pairs_sum_to_zero(l[0:]) || pairs_sum_to_zero(l[1:])\n                                                            ^\n                                                            ,\n/tmp/tmpeft1065k.swift:37:61: error: expected expression in list of expressions\n    return pairs_sum_to_zero(l[0:]) || pairs_sum_to_zero(l[1:])\n                                                            ^\n/tmp/tmpeft1065k.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpeft1065k.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpeft1065k.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpeft1065k.swift:29:34: error: missing argument label 'l:' in call\n        return pairs_sum_to_zero(l[1:])\n                                 ^\n                                 l: \n/tmp/tmpeft1065k.swift:29:35: error: cannot convert value of type 'Int' to expected ar",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return l[0] != l[1]\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpo02l4et2.swift:31:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpo02l4et2.swift:31:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpo02l4et2.swift:31:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpo02l4et2.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpo02l4et2.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpo02l4et2.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpo02l4et2.swift:28:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = l[i]\n        for j = i + 1; j < len(l); j++ {\n            if sum == l[j] {\n                return false\n            }\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpn8boioqb.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn8boioqb.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn8boioqb.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var sum = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    \n    if sum == 0 {\n        return false\n    }\n    \n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpni8f1d1x.swift:21:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpni8f1d1x.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmpni8f1d1x.swift:30:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:30:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmpni8f1d1x.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    // Create a map of the elements in the array\n    m := make(map[Int]Bool)\n    for _, v := range l {\n        m[v] = true\n    }\n    \n    // Create a map of the elements in the array\n    // that sum to zero\n    m2 := make(map[Int]Bool)\n    for k, v := range m {\n        if v {\n            if k == 0 {\n                return true\n            }\n            m2[k] = true\n        }\n    }\n    \n    // Check if there are two elements in the array that sum to zero\n    if len(m2) == 2 {\n        return true\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpei9d3jt7.swift:21:6: error: consecutive statements on a line must be separated by ';'\n    m := make(map[Int]Bool)\n     ^\n     ;\n/tmp/tmpei9d3jt7.swift:21:7: error: expected expression\n    m := make(map[Int]Bool)\n      ^\n/tmp/tmpei9d3jt7.swift:22:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpei9d3jt7.swift:22:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpei9d3jt7.swift:29:10: error: expected 'in' after for-each pattern\n    for k, v := range m {\n         ^\n/tmp/tmpei9d3jt7.swift:29:10: error: expected Sequence expression for for-each loop\n    for k, v := range m {\n         ^\n/tmp/tmpei9d3jt7.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpei9d3jt7.swift:21:5: error: cannot find 'm' in scope\n    m := make(map[Int]Bool)\n    ^\n/tmp/tmpei9d3jt7.swift:39:8: error: cannot find 'len' in scope\n    if len(m2) == 2 {\n       ^~~\n/tmp/tmpei9d3jt7.swift:39:12: error: cannot find 'm2' in scope\n    if len(m2) == 2 {\n           ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp30wu3r0l.swift:28:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp30wu3r0l.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp30wu3r0l.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp30wu3r0l.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp30wu3r0l.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp30wu3r0l.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = l[i] + l[j]\n        if sum == 0 {\n            return true\n        }\n        \n        if sum < 0 {\n            i++\n        } else {\n            j++\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpqdocmcue.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpqdocmcue.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpqdocmcue.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpqdocmcue.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpqdocmcue.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = l[i] + l[j]\n        if sum == 0 {\n            return true\n        }\n        \n        if sum > 0 {\n            j = j + 1\n        } else {\n            i = i + 1\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpvnfp19fm.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpvnfp19fm.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpvnfp19fm.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpvnfp19fm.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpvnfp19fm.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        if l[i] == 0 {\n            continue\n        }\n        \n        sum = 0\n        for j < len(l) {\n            if l[j] == 0 {\n                break\n            }\n            \n            sum += l[j]\n            j += 1\n        }\n        \n        if sum == 0 {\n            return true\n        }\n        \n        i += 1\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmpkghfpp55.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpkghfpp55.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpkghfpp55.swift:30:15: error: expected 'in' after for-each pattern\n        for j < len(l) {\n              ^\n/tmp/tmpkghfpp55.swift:30:15: error: unary operator cannot be separated from its operand\n        for j < len(l) {\n              ^~\n               \n/tmp/tmpkghfpp55.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpkghfpp55.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpkghfpp55.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpkghfpp55.swift:30:15: error: '<' is not a prefix unary operator\n        for j < len(l) {\n              ^\n/tmp/tmpkghfpp55.swift:30:17: error: cannot find 'len' in scope\n        for j < len(l) {\n                ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        sum = l[i] + l[j]\n        if sum == 0 {\n            return true\n        }\n        if sum < 0 {\n            j = j + 1\n        } else {\n            i = i + 1\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmphw82piht.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmphw82piht.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmphw82piht.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmphw82piht.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmphw82piht.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i = 0; i < len(l); i++ {\n        sum = l[i]\n        for j = i + 1; j < len(l); j++ {\n            if sum == l[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp4u645mm0.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4u645mm0.swift:26:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4u645mm0.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if len(l) == 2 {\n        return true\n    }\n    var sum: Int = 0\n    for i := 0; i < len(l); i++ {\n        sum += l[i]\n    }\n    if sum == 0 {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp631bzs6p.swift:26:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp631bzs6p.swift:26:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp631bzs6p.swift:26:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp631bzs6p.swift:32:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp631bzs6p.swift:32:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp631bzs6p.swift:32:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp631bzs6p.swift:33:16: error: expected type\n        for j := i + 1; j < len(l); j++ {\n               ^\n                <#type#>\n/tmp/tmp631bzs6p.swift:33:16: error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmp631bzs6p.swift:33:16: error: expected Sequence expression for for-each loop\n        for j := i + 1; j < len(l); j++ {\n               ^\n/tmp/tmp631bzs6p.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp631bzs6p.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp631bzs6p.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i < len(l) {\n        if l[i] == 0 {\n            sum = 0\n            j = i\n            for j < len(l) {\n                if l[j] != 0 {\n                    sum += l[j]\n                    break\n                }\n                j += 1\n            }\n            if sum == 0 {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293233,
      "stdout": "",
      "stderr": "/tmp/tmp5ibz1j3v.swift:24:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmp5ibz1j3v.swift:24:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmp5ibz1j3v.swift:28:19: error: expected 'in' after for-each pattern\n            for j < len(l) {\n                  ^\n/tmp/tmp5ibz1j3v.swift:28:19: error: unary operator cannot be separated from its operand\n            for j < len(l) {\n                  ^~\n                   \n/tmp/tmp5ibz1j3v.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp5ibz1j3v.swift:24:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmp5ibz1j3v.swift:24:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmp5ibz1j3v.swift:28:19: error: '<' is not a prefix unary operator\n            for j < len(l) {\n                  ^\n/tmp/tmp5ibz1j3v.swift:28:21: error: cannot find 'len' in scope\n            for j < len(l) {\n                    ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    \n    var i: Int\n    var j: Int\n    var sum: Int\n    \n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmpzxsnrwkp.swift:24:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:25:9: error: C-style for statement has been removed in Swift 3\n        for j = i + 1; j < len(l); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxsnrwkp.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return false\n    }\n    if l[0] == 0 {\n        return false\n    }\n    if l[len(l) - 1] == 0 {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] == 0 {\n            return false\n        }\n        if l[i] == l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)",
      "timestamp": 1664293232,
      "stdout": "",
      "stderr": "/tmp/tmp8y_yy9h5.swift:28:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp8y_yy9h5.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp8y_yy9h5.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp8y_yy9h5.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp8y_yy9h5.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp8y_yy9h5.swift:25:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] == 0 {\n         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}