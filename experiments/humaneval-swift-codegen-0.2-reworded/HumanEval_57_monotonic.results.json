{
  "name": "HumanEval_57_monotonic",
  "language": "swift",
  "prompt": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpy6cd4y3v.swift:19:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpy6cd4y3v.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpy6cd4y3v.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpy6cd4y3v.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmpy6cd4y3v.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp90pgspmb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp90pgspmb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if len(l) == 3 {\n        return l[0] <= l[1] && l[1] <= l[2]\n    }\n    if len(l) == 4 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n    }\n    if len(l) == 5 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4]\n    }\n    if len(l) == 6 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5]\n    }\n    if len(l) == 7 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6]\n    }\n    if len(l) == 8 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7]\n    }\n    if len(l) == 9 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8]\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpuoab2fdk.swift:62:43: error: expected '}' at end of brace statement\nassert(monotonic(l: [9, 9, 9, 9]) == true)\n                                          ^\n/tmp/tmpuoab2fdk.swift:9:34: note: to match this opening '{'\nfunc monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmpuoab2fdk.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 3 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 4 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:25:8: error: cannot find 'len' in scope\n    if len(l) == 5 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:28:8: error: cannot find 'len' in scope\n    if len(l) == 6 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:31:8: error: cannot find 'len' in scope\n    if len(l) == 7 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:34:8: error: cannot find 'len' in scope\n    if len(l) == 8 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:37:8: error: cannot find 'len' in scope\n    if len(l) == 9 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:43:6: error: operator functions can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp30rvlejn.swift:22:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp30rvlejn.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp30rvlejn.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp30rvlejn.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp30rvlejn.swift:22:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp30rvlejn.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp30rvlejn.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp30rvlejn.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpez9l8p3y.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpez9l8p3y.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp90pgspmb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp90pgspmb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpos5gsnc6.swift:22:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpos5gsnc6.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpos5gsnc6.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpos5gsnc6.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpos5gsnc6.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpos5gsnc6.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l)-1; i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpxklymqko.swift:16:12: error: expected type\n    for i := 1; i < len(l)-1; i++ {\n           ^\n            <#type#>\n/tmp/tmpxklymqko.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l)-1; i++ {\n           ^\n/tmp/tmpxklymqko.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l)-1; i++ {\n           ^\n/tmp/tmpxklymqko.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return true\n    }\n    if l[0] < l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp6w42jr75.swift:19:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp6w42jr75.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp6w42jr75.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp6w42jr75.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpos5gsnc6.swift:22:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpos5gsnc6.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpos5gsnc6.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpos5gsnc6.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpos5gsnc6.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpos5gsnc6.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpo_f65pl0.swift:16:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpo_f65pl0.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[len(l) - 1] < l[len(l) - 2] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i - 1] && l[i] > l[i + 1] {\n            return false\n        }\n        if l[i] < l[i - 1] && l[i] < l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpf6beynz7.swift:25:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpf6beynz7.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpf6beynz7.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpf6beynz7.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpf6beynz7.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpf6beynz7.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpf6beynz7.swift:22:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] < l[len(l) - 2] {\n         ^~~\n/tmp/tmpf6beynz7.swift:22:26: error: cannot find 'len' in scope\n    if l[len(l) - 1] < l[len(l) - 2] {\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] < l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpz7pdhalo.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpz7pdhalo.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpz7pdhalo.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpz7pdhalo.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpo_f65pl0.swift:16:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpo_f65pl0.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[len(l) - 1] < l[len(l) - 2] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i - 1] && l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp43ojidyk.swift:25:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp43ojidyk.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp43ojidyk.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp43ojidyk.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp43ojidyk.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp43ojidyk.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp43ojidyk.swift:22:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] < l[len(l) - 2] {\n         ^~~\n/tmp/tmp43ojidyk.swift:22:26: error: cannot find 'len' in scope\n    if l[len(l) - 1] < l[len(l) - 2] {\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[0] < l[1] {\n        return true\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n        if l[i] > l[i-1] {\n            return true\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp91mhyzzw.swift:25:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp91mhyzzw.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp91mhyzzw.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp91mhyzzw.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp91mhyzzw.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp91mhyzzw.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpii831qhy.swift:19:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpii831qhy.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpii831qhy.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpii831qhy.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmpii831qhy.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpez9l8p3y.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpez9l8p3y.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[0] < l[1] {\n        return true\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] > l[i - 1] {\n            return true\n        }\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpfpfgarhu.swift:25:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpfpfgarhu.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpfpfgarhu.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpfpfgarhu.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpfpfgarhu.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpfpfgarhu.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpvt_gh1wh.swift:22:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpvt_gh1wh.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpvt_gh1wh.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpvt_gh1wh.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpvt_gh1wh.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpvt_gh1wh.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp30rvlejn.swift:22:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp30rvlejn.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp30rvlejn.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp30rvlejn.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[0] < l[1] {\n        return false\n    }\n    return monotonic(l[2:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpp2_20tj1.swift:22:25: error: expected ',' separator\n    return monotonic(l[2:])\n                        ^\n                        ,\n/tmp/tmpp2_20tj1.swift:22:25: error: expected expression in list of expressions\n    return monotonic(l[2:])\n                        ^\n/tmp/tmpp2_20tj1.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpp2_20tj1.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpp2_20tj1.swift:22:22: error: missing argument label 'l:' in call\n    return monotonic(l[2:])\n                     ^\n                     l: \n/tmp/tmpp2_20tj1.swift:22:23: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return monotonic(l[2:])\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpo_f65pl0.swift:16:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpo_f65pl0.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l)-1; i++ {\n        if l[i] > l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp_02njn4o.swift:16:12: error: expected type\n    for i := 1; i < len(l)-1; i++ {\n           ^\n            <#type#>\n/tmp/tmp_02njn4o.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l)-1; i++ {\n           ^\n/tmp/tmp_02njn4o.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l)-1; i++ {\n           ^\n/tmp/tmp_02njn4o.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[len(l)-1] < l[len(l)-2] {\n        return false\n    }\n    for i := 1; i < len(l)-1; i++ {\n        if l[i] > l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp_g2dgznx.swift:25:12: error: expected type\n    for i := 1; i < len(l)-1; i++ {\n           ^\n            <#type#>\n/tmp/tmp_g2dgznx.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l)-1; i++ {\n           ^\n/tmp/tmp_g2dgznx.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l)-1; i++ {\n           ^\n/tmp/tmp_g2dgznx.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp_g2dgznx.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp_g2dgznx.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp_g2dgznx.swift:22:10: error: cannot find 'len' in scope\n    if l[len(l)-1] < l[len(l)-2] {\n         ^~~\n/tmp/tmp_g2dgznx.swift:22:24: error: cannot find 'len' in scope\n    if l[len(l)-1] < l[len(l)-2] {\n                       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    return monotonic(l[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp_p_r8uk3.swift:19:25: error: expected ',' separator\n    return monotonic(l[1:])\n                        ^\n                        ,\n/tmp/tmp_p_r8uk3.swift:19:25: error: expected expression in list of expressions\n    return monotonic(l[1:])\n                        ^\n/tmp/tmp_p_r8uk3.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmp_p_r8uk3.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp_p_r8uk3.swift:19:22: error: missing argument label 'l:' in call\n    return monotonic(l[1:])\n                     ^\n                     l: \n/tmp/tmp_p_r8uk3.swift:19:23: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return monotonic(l[1:])\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpcn5u8p_s.swift:22:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpcn5u8p_s.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpcn5u8p_s.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpcn5u8p_s.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpcn5u8p_s.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpcn5u8p_s.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpy6cd4y3v.swift:19:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpy6cd4y3v.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpy6cd4y3v.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpy6cd4y3v.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmpy6cd4y3v.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp30rvlejn.swift:22:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp30rvlejn.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp30rvlejn.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp30rvlejn.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpez9l8p3y.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpez9l8p3y.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] < l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpz7pdhalo.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpz7pdhalo.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpz7pdhalo.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpz7pdhalo.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[len(l) - 1] < l[len(l) - 2] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i - 1] && l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp43ojidyk.swift:25:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp43ojidyk.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp43ojidyk.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp43ojidyk.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp43ojidyk.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp43ojidyk.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp43ojidyk.swift:22:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] < l[len(l) - 2] {\n         ^~~\n/tmp/tmp43ojidyk.swift:22:26: error: cannot find 'len' in scope\n    if l[len(l) - 1] < l[len(l) - 2] {\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    return monotonic(l[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp_p_r8uk3.swift:19:25: error: expected ',' separator\n    return monotonic(l[1:])\n                        ^\n                        ,\n/tmp/tmp_p_r8uk3.swift:19:25: error: expected expression in list of expressions\n    return monotonic(l[1:])\n                        ^\n/tmp/tmp_p_r8uk3.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmp_p_r8uk3.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp_p_r8uk3.swift:19:22: error: missing argument label 'l:' in call\n    return monotonic(l[1:])\n                     ^\n                     l: \n/tmp/tmp_p_r8uk3.swift:19:23: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return monotonic(l[1:])\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpy6cd4y3v.swift:19:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpy6cd4y3v.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpy6cd4y3v.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpy6cd4y3v.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmpy6cd4y3v.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp90pgspmb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp90pgspmb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp7bxf4g_a.swift:19:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp7bxf4g_a.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp7bxf4g_a.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp7bxf4g_a.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmp7bxf4g_a.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp90pgspmb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp90pgspmb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp90pgspmb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp90pgspmb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp90pgspmb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp90pgspmb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpez9l8p3y.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpez9l8p3y.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[len(l) - 1] < l[len(l) - 2] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i - 1] && l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp43ojidyk.swift:25:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp43ojidyk.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp43ojidyk.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp43ojidyk.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp43ojidyk.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp43ojidyk.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp43ojidyk.swift:22:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] < l[len(l) - 2] {\n         ^~~\n/tmp/tmp43ojidyk.swift:22:26: error: cannot find 'len' in scope\n    if l[len(l) - 1] < l[len(l) - 2] {\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    return monotonic(l[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp_p_r8uk3.swift:19:25: error: expected ',' separator\n    return monotonic(l[1:])\n                        ^\n                        ,\n/tmp/tmp_p_r8uk3.swift:19:25: error: expected expression in list of expressions\n    return monotonic(l[1:])\n                        ^\n/tmp/tmp_p_r8uk3.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmp_p_r8uk3.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp_p_r8uk3.swift:19:22: error: missing argument label 'l:' in call\n    return monotonic(l[1:])\n                     ^\n                     l: \n/tmp/tmp_p_r8uk3.swift:19:23: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return monotonic(l[1:])\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpez9l8p3y.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpez9l8p3y.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpj3pif2ou.swift:16:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpj3pif2ou.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpj3pif2ou.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpj3pif2ou.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp90pgspmb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp90pgspmb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpp7m6lrgd.swift:19:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpp7m6lrgd.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpp7m6lrgd.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpp7m6lrgd.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmpp7m6lrgd.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpez9l8p3y.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpez9l8p3y.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return true\n    }\n    if l[0] < l[1] {\n        return false\n    }\n    return monotonic(l[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpg00f33_g.swift:19:25: error: expected ',' separator\n    return monotonic(l[1:])\n                        ^\n                        ,\n/tmp/tmpg00f33_g.swift:19:25: error: expected expression in list of expressions\n    return monotonic(l[1:])\n                        ^\n/tmp/tmpg00f33_g.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmpg00f33_g.swift:19:22: error: missing argument label 'l:' in call\n    return monotonic(l[1:])\n                     ^\n                     l: \n/tmp/tmpg00f33_g.swift:19:23: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return monotonic(l[1:])\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpez9l8p3y.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpez9l8p3y.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpp7m6lrgd.swift:19:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpp7m6lrgd.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpp7m6lrgd.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpp7m6lrgd.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmpp7m6lrgd.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if len(l) == 3 {\n        return l[0] <= l[1] && l[1] <= l[2]\n    }\n    if len(l) == 4 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n    }\n    if len(l) == 5 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4]\n    }\n    if len(l) == 6 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5]\n    }\n    if len(l) == 7 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6]\n    }\n    if len(l) == 8 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7]\n    }\n    if len(l) == 9 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8]\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpuoab2fdk.swift:62:43: error: expected '}' at end of brace statement\nassert(monotonic(l: [9, 9, 9, 9]) == true)\n                                          ^\n/tmp/tmpuoab2fdk.swift:9:34: note: to match this opening '{'\nfunc monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmpuoab2fdk.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 3 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 4 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:25:8: error: cannot find 'len' in scope\n    if len(l) == 5 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:28:8: error: cannot find 'len' in scope\n    if len(l) == 6 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:31:8: error: cannot find 'len' in scope\n    if len(l) == 7 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:34:8: error: cannot find 'len' in scope\n    if len(l) == 8 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:37:8: error: cannot find 'len' in scope\n    if len(l) == 9 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:43:6: error: operator functions can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp30rvlejn.swift:22:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp30rvlejn.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp30rvlejn.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp30rvlejn.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[0] < l[1] {\n        return true\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n        if l[i] > l[i - 1] {\n            return true\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpf869rmk4.swift:25:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpf869rmk4.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpf869rmk4.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpf869rmk4.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpf869rmk4.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpf869rmk4.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpo_f65pl0.swift:16:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpo_f65pl0.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    return monotonic(l[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp_p_r8uk3.swift:19:25: error: expected ',' separator\n    return monotonic(l[1:])\n                        ^\n                        ,\n/tmp/tmp_p_r8uk3.swift:19:25: error: expected expression in list of expressions\n    return monotonic(l[1:])\n                        ^\n/tmp/tmp_p_r8uk3.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmp_p_r8uk3.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp_p_r8uk3.swift:19:22: error: missing argument label 'l:' in call\n    return monotonic(l[1:])\n                     ^\n                     l: \n/tmp/tmp_p_r8uk3.swift:19:23: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return monotonic(l[1:])\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp77o2cxy2.swift:19:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp77o2cxy2.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp77o2cxy2.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp77o2cxy2.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmp77o2cxy2.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if len(l) == 3 {\n        return l[0] <= l[1] && l[1] <= l[2]\n    }\n    if len(l) == 4 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n    }\n    if len(l) == 5 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4]\n    }\n    if len(l) == 6 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5]\n    }\n    if len(l) == 7 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6]\n    }\n    if len(l) == 8 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7]\n    }\n    if len(l) == 9 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8]\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpuoab2fdk.swift:62:43: error: expected '}' at end of brace statement\nassert(monotonic(l: [9, 9, 9, 9]) == true)\n                                          ^\n/tmp/tmpuoab2fdk.swift:9:34: note: to match this opening '{'\nfunc monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmpuoab2fdk.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 3 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 4 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:25:8: error: cannot find 'len' in scope\n    if len(l) == 5 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:28:8: error: cannot find 'len' in scope\n    if len(l) == 6 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:31:8: error: cannot find 'len' in scope\n    if len(l) == 7 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:34:8: error: cannot find 'len' in scope\n    if len(l) == 8 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:37:8: error: cannot find 'len' in scope\n    if len(l) == 9 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:43:6: error: operator functions can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpez9l8p3y.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpez9l8p3y.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    return monotonic(l[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp_p_r8uk3.swift:19:25: error: expected ',' separator\n    return monotonic(l[1:])\n                        ^\n                        ,\n/tmp/tmp_p_r8uk3.swift:19:25: error: expected expression in list of expressions\n    return monotonic(l[1:])\n                        ^\n/tmp/tmp_p_r8uk3.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmp_p_r8uk3.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp_p_r8uk3.swift:19:22: error: missing argument label 'l:' in call\n    return monotonic(l[1:])\n                     ^\n                     l: \n/tmp/tmp_p_r8uk3.swift:19:23: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return monotonic(l[1:])\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpez9l8p3y.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpez9l8p3y.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpez9l8p3y.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpez9l8p3y.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp90pgspmb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp90pgspmb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[len(l)-1] < l[len(l)-2] {\n        return false\n    }\n    for i := 1; i < len(l)-1; i++ {\n        if l[i] > l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp_g2dgznx.swift:25:12: error: expected type\n    for i := 1; i < len(l)-1; i++ {\n           ^\n            <#type#>\n/tmp/tmp_g2dgznx.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l)-1; i++ {\n           ^\n/tmp/tmp_g2dgznx.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l)-1; i++ {\n           ^\n/tmp/tmp_g2dgznx.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp_g2dgznx.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp_g2dgznx.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp_g2dgznx.swift:22:10: error: cannot find 'len' in scope\n    if l[len(l)-1] < l[len(l)-2] {\n         ^~~\n/tmp/tmp_g2dgznx.swift:22:24: error: cannot find 'len' in scope\n    if l[len(l)-1] < l[len(l)-2] {\n                       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpo_f65pl0.swift:16:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpo_f65pl0.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[0] < l[1] {\n        return true\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n        if l[i] > l[i-1] {\n            return true\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp91mhyzzw.swift:25:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp91mhyzzw.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp91mhyzzw.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp91mhyzzw.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp91mhyzzw.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp91mhyzzw.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp30rvlejn.swift:22:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp30rvlejn.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp30rvlejn.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp30rvlejn.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp30rvlejn.swift:22:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp30rvlejn.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp30rvlejn.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp30rvlejn.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpo_f65pl0.swift:16:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpo_f65pl0.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp7bxf4g_a.swift:19:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp7bxf4g_a.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp7bxf4g_a.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp7bxf4g_a.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmp7bxf4g_a.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    return monotonic(l[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp_p_r8uk3.swift:19:25: error: expected ',' separator\n    return monotonic(l[1:])\n                        ^\n                        ,\n/tmp/tmp_p_r8uk3.swift:19:25: error: expected expression in list of expressions\n    return monotonic(l[1:])\n                        ^\n/tmp/tmp_p_r8uk3.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmp_p_r8uk3.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp_p_r8uk3.swift:19:22: error: missing argument label 'l:' in call\n    return monotonic(l[1:])\n                     ^\n                     l: \n/tmp/tmp_p_r8uk3.swift:19:23: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return monotonic(l[1:])\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpp7m6lrgd.swift:19:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpp7m6lrgd.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpp7m6lrgd.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpp7m6lrgd.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmpp7m6lrgd.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp77o2cxy2.swift:19:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp77o2cxy2.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp77o2cxy2.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp77o2cxy2.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmp77o2cxy2.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpo_f65pl0.swift:16:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpo_f65pl0.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpo_f65pl0.swift:16:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpo_f65pl0.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[0] < l[1] {\n        return true\n    }\n    if l[1] - l[0] > 1 {\n        return false\n    }\n    if l[0] - l[1] > 1 {\n        return true\n    }\n    return monotonic(l[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp4x90o_0l.swift:31:25: error: expected ',' separator\n    return monotonic(l[1:])\n                        ^\n                        ,\n/tmp/tmp4x90o_0l.swift:31:25: error: expected expression in list of expressions\n    return monotonic(l[1:])\n                        ^\n/tmp/tmp4x90o_0l.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp4x90o_0l.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp4x90o_0l.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp4x90o_0l.swift:31:22: error: missing argument label 'l:' in call\n    return monotonic(l[1:])\n                     ^\n                     l: \n/tmp/tmp4x90o_0l.swift:31:23: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return monotonic(l[1:])\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpo_f65pl0.swift:16:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpo_f65pl0.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpo_f65pl0.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpbxyuxmv0.swift:22:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxyuxmv0.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpbxyuxmv0.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpbxyuxmv0.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpbxyuxmv0.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpbxyuxmv0.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if len(l) == 3 {\n        return l[0] <= l[1] && l[1] <= l[2]\n    }\n    if len(l) == 4 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n    }\n    if len(l) == 5 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4]\n    }\n    if len(l) == 6 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5]\n    }\n    if len(l) == 7 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6]\n    }\n    if len(l) == 8 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7]\n    }\n    if len(l) == 9 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8]\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpuoab2fdk.swift:62:43: error: expected '}' at end of brace statement\nassert(monotonic(l: [9, 9, 9, 9]) == true)\n                                          ^\n/tmp/tmpuoab2fdk.swift:9:34: note: to match this opening '{'\nfunc monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmpuoab2fdk.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 3 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 4 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:25:8: error: cannot find 'len' in scope\n    if len(l) == 5 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:28:8: error: cannot find 'len' in scope\n    if len(l) == 6 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:31:8: error: cannot find 'len' in scope\n    if len(l) == 7 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:34:8: error: cannot find 'len' in scope\n    if len(l) == 8 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:37:8: error: cannot find 'len' in scope\n    if len(l) == 9 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:43:6: error: operator functions can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpez9l8p3y.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpez9l8p3y.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp7bxf4g_a.swift:19:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp7bxf4g_a.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp7bxf4g_a.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp7bxf4g_a.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmp7bxf4g_a.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpos5gsnc6.swift:22:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpos5gsnc6.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpos5gsnc6.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmpos5gsnc6.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpos5gsnc6.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpos5gsnc6.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[len(l) - 1] < l[len(l) - 2] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i - 1] && l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp43ojidyk.swift:25:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp43ojidyk.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp43ojidyk.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp43ojidyk.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp43ojidyk.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp43ojidyk.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp43ojidyk.swift:22:10: error: cannot find 'len' in scope\n    if l[len(l) - 1] < l[len(l) - 2] {\n         ^~~\n/tmp/tmp43ojidyk.swift:22:26: error: cannot find 'len' in scope\n    if l[len(l) - 1] < l[len(l) - 2] {\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp30rvlejn.swift:22:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp30rvlejn.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp30rvlejn.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp30rvlejn.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp90pgspmb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp90pgspmb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] < l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpz7pdhalo.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpz7pdhalo.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpz7pdhalo.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpz7pdhalo.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[len(l)-1] < l[len(l)-2] {\n        return false\n    }\n    for i := 1; i < len(l)-1; i++ {\n        if l[i] > l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp_g2dgznx.swift:25:12: error: expected type\n    for i := 1; i < len(l)-1; i++ {\n           ^\n            <#type#>\n/tmp/tmp_g2dgznx.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l)-1; i++ {\n           ^\n/tmp/tmp_g2dgznx.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l)-1; i++ {\n           ^\n/tmp/tmp_g2dgznx.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp_g2dgznx.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp_g2dgznx.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp_g2dgznx.swift:22:10: error: cannot find 'len' in scope\n    if l[len(l)-1] < l[len(l)-2] {\n         ^~~\n/tmp/tmp_g2dgznx.swift:22:24: error: cannot find 'len' in scope\n    if l[len(l)-1] < l[len(l)-2] {\n                       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp30rvlejn.swift:22:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp30rvlejn.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp30rvlejn.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp30rvlejn.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l)-1; i++ {\n        if l[i] > l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp_02njn4o.swift:16:12: error: expected type\n    for i := 1; i < len(l)-1; i++ {\n           ^\n            <#type#>\n/tmp/tmp_02njn4o.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l)-1; i++ {\n           ^\n/tmp/tmp_02njn4o.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l)-1; i++ {\n           ^\n/tmp/tmp_02njn4o.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    if l[0] < l[1] {\n        return true\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n        if l[i] > l[i-1] {\n            return true\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp91mhyzzw.swift:25:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp91mhyzzw.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp91mhyzzw.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp91mhyzzw.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp91mhyzzw.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp91mhyzzw.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    return monotonic(l[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp_p_r8uk3.swift:19:25: error: expected ',' separator\n    return monotonic(l[1:])\n                        ^\n                        ,\n/tmp/tmp_p_r8uk3.swift:19:25: error: expected expression in list of expressions\n    return monotonic(l[1:])\n                        ^\n/tmp/tmp_p_r8uk3.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmp_p_r8uk3.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp_p_r8uk3.swift:19:22: error: missing argument label 'l:' in call\n    return monotonic(l[1:])\n                     ^\n                     l: \n/tmp/tmp_p_r8uk3.swift:19:23: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return monotonic(l[1:])\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] < l[1] {\n        return monotonic(l[1:])\n    }\n    return monotonic(l[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp5ozqf3cn.swift:17:29: error: expected ',' separator\n        return monotonic(l[1:])\n                            ^\n                            ,\n/tmp/tmp5ozqf3cn.swift:17:29: error: expected expression in list of expressions\n        return monotonic(l[1:])\n                            ^\n/tmp/tmp5ozqf3cn.swift:19:25: error: expected ',' separator\n    return monotonic(l[1:])\n                        ^\n                        ,\n/tmp/tmp5ozqf3cn.swift:19:25: error: expected expression in list of expressions\n    return monotonic(l[1:])\n                        ^\n/tmp/tmp5ozqf3cn.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmp5ozqf3cn.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp5ozqf3cn.swift:17:26: error: missing argument label 'l:' in call\n        return monotonic(l[1:])\n                         ^\n                         l: \n/tmp/tmp5ozqf3cn.swift:17:27: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n        return monotonic(l[1:])\n                          ^\n/tmp/tmp5ozqf3cn.swift:19:22: error: missing argument label 'l:' in call\n    return monotonic(l[1:])\n                     ^\n                     l: \n/tmp/tmp5ozqf3cn.swift:19:23: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return monotonic(l[1:])\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpez9l8p3y.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpez9l8p3y.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpez9l8p3y.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] < l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpz7pdhalo.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmpz7pdhalo.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpz7pdhalo.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmpz7pdhalo.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp90pgspmb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmp90pgspmb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmp90pgspmb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmprblufyyb.swift:16:12: error: expected type\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n            <#type#>\n/tmp/tmprblufyyb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l) - 1; i++ {\n           ^\n/tmp/tmprblufyyb.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp7bxf4g_a.swift:19:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp7bxf4g_a.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp7bxf4g_a.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp7bxf4g_a.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmp7bxf4g_a.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 2; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp30rvlejn.swift:22:12: error: expected type\n    for i := 2; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp30rvlejn.swift:22:12: error: expected 'in' after for-each pattern\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := 2; i < len(l); i++ {\n           ^\n/tmp/tmp30rvlejn.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp30rvlejn.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp30rvlejn.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return true\n    }\n    if l[0] < l[1] {\n        return false\n    }\n    return monotonic(l[2:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpqudtsstg.swift:19:25: error: expected ',' separator\n    return monotonic(l[2:])\n                        ^\n                        ,\n/tmp/tmpqudtsstg.swift:19:25: error: expected expression in list of expressions\n    return monotonic(l[2:])\n                        ^\n/tmp/tmpqudtsstg.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmpqudtsstg.swift:19:22: error: missing argument label 'l:' in call\n    return monotonic(l[2:])\n                     ^\n                     l: \n/tmp/tmpqudtsstg.swift:19:23: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return monotonic(l[2:])\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return true\n    }\n    if len(l) == 2 {\n        return l[0] <= l[1]\n    }\n    if len(l) == 3 {\n        return l[0] <= l[1] && l[1] <= l[2]\n    }\n    if len(l) == 4 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n    }\n    if len(l) == 5 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4]\n    }\n    if len(l) == 6 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5]\n    }\n    if len(l) == 7 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6]\n    }\n    if len(l) == 8 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7]\n    }\n    if len(l) == 9 {\n        return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8]\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmpuoab2fdk.swift:62:43: error: expected '}' at end of brace statement\nassert(monotonic(l: [9, 9, 9, 9]) == true)\n                                          ^\n/tmp/tmpuoab2fdk.swift:9:34: note: to match this opening '{'\nfunc monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmpuoab2fdk.swift:10:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:13:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:19:8: error: cannot find 'len' in scope\n    if len(l) == 3 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:22:8: error: cannot find 'len' in scope\n    if len(l) == 4 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:25:8: error: cannot find 'len' in scope\n    if len(l) == 5 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:28:8: error: cannot find 'len' in scope\n    if len(l) == 6 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:31:8: error: cannot find 'len' in scope\n    if len(l) == 7 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:34:8: error: cannot find 'len' in scope\n    if len(l) == 8 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:37:8: error: cannot find 'len' in scope\n    if len(l) == 9 {\n       ^~~\n/tmp/tmpuoab2fdk.swift:43:6: error: operator functions can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] > l[1] {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)",
      "timestamp": 1664293569,
      "stdout": "",
      "stderr": "/tmp/tmp8lft8fdf.swift:16:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp8lft8fdf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp8lft8fdf.swift:10:8: error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}