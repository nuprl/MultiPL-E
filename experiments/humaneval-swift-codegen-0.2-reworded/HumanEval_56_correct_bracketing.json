{
  "name": "HumanEval_56_correct_bracketing",
  "language": "swift",
  "prompt": "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets: \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n/// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets: \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)",
  "completions": [
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_char string\n    var closing_bracket_char string\n    var opening_bracket_index_set bool\n    var closing_bracket_index_set bool\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_stack []string\n    var closing_bracket_stack []string\n    var opening_bracket_stack_set bool\n    var closing_bracket_stack_set bool\n    var opening_bracket_stack_index int\n    var closing_bracket_stack_index int\n    var opening_bracket_stack_index_set bool\n    var closing_bracket_stack_index_set bool\n    var opening_bracket_stack_index_stack []int\n    var closing_bracket_stack_index_stack []int\n    var opening_bracket_stack_index_stack_set bool\n    var closing_bracket_stack_index_stack_set bool\n    var opening_bracket_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_set bool\n    var closing_bracket_stack_index_stack_index_set bool\n    var opening_bracket_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_set bool\n    var closing_bracket_stack_index_stack_index_stack_set bool\n    var opening_bracket_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_set bool\n    var closing_bracket_stack_index_stack_index_stack_index_set bool\n    var opening_bracket_stack_index_stack",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            opening_bracket_count += 1\n            opening_bracket_index = i\n            opening_bracket_index_stack = append(opening_bracket_index_stack, opening_bracket_index)\n        } else if brackets[i] == '>' {\n            closing_bracket_count += 1\n            closing_bracket_index = i\n            closing_bracket_index_stack = append(closing_bracket_index_stack, closing_bracket_index)\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    for i := 0; i < len(opening_bracket_index_stack); i++ {\n        if opening_bracket_index_stack[i] != closing_bracket_index_stack[i] {\n            return false\n        }\n    }\n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    var open_brackets = 0\n    var close_brackets = 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            close_brackets += 1\n        }\n    }\n    return open_brackets == close_brackets",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n        if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    opening_brackets := 0\n    closing_brackets := 0\n    \n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            opening_brackets += 1\n        } else if brackets[i] == '>' {\n            closing_brackets += 1\n        }\n    }\n    \n    if opening_brackets == closing_brackets {\n        return true\n    } else {\n        return false\n    }",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    if open_brackets == 0 {\n        return true\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n    }\n    \n    if open_brackets == 0 {\n        return true\n    }\n    \n    open_brackets = 0\n    for i := len(brackets) - 1; i >= 0; i-- {\n        if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n    }\n    \n    if open_brackets == 0 {\n        return true\n    }\n    \n    open_brackets = 0\n    for i := len(brackets) - 1; i >= 0; i-- {\n        if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    var opening_bracket_count = 0\n    var closing_bracket_count = 0\n    var opening_brackets = []\n    var closing_brackets = []\n    for _, char := range brackets {\n        if char == \"<\" {\n            opening_bracket_count += 1\n            opening_brackets = append(opening_brackets, char)\n        } else if char == \">\" {\n            closing_bracket_count += 1\n            closing_brackets = append(closing_brackets, char)\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    for i := 0; i < len(opening_brackets); i += 1 {\n        if opening_brackets[i] != closing_brackets[i] {\n            return false\n        }\n    }\n    return true",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] != '<' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    \n    if len(stack) != 0 {\n        return false\n    }\n    \n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    stack := []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] != '<' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n        if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    stack:=[]int{0}\n    for i := 1; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            stack = append(stack, i)\n        } else {\n            if len(stack) == 0 {\n                return false\n            }\n            if brackets[stack[len(stack) - 1]] != '>' {\n                return false\n            }\n            stack = stack[0 : len(stack) - 1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    var opening_bracket_count = 0\n    var closing_bracket_count = 0\n    \n    for _, char := range brackets {\n        if char == \"<\" {\n            opening_bracket_count += 1\n        } else if char == \">\" {\n            closing_bracket_count += 1\n        }\n    }\n    \n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    \n    for i := 0; i < len(brackets) - 1; i++ {\n        if brackets[i] == \"<\" && brackets[i + 1] != \">\" {\n            return false\n        }\n    }\n    \n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_char String\n    var closing_bracket_char String\n    var opening_bracket_index_in_brackets int\n    var closing_bracket_index_in_brackets int\n    var opening_bracket_index_in_brackets_2 int\n    var closing_bracket_index_in_brackets_2 int\n    var opening_bracket_index_in_brackets_3 int\n    var closing_bracket_index_in_brackets_3 int\n    var opening_bracket_index_in_brackets_4 int\n    var closing_bracket_index_in_brackets_4 int\n    var opening_bracket_index_in_brackets_5 int\n    var closing_bracket_index_in_brackets_5 int\n    var opening_bracket_index_in_brackets_6 int\n    var closing_bracket_index_in_brackets_6 int\n    var opening_bracket_index_in_brackets_7 int\n    var closing_bracket_index_in_brackets_7 int\n    var opening_bracket_index_in_brackets_8 int\n    var closing_bracket_index_in_brackets_8 int\n    var opening_bracket_index_in_brackets_9 int\n    var closing_bracket_index_in_brackets_9 int\n    var opening_bracket_index_in_brackets_10 int\n    var closing_bracket_index_in_brackets_10 int\n    var opening_bracket_index_in_brackets_11 int\n    var closing_bracket_index_in_brackets_11 int\n    var opening_bracket_index_in_brackets_12 int\n    var closing_bracket_index_in_brackets_12 int\n    var opening_bracket_index_in_brackets_13 int\n    var closing_bracket_index_in_brackets_13 int\n    var opening_bracket_index_in_brackets_",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n    }\n    \n    if open_brackets == 0 {\n        return true\n    }\n    \n    open_brackets = 0\n    for i := len(brackets) - 1; i >= 0; i-- {\n        if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets == 0 {\n            return true\n        }\n    }\n    \n    return false",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    for _, char := range brackets {\n        if char == '<' {\n            opening_bracket_count += 1\n        } else if char == '>' {\n            closing_bracket_count += 1\n        }\n    }\n    if opening_bracket_count == closing_bracket_count {\n        return true\n    } else {\n        return false\n    }",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_char string\n    var closing_bracket_char string\n    var opening_bracket_index_in_string int\n    var closing_bracket_index_in_string int\n    var opening_bracket_index_in_string_inclusive bool\n    var closing_bracket_index_in_string_inclusive bool\n    var opening_bracket_index_in_string_exclusive int\n    var closing_bracket_index_in_string_exclusive int\n    var opening_bracket_index_in_string_exclusive_inclusive bool\n    var closing_bracket_index_in_string_exclusive_inclusive bool\n    var opening_bracket_index_in_string_exclusive_exclusive int\n    var closing_bracket_index_in_string_exclusive_exclusive int\n    var opening_bracket_index_in_string_exclusive_exclusive_inclusive bool\n    var closing_bracket_index_in_string_exclusive_exclusive_inclusive bool\n    var opening_bracket_index_in_string_exclusive_exclusive_exclusive int\n    var closing_bracket_index_in_string_exclusive_exclusive_inclusive bool\n    var opening_bracket_index_in_string_exclusive_exclusive_exclusive_inclusive bool\n    var opening_bracket_index_in_string_exclusive_exclusive_exclusive_inclusive int\n    var closing_bracket_index_in_string_exclusive_exclusive_inclusive bool\n    var opening_bracket_index_in_string_exclusive_exclusive_exclusive_inclusive bool\n    var opening_bracket_index_in_string_exclusive_exclusive_exclusive_inclusive int\n    var closing_bracket_index_in_string_exclusive_exclusive_inclusive bool\n    var opening_bracket_index_in_string_exclusive_exclusive_exclusive_inclusive bool\n    var opening_bracket_index_in_string_exclusive_exclusive_exclusive_inclusive int\n    var closing_bracket_index_in_string_exclusive_exclusive_inclusive bool\n",
    "    if brackets == \"\" {\n        return true\n    }\n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_stack []int\n    var closing_bracket_stack []int\n    \n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            opening_bracket_count += 1\n            opening_bracket_index = i\n            opening_bracket_index_stack = append(opening_bracket_index_stack, opening_bracket_index)\n            opening_bracket_stack = append(opening_bracket_stack, opening_bracket_count)\n        } else if brackets[i] == '>' {\n            closing_bracket_count += 1\n            closing_bracket_index = i\n            closing_bracket_index_stack = append(closing_bracket_index_stack, closing_bracket_index)\n            closing_bracket_stack = append(closing_bracket_stack, closing_bracket_count)\n        }\n    }\n    \n    for i := len(opening_bracket_stack) - 1; i >= 0; i-- {\n        if opening_bracket_stack[i] != closing_bracket_stack[i] {\n            return false\n        }\n    }\n    \n    return true",
    "    if len(brackets) == 0 {\n        return true\n    }\n    stack := make([]rune, 0)\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, c)\n        } else {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] != '<' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_char string\n    var closing_bracket_char string\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_char_stack []string\n    var closing_bracket_char_stack []string\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            opening_bracket_count += 1\n            opening_bracket_index = i\n            opening_bracket_char = brackets[i]\n            opening_bracket_index_stack = append(opening_bracket_index_stack, opening_bracket_index)\n            opening_bracket_char_stack = append(opening_bracket_char_stack, opening_bracket_char)\n        } else if brackets[i] == '>' {\n            closing_bracket_count += 1\n            closing_bracket_index = i\n            closing_bracket_char = brackets[i]\n            closing_bracket_index_stack = append(closing_bracket_index_stack, closing_bracket_index)\n            closing_bracket_char_stack = append(closing_bracket_char_stack, closing_bracket_char)\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    for i := 0; i < len(opening_bracket_index_stack); i++ {\n        if opening_bracket_index_stack[i] != closing_bracket_index_stack[i] {\n            return false\n        }\n    }\n    return true",
    "    var bracket_count int\n    var opening_bracket string\n    var closing_bracket string\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_count int\n    var opening_bracket_stack []string\n    var closing_bracket_stack []string\n    var result bool\n    \n    for i, char := range brackets {\n        if char == '<' {\n            opening_bracket_stack = append(opening_bracket_stack, opening_bracket)\n            opening_bracket = \"\"\n            opening_bracket_index = i\n            opening_bracket_count = 1\n        } else if char == '>' {\n            closing_bracket = opening_bracket\n            closing_bracket_index = i\n            closing_bracket_stack = append(closing_bracket_stack, closing_bracket)\n            opening_bracket_count = 0\n            opening_bracket = \"\"\n        } else {\n            opening_bracket += char\n        }\n    }\n    \n    if opening_bracket_count != 0 {\n        return false\n    }\n    \n    for i, char := range brackets {\n        if char == '<' {\n            opening_bracket_count = 1\n        } else if char == '>' {\n            opening_bracket_count = 0\n        }\n        \n        if opening_bracket_count == 0 {\n            if char == '<' {\n                opening_bracket = \"\"\n                opening_bracket_index = i\n                opening_bracket_count = 1\n            } else if char == '>' {\n                opening_bracket = \"\"\n                opening_bracket_index = i\n                opening_bracket_count = 1\n            } else {\n                opening_bracket += char\n            }\n        }\n    }\n    \n    if opening_bracket_count != 0 {\n        return false\n    }\n    \n    opening_bracket_count = 0\n    for i, char := range brackets {\n        if char == '<' {\n            opening_bracket_count += 1\n        } else if char == '>' {\n            opening_",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[0 : len(stack)-1]\n        }\n    }\n    \n    if len(stack) != 0 {\n        return false\n    }\n    \n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[0 : len(stack) - 1]\n        }\n    }\n    \n    if len(stack) != 0 {\n        return false\n    }\n    \n    return true",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_stack []int\n    var closing_bracket_stack []int\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            opening_bracket_count += 1\n            opening_bracket_index = i\n            opening_bracket_index_stack = append(opening_bracket_index_stack, opening_bracket_index)\n            opening_bracket_stack = append(opening_bracket_stack, opening_bracket_count)\n        } else if brackets[i] == '>' {\n            closing_bracket_count += 1\n            closing_bracket_index = i\n            closing_bracket_index_stack = append(closing_bracket_index_stack, closing_bracket_index)\n            closing_bracket_stack = append(closing_bracket_stack, closing_bracket_count)\n        }\n    }\n    for i := len(opening_bracket_stack) - 1; i >= 0; i-- {\n        if opening_bracket_stack[i] != closing_bracket_stack[i] {\n            return false\n        }\n    }\n    return true",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, char := range brackets {\n        if char == '<' {\n            stack = append(stack, '<')\n        } else if char == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] != '<' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    \n    return len(stack) == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    var opening_bracket_count int\n    var closing_bracket_count int\n    for _, char := range brackets {\n        if char == '<' {\n            opening_bracket_count += 1\n        } else if char == '>' {\n            closing_bracket_count += 1\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    for i := 0; i < len(brackets) - 1; i++ {\n        if brackets[i] == '<' && brackets[i + 1] != '>' {\n            return false\n        }\n    }\n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            opening_bracket_count += 1\n            opening_bracket_index = i\n            opening_bracket_index_stack = append(opening_bracket_index_stack, opening_bracket_index)\n        } else if brackets[i] == '>' {\n            closing_bracket_count += 1\n            closing_bracket_index = i\n            closing_bracket_index_stack = append(closing_bracket_index_stack, closing_bracket_index)\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    for i := 0; i < len(opening_bracket_index_stack); i++ {\n        if opening_bracket_index_stack[i] != closing_bracket_index_stack[i] {\n            return false\n        }\n    }\n    return true",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_set []int\n    var closing_bracket_index_set []int\n    var opening_bracket_set []int\n    var closing_bracket_set []int\n    var opening_bracket_index_set_length int\n    var closing_bracket_index_set_length int\n    var opening_bracket_set_length int\n    var closing_bracket_set_length int\n    var opening_bracket_index_set_index int\n    var closing_bracket_index_set_index int\n    var opening_bracket_set_index int\n    var closing_bracket_set_index int\n    var opening_bracket_index_set_index_set []int\n    var closing_bracket_index_set_index_set []int\n    var opening_bracket_set_index_set []int\n    var closing_bracket_set_index_set []int\n    var opening_bracket_index_set_index_set_length int\n    var closing_bracket_index_set_index_set_length int\n    var opening_bracket_set_index_set_length int\n    var closing_bracket_set_index_set_length int\n    var opening_bracket_index_set_index_set_index int\n    var closing_bracket_index_set_index_set_index int\n    var opening_bracket_set_index_set_index int\n    var closing_bracket_set_index_set_index int\n    var opening_bracket_index_set_index_set_index_set []int\n    var closing_bracket_index_set_index_set_index_set []int\n    var opening_bracket_set_index_set_index_set []int\n    var closing_bracket_set_index_set_index_set []int\n    var opening_bracket_index_set_index_set_index_set_length int\n    var closing_bracket_index_set_index_set_index_set",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, char := range brackets {\n        if char == '<' {\n            stack = append(stack, char)\n        } else if char == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] == '<' {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    \n    return len(stack) == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    \n    return len(stack) == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    stack := []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] == '<' {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n        if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    stack := make([]rune, 0)\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] != '<' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    \n    if len(stack) != 0 {\n        return false\n    }\n    \n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            if open_brackets == 0 {\n                return false\n            } else {\n                open_brackets -= 1\n            }\n        }\n    }\n    \n    if open_brackets != 0 {\n        return false\n    }\n    \n    return true",
    "    var opening_bracket_count = 0\n    var closing_bracket_count = 0\n    var opening_bracket_index = 0\n    var closing_bracket_index = 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            opening_bracket_count += 1\n            opening_bracket_index = i\n        } else if brackets[i] == '>' {\n            closing_bracket_count += 1\n            closing_bracket_index = i\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    for i := 0; i < opening_bracket_count; i++ {\n        if brackets[opening_bracket_index + 1] != '>' {\n            return false\n        }\n        opening_bracket_index += 1\n        closing_bracket_index += 1\n    }\n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n        if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, c)\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    \n    if len(stack) != 0 {\n        return false\n    }\n    \n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    var stack = []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] == '<' {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_char string\n    var closing_bracket_char string\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_char_stack []string\n    var closing_bracket_char_stack []string\n    var opening_bracket_index_stack_length int\n    var closing_bracket_index_stack_length int\n    var opening_bracket_index_stack_index int\n    var closing_bracket_index_stack_index int\n    var opening_bracket_char_stack_length int\n    var closing_bracket_char_stack_length int\n    var opening_bracket_char_stack_index int\n    var closing_bracket_char_stack_index int\n    var opening_bracket_index_stack_index_max int\n    var closing_bracket_index_stack_index_max int\n    var opening_bracket_index_stack_index_min int\n    var closing_bracket_index_stack_index_min int\n    var opening_bracket_char_stack_index_max int\n    var closing_bracket_char_stack_index_max int\n    var opening_bracket_char_stack_index_min int\n    var closing_bracket_char_stack_index_min int\n    var opening_bracket_index_stack_index_max int\n    var closing_bracket_index_stack_index_min int\n    var opening_bracket_index_stack_index_min int\n    var closing_bracket_index_stack_index_min int\n    var opening_bracket_index_stack_index_min int\n    var closing_bracket_index_stack_index_min int\n    var opening_bracket_index_stack_index_min int\n    var closing_bracket_index_stack_index_min int\n    var opening_bracket_index_stack_index_min int\n    var closing_bracket_index_stack_index_min int\n",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        \n        if open_brackets < 0 {\n            return false\n        }\n    }\n    \n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    for _, char := range brackets {\n        if char == '<' {\n            opening_bracket_count += 1\n        } else if char == '>' {\n            closing_bracket_count += 1\n        }\n    }\n    return opening_bracket_count == closing_bracket_count",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, char := range brackets {\n        if char == '<' {\n            stack = append(stack, char)\n        } else if char == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] != '<' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    \n    if len(stack) != 0 {\n        return false\n    }\n    \n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            if open_brackets == 0 {\n                return false\n            } else {\n                open_brackets -= 1\n            }\n        }\n    }\n    \n    if open_brackets == 0 {\n        return true\n    } else {\n        return false\n    }",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    var opening_brackets = 0\n    var closing_brackets = 0\n    for _, c := range brackets {\n        if c == '<' {\n            opening_brackets += 1\n        } else if c == '>' {\n            closing_brackets += 1\n        }\n    }\n    if opening_brackets == 0 || closing_brackets == 0 {\n        return false\n    }\n    if opening_brackets != closing_brackets {\n        return false\n    }\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            if i == 0 || brackets[i-1] != '<' {\n                return false\n            }\n        }\n    }\n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n        if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, char := range brackets {\n        if char == '<' {\n            stack = append(stack, char)\n        } else if char == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] != '<' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    \n    return len(stack) == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    var opening_bracket_count int\n    var closing_bracket_count int\n    for _, char := range brackets {\n        if char == '<' {\n            opening_bracket_count += 1\n        } else if char == '>' {\n            closing_bracket_count += 1\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    for i := 0; i < len(brackets) - 1; i++ {\n        if brackets[i] == '<' && brackets[i + 1] != '>' {\n            return false\n        }\n    }\n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    var stack: List[String] = []\n    for _, c := range brackets {\n        if c == '<' {\n            stack.Push(c)\n        } else {\n            if stack.IsEmpty() {\n                return false\n            }\n            if stack.Peek() != '<' {\n                return false\n            }\n            stack.Pop()\n        }\n    }\n    if stack.IsEmpty() {\n        return true\n    }\n    return false",
    "    if brackets == \"\" {\n        return true\n    }\n    var opening_brackets = 0\n    var closing_brackets = 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            opening_brackets += 1\n        } else if brackets[i] == '>' {\n            closing_brackets += 1\n        }\n    }\n    return opening_brackets == closing_brackets",
    "    if brackets == \"\" {\n        return true\n    }\n    var opening_brackets = 0\n    var closing_brackets = 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            opening_brackets += 1\n        } else if brackets[i] == '>' {\n            closing_brackets += 1\n        }\n    }\n    return opening_brackets == closing_brackets",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n    }\n    \n    if open_brackets == 0 {\n        return true\n    }\n    \n    open_brackets = 0\n    for i := len(brackets) - 1; i >= 0; i-- {\n        if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        \n        if open_brackets < 0 {\n            return false\n        }\n    }\n    \n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, char := range brackets {\n        if char == '<' {\n            stack = append(stack, '<')\n        } else if char == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    \n    return len(stack) == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    if open_brackets == 0 {\n        return true\n    }\n    \n    return false",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    for i := range brackets {\n        if brackets[i] == '<' {\n            opening_bracket_count += 1\n            opening_bracket_index = i\n            opening_bracket_index_stack = append(opening_bracket_index_stack, opening_bracket_index)\n        } else if brackets[i] == '>' {\n            closing_bracket_count += 1\n            closing_bracket_index = i\n            closing_bracket_index_stack = append(closing_bracket_index_stack, closing_bracket_index)\n        }\n    }\n    for {\n        if len(opening_bracket_index_stack) == 0 {\n            return true\n        }\n        opening_bracket_index = opening_bracket_index_stack[len(opening_bracket_index_stack) - 1]\n        opening_bracket_index_stack = opening_bracket_index_stack[:len(opening_bracket_index_stack) - 1]\n        if opening_bracket_count == closing_bracket_count {\n            continue\n        }\n        return false\n    }",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    stack:=[]\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            stack = append(stack, i)\n        } else if brackets[i] == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := len(stack) - 1\n            stack[last] = i\n            stack = stack[:last]\n        }\n    }\n    return len(stack) == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    stack:=[]int{}\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            stack = append(stack, i)\n        } else if brackets[i] == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := len(stack) - 1\n            stack[last] = i\n            stack = stack[:last]\n        }\n    }\n    return len(stack) == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    var opening_brackets = 0\n    var closing_brackets = 0\n    for _, c := range brackets {\n        if c == '<' {\n            opening_brackets += 1\n        } else if c == '>' {\n            closing_brackets += 1\n        }\n    }\n    return opening_brackets == closing_brackets",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    for i, char := range brackets {\n        if char == '<' {\n            opening_bracket_count += 1\n            opening_bracket_index = i\n            opening_bracket_index_stack = append(opening_bracket_index_stack, opening_bracket_index)\n        } else if char == '>' {\n            closing_bracket_count += 1\n            closing_bracket_index = i\n            closing_bracket_index_stack = append(closing_bracket_index_stack, closing_bracket_index)\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    for i := len(opening_bracket_index_stack) - 1; i >= 0; i -= 1 {\n        opening_bracket_index = opening_bracket_index_stack[i]\n        closing_bracket_index = closing_bracket_index_stack[i]\n        if opening_bracket_index > closing_bracket_index {\n            return false\n        }\n    }\n    return true",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_char string\n    var closing_bracket_char string\n    var opening_bracket_index_found bool\n    var closing_bracket_index_found bool\n    var opening_bracket_index_found_bool bool\n    var opening_bracket_index_found_bool_bool bool\n    var opening_bracket_index_found_bool_bool_bool bool\n    var opening_bracket_index_found_bool_bool_bool_bool bool\n    var opening_bracket_index_found_bool_bool_bool_bool_bool bool\n    var opening_bracket_index_found_bool_bool_bool_bool_bool_bool bool\n    var opening_bracket_index_found_bool_bool_bool_bool_bool_bool_bool bool\n    var opening_bracket_index_found_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var opening_bracket_index_found_bool_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var opening_bracket_index_found_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var opening_bracket_index_found_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var opening_bracket_index_found_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var opening_bracket_index_found_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var opening_bracket_index_found_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var opening_bracket_index_found_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool_bool bool\n    var opening_bracket_index",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n        if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_set = make([]int, 0)\n    var closing_bracket_index_set = make([]int, 0)\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            opening_bracket_count++\n            opening_bracket_index = i\n            opening_bracket_index_set = append(opening_bracket_index_set, opening_bracket_index)\n        } else if brackets[i] == '>' {\n            closing_bracket_count++\n            closing_bracket_index = i\n            closing_bracket_index_set = append(closing_bracket_index_set, closing_bracket_index)\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    for i := 0; i < len(opening_bracket_index_set); i++ {\n        if opening_bracket_index_set[i] != closing_bracket_index_set[i] {\n            return false\n        }\n    }\n    return true",
    "    var opening_bracket_count = 0\n    var closing_bracket_count = 0\n    for _, c := range brackets {\n        if c == '<' {\n            opening_bracket_count += 1\n        } else if c == '>' {\n            closing_bracket_count += 1\n        }\n    }\n    return opening_bracket_count == closing_bracket_count",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_set []int\n    var closing_bracket_index_set []int\n    var opening_bracket_index_set_len int\n    var opening_bracket_index_set_len_max int\n    var opening_bracket_index_set_len_min int\n    var opening_bracket_index_set_len_sum int\n    var opening_bracket_index_set_len_sum_square int\n    var opening_bracket_index_set_len_square_root int\n    var opening_bracket_index_set_len_cubed int\n    var opening_bracket_index_set_len_cubed_root int\n    var opening_bracket_index_set_len_reciprocal int\n    var opening_bracket_index_set_len_reciprocal_square int\n    var opening_bracket_index_set_len_reciprocal_cubed int\n    var opening_bracket_index_set_len_reciprocal_square_root int\n    var opening_bracket_index_set_len_reciprocal_cubed_root int\n    var opening_bracket_index_set_len_log int\n    var opening_bracket_index_set_len_log_square int\n    var opening_bracket_index_set_len_log_cubed int\n    var opening_bracket_index_set_len_log_square_root int\n    var opening_bracket_index_set_len_log_cubed_root int\n    var opening_bracket_index_set_len_exp int\n    var opening_bracket_index_set_len_exp_square int\n    var opening_bracket_index_set_len_exp_cubed int\n    var opening_bracket_index_set_len_exp_square_root int\n    var opening_bracket_index_set_len_exp_cubed_root int\n    var opening_bracket_index_set_len",
    "    var open_bracket_count int\n    var close_bracket_count int\n    var opening_bracket string\n    var closing_bracket string\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_found bool\n    var closing_bracket_index_found bool\n    var opening_bracket_index_found_in_closing_bracket bool\n    var opening_bracket_index_found_in_opening_bracket bool\n    var opening_bracket_index_found_in_closing_bracket_in_opening_bracket bool\n    var opening_bracket_index_found_in_opening_bracket_in_closing_bracket bool\n    var opening_bracket_index_found_in_closing_bracket_in_opening_bracket bool\n    var opening_bracket_index_found_in_opening_bracket_in_closing_bracket bool\n    var opening_bracket_index_found_in_closing_bracket_in_opening_bracket bool\n    var opening_bracket_index_found_in_opening_bracket_in_closing_bracket bool\n    var opening_bracket_index_found_in_closing_bracket_in_opening_bracket bool\n    var opening_bracket_index_found_in_opening_bracket_in_closing_bracket bool\n    var opening_bracket_index_found_in_closing_bracket_in_opening_bracket bool\n    var opening_bracket_index_found_in_opening_bracket_in_closing_bracket bool\n    var opening_bracket_index_found_in_closing_bracket_in_opening_bracket bool\n    var opening_bracket_index_found_in_opening_bracket_in_closing_bracket bool\n    var opening_bracket_index_found_in_closing_bracket_in_opening_bracket bool\n    var opening_bracket_index_found_in_opening_bracket_in_closing_bracket bool\n    var opening_bracket_index_found_in_closing",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n    }\n    \n    if open_brackets == 0 {\n        return true\n    }\n    \n    close_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '>' {\n            close_brackets += 1\n        }\n    }\n    \n    if close_brackets == open_brackets {\n        return true\n    }\n    \n    return false",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[0 : len(stack) - 1]\n        }\n    }\n    \n    if len(stack) != 0 {\n        return false\n    }\n    return true",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_stack []string\n    var closing_bracket_stack []string\n    for i, char := range brackets {\n        if char == '<' {\n            opening_bracket_count += 1\n            opening_bracket_index = i\n            opening_bracket_index_stack = append(opening_bracket_index_stack, opening_bracket_index)\n            opening_bracket_stack = append(opening_bracket_stack, brackets[opening_bracket_index])\n        } else if char == '>' {\n            closing_bracket_count += 1\n            closing_bracket_index = i\n            closing_bracket_index_stack = append(closing_bracket_index_stack, closing_bracket_index)\n            closing_bracket_stack = append(closing_bracket_stack, brackets[closing_bracket_index])\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    for i := len(opening_bracket_stack) - 1; i >= 0; i -= 1 {\n        if opening_bracket_stack[i] != closing_bracket_stack[i] {\n            return false\n        }\n    }\n    return true",
    "    var open_bracket_count = 0\n    var close_bracket_count = 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_bracket_count += 1\n        } else if c == '>' {\n            close_bracket_count += 1\n        }\n    }\n    return open_bracket_count == close_bracket_count",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    for _, char := range brackets {\n        if char == '<' {\n            opening_bracket_count += 1\n        } else if char == '>' {\n            closing_bracket_count += 1\n        }\n    }\n    if opening_bracket_count == closing_bracket_count {\n        return true\n    } else {\n        return false\n    }",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n    }\n    \n    if open_brackets == 0 {\n        return true\n    }\n    \n    close_brackets := 0\n    for i := len(brackets) - 1; i >= 0; i-- {\n        if brackets[i] == '>' {\n            close_brackets += 1\n        }\n    }\n    \n    if close_brackets == open_brackets {\n        return true\n    }\n    \n    return false",
    "    if brackets == \"\" {\n        return true\n    }\n    var opening_bracket_count int\n    var closing_bracket_count int\n    for _, c := range brackets {\n        if c == '<' {\n            opening_bracket_count += 1\n        } else if c == '>' {\n            closing_bracket_count += 1\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    for i := 0; i < len(brackets) - 1; i++ {\n        if brackets[i] == '<' && brackets[i + 1] != '>' {\n            return false\n        }\n    }\n    return true",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n    }\n    \n    if open_brackets == 0 {\n        return true\n    }\n    \n    open_brackets_count := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets_count += 1\n        }\n        \n        if brackets[i] == '>' {\n            open_brackets_count -= 1\n        }\n        \n        if open_brackets_count < 0 {\n            return false\n        }\n    }\n    \n    return open_brackets_count == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_stack []int\n    var closing_bracket_stack []int\n    var opening_bracket_stack_index int\n    var closing_bracket_stack_index int\n    var opening_bracket_stack_index_stack []int\n    var closing_bracket_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index_stack_",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, char := range brackets {\n        if char == '<' {\n            stack = append(stack, '<')\n        } else if char == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] == '<' {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    \n    return len(stack) == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    var open_brackets = 0\n    var close_brackets = 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            close_brackets += 1\n        }\n    }\n    if open_brackets != close_brackets {\n        return false\n    }\n    for i := 0; i < len(brackets) - 1; i++ {\n        if brackets[i] == '<' && brackets[i + 1] != '>' {\n            return false\n        }\n    }\n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, char := range brackets {\n        if char == '<' {\n            stack = append(stack, '<')\n        } else if char == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    \n    if len(stack) != 0 {\n        return false\n    }\n    \n    return true",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_set []int\n    var closing_bracket_index_set []int\n    var opening_bracket_set []int\n    var closing_bracket_set []int\n    var opening_bracket_index_set_len int\n    var closing_bracket_index_set_len int\n    var opening_bracket_set_len int\n    var closing_bracket_set_len int\n    var opening_bracket_index_set_len_max int\n    var opening_bracket_index_set_len_min int\n    var opening_bracket_set_len_max int\n    var opening_bracket_set_len_min int\n    var closing_bracket_index_set_len_max int\n    var closing_bracket_index_set_len_min int\n    var closing_bracket_set_len_max int\n    var closing_bracket_set_len_min int\n    var opening_bracket_index_set_len_sum int\n    var opening_bracket_set_len_sum int\n    var closing_bracket_index_set_len_sum int\n    var closing_bracket_set_len_sum int\n    var opening_bracket_index_set_len_avg float64\n    var opening_bracket_set_len_avg float64\n    var closing_bracket_index_set_len_avg float64\n    var closing_bracket_set_len_avg float64\n    var opening_bracket_index_set_len_stddev float64\n    var opening_bracket_set_len_stddev float64\n    var closing_bracket_index_set_len_stddev float64\n    var closing_bracket_set_len_stddev float64\n    var opening_bracket_index_set_len_sum_square float64\n    var opening_bracket_set_len_sum_square float64\n    var closing_bracket_index_set_len_sum_square",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_stack []int\n    var closing_bracket_stack []int\n    var opening_bracket_stack_index int\n    var closing_bracket_stack_index int\n    var opening_bracket_stack_index_stack []int\n    var closing_bracket_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index_stack_",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] == '<' {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    \n    return len(stack) == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    var opening_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var opening_bracket_count_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_count_stack []int\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            opening_bracket_count++\n            opening_bracket_index = i\n            opening_bracket_index_stack = append(opening_bracket_index_stack, opening_bracket_index)\n            opening_bracket_count_stack = append(opening_bracket_count_stack, opening_bracket_count)\n        } else if brackets[i] == '>' {\n            closing_bracket_index = i\n            closing_bracket_index_stack = append(closing_bracket_index_stack, closing_bracket_index)\n            opening_bracket_count--\n            if opening_bracket_count == 0 {\n                if opening_bracket_index_stack[len(opening_bracket_index_stack) - 1] == opening_bracket_index {\n                    opening_bracket_count_stack[len(opening_bracket_count_stack) - 1]--\n                    if opening_bracket_count_stack[len(opening_bracket_count_stack) - 1] == 0 {\n                        return true\n                    }\n                } else {\n                    return false\n                }\n            }\n        }\n    }\n    return false",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, r := range brackets {\n        if r == '<' {\n            stack = append(stack, '<')\n        } else if r == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] != '<' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    \n    if len(stack) != 0 {\n        return false\n    }\n    \n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    \n    return len(stack) == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_char string\n    var closing_bracket_char string\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_stack []string\n    var closing_bracket_stack []string\n    var opening_bracket_stack_index int\n    var closing_bracket_stack_index int\n    var opening_bracket_stack_index_stack []int\n    var closing_bracket_stack_index_stack []int\n    var opening_bracket_stack_index_stack_length int\n    var closing_bracket_stack_index_stack_length int\n    var opening_bracket_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_length int\n    var closing_bracket_stack_index_stack_index_stack_length int\n    var opening_bracket_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_length int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_length int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index_stack []int",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_stack []int\n    var closing_bracket_stack []int\n    var opening_bracket_stack_index int\n    var closing_bracket_stack_index int\n    var opening_bracket_stack_index_stack []int\n    var closing_bracket_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index_stack_",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    \n    for i, char := range brackets {\n        if char == '<' {\n            opening_bracket_count += 1\n            opening_bracket_index = i\n            opening_bracket_index_stack = append(opening_bracket_index_stack, opening_bracket_index)\n        } else if char == '>' {\n            closing_bracket_count += 1\n            closing_bracket_index = i\n            closing_bracket_index_stack = append(closing_bracket_index_stack, closing_bracket_index)\n        }\n    }\n    \n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    \n    for i := len(opening_bracket_index_stack) - 1; i >= 0; i -= 1 {\n        opening_bracket_index = opening_bracket_index_stack[i]\n        closing_bracket_index = closing_bracket_index_stack[i]\n        if opening_bracket_index > closing_bracket_index {\n            return false\n        }\n    }\n    \n    return true",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_char string\n    var closing_bracket_char string\n    var opening_bracket_index_in_string int\n    var closing_bracket_index_in_string int\n    var opening_bracket_index_in_string_2 int\n    var closing_bracket_index_in_string_2 int\n    var opening_bracket_index_in_string_3 int\n    var closing_bracket_index_in_string_3 int\n    var opening_bracket_index_in_string_4 int\n    var closing_bracket_index_in_string_4 int\n    var opening_bracket_index_in_string_5 int\n    var closing_bracket_index_in_string_5 int\n    var opening_bracket_index_in_string_6 int\n    var closing_bracket_index_in_string_6 int\n    var opening_bracket_index_in_string_7 int\n    var closing_bracket_index_in_string_7 int\n    var opening_bracket_index_in_string_8 int\n    var closing_bracket_index_in_string_8 int\n    var opening_bracket_index_in_string_9 int\n    var closing_bracket_index_in_string_9 int\n    var opening_bracket_index_in_string_10 int\n    var closing_bracket_index_in_string_10 int\n    var opening_bracket_index_in_string_11 int\n    var closing_bracket_index_in_string_11 int\n    var opening_bracket_index_in_string_12 int\n    var closing_bracket_index_in_string_12 int\n    var opening_bracket_index_in_string_13 int\n    var closing_bracket_index_in_string_13 int\n    var opening_bracket_index_in_string_14 int\n    var closing_bracket_index_in_string_14 int\n    var opening_bracket_index",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            if open_brackets == 0 {\n                return false\n            }\n            open_brackets -= 1\n        }\n    }\n    \n    if open_brackets != 0 {\n        return false\n    }\n    \n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n        if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    var opening_bracket_count = 0\n    var closing_bracket_count = 0\n    var opening_brackets = []\n    var closing_brackets = []\n    for _, c := range brackets {\n        if c == '<' {\n            opening_bracket_count += 1\n            opening_brackets = append(opening_brackets, c)\n        } else if c == '>' {\n            closing_bracket_count += 1\n            closing_brackets = append(closing_brackets, c)\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    for i := 0; i < len(opening_brackets); i += 1 {\n        if opening_brackets[i] != closing_brackets[i] {\n            return false\n        }\n    }\n    return true",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    for _, char := range brackets {\n        if char == '<' {\n            opening_bracket_count += 1\n        } else if char == '>' {\n            closing_bracket_count += 1\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    var opening_bracket_count = 0\n    var closing_bracket_count = 0\n    \n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            opening_bracket_count += 1\n        } else if brackets[i] == '>' {\n            closing_bracket_count += 1\n        }\n    }\n    \n    if opening_bracket_count == closing_bracket_count {\n        return true\n    } else {\n        return false\n    }",
    "    var open_brackets = 0\n    var close_brackets = 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            close_brackets += 1\n        }\n    }\n    return open_brackets == close_brackets",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    var opening_bracket_count int\n    var closing_bracket_count int\n    for _, char := range brackets {\n        if char == '<' {\n            opening_bracket_count += 1\n        } else if char == '>' {\n            closing_bracket_count += 1\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    for i := 0; i < len(brackets) - 1; i += 1 {\n        if brackets[i] == '<' && brackets[i + 1] != '>' {\n            return false\n        }\n    }\n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    var opening_brackets = 0\n    var closing_brackets = 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            opening_brackets += 1\n        } else if brackets[i] == '>' {\n            closing_brackets += 1\n        }\n    }\n    if opening_brackets == closing_brackets {\n        return true\n    }\n    return false",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    var open_brackets = 0\n    var close_brackets = 0\n    \n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            close_brackets += 1\n        }\n    }\n    \n    if open_brackets == close_brackets {\n        return true\n    } else {\n        return false\n    }",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n        if brackets[i] == '>' {\n            if open_brackets == 0 {\n                return false\n            }\n            open_brackets -= 1\n        }\n    }\n    \n    if open_brackets != 0 {\n        return false\n    }\n    \n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_char string\n    var closing_bracket_char string\n    var opening_bracket_index_set bool\n    var closing_bracket_index_set bool\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_stack []string\n    var closing_bracket_stack []string\n    var opening_bracket_stack_index int\n    var closing_bracket_stack_index int\n    var opening_bracket_stack_set bool\n    var closing_bracket_stack_set bool\n    var opening_bracket_stack_index_set bool\n    var closing_bracket_stack_index_set bool\n    var opening_bracket_stack_index_stack []int\n    var closing_bracket_stack_index_stack []int\n    var opening_bracket_stack_index_stack_set bool\n    var closing_bracket_stack_index_stack_set bool\n    var opening_bracket_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_set bool\n    var closing_bracket_stack_index_stack_index_set bool\n    var opening_bracket_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_set bool\n    var closing_bracket_stack_index_stack_index_stack_set bool\n    var opening_bracket_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_set bool\n    var closing_bracket_stack_index_stack_index_stack_index_set bool\n    var opening_bracket_stack_index_stack",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            if open_brackets == 0 {\n                return false\n            }\n            open_brackets -= 1\n        }\n    }\n    \n    if open_brackets != 0 {\n        return false\n    }\n    \n    return true",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    stack:=[]int{}\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            stack = append(stack, i)\n        } else if brackets[i] == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            \n            last := len(stack) - 1\n            stack[last] = i\n            stack = stack[:last]\n        }\n    }\n    \n    return len(stack) == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    if open_brackets == 0 {\n        return true\n    }\n    \n    return false",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        \n        if open_brackets < 0 {\n            return false\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    var opening_brackets = 0\n    var closing_brackets = 0\n    for _, c := range brackets {\n        if c == '<' {\n            opening_brackets += 1\n        } else if c == '>' {\n            closing_brackets += 1\n        }\n    }\n    if opening_brackets != closing_brackets {\n        return false\n    }\n    return true",
    "    if len(brackets) == 0 {\n        return true\n    }\n    stack:=[]int{0}\n    for i:=0; i<len(brackets); i++ {\n        if brackets[i] == '<' {\n            stack = append(stack, 0)\n        } else if brackets[i] == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] != '<' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    \n    if len(stack) != 0 {\n        return false\n    }\n    \n    return true",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, r := range brackets {\n        if r == '<' {\n            stack = append(stack, r)\n        } else {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] != '<' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    \n    if len(stack) != 0 {\n        return false\n    }\n    \n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    stack:=[]int{0}\n    for i := 1; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            stack = append(stack, i)\n        } else if brackets[i] == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    \n    return len(stack) == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] != '<' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    \n    if len(stack) != 0 {\n        return false\n    }\n    \n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    var opening_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var opening_bracket_count_stack []int\n    var opening_bracket_stack []string\n    var closing_bracket_stack []string\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            opening_bracket_count++\n            opening_bracket_index = i\n            opening_bracket_index_stack = append(opening_bracket_index_stack, opening_bracket_index)\n            opening_bracket_count_stack = append(opening_bracket_count_stack, opening_bracket_count)\n            opening_bracket_stack = append(opening_bracket_stack, brackets[i])\n        } else if brackets[i] == '>' {\n            closing_bracket_index = i\n            closing_bracket_stack = append(closing_bracket_stack, brackets[i])\n        }\n    }\n    for i := len(opening_bracket_stack) - 1; i >= 0; i-- {\n        if opening_bracket_count_stack[i] != opening_bracket_count {\n            return false\n        }\n        if opening_bracket_stack[i] != '<' {\n            return false\n        }\n        if closing_bracket_index != -1 {\n            if closing_bracket_stack[closing_bracket_index] != '>' {\n                return false\n            }\n            opening_bracket_count--\n            opening_bracket_index = opening_bracket_index_stack[i]\n            closing_bracket_index = -1\n        }\n    }\n    return true",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    for i, c := range brackets {\n        if c == '<' {\n            opening_bracket_count += 1\n            opening_bracket_index = i\n            opening_bracket_index_stack = append(opening_bracket_index_stack, opening_bracket_index)\n        } else if c == '>' {\n            closing_bracket_count += 1\n            closing_bracket_index = i\n            closing_bracket_index_stack = append(closing_bracket_index_stack, closing_bracket_index)\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    for i := len(opening_bracket_index_stack) - 1; i >= 0; i-- {\n        if opening_bracket_index_stack[i] != closing_bracket_index_stack[i] {\n            return false\n        }\n    }\n    return true",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_set []int\n    var closing_bracket_index_set []int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_stack []int\n    var closing_bracket_stack []int\n    var opening_bracket_stack_set []int\n    var closing_bracket_stack_set []int\n    var opening_bracket_stack_index int\n    var closing_bracket_stack_index int\n    var opening_bracket_stack_index_set []int\n    var closing_bracket_stack_index_set []int\n    var opening_bracket_stack_index_stack []int\n    var closing_bracket_stack_index_stack []int\n    var opening_bracket_stack_index_stack_set []int\n    var closing_bracket_stack_index_stack_set []int\n    var opening_bracket_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_set []int\n    var closing_bracket_stack_index_stack_index_set []int\n    var opening_bracket_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_set []int\n    var closing_bracket_stack_index_stack_index_stack_set []int\n    var opening_bracket_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_set []int\n    var closing_bracket_stack_index_stack_index_stack_index_set []int\n    var opening_bracket_stack_index_stack_index_stack_index",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n        if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_stack []int\n    var closing_bracket_stack []int\n    var opening_bracket_stack_length int\n    var closing_bracket_stack_length int\n    var opening_bracket_stack_index int\n    var closing_bracket_stack_index int\n    var opening_bracket_stack_index_stack []int\n    var closing_bracket_stack_index_stack []int\n    var opening_bracket_stack_index_stack_length int\n    var closing_bracket_stack_index_stack_length int\n    var opening_bracket_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_length int\n    var closing_bracket_stack_index_stack_index_stack_length int\n    var opening_bracket_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_length int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_length int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    \n    if len(stack) != 0 {\n        return false\n    }\n    \n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    if open_brackets == 0 {\n        return true\n    }\n    return false",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n    }\n    \n    if open_brackets == 0 {\n        return true\n    }\n    \n    open_brackets = 0\n    for i := len(brackets) - 1; i >= 0; i-- {\n        if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        \n        if open_brackets == 0 {\n            return false\n        }\n    }\n    \n    return true",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_char string\n    var closing_bracket_char string\n    var opening_bracket_index_set bool\n    var closing_bracket_index_set bool\n    var opening_bracket_char_set bool\n    var closing_bracket_char_set bool\n    var opening_bracket_index_list []int\n    var closing_bracket_index_list []int\n    var opening_bracket_index_set_list []bool\n    var closing_bracket_index_set_list []bool\n    var opening_bracket_char_list []string\n    var closing_bracket_char_list []string\n    var opening_bracket_index_list_list [][]int\n    var closing_bracket_index_list_list [][]int\n    var opening_bracket_index_set_list_list [][]bool\n    var closing_bracket_index_set_list_list [][]bool\n    var opening_bracket_char_list_list [][]string\n    var closing_bracket_char_list_list [][]string\n    var opening_bracket_index_list_list_list [][][]int\n    var closing_bracket_index_list_list_list [][][]int\n    var opening_bracket_index_set_list_list_list [][][]bool\n    var closing_bracket_index_set_list_list_list [][][]bool\n    var opening_bracket_char_list_list_list [][][]string\n    var closing_bracket_char_list_list_list [][][]string\n    for opening_bracket_count = 0; opening_bracket_count < len(brackets); opening_bracket_count = opening_bracket_count + 1 {\n        opening_bracket_index = opening_bracket_count\n        opening_bracket_char = brackets[opening_bracket_index]\n        opening_bracket_index_set = false\n        opening_bracket_char_set = false\n        opening_bracket_index",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    stack:= []\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            stack = append(stack, i)\n        } else if brackets[i] == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            stack = stack[0:len(stack) - 1]\n            if i - last != 1 {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_set bool\n    var closing_bracket_index_set bool\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_stack []int\n    var closing_bracket_stack []int\n    var opening_bracket_stack_set bool\n    var closing_bracket_stack_set bool\n    var opening_bracket_stack_index int\n    var closing_bracket_stack_index int\n    var opening_bracket_stack_index_set bool\n    var closing_bracket_stack_index_set bool\n    var opening_bracket_stack_index_stack []int\n    var closing_bracket_stack_index_stack []int\n    var opening_bracket_stack_index_stack_set bool\n    var closing_bracket_stack_index_stack_set bool\n    var opening_bracket_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_set bool\n    var closing_bracket_stack_index_stack_index_set bool\n    var opening_bracket_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_set bool\n    var closing_bracket_stack_index_stack_index_stack_set bool\n    var opening_bracket_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_set bool\n    var closing_bracket_stack_index_stack_index_stack_index_set bool\n    var opening_bracket_stack_index_stack_index_stack_index_stack []int\n    var closing_bracket_stack_",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n    }\n    \n    if open_brackets == 0 {\n        return true\n    }\n    \n    open_brackets = 0\n    for i := len(brackets) - 1; i >= 0; i-- {\n        if brackets[i] == '>' {\n            open_brackets += 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    var open_brackets = 0\n    var close_brackets = 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            close_brackets += 1\n        }\n    }\n    if open_brackets != close_brackets {\n        return false\n    }\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            if i == 0 || brackets[i-1] != '<' {\n                return false\n            }\n        }\n    }\n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    var stack = []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] == '<' {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    var opening_bracket_stack []int\n    var closing_bracket_stack []int\n    var opening_bracket_stack_index int\n    var closing_bracket_stack_index int\n    var opening_bracket_stack_index_stack []int\n    var closing_bracket_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index_stack []int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index_stack_index int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index_stack_index int\n    var opening_bracket_stack_index_stack_index_stack_index_stack_index_stack_index_stack []int\n    var closing_bracket_stack_index_stack_index_stack_index_stack_index_stack_",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n        if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_stack []int\n    var closing_bracket_index_stack []int\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            opening_bracket_count += 1\n            opening_bracket_index = i\n            opening_bracket_index_stack = append(opening_bracket_index_stack, opening_bracket_index)\n        } else if brackets[i] == '>' {\n            closing_bracket_count += 1\n            closing_bracket_index = i\n            closing_bracket_index_stack = append(closing_bracket_index_stack, closing_bracket_index)\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    for i := 0; i < len(opening_bracket_index_stack); i++ {\n        if opening_bracket_index_stack[i] != closing_bracket_index_stack[i] {\n            return false\n        }\n    }\n    return true",
    "    var opening_bracket_count = 0\n    var closing_bracket_count = 0\n    for _, char := range brackets {\n        if char == '<' {\n            opening_bracket_count += 1\n        } else if char == '>' {\n            closing_bracket_count += 1\n        }\n    }\n    return opening_bracket_count == closing_bracket_count",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, char := range brackets {\n        if char == '<' {\n            open_brackets += 1\n        } else if char == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    stack:=[]int{}\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            stack = append(stack, i)\n        } else if brackets[i] == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := len(stack) - 1\n            stack[last] = i\n            stack = stack[:last]\n        }\n    }\n    return len(stack) == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, c)\n        } else {\n            if len(stack) == 0 {\n                return false\n            }\n            if stack[len(stack) - 1] != '<' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    stack:=make([]int, 0)\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            stack = append(stack, i)\n        } else {\n            if len(stack) == 0 {\n                return false\n            }\n            \n            if brackets[i] != '>' {\n                return false\n            }\n            \n            index := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if i != index {\n                return false\n            }\n        }\n    }\n    \n    if len(stack) != 0 {\n        return false\n    }\n    \n    return true",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        }\n    }\n    \n    if open_brackets == 0 {\n        return true\n    }\n    \n    close_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '>' {\n            close_brackets += 1\n        }\n    }\n    \n    if close_brackets == open_brackets {\n        return true\n    }\n    \n    return false",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    open_brackets := 0\n    for _, c := range brackets {\n        if c == '<' {\n            open_brackets += 1\n        } else if c == '>' {\n            open_brackets -= 1\n        }\n    }\n    \n    return open_brackets == 0",
    "    var opening_bracket_count int\n    var closing_bracket_count int\n    var opening_bracket_index int\n    var closing_bracket_index int\n    var opening_bracket_index_set []int\n    var closing_bracket_index_set []int\n    var opening_bracket_index_set_copy []int\n    var opening_bracket_index_set_copy_copy []int\n    var opening_bracket_index_set_copy_copy_copy []int\n    var opening_bracket_index_set_copy_copy_copy_copy []int\n    var opening_bracket_index_set_copy_copy_copy_copy_copy []int\n    var opening_bracket_index_set_copy_copy_copy_copy_copy_copy []int\n    var opening_bracket_index_set_copy_copy_copy_copy_copy_copy_copy []int\n    var opening_bracket_index_set_copy_copy_copy_copy_copy_copy_copy_copy []int\n    var opening_bracket_index_set_copy_copy_copy_copy_copy_copy_copy_copy_copy []int\n    var opening_bracket_index_set_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy []int\n    var opening_bracket_index_set_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy []int\n    var opening_bracket_index_set_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy []int\n    var opening_bracket_index_set_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy []int\n    var opening_bracket_index_set_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy []int\n    var opening_bracket_index_set_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy []int\n    var opening_bracket_index_set_",
    "    var opening_bracket_count = 0\n    var closing_bracket_count = 0\n    for _, char := range brackets {\n        if char == '<' {\n            opening_bracket_count += 1\n        } else if char == '>' {\n            closing_bracket_count += 1\n        }\n    }\n    if opening_bracket_count != closing_bracket_count {\n        return false\n    }\n    return true",
    "    var open_brackets = 0\n    var close_brackets = 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            close_brackets += 1\n        }\n    }\n    return open_brackets == close_brackets",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, char := range brackets {\n        if char == '<' {\n            stack = append(stack, '<')\n        } else if char == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    \n    return len(stack) == 0",
    "    if len(brackets) == 0 {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    stack := []rune{}\n    for _, c := range brackets {\n        if c == '<' {\n            stack = append(stack, '<')\n        } else if c == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[0 : len(stack) - 1]\n        }\n    }\n    \n    return len(stack) == 0",
    "    if brackets == \"\" {\n        return true\n    }\n    \n    open_brackets := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            open_brackets += 1\n        } else if brackets[i] == '>' {\n            open_brackets -= 1\n        }\n        if open_brackets < 0 {\n            return false\n        }\n    }\n    return open_brackets == 0"
  ],
  "stop_tokens": [
    "\n}"
  ]
}