{
  "name": "HumanEval_116_sort_array",
  "language": "swift",
  "prompt": "\n/// In this Kata, you have to sort an array of non-negative integers according to\n/// number of ones in their binary representation in ascending order.\n/// For similar number of ones, sort based on decimal value.\n/// It must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n/// [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5, -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int]) -> [Int] {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])",
  "completions": [
    "    var sorted_arr = [Int]{}\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 0 {\n            sorted_arr = append(sorted_arr, arr[i])\n        } else {\n            sorted_arr = append(sorted_arr, arr[i] - 1)\n        }\n    }\n    return sorted_arr",
    "    var result: [Int] = []\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > 0 {\n            result = append(result, arr[i])\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 0 {\n            result = append(result, arr[i])\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < 0 {\n            result = append(result, arr[i])\n        }\n    }\n    return result",
    "    // write your code here\n    return arr",
    "    sort_array_rec(arr, 0, len(arr) - 1)\n    return arr",
    "    return sort_array_helper(arr, 0, len(arr) - 1)",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    if len(arr) <= 1 {\n        return arr\n    }\n\n    // get the number of ones in each number\n    ones_count := [Int]{}\n    for _, num := range arr {\n        ones_count = append(ones_count, num.count_ones())\n    }\n\n    // sort based on number of ones\n    sort.Sort(sort.Reverse(sort.IntSlice(ones_count)))\n\n    // sort based on decimal value\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\n    return arr",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    if len(arr) <= 1 {\n        return arr\n    }\n    \n    sort_by_ones(arr)\n    sort_by_decimal(arr)\n    return arr",
    "    // write your code here\n    return arr",
    "    var result = []Int{}\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > 0 {\n            result = append(result, arr[i])\n        }\n    }\n    sort.Ints(result)\n    return result",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    sort_by_ones(arr)\n    sort_by_decimal(arr)\n    return arr",
    "    return sort_array_rec(arr, 0, len(arr) - 1)",
    "    return sort_array_rec(arr, 0, len(arr) - 1)",
    "    // Write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    sort_array_by_ones(arr)\n    sort_array_by_decimal(arr)\n    return arr",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    if len(arr) <= 1 {\n        return arr\n    }\n    \n    var sorted_arr = arr\n    var sorted_arr_len = len(sorted_arr)\n    \n    for i := 0; i < sorted_arr_len; i++ {\n        for j := i + 1; j < sorted_arr_len; j++ {\n            if sorted_arr[i] > sorted_arr[j] {\n                sorted_arr[i], sorted_arr[j] = sorted_arr[j], sorted_arr[i]\n            }\n        }\n    }\n    \n    return sorted_arr",
    "    sort_array_rec(arr, 0, len(arr) - 1)\n    return arr",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    sort_array_rec(arr, len(arr) - 1)\n    return arr",
    "    if len(arr) == 1 {\n        return arr\n    }\n    \n    // Get the number of ones in each number\n    ones_count := [Int]{}\n    for i := 0; i < len(arr); i++ {\n        ones_count[arr[i]] += 1\n    }\n    \n    // Sort based on number of ones\n    sort.Slice(arr, func(i, j int) bool {\n        return ones_count[arr[i]] < ones_count[arr[j]]\n    })\n    \n    // Sort based on decimal value\n    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] < arr[j]\n    })\n    \n    return arr",
    "    // write your code here\n    return arr",
    "    if len(arr) <= 1 {\n        return arr\n    }\n\n    // Find the number of ones in each number\n    ones := make(map[Int]int)\n    for _, v := range arr {\n        ones[v] += 1\n    }\n\n    // Sort based on number of ones\n    sort.Slice(arr, func(i, j int) bool {\n        return ones[arr[i]] < ones[arr[j]]\n    })\n\n    // Sort based on decimal value\n    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] < arr[j]\n    })\n\n    return arr",
    "    if len(arr) <= 1 {\n        return arr\n    }\n    \n    // Find the number of ones in each number\n    ones_count := [Int]{}\n    for i := 0; i < len(arr); i++ {\n        ones_count[arr[i]] += 1\n    }\n    \n    // Sort the array based on number of ones\n    sort.Sort(sort.Reverse(sort.IntSlice(ones_count)))\n    \n    // Convert the array to decimal\n    decimal := [Int]{}\n    for i := 0; i < len(arr); i++ {\n        decimal[i] = arr[i] * 2 + ones_count[arr[i]]\n    }\n    \n    // Sort the array based on decimal value\n    sort.Sort(sort.Reverse(sort.IntSlice(decimal)))\n    \n    return decimal",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // write your code here\n    return arr.sort()",
    "    // Your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    var sorted_arr [Int]\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 0 {\n            sorted_arr = append(sorted_arr, arr[i])\n        } else {\n            for j := 0; j < len(arr); j++ {\n                if arr[j] == 0 {\n                    sorted_arr = append(sorted_arr, arr[j])\n                    break\n                }\n            }\n        }\n    }\n    return sorted_arr",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // Your Code Here\n    return arr",
    "    var result = []Int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > 0 {\n            result = append(result, arr[i])\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if result[i] > result[j] {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result",
    "    return sort_array_rec(arr, 0, len(arr) - 1)",
    "    return arr.sort(func(a, b) {\n        if a.ones() > b.ones() {\n            return -1\n        } else if a.ones() < b.ones() {\n            return 1\n        } else {\n            return a.dec() - b.dec()\n        }\n    })",
    "    // Write your code here\n    return arr",
    "    var sorted_arr [Int]\n    for i := 0; i < len(arr); i++ {\n        var num_ones = 0\n        for j := 0; j < len(arr[i]); j++ {\n            if arr[i][j] == 1 {\n                num_ones++\n            }\n        }\n        if num_ones == 0 {\n            sorted_arr = append(sorted_arr, arr[i])\n        } else if num_ones == 1 {\n            sorted_arr = append(sorted_arr, arr[i])\n            sorted_arr = append(sorted_arr, arr[i])\n        } else {\n            sorted_arr = append(sorted_arr, arr[i])\n            sorted_arr = append(sorted_arr, arr[i])\n            sorted_arr = append(sorted_arr, arr[i])\n        }\n    }\n    return sorted_arr",
    "    return sort_array_rec(arr, 0, len(arr) - 1)",
    "    // write your code here\n    return arr",
    "    // Your code here\n    return arr",
    "    sort_array_rec(arr, 0, len(arr) - 1)\n    return arr",
    "    // Write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    var result = []Int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 0 {\n            result = append(result, arr[i])\n        } else {\n            result = append(result, arr[i] - 1)\n        }\n    }\n    return result",
    "    // write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // Your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr.sort()",
    "    // Write your code here\n    return arr",
    "    var sorted_arr = []\n    for i := 0; i < len(arr); i++ {\n        var count = 0\n        for j := 0; j < len(arr[i]); j++ {\n            if arr[i][j] == 1 {\n                count++\n            }\n        }\n        if count == len(arr[i]) {\n            sorted_arr = append(sorted_arr, arr[i])\n        } else {\n            sorted_arr = append(sorted_arr, -count)\n            sorted_arr = append(sorted_arr, arr[i])\n        }\n    }\n    return sorted_arr",
    "    if len(arr) == 0 {\n        return arr\n    }\n    \n    var sorted_arr = arr\n    \n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                sorted_arr[i], sorted_arr[j] = sorted_arr[j], sorted_arr[i]\n            }\n        }\n    }\n    \n    return sorted_arr",
    "    // write your code here\n    return arr",
    "    sort_by_ones(arr)\n    sort_by_decimal(arr)\n    return arr",
    "    // write your code here\n    return arr",
    "    sort_array_rec(arr, 0, len(arr) - 1)\n    return arr",
    "    // write your code here\n    return arr.sort()",
    "    if len(arr) == 0 {\n        return arr\n    }\n    if len(arr) == 1 {\n        return arr\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return arr\n        }\n        if arr[0] > arr[1] {\n            arr[0], arr[1] = arr[1], arr[0]\n        }\n        return arr\n    }\n    if arr[0] == arr[1] {\n        arr[0], arr[1] = arr[1], arr[0]\n        return arr\n    }\n    if arr[0] > arr[1] {\n        arr[0], arr[1] = arr[1], arr[0]\n    }\n    if arr[0] == arr[1] {\n        arr[0], arr[1] = arr[1], arr[0]\n    }\n    if arr[0] == arr[1] {\n        arr[0], arr[1] = arr[1], arr[0]\n    }\n    if arr[0] == arr[1] {\n        arr[0], arr[1] = arr[1], arr[0]\n    }\n    if arr[0] == arr[1] {\n        arr[0], arr[1] = arr[1], arr[0]\n    }\n    if arr[0] == arr[1] {\n        arr[0], arr[1] = arr[1], arr[0]\n    }\n    if arr[0] == arr[1] {\n        arr[0], arr[1] = arr[1], arr[0]\n    }\n    if arr[0] == arr[1] {\n        arr[0], arr[1] = arr[1], arr[0]\n    }\n    if arr[0] == arr[1] {\n        arr[0], arr[1] = arr[1], arr[0]\n    }\n    if arr[0] == arr[1] {\n        arr[0], arr[1] = arr[1], arr[0]\n    }\n    if arr[0] == arr[1] {\n        arr[0",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr.sort()",
    "    // write your code here\n    return arr",
    "    // your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    sort_func := func(a: Int, b: Int) Int {\n        if a == b {\n            return 0\n        }\n        if a > b {\n            return 1\n        }\n        return -1\n    }\n    return sort.IntSlice(arr).Sort(sort_func)",
    "    sort_array_rec(arr, 0, len(arr) - 1)\n    return arr",
    "    return arr",
    "    // Write your code here\n    return arr",
    "    // Your code here\n    return arr",
    "    if len(arr) == 0 {\n        return arr\n    }\n    \n    // Get the number of ones in each number\n    ones := make(map[Int]int)\n    for _, n := range arr {\n        ones[n] += 1\n    }\n    \n    // Sort based on number of ones\n    sort.Slice(arr, func(i, j int) bool {\n        return ones[arr[i]] < ones[arr[j]]\n    })\n    \n    // Sort based on decimal value\n    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] < arr[j]\n    })\n    \n    return arr",
    "    // write your code here\n    return arr",
    "    return sort_array_rec(arr, 0, len(arr) - 1)",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // Your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    if len(arr) == 1 {\n        return arr\n    }\n    \n    // Create a map of number of ones to the index of the number in the array\n    ones_map: Map[Int] = make(map[Int] Int)\n    for i, v := range arr {\n        ones_map[v] = i\n    }\n    \n    // Sort the map based on number of ones\n    sort.Sort(sort.Reverse(sort.IntSlice(ones_map.Keys())))\n    \n    // Create a new array with the sorted keys\n    result: [Int] = make([] Int, len(arr))\n    for i, v := range ones_map.Keys() {\n        result[i] = ones_map[v]\n    }\n    \n    return result",
    "    // write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    var count = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 1 {\n            count++\n        }\n    }\n    if count == 0 {\n        return arr\n    }\n    var sorted = make([]Int, len(arr))\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 1 {\n            sorted[count - 1] = arr[i]\n            count--\n        } else {\n            sorted[i] = arr[i]\n        }\n    }\n    return sorted",
    "    // write your code here\n    return arr",
    "    var result = []Int\n    for i := 0; i < len(arr); i++ {\n        var count = 0\n        for j := 0; j < len(arr[i]); j++ {\n            if arr[i][j] == 1 {\n                count++\n            }\n        }\n        result = append(result, count)\n    }\n    sort.Ints(result)\n    return result",
    "    // write your code here\n    return arr",
    "    return arr.sort(func(a, b) {\n        if a.ones() == b.ones() {\n            return a.dec() - b.dec()\n        } else {\n            return a.ones() - b.ones()\n        }\n    })",
    "    // Write your code here\n    return arr",
    "    return arr.sort((a, b) => {\n        if a.ones == b.ones {\n            return a.decimal - b.decimal\n        }\n        return a.ones - b.ones\n    })",
    "    // write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    var result = []Int{}\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 0 {\n            result = append(result, arr[i])\n        } else {\n            result = append(result, arr[i] - 1)\n        }\n    }\n    return result",
    "    // Write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    if len(arr) == 1 {\n        return arr\n    }\n    \n    // Get the number of ones in each number\n    ones := make(map[Int]int)\n    for _, v := range arr {\n        ones[v] += 1\n    }\n    \n    // Sort based on number of ones\n    sort.Slice(arr, func(i, j int) bool {\n        return ones[arr[i]] < ones[arr[j]]\n    })\n    \n    // Sort based on decimal value\n    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] < arr[j]\n    })\n    \n    return arr",
    "    return sort_array_helper(arr, 0, len(arr) - 1)",
    "    // write your code here\n    return arr",
    "    if len(arr) == 1 {\n        return arr\n    }\n    \n    // Sort based on number of ones\n    sort_by_ones(arr)\n    \n    // Sort based on decimal value\n    sort_by_decimal(arr)\n    \n    return arr",
    "    return arr.sort(func(a, b) {\n        if a.ones() == b.ones() {\n            return a.dec() - b.dec()\n        }\n        return a.ones() - b.ones()\n    })",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    return arr",
    "    // Write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    var result = []Int{}\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 0 {\n            result = append(result, arr[i])\n        } else {\n            result = append(result, arr[i] + 1)\n        }\n    }\n    result.Sort()\n    return result",
    "    sort_array_helper(arr, 0, len(arr) - 1)\n    return arr",
    "    // Write your code here\n    return arr",
    "    return sort_array_rec(arr, 0, len(arr))",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    sort_by_ones(arr)\n    sort_by_decimal(arr)\n    return arr",
    "    return arr",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    var sorted_arr = arr.copy()\n    sort.Sort(sort.IntSlice(sorted_arr))\n    return sorted_arr",
    "    // write your code here\n    return arr",
    "    sort_by_ones(arr)\n    sort_by_decimal(arr)\n    return arr",
    "    sort_array_rec(arr, 0, len(arr) - 1)\n    return arr",
    "    if len(arr) == 0 {\n        return arr\n    }\n    \n    // sort based on number of ones\n    sort_by_ones(arr)\n    \n    // sort based on decimal value\n    sort_by_decimal(arr)\n    \n    return arr",
    "    // Your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr.sort()",
    "    // write your code here\n    return arr",
    "    // Your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr.sort()",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    var result = []Int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > 0 {\n            result = append(result, arr[i])\n        }\n    }\n    sort.Ints(result)\n    return result",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    return sort_array_rec(arr, 0, len(arr) - 1)",
    "    // Write your code here\n    return arr",
    "    return sort_array_rec(arr, 0, len(arr) - 1)",
    "    return sort_array_helper(arr, 0, len(arr) - 1)",
    "    // write your code here\n    return arr",
    "    return sort_array_rec(arr, 0, len(arr) - 1)",
    "    // Write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    sort_array_rec(arr, 0, len(arr) - 1)\n    return arr",
    "    sort_array_helper(arr, 0, len(arr) - 1)\n    return arr",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    sort_array_helper(arr, 0, len(arr) - 1)\n    return arr",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    sort_by_ones(arr)\n    sort_by_decimal(arr)\n    return arr",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    var sorted_arr [Int] = arr\n    sort.Sort(sort.IntSlice(sorted_arr))\n    return sorted_arr",
    "    return arr",
    "    return sort_array_rec(arr, 0, len(arr) - 1)",
    "    sort_array_rec(arr, 0, len(arr) - 1)\n    return arr",
    "    // write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    sort_array_rec(arr, 0, len(arr) - 1)\n    return arr",
    "    // write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    var sorted_arr [Int]\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 0 {\n            sorted_arr = append(sorted_arr, arr[i])\n        } else {\n            sorted_arr = append(sorted_arr, arr[i] + 1)\n        }\n    }\n    sort.Ints(sorted_arr)\n    return sorted_arr",
    "    // Write your code here\n    return arr",
    "    // write your code here\n    return arr.sort()",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // Write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    // write your code here\n    return arr",
    "    var count = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 1 {\n            count++\n        }\n    }\n    if count == 0 {\n        return arr\n    }\n    var sorted = make([]Int, len(arr))\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 1 {\n            sorted[count - 1] = arr[i]\n            count--\n        } else {\n            sorted[i] = arr[i]\n        }\n    }\n    return sorted"
  ],
  "stop_tokens": [
    "\n}"
  ]
}