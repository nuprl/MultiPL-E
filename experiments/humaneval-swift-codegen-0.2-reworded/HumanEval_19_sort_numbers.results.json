{
  "name": "HumanEval_19_sort_numbers",
  "language": "swift",
  "prompt": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 9 {\n            number_int = 9\n        }\n        if number_int < 0 {\n            number_int = 0\n        }\n        sorted_numbers = append(sorted_numbers, number_int)\n    }\n    sorted_numbers.sort()\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpew_pxal9.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpew_pxal9.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpew_pxal9.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpew_pxal9.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpew_pxal9.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmpew_pxal9.swift:22:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmpew_pxal9.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_array {\n        if number == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if number == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if number == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if number == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if number == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if number == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if number == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if number == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if number == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if number == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp39dj81ge.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp39dj81ge.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_array {\n         ^\n/tmp/tmp39dj81ge.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_array {\n         ^\n/tmp/tmp39dj81ge.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmp39dj81ge.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp39dj81ge.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp39dj81ge.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if strings.Contains(numbers_array[i], \"one\") {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if strings.Contains(numbers_array[i], \"two\") {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if strings.Contains(numbers_array[i], \"three\") {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if strings.Contains(numbers_array[i], \"four\") {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if strings.Contains(numbers_array[i], \"five\") {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if strings.Contains(numbers_array[i], \"six\") {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if strings.Contains(numbers_array[i], \"seven\") {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if strings.Contains(numbers_array[i], \"eight\") {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if strings.Contains(numbers_array[i], \"nine\") {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpiu3ufieb.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpiu3ufieb.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpiu3ufieb.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpiu3ufieb.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpiu3ufieb.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpiu3ufieb.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpiu3ufieb.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpiu3ufieb.swift:31:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums []int\n    for _, num := range numbers.split(\" \") {\n        nums = append(nums, int(num[0]-'0'))\n    }\n    sort.Ints(nums)\n    return strings.Join([]string{strconv.Itoa(nums[0])}, \" \") + \" \" + strings.Join([]string{strconv.Itoa(nums[1])}, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpfuqdfd15.swift:8:13: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n            ^\n            ;\n/tmp/tmpfuqdfd15.swift:8:16: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n               ^\n               ;\n/tmp/tmpfuqdfd15.swift:9:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers.split(\" \") {\n         ^\n/tmp/tmpfuqdfd15.swift:9:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers.split(\" \") {\n         ^\n/tmp/tmpfuqdfd15.swift:10:40: error: single-quoted string literal found, use '\"'\n        nums = append(nums, int(num[0]-'0'))\n                                       ^~~\n                                       \"0\"\n/tmp/tmpfuqdfd15.swift:13:27: error: expected ',' separator\n    return strings.Join([]string{strconv.Itoa(nums[0])}, \" \") + \" \" + strings.Join([]string{strconv.Itoa(nums[1])}, \" \")\n                          ^\n                          ,\n/tmp/tmpfuqdfd15.swift:13:86: error: expected ',' separator\n    return strings.Join([]string{strconv.Itoa(nums[0])}, \" \") + \" \" + strings.Join([]string{strconv.Itoa(nums[1])}, \" \")\n                                                                                     ^\n                                                                                     ,\n/tmp/tmpfuqdfd15.swift:8:9: error: type annotation missing in pattern\n    var nums []int\n        ^\n/tmp/tmpfuqdfd15.swift:8:14: error: empty collection literal requires an explicit type\n    var nums []int\n             ^~\n/tmp/tmpfuqdfd15.swift:8:14: warning: expression of type '[Any]' is unused\n    var nums []int\n             ^~\n/tmp/tmpfuqdfd15.swift:8:16: error: cannot find 'int' in scope\n    var nums []int\n               ^~~\n/tmp/tmpfuqdfd15.swift:13:12: error: cannot find 'strings' in scope\n    return strings.Join([]string{strconv.Itoa(nums[0])}, \" \") + \" \" + strings.Join([]string{strconv.Itoa(nums[1])}, \" \")\n           ^~~~~~~\n/tmp/tmpfuqdfd15.swift:13:27: error: cannot find",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums []int\n    var num_strs []string\n    var num_str string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var zz int\n    var zzz int\n    var zzzz int\n    var zzzzz int\n    var zzzzzz int\n    var zzzzzzz int\n    var zzzzzzzz int\n    var zzzzzzzzz int\n    var zzzzzzzzzz int\n    var zzzzzzzzzzz int\n    var zzzzzzzzzzzz int\n    var zzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz int\n    var zzzzzzzzzzzzz\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpkhv7gym2.swift:8:13: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n            ^\n            ;\n/tmp/tmpkhv7gym2.swift:8:16: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n               ^\n               ;\n/tmp/tmpkhv7gym2.swift:9:17: error: consecutive statements on a line must be separated by ';'\n    var num_strs []string\n                ^\n                ;\n/tmp/tmpkhv7gym2.swift:9:20: error: consecutive statements on a line must be separated by ';'\n    var num_strs []string\n                   ^\n                   ;\n/tmp/tmpkhv7gym2.swift:10:17: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var num_str string\n                ^\n/tmp/tmpkhv7gym2.swift:10:17: note: join the identifiers together\n    var num_str string\n        ~~~~~~~~^~~~~~\n        num_strstring\n/tmp/tmpkhv7gym2.swift:10:17: note: join the identifiers together with camel-case\n    var num_str string\n        ~~~~~~~~^~~~~~\n        num_strString\n/tmp/tmpkhv7gym2.swift:11:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var i int\n          ^\n/tmp/tmpkhv7gym2.swift:11:11: note: join the identifiers together\n    var i int\n        ~~^~~\n        iint\n/tmp/tmpkhv7gym2.swift:11:11: note: join the identifiers together with camel-case\n    var i int\n        ~~^~~\n        iInt\n/tmp/tmpkhv7gym2.swift:12:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var j int\n          ^\n/tmp/tmpkhv7gym2.swift:12:11: note: join the identifiers together\n    var j int\n        ~~^~~\n        jint\n/tmp/tmpkhv7gym2.swift:12:11: note: join the identifiers together with camel-case\n    var j int\n        ~~^~~\n        jInt\n/tmp/tmpkhv7gym2.swift:13:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var k int\n          ^\n/tmp/tmpkhv7gym2.swift:13:11: note: join the identifiers to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = numbers.split(\" \")\n    numbers.sort()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpnq7rm2ma.swift:8:23: error: no exact matches in call to instance method 'split'\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:5: error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers = numbers.split(\" \")\n    ^~~~~~~\n/tmp/tmpnq7rm2ma.swift:8:23: error: no 'split' candidates produce the expected contextual result type 'String'\n    numbers = numbers.split(\" \")\n                      ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpnq7rm2ma.swift:9:13: error: value of type 'String' has no member 'sort'\n    numbers.sort()\n    ~~~~~~~ ^~~~\n/tmp/tmpnq7rm2ma.swift:10:20: error: value of type 'String' has no member 'join'\n    return numbers.join(\" \")\n           ~~~~~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int < 10 {\n            sorted_numbers.append(number)\n        } else {\n            sorted_numbers.append(number_int)\n        }\n    }\n    sorted_numbers.sort()\n    return join_strings(sorted_numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpsxa6otre.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpsxa6otre.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpsxa6otre.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpsxa6otre.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpsxa6otre.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmpsxa6otre.swift:20:12: error: cannot find 'join_strings' in scope\n    return join_strings(sorted_numbers)\n           ^~~~~~~~~~~~\n/tmp/tmpsxa6otre.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list: List[String] = []\n    var numbers_string: String = \"\"\n    var numbers_array: Array[String] = []\n    var numbers_array_sorted: Array[String] = []\n    var numbers_array_sorted_string: String = \"\"\n    var numbers_array_sorted_string_list: List[String] = []\n    var numbers_array_sorted_string_list_string: String = \"\"\n    var numbers_array_sorted_string_list_string_list: List[String] = []\n    var numbers_array_sorted_string_list_string_list_string: String = \"\"\n    var numbers_array_sorted_string_list_string_list_string_list: List[String] = []\n    var numbers_array_sorted_string_list_string_list_string_list_string: String = \"\"\n    var numbers_array_sorted_string_list_string_list_string_list_string_list: List[String] = []\n    var numbers_array_sorted_string_list_string_list_string_list_string_list_string: String = \"\"\n    var numbers_array_sorted_string_list_string_list_string_list_string_list_string_list: List[String] = []\n    var numbers_array_sorted_string_list_string_list_string_list_string_list_string_list_string: String = \"\"\n    var numbers_array_sorted_string_list_string_list_string_list_string_list_string_list_string_list: List[String] = []\n    var numbers_array_sorted_string_list_string_list_string_list_string_list_string_list_string_list_string: String = \"\"\n    var numbers_array_sorted_string_list_string_list_string_list_string_list_string_list_string_list_string_list: List[String] = []\n    var numbers_array_sorted_string_list_string_list_string_list_string_list_string_list_string_list_string_list_string: String = \"\"\n    var numbers_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp0z2e778g.swift:8:27: error: array types are now written with the brackets around the element type\n    var numbers_list: List[String] = []\n                          ^\n                      [   \n/tmp/tmp0z2e778g.swift:10:29: error: array types are now written with the brackets around the element type\n    var numbers_array: Array[String] = []\n                            ^\n                       [    \n/tmp/tmp0z2e778g.swift:11:36: error: array types are now written with the brackets around the element type\n    var numbers_array_sorted: Array[String] = []\n                                   ^\n                              [    \n/tmp/tmp0z2e778g.swift:13:47: error: array types are now written with the brackets around the element type\n    var numbers_array_sorted_string_list: List[String] = []\n                                              ^\n                                          [   \n/tmp/tmp0z2e778g.swift:15:59: error: array types are now written with the brackets around the element type\n    var numbers_array_sorted_string_list_string_list: List[String] = []\n                                                          ^\n                                                      [   \n/tmp/tmp0z2e778g.swift:17:71: error: array types are now written with the brackets around the element type\n    var numbers_array_sorted_string_list_string_list_string_list: List[String] = []\n                                                                      ^\n                                                                  [   \n/tmp/tmp0z2e778g.swift:19:83: error: array types are now written with the brackets around the element type\n    var numbers_array_sorted_string_list_string_list_string_list_string_list: List[String] = []\n                                                                                  ^\n                                                                              [   \n/tmp/tmp0z2e778g.swift:21:95: error: array types are now written with the brackets around the element type\n    var numbers_array_sorted_string_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums = strings.Fields(numbers)\n    sort.Strings(nums)\n    return strings.Join(nums, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpo3sco976.swift:8:16: error: cannot find 'strings' in scope\n    var nums = strings.Fields(numbers)\n               ^~~~~~~\n/tmp/tmpo3sco976.swift:9:5: error: cannot find 'sort' in scope\n    sort.Strings(nums)\n    ^~~~\n/tmp/tmpo3sco976.swift:10:12: error: cannot find 'strings' in scope\n    return strings.Join(nums, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_array {\n        if number == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if number == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if number == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if number == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if number == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if number == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if number == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if number == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if number == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if number == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp39dj81ge.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp39dj81ge.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_array {\n         ^\n/tmp/tmp39dj81ge.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_array {\n         ^\n/tmp/tmp39dj81ge.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmp39dj81ge.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp39dj81ge.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp39dj81ge.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if numbers_array[i] == \"zero\" {\n            sorted_numbers.append(\"zero\")\n        } else if numbers_array[i] == \"one\" {\n            sorted_numbers.append(\"one\")\n        } else if numbers_array[i] == \"two\" {\n            sorted_numbers.append(\"two\")\n        } else if numbers_array[i] == \"three\" {\n            sorted_numbers.append(\"three\")\n        } else if numbers_array[i] == \"four\" {\n            sorted_numbers.append(\"four\")\n        } else if numbers_array[i] == \"five\" {\n            sorted_numbers.append(\"five\")\n        } else if numbers_array[i] == \"six\" {\n            sorted_numbers.append(\"six\")\n        } else if numbers_array[i] == \"seven\" {\n            sorted_numbers.append(\"seven\")\n        } else if numbers_array[i] == \"eight\" {\n            sorted_numbers.append(\"eight\")\n        } else if numbers_array[i] == \"nine\" {\n            sorted_numbers.append(\"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpjq9nvrhe.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpjq9nvrhe.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpjq9nvrhe.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpjq9nvrhe.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpjq9nvrhe.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpjq9nvrhe.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpjq9nvrhe.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpjq9nvrhe.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int < 10 {\n            sorted_numbers.append(number)\n        }\n    }\n    sorted_numbers.sort()\n    return strings.join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmptu74nglt.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmptu74nglt.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmptu74nglt.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmptu74nglt.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmptu74nglt.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmptu74nglt.swift:18:12: error: cannot find 'strings' in scope\n    return strings.join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmptu74nglt.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var sorted_numbers = []int{}\n    for _, number := range numbers_split {\n        var number_int = strings.ToInt(number)\n        sorted_numbers = append(sorted_numbers, number_int)\n    }\n    sort.Ints(sorted_numbers)\n    var sorted_numbers_string = \"\"\n    for _, number := range sorted_numbers {\n        sorted_numbers_string += strconv.Itoa(number) + \" \"\n    }\n    return strings.TrimSpace(sorted_numbers_string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpbo952mo1.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []int{}\n                           ^\n                           ;\n/tmp/tmpbo952mo1.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_split {\n         ^\n/tmp/tmpbo952mo1.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_split {\n         ^\n/tmp/tmpbo952mo1.swift:16:10: error: expected 'in' after for-each pattern\n    for _, number := range sorted_numbers {\n         ^\n/tmp/tmpbo952mo1.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, number := range sorted_numbers {\n         ^\n/tmp/tmpbo952mo1.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpbo952mo1.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []int{}\n                         ^~\n/tmp/tmpbo952mo1.swift:9:28: error: cannot find 'int' in scope\n    var sorted_numbers = []int{}\n                           ^~~\n/tmp/tmpbo952mo1.swift:19:12: error: cannot find 'strings' in scope\n    return strings.TrimSpace(sorted_numbers_string)\n           ^~~~~~~\n/tmp/tmpbo952mo1.swift:11:26: error: cannot find 'strings' in scope\n        var number_int = strings.ToInt(number)\n                         ^~~~~~~\n/tmp/tmpbo952mo1.swift:11:40: error: cannot find 'number' in scope\n        var number_int = strings.ToInt(number)\n                                       ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_array {\n        if number == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if number == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if number == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if number == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if number == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if number == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if number == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if number == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if number == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if number == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp39dj81ge.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp39dj81ge.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_array {\n         ^\n/tmp/tmp39dj81ge.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_array {\n         ^\n/tmp/tmp39dj81ge.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmp39dj81ge.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp39dj81ge.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp39dj81ge.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_list {\n        if number == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if number == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if number == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if number == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if number == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if number == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if number == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if number == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if number == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if number == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp48r1yc5w.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp48r1yc5w.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_list {\n         ^\n/tmp/tmp48r1yc5w.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_list {\n         ^\n/tmp/tmp48r1yc5w.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp48r1yc5w.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp48r1yc5w.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp48r1yc5w.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var numbers_array_sorted = []\n    for i := 0; i < len(numbers_array); i++ {\n        numbers_array_sorted.append(numbers_array[i])\n    }\n    numbers_array_sorted.sort()\n    return strings.Join(numbers_array_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpp1ock_vc.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpp1ock_vc.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpp1ock_vc.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpp1ock_vc.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpp1ock_vc.swift:9:32: error: empty collection literal requires an explicit type\n    var numbers_array_sorted = []\n                               ^~\n/tmp/tmpp1ock_vc.swift:14:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_array_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp6bba_pzk.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp6bba_pzk.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp6bba_pzk.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp6bba_pzk.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp6bba_pzk.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_arr = numbers.split(\" \")\n    var sorted_arr = []\n    for i := 0; i < len(numbers_arr); i++ {\n        var num = numbers_arr[i]\n        var num_int = parseInt(num)\n        if num_int < 10 {\n            sorted_arr = append(sorted_arr, num)\n        } else {\n            var j = i\n            for j < len(numbers_arr) {\n                var num_int = parseInt(numbers_arr[j])\n                if num_int < 10 {\n                    sorted_arr = append(sorted_arr, numbers_arr[j])\n                    j++\n                } else {\n                    break\n                }\n            }\n            sorted_arr = append(sorted_arr, numbers_arr[j])\n        }\n    }\n    return strings.Join(sorted_arr, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmplr0gvdcc.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n            <#type#>\n/tmp/tmplr0gvdcc.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n/tmp/tmplr0gvdcc.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n/tmp/tmplr0gvdcc.swift:17:19: error: expected 'in' after for-each pattern\n            for j < len(numbers_arr) {\n                  ^\n/tmp/tmplr0gvdcc.swift:17:19: error: unary operator cannot be separated from its operand\n            for j < len(numbers_arr) {\n                  ^~\n                   \n/tmp/tmplr0gvdcc.swift:8:31: error: no exact matches in call to instance method 'split'\n    var numbers_arr = numbers.split(\" \")\n                              ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmplr0gvdcc.swift:9:22: error: empty collection literal requires an explicit type\n    var sorted_arr = []\n                     ^~\n/tmp/tmplr0gvdcc.swift:29:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_arr, \" \")\n           ^~~~~~~\n/tmp/tmplr0gvdcc.swift:12:23: error: cannot find 'parseInt' in scope\n        var num_int = parseInt(num)\n                      ^~~~~~~~\n/tmp/tmplr0gvdcc.swift:17:19: error: '<' is not a prefix unary operator\n            for j < len(numbers_arr) {\n                  ^\n/tmp/tmplr0gvdcc.swift:17:21: error: cannot find",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_array, \" \")).Sort(), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmphoiqlbfh.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmphoiqlbfh.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_array, \" \")).Sort(), \" \")\n                         ^~~~~~~\n/tmp/tmphoiqlbfh.swift:9:39: error: cannot find 'sort' in scope\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_array, \" \")).Sort(), \" \")\n                                      ^~~~\n/tmp/tmphoiqlbfh.swift:9:53: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_array, \" \")).Sort(), \" \")\n                                                    ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for i := 0; i < len(numbers_split); i++ {\n        if numbers_split[i] == \"one\" {\n            numbers_sorted = append(numbers_sorted, \"one\")\n        } else if numbers_split[i] == \"two\" {\n            numbers_sorted = append(numbers_sorted, \"two\")\n        } else if numbers_split[i] == \"three\" {\n            numbers_sorted = append(numbers_sorted, \"three\")\n        } else if numbers_split[i] == \"four\" {\n            numbers_sorted = append(numbers_sorted, \"four\")\n        } else if numbers_split[i] == \"five\" {\n            numbers_sorted = append(numbers_sorted, \"five\")\n        } else if numbers_split[i] == \"six\" {\n            numbers_sorted = append(numbers_sorted, \"six\")\n        } else if numbers_split[i] == \"seven\" {\n            numbers_sorted = append(numbers_sorted, \"seven\")\n        } else if numbers_split[i] == \"eight\" {\n            numbers_sorted = append(numbers_sorted, \"eight\")\n        } else if numbers_split[i] == \"nine\" {\n            numbers_sorted = append(numbers_sorted, \"nine\")\n        }\n    }\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpojmk1ius.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmpojmk1ius.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n            <#type#>\n/tmp/tmpojmk1ius.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n/tmp/tmpojmk1ius.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n/tmp/tmpojmk1ius.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpojmk1ius.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmpojmk1ius.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmpojmk1ius.swift:31:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for _, num := range numbers_split {\n        if num != \"\" {\n            numbers_sorted = append(numbers_sorted, num)\n        }\n    }\n    sort.Strings(numbers_sorted)\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp2cq7augx.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmp2cq7augx.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_split {\n         ^\n/tmp/tmp2cq7augx.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_split {\n         ^\n/tmp/tmp2cq7augx.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmp2cq7augx.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmp2cq7augx.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmp2cq7augx.swift:16:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_arr = numbers.split(\" \")\n    var sorted_arr = []\n    for i := 0; i < len(numbers_arr); i++ {\n        var num = numbers_arr[i]\n        var num_int = parseInt(num)\n        if num_int < 10 {\n            sorted_arr.append(num)\n        } else {\n            var num_int_str = num.substr(0, num.length - 1)\n            var num_int_str_int = parseInt(num_int_str)\n            if num_int_str_int < 10 {\n                sorted_arr.append(num_int_str)\n            } else {\n                sorted_arr.append(num)\n            }\n        }\n    }\n    return sorted_arr.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmploahs4_7.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n            <#type#>\n/tmp/tmploahs4_7.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n/tmp/tmploahs4_7.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n/tmp/tmploahs4_7.swift:8:31: error: no exact matches in call to instance method 'split'\n    var numbers_arr = numbers.split(\" \")\n                              ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmploahs4_7.swift:9:22: error: empty collection literal requires an explicit type\n    var sorted_arr = []\n                     ^~\n/tmp/tmploahs4_7.swift:25:23: error: value of type '[Any]' has no member 'join'\n    return sorted_arr.join(\" \")\n           ~~~~~~~~~~ ^~~~\n/tmp/tmploahs4_7.swift:12:23: error: cannot find 'parseInt' in scope\n        var num_int = parseInt(num)\n                      ^~~~~~~~\n/tmp/tmploahs4_7.swift:17:35: error: cannot find 'parseInt' in scope\n            var num_int_str_int = parseInt(num_int_str)\n                                  ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpri8kqcvq.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpri8kqcvq.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpri8kqcvq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpri8kqcvq.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpri8kqcvq.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums []int\n    for _, num := range numbers.split(\" \") {\n        nums = append(nums, int(num))\n    }\n    sort.Ints(nums)\n    return strings.Join([]string{strconv.Itoa(nums[0]), strconv.Itoa(nums[1]), strconv.Itoa(nums[2])}, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpqvjdza08.swift:8:13: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n            ^\n            ;\n/tmp/tmpqvjdza08.swift:8:16: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n               ^\n               ;\n/tmp/tmpqvjdza08.swift:9:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers.split(\" \") {\n         ^\n/tmp/tmpqvjdza08.swift:9:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers.split(\" \") {\n         ^\n/tmp/tmpqvjdza08.swift:13:27: error: expected ',' separator\n    return strings.Join([]string{strconv.Itoa(nums[0]), strconv.Itoa(nums[1]), strconv.Itoa(nums[2])}, \" \")\n                          ^\n                          ,\n/tmp/tmpqvjdza08.swift:13:55: error: consecutive statements on a line must be separated by ';'\n    return strings.Join([]string{strconv.Itoa(nums[0]), strconv.Itoa(nums[1]), strconv.Itoa(nums[2])}, \" \")\n                                                      ^\n                                                      ;\n/tmp/tmpqvjdza08.swift:13:55: error: expected expression\n    return strings.Join([]string{strconv.Itoa(nums[0]), strconv.Itoa(nums[1]), strconv.Itoa(nums[2])}, \" \")\n                                                      ^\n/tmp/tmpqvjdza08.swift:8:9: error: type annotation missing in pattern\n    var nums []int\n        ^\n/tmp/tmpqvjdza08.swift:8:14: error: empty collection literal requires an explicit type\n    var nums []int\n             ^~\n/tmp/tmpqvjdza08.swift:8:14: warning: expression of type '[Any]' is unused\n    var nums []int\n             ^~\n/tmp/tmpqvjdza08.swift:8:16: error: cannot find 'int' in scope\n    var nums []int\n               ^~~\n/tmp/tmpqvjdza08.swift:13:12: error: cannot find 'strings' in scope\n    return strings.Join([]string{strconv.Itoa(nums[0]), strconv.Itoa(nums[1]), strconv.Itoa(nums[2])}, \" \")\n           ^~~~~~~\n/tmp/tmpqvjdza08.swift:13:27: error: cannot find 'string' in scope\n    return strings.Join([]string{strco",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if numbers_array[i] == \"zero\" {\n            sorted_numbers.append(\"zero\")\n        } else if numbers_array[i] == \"one\" {\n            sorted_numbers.append(\"one\")\n        } else if numbers_array[i] == \"two\" {\n            sorted_numbers.append(\"two\")\n        } else if numbers_array[i] == \"three\" {\n            sorted_numbers.append(\"three\")\n        } else if numbers_array[i] == \"four\" {\n            sorted_numbers.append(\"four\")\n        } else if numbers_array[i] == \"five\" {\n            sorted_numbers.append(\"five\")\n        } else if numbers_array[i] == \"six\" {\n            sorted_numbers.append(\"six\")\n        } else if numbers_array[i] == \"seven\" {\n            sorted_numbers.append(\"seven\")\n        } else if numbers_array[i] == \"eight\" {\n            sorted_numbers.append(\"eight\")\n        } else if numbers_array[i] == \"nine\" {\n            sorted_numbers.append(\"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpjq9nvrhe.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpjq9nvrhe.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpjq9nvrhe.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpjq9nvrhe.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpjq9nvrhe.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpjq9nvrhe.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpjq9nvrhe.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpjq9nvrhe.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_arr = numbers.split(\" \")\n    var numbers_arr_sorted = []\n    for i := 0; i < len(numbers_arr); i++ {\n        var number = numbers_arr[i]\n        var number_int = parseInt(number)\n        numbers_arr_sorted.append(number_int)\n    }\n    numbers_arr_sorted.sort()\n    var numbers_arr_sorted_str = \"\"\n    for i := 0; i < len(numbers_arr_sorted); i++ {\n        var number = numbers_arr_sorted[i]\n        numbers_arr_sorted_str += number\n        if i < len(numbers_arr_sorted) - 1 {\n            numbers_arr_sorted_str += \" \"\n        }\n    }\n    return numbers_arr_sorted_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp2yz9uy_n.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp2yz9uy_n.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n/tmp/tmp2yz9uy_n.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n/tmp/tmp2yz9uy_n.swift:17:12: error: expected type\n    for i := 0; i < len(numbers_arr_sorted); i++ {\n           ^\n            <#type#>\n/tmp/tmp2yz9uy_n.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_arr_sorted); i++ {\n           ^\n/tmp/tmp2yz9uy_n.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_arr_sorted); i++ {\n           ^\n/tmp/tmp2yz9uy_n.swift:8:31: error: no exact matches in call to instance method 'split'\n    var numbers_arr = numbers.split(\" \")\n                              ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp2yz9uy_n.swift:9:30: error: empty collection literal requires an explicit type\n    var numbers_arr_sorted = []\n                             ^~\n/tmp/tmp2yz9uy_n.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for i := 0; i < len(numbers_split); i++ {\n        var number = strings.Trim(numbers_split[i], \" \")\n        if number == \"zero\" {\n            numbers_sorted = append(numbers_sorted, \"zero\")\n        } else if number == \"one\" {\n            numbers_sorted = append(numbers_sorted, \"one\")\n        } else if number == \"two\" {\n            numbers_sorted = append(numbers_sorted, \"two\")\n        } else if number == \"three\" {\n            numbers_sorted = append(numbers_sorted, \"three\")\n        } else if number == \"four\" {\n            numbers_sorted = append(numbers_sorted, \"four\")\n        } else if number == \"five\" {\n            numbers_sorted = append(numbers_sorted, \"five\")\n        } else if number == \"six\" {\n            numbers_sorted = append(numbers_sorted, \"six\")\n        } else if number == \"seven\" {\n            numbers_sorted = append(numbers_sorted, \"seven\")\n        } else if number == \"eight\" {\n            numbers_sorted = append(numbers_sorted, \"eight\")\n        } else if number == \"nine\" {\n            numbers_sorted = append(numbers_sorted, \"nine\")\n        }\n    }\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpw2bw8dnm.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmpw2bw8dnm.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n            <#type#>\n/tmp/tmpw2bw8dnm.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n/tmp/tmpw2bw8dnm.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n/tmp/tmpw2bw8dnm.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpw2bw8dnm.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmpw2bw8dnm.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmpw2bw8dnm.swift:34:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n/tmp/tmpw2bw8dnm.swift:11:22: error: cannot find 'strings' in scope\n        var number = strings.Trim(numbers_split[i], \" \")\n                     ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_array {\n        if number == \"zero\" {\n            sorted_numbers.append(\"zero\")\n        } else if number == \"one\" {\n            sorted_numbers.append(\"one\")\n        } else if number == \"two\" {\n            sorted_numbers.append(\"two\")\n        } else if number == \"three\" {\n            sorted_numbers.append(\"three\")\n        } else if number == \"four\" {\n            sorted_numbers.append(\"four\")\n        } else if number == \"five\" {\n            sorted_numbers.append(\"five\")\n        } else if number == \"six\" {\n            sorted_numbers.append(\"six\")\n        } else if number == \"seven\" {\n            sorted_numbers.append(\"seven\")\n        } else if number == \"eight\" {\n            sorted_numbers.append(\"eight\")\n        } else if number == \"nine\" {\n            sorted_numbers.append(\"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpzavuwh_v.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpzavuwh_v.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_array {\n         ^\n/tmp/tmpzavuwh_v.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_array {\n         ^\n/tmp/tmpzavuwh_v.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpzavuwh_v.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpzavuwh_v.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpzavuwh_v.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpri8kqcvq.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpri8kqcvq.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpri8kqcvq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpri8kqcvq.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpri8kqcvq.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpomyw_thv.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                         ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:39: error: cannot find 'sorted' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                                      ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpri8kqcvq.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpri8kqcvq.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpri8kqcvq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpri8kqcvq.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpri8kqcvq.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp6bba_pzk.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp6bba_pzk.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp6bba_pzk.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp6bba_pzk.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp6bba_pzk.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list: List[Int] = []\n    var numbers_string: String = \"\"\n    var number: Int\n    var number_index: Int\n    var number_index_prev: Int\n    var number_index_next: Int\n    var number_index_next_prev: Int\n    var number_index_next_next: Int\n    var number_index_next_next_prev: Int\n    var number_index_next_next_next: Int\n    var number_index_next_next_next_prev: Int\n    var number_index_next_next_next_next: Int\n    var number_index_next_next_next_next_prev: Int\n    var number_index_next_next_next_next_next: Int\n    var number_index_next_next_next_next_next_prev: Int\n    var number_index_next_next_next_next_next_next: Int\n    var number_index_next_next_next_next_next_next_prev: Int\n    var number_index_next_next_next_next_next_next_next: Int\n    var number_index_next_next_next_next_next_next_next_prev: Int\n    var number_index_next_next_next_next_next_next_next_next: Int\n    var number_index_next_next_next_next_next_next_next_next_prev: Int\n    var number_index_next_next_next_next_next_next_next_next_next: Int\n    var number_index_next_next_next_next_next_next_next_next_next_prev: Int\n    var number_index_next_next_next_next_next_next_next_next_next_next: Int\n    var number_index_next_next_next_next_next_next_next_next_next_next_prev: Int\n    var number_index_next_next_next_next_next_next_next_next_next_next_next: Int\n    var number_index_next_next_next_next_next_next_next_next_next_next_next_prev: Int\n    var number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp7eye2yzm.swift:8:27: error: array types are now written with the brackets around the element type\n    var numbers_list: List[Int] = []\n                          ^\n                      [   \n/tmp/tmp7eye2yzm.swift:8:23: error: cannot find type 'List' in scope\n    var numbers_list: List[Int] = []\n                      ^~~~\n/tmp/tmp7eye2yzm.swift:35:9: error: type annotation missing in pattern\n    var number\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpomyw_thv.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                         ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:39: error: cannot find 'sorted' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                                      ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums = strings.Split(numbers, \" \")\n    sort.Ints(nums)\n    return strings.Join(nums, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmprj_dcl1j.swift:8:16: error: cannot find 'strings' in scope\n    var nums = strings.Split(numbers, \" \")\n               ^~~~~~~\n/tmp/tmprj_dcl1j.swift:9:5: error: cannot find 'sort' in scope\n    sort.Ints(nums)\n    ^~~~\n/tmp/tmprj_dcl1j.swift:10:12: error: cannot find 'strings' in scope\n    return strings.Join(nums, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 9 {\n            number_int = 9\n        }\n        if number_int < 0 {\n            number_int = 0\n        }\n        sorted_numbers = append(sorted_numbers, number_int)\n    }\n    sorted_numbers.sort()\n    sorted_numbers.reverse()\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpv1sl64b5.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpv1sl64b5.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpv1sl64b5.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpv1sl64b5.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpv1sl64b5.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmpv1sl64b5.swift:23:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmpv1sl64b5.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for _, num := range numbers_split {\n        if num == \"zero\" {\n            numbers_sorted = append(numbers_sorted, \"zero\")\n        } else if num == \"one\" {\n            numbers_sorted = append(numbers_sorted, \"one\")\n        } else if num == \"two\" {\n            numbers_sorted = append(numbers_sorted, \"two\")\n        } else if num == \"three\" {\n            numbers_sorted = append(numbers_sorted, \"three\")\n        } else if num == \"four\" {\n            numbers_sorted = append(numbers_sorted, \"four\")\n        } else if num == \"five\" {\n            numbers_sorted = append(numbers_sorted, \"five\")\n        } else if num == \"six\" {\n            numbers_sorted = append(numbers_sorted, \"six\")\n        } else if num == \"seven\" {\n            numbers_sorted = append(numbers_sorted, \"seven\")\n        } else if num == \"eight\" {\n            numbers_sorted = append(numbers_sorted, \"eight\")\n        } else if num == \"nine\" {\n            numbers_sorted = append(numbers_sorted, \"nine\")\n        }\n    }\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpq_zc7mv8.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmpq_zc7mv8.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpq_zc7mv8.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpq_zc7mv8.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpq_zc7mv8.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmpq_zc7mv8.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmpq_zc7mv8.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if numbers_array[i] == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        } else if numbers_array[i] == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if numbers_array[i] == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if numbers_array[i] == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if numbers_array[i] == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if numbers_array[i] == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if numbers_array[i] == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if numbers_array[i] == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if numbers_array[i] == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else {\n            sorted_numbers = append(sorted_numbers, numbers_array[i])\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpw72h5yjg.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpw72h5yjg.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpw72h5yjg.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpw72h5yjg.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpw72h5yjg.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpw72h5yjg.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpw72h5yjg.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpw72h5yjg.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    sort.Strings(sorted_numbers)\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpkb26zoip.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpkb26zoip.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpkb26zoip.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpkb26zoip.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpkb26zoip.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpkb26zoip.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpkb26zoip.swift:34:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums []int\n    for _, num := range numbers.split(\" \") {\n        nums = append(nums, int(num))\n    }\n    sort.Ints(nums)\n    return strings.Join(numbers.split(\" \"), \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmph_9iptlh.swift:8:13: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n            ^\n            ;\n/tmp/tmph_9iptlh.swift:8:16: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n               ^\n               ;\n/tmp/tmph_9iptlh.swift:9:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers.split(\" \") {\n         ^\n/tmp/tmph_9iptlh.swift:9:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers.split(\" \") {\n         ^\n/tmp/tmph_9iptlh.swift:8:9: error: type annotation missing in pattern\n    var nums []int\n        ^\n/tmp/tmph_9iptlh.swift:8:14: error: empty collection literal requires an explicit type\n    var nums []int\n             ^~\n/tmp/tmph_9iptlh.swift:8:14: warning: expression of type '[Any]' is unused\n    var nums []int\n             ^~\n/tmp/tmph_9iptlh.swift:8:16: error: cannot find 'int' in scope\n    var nums []int\n               ^~~\n/tmp/tmph_9iptlh.swift:13:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers.split(\" \"), \" \")\n           ^~~~~~~\n/tmp/tmph_9iptlh.swift:13:39: error: missing argument label 'separator:' in call\n    return strings.Join(numbers.split(\" \"), \" \")\n                                      ^\n                                      separator: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 9 {\n            number_int = 9\n        }\n        if number_int < 0 {\n            number_int = 0\n        }\n        sorted_numbers.append(number_int)\n    }\n    sorted_numbers.sort()\n    sorted_numbers.reverse()\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp57w5wj1h.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmp57w5wj1h.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp57w5wj1h.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp57w5wj1h.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp57w5wj1h.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmp57w5wj1h.swift:23:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmp57w5wj1h.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var numbers_array_sorted = []\n    for i := 0; i < len(numbers_array); i++ {\n        numbers_array_sorted.append(numbers_array[i])\n    }\n    numbers_array_sorted.sort()\n    return strings.Join(numbers_array_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpp1ock_vc.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpp1ock_vc.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpp1ock_vc.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpp1ock_vc.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpp1ock_vc.swift:9:32: error: empty collection literal requires an explicit type\n    var numbers_array_sorted = []\n                               ^~\n/tmp/tmpp1ock_vc.swift:14:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_array_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for _, number := range numbers_split {\n        if number != \"\" {\n            numbers_sorted = append(numbers_sorted, number)\n        }\n    }\n    sort.Strings(numbers_sorted)\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpcy2nvm70.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmpcy2nvm70.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_split {\n         ^\n/tmp/tmpcy2nvm70.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_split {\n         ^\n/tmp/tmpcy2nvm70.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpcy2nvm70.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmpcy2nvm70.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmpcy2nvm70.swift:16:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_arr = strings.Split(numbers, \" \")\n    var numbers_arr_sorted = []string{}\n    var numbers_arr_sorted_temp = []string{}\n    var numbers_arr_sorted_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpiydabkog.swift:9:32: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted = []string{}\n                               ^\n                               ;\n/tmp/tmpiydabkog.swift:10:37: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted_temp = []string{}\n                                    ^\n                                    ;\n/tmp/tmpiydabkog.swift:11:42: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted_temp_temp = []string{}\n                                         ^\n                                         ;\n/tmp/tmpiydabkog.swift:12:47: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted_temp_temp_temp = []string{}\n                                              ^\n                                              ;\n/tmp/tmpiydabkog.swift:13:52: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted_temp_temp_temp_temp = []string{}\n                                                   ^\n                                                   ;\n/tmp/tmpiydabkog.swift:14:57: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted_temp_temp_temp_temp_temp = []string{}\n                                                        ^\n                                                        ;\n/tmp/tmpiydabkog.swift:15:62: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp = []string{}\n                                                             ^\n                                                             ;\n/tmp/tmpiydabkog.swift:16:67: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp = []string{}\n                                                                  ^\n                                                                  ;\n/tmp/tmpiydabkog.swif",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []int{}\n    for _, num := range numbers_list {\n        num_int, err := strconv.Atoi(num)\n        if err != nil {\n            panic(err)\n        }\n        sorted_numbers = append(sorted_numbers, num_int)\n    }\n    sort.Ints(sorted_numbers)\n    sorted_numbers_str := \"\"\n    for _, num := range sorted_numbers {\n        sorted_numbers_str += strconv.Itoa(num) + \" \"\n    }\n    return strings.TrimSpace(sorted_numbers_str)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpfzfx_tl0.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []int{}\n                           ^\n                           ;\n/tmp/tmpfzfx_tl0.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpfzfx_tl0.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpfzfx_tl0.swift:11:16: error: consecutive statements on a line must be separated by ';'\n        num_int, err := strconv.Atoi(num)\n               ^\n               ;\n/tmp/tmpfzfx_tl0.swift:11:16: error: expected expression\n        num_int, err := strconv.Atoi(num)\n               ^\n/tmp/tmpfzfx_tl0.swift:19:10: error: expected 'in' after for-each pattern\n    for _, num := range sorted_numbers {\n         ^\n/tmp/tmpfzfx_tl0.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, num := range sorted_numbers {\n         ^\n/tmp/tmpfzfx_tl0.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpfzfx_tl0.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []int{}\n                         ^~\n/tmp/tmpfzfx_tl0.swift:9:28: error: cannot find 'int' in scope\n    var sorted_numbers = []int{}\n                           ^~~\n/tmp/tmpfzfx_tl0.swift:22:12: error: cannot find 'strings' in scope\n    return strings.TrimSpace(sorted_numbers_str)\n           ^~~~~~~\n/tmp/tmpfzfx_tl0.swift:22:30: error: cannot find 'sorted_numbers_str' in scope\n    return strings.TrimSpace(sorted_numbers_str)\n                             ^~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = numbers.split(\" \")\n    numbers.sort()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpnq7rm2ma.swift:8:23: error: no exact matches in call to instance method 'split'\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:5: error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers = numbers.split(\" \")\n    ^~~~~~~\n/tmp/tmpnq7rm2ma.swift:8:23: error: no 'split' candidates produce the expected contextual result type 'String'\n    numbers = numbers.split(\" \")\n                      ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpnq7rm2ma.swift:9:13: error: value of type 'String' has no member 'sort'\n    numbers.sort()\n    ~~~~~~~ ^~~~\n/tmp/tmpnq7rm2ma.swift:10:20: error: value of type 'String' has no member 'join'\n    return numbers.join(\" \")\n           ~~~~~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpomyw_thv.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                         ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:39: error: cannot find 'sorted' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                                      ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if numbers_array[i] == \"one\" {\n            sorted_numbers.append(\"one\")\n        } else if numbers_array[i] == \"two\" {\n            sorted_numbers.append(\"two\")\n        } else if numbers_array[i] == \"three\" {\n            sorted_numbers.append(\"three\")\n        } else if numbers_array[i] == \"four\" {\n            sorted_numbers.append(\"four\")\n        } else if numbers_array[i] == \"five\" {\n            sorted_numbers.append(\"five\")\n        } else if numbers_array[i] == \"six\" {\n            sorted_numbers.append(\"six\")\n        } else if numbers_array[i] == \"seven\" {\n            sorted_numbers.append(\"seven\")\n        } else if numbers_array[i] == \"eight\" {\n            sorted_numbers.append(\"eight\")\n        } else if numbers_array[i] == \"nine\" {\n            sorted_numbers.append(\"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpvkueeoj4.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpvkueeoj4.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpvkueeoj4.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpvkueeoj4.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpvkueeoj4.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpvkueeoj4.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpvkueeoj4.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpvkueeoj4.swift:31:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpri8kqcvq.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpri8kqcvq.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpri8kqcvq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpri8kqcvq.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpri8kqcvq.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        if number == \"zero\" {\n            sorted_numbers.append(number)\n        } else if number == \"one\" {\n            sorted_numbers.append(number)\n        } else if number == \"two\" {\n            sorted_numbers.append(number)\n        } else if number == \"three\" {\n            sorted_numbers.append(number)\n        } else if number == \"four\" {\n            sorted_numbers.append(number)\n        } else if number == \"five\" {\n            sorted_numbers.append(number)\n        } else if number == \"six\" {\n            sorted_numbers.append(number)\n        } else if number == \"seven\" {\n            sorted_numbers.append(number)\n        } else if number == \"eight\" {\n            sorted_numbers.append(number)\n        } else if number == \"nine\" {\n            sorted_numbers.append(number)\n        }\n    }\n    return sorted_numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpftktixno.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpftktixno.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpftktixno.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpftktixno.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpftktixno.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmpftktixno.swift:34:27: error: value of type '[Any]' has no member 'join'\n    return sorted_numbers.join(\" \")\n           ~~~~~~~~~~~~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpri8kqcvq.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpri8kqcvq.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpri8kqcvq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpri8kqcvq.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpri8kqcvq.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else {\n            sorted_numbers = append(sorted_numbers, num)\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpotxnlw9r.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpotxnlw9r.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpotxnlw9r.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpotxnlw9r.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpotxnlw9r.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpotxnlw9r.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpotxnlw9r.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_split {\n        if number == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if number == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if number == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if number == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if number == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if number == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if number == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if number == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if number == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if number == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp88xx1mev.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp88xx1mev.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_split {\n         ^\n/tmp/tmp88xx1mev.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_split {\n         ^\n/tmp/tmp88xx1mev.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmp88xx1mev.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp88xx1mev.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp88xx1mev.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_arr = strings.Split(numbers, \" \")\n    var numbers_arr_sorted = []string{}\n    var numbers_arr_sorted_temp = []string{}\n    var numbers_arr_sorted_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = []string{}\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpiydabkog.swift:9:32: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted = []string{}\n                               ^\n                               ;\n/tmp/tmpiydabkog.swift:10:37: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted_temp = []string{}\n                                    ^\n                                    ;\n/tmp/tmpiydabkog.swift:11:42: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted_temp_temp = []string{}\n                                         ^\n                                         ;\n/tmp/tmpiydabkog.swift:12:47: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted_temp_temp_temp = []string{}\n                                              ^\n                                              ;\n/tmp/tmpiydabkog.swift:13:52: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted_temp_temp_temp_temp = []string{}\n                                                   ^\n                                                   ;\n/tmp/tmpiydabkog.swift:14:57: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted_temp_temp_temp_temp_temp = []string{}\n                                                        ^\n                                                        ;\n/tmp/tmpiydabkog.swift:15:62: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp = []string{}\n                                                             ^\n                                                             ;\n/tmp/tmpiydabkog.swift:16:67: error: consecutive statements on a line must be separated by ';'\n    var numbers_arr_sorted_temp_temp_temp_temp_temp_temp_temp = []string{}\n                                                                  ^\n                                                                  ;\n/tmp/tmpiydabkog.swif",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sorted(numbers_array), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp_age3m7n.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmp_age3m7n.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_array), \" \")\n                         ^~~~~~~\n/tmp/tmp_age3m7n.swift:9:39: error: cannot find 'sorted' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_array), \" \")\n                                      ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if numbers_array[i] == \"one\" {\n            numbers_array[i] = \"one\"\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if numbers_array[i] == \"two\" {\n            numbers_array[i] = \"two\"\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if numbers_array[i] == \"three\" {\n            numbers_array[i] = \"three\"\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if numbers_array[i] == \"four\" {\n            numbers_array[i] = \"four\"\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if numbers_array[i] == \"five\" {\n            numbers_array[i] = \"five\"\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if numbers_array[i] == \"six\" {\n            numbers_array[i] = \"six\"\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if numbers_array[i] == \"seven\" {\n            numbers_array[i] = \"seven\"\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if numbers_array[i] == \"eight\" {\n            numbers_array[i] = \"eight\"\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if numbers_array[i] == \"nine\" {\n            numbers_array[i] = \"nine\"\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpxsmudz01.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpxsmudz01.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpxsmudz01.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpxsmudz01.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpxsmudz01.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpxsmudz01.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpxsmudz01.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpxsmudz01.swift:40:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpri8kqcvq.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpri8kqcvq.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpri8kqcvq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpri8kqcvq.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpri8kqcvq.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 0 && number_int < 10 {\n            sorted_numbers = append(sorted_numbers, number)\n        }\n    }\n    sorted_numbers.sort()\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpk2rcz34x.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpk2rcz34x.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpk2rcz34x.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpk2rcz34x.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpk2rcz34x.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpk2rcz34x.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpk2rcz34x.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpk2rcz34x.swift:18:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmpk2rcz34x.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_array {\n        if number != \"\" {\n            sorted_numbers = append(sorted_numbers, number)\n        }\n    }\n    sort.Strings(sorted_numbers)\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmph9izvr7_.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmph9izvr7_.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_array {\n         ^\n/tmp/tmph9izvr7_.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_array {\n         ^\n/tmp/tmph9izvr7_.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmph9izvr7_.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmph9izvr7_.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmph9izvr7_.swift:16:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = numbers.split(\" \")\n    numbers.sort()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpnq7rm2ma.swift:8:23: error: no exact matches in call to instance method 'split'\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:5: error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers = numbers.split(\" \")\n    ^~~~~~~\n/tmp/tmpnq7rm2ma.swift:8:23: error: no 'split' candidates produce the expected contextual result type 'String'\n    numbers = numbers.split(\" \")\n                      ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpnq7rm2ma.swift:9:13: error: value of type 'String' has no member 'sort'\n    numbers.sort()\n    ~~~~~~~ ^~~~\n/tmp/tmpnq7rm2ma.swift:10:20: error: value of type 'String' has no member 'join'\n    return numbers.join(\" \")\n           ~~~~~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpomyw_thv.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                         ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:39: error: cannot find 'sorted' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                                      ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        if number == \"zero\" {\n            sorted_numbers.append(\"zero\")\n        } else if number == \"one\" {\n            sorted_numbers.append(\"one\")\n        } else if number == \"two\" {\n            sorted_numbers.append(\"two\")\n        } else if number == \"three\" {\n            sorted_numbers.append(\"three\")\n        } else if number == \"four\" {\n            sorted_numbers.append(\"four\")\n        } else if number == \"five\" {\n            sorted_numbers.append(\"five\")\n        } else if number == \"six\" {\n            sorted_numbers.append(\"six\")\n        } else if number == \"seven\" {\n            sorted_numbers.append(\"seven\")\n        } else if number == \"eight\" {\n            sorted_numbers.append(\"eight\")\n        } else if number == \"nine\" {\n            sorted_numbers.append(\"nine\")\n        }\n    }\n    return sorted_numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp8p5zp3ne.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmp8p5zp3ne.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp8p5zp3ne.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp8p5zp3ne.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp8p5zp3ne.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmp8p5zp3ne.swift:34:27: error: value of type '[Any]' has no member 'join'\n    return sorted_numbers.join(\" \")\n           ~~~~~~~~~~~~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 0 && number_int < 10 {\n            sorted_numbers.append(number)\n        }\n    }\n    sorted_numbers.sort()\n    return strings.join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp5imy20sw.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmp5imy20sw.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp5imy20sw.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp5imy20sw.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp5imy20sw.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmp5imy20sw.swift:18:12: error: cannot find 'strings' in scope\n    return strings.join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmp5imy20sw.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpomyw_thv.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                         ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:39: error: cannot find 'sorted' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                                      ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpri8kqcvq.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpri8kqcvq.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpri8kqcvq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpri8kqcvq.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpri8kqcvq.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []int{}\n    for _, num := range numbers_array {\n        num_int, _ := strconv.Atoi(num)\n        sorted_numbers = append(sorted_numbers, num_int)\n    }\n    sort.Ints(sorted_numbers)\n    var sorted_string = \"\"\n    for _, num := range sorted_numbers {\n        sorted_string += strconv.Itoa(num) + \" \"\n    }\n    return strings.TrimSpace(sorted_string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp5rflplkt.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []int{}\n                           ^\n                           ;\n/tmp/tmp5rflplkt.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmp5rflplkt.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmp5rflplkt.swift:11:16: error: consecutive statements on a line must be separated by ';'\n        num_int, _ := strconv.Atoi(num)\n               ^\n               ;\n/tmp/tmp5rflplkt.swift:11:16: error: expected expression\n        num_int, _ := strconv.Atoi(num)\n               ^\n/tmp/tmp5rflplkt.swift:16:10: error: expected 'in' after for-each pattern\n    for _, num := range sorted_numbers {\n         ^\n/tmp/tmp5rflplkt.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, num := range sorted_numbers {\n         ^\n/tmp/tmp5rflplkt.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmp5rflplkt.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []int{}\n                         ^~\n/tmp/tmp5rflplkt.swift:9:28: error: cannot find 'int' in scope\n    var sorted_numbers = []int{}\n                           ^~~\n/tmp/tmp5rflplkt.swift:19:12: error: cannot find 'strings' in scope\n    return strings.TrimSpace(sorted_string)\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_list {\n        if number == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        } else if number == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if number == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if number == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if number == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if number == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if number == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if number == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if number == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else {\n            sorted_numbers = append(sorted_numbers, number)\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpcuk5bo9v.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpcuk5bo9v.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_list {\n         ^\n/tmp/tmpcuk5bo9v.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_list {\n         ^\n/tmp/tmpcuk5bo9v.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpcuk5bo9v.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpcuk5bo9v.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpcuk5bo9v.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp6bba_pzk.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp6bba_pzk.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp6bba_pzk.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp6bba_pzk.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp6bba_pzk.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_arr = numbers.split(\" \")\n    var numbers_arr_sorted = []\n    for i in range(len(numbers_arr)):\n        numbers_arr_sorted.append(numbers_arr[i])\n    numbers_arr_sorted.sort()\n    return strings.join(numbers_arr_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp1a5ra3xf.swift:10:37: error: expected '{' to start the body of for-each loop\n    for i in range(len(numbers_arr)):\n                                    ^\n/tmp/tmp1a5ra3xf.swift:8:31: error: no exact matches in call to instance method 'split'\n    var numbers_arr = numbers.split(\" \")\n                              ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp1a5ra3xf.swift:9:30: error: empty collection literal requires an explicit type\n    var numbers_arr_sorted = []\n                             ^~\n/tmp/tmp1a5ra3xf.swift:10:14: error: cannot find 'range' in scope\n    for i in range(len(numbers_arr)):\n             ^~~~~\n/tmp/tmp1a5ra3xf.swift:10:20: error: cannot find 'len' in scope\n    for i in range(len(numbers_arr)):\n                   ^~~\n/tmp/tmp1a5ra3xf.swift:13:12: error: cannot find 'strings' in scope\n    return strings.join(numbers_arr_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpomyw_thv.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                         ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:39: error: cannot find 'sorted' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                                      ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 0 && number_int < 10 {\n            sorted_numbers.append(number)\n        }\n    }\n    sorted_numbers.sort()\n    return sorted_numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp4a_3mgjg.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmp4a_3mgjg.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp4a_3mgjg.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp4a_3mgjg.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp4a_3mgjg.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmp4a_3mgjg.swift:18:27: error: value of type '[Any]' has no member 'join'\n    return sorted_numbers.join(\" \")\n           ~~~~~~~~~~~~~~ ^~~~\n/tmp/tmp4a_3mgjg.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpomyw_thv.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                         ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:39: error: cannot find 'sorted' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                                      ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int < 0 || number_int > 9 {\n            return \"Invalid input\"\n        }\n        sorted_numbers.append(number)\n    }\n    sorted_numbers.sort()\n    return sorted_numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpm57n2epz.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpm57n2epz.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpm57n2epz.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpm57n2epz.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpm57n2epz.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmpm57n2epz.swift:19:27: error: value of type '[Any]' has no member 'join'\n    return sorted_numbers.join(\" \")\n           ~~~~~~~~~~~~~~ ^~~~\n/tmp/tmpm57n2epz.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 0 && number_int < 10 {\n            sorted_numbers.append(number)\n        }\n    }\n    sorted_numbers.sort()\n    return sorted_numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp4a_3mgjg.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmp4a_3mgjg.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp4a_3mgjg.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp4a_3mgjg.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp4a_3mgjg.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmp4a_3mgjg.swift:18:27: error: value of type '[Any]' has no member 'join'\n    return sorted_numbers.join(\" \")\n           ~~~~~~~~~~~~~~ ^~~~\n/tmp/tmp4a_3mgjg.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for i := 0; i < len(numbers_split); i++ {\n        var number = strings.Trim(numbers_split[i], \" \")\n        if number == \"zero\" {\n            numbers_sorted = append(numbers_sorted, \"zero\")\n        } else if number == \"one\" {\n            numbers_sorted = append(numbers_sorted, \"one\")\n        } else if number == \"two\" {\n            numbers_sorted = append(numbers_sorted, \"two\")\n        } else if number == \"three\" {\n            numbers_sorted = append(numbers_sorted, \"three\")\n        } else if number == \"four\" {\n            numbers_sorted = append(numbers_sorted, \"four\")\n        } else if number == \"five\" {\n            numbers_sorted = append(numbers_sorted, \"five\")\n        } else if number == \"six\" {\n            numbers_sorted = append(numbers_sorted, \"six\")\n        } else if number == \"seven\" {\n            numbers_sorted = append(numbers_sorted, \"seven\")\n        } else if number == \"eight\" {\n            numbers_sorted = append(numbers_sorted, \"eight\")\n        } else if number == \"nine\" {\n            numbers_sorted = append(numbers_sorted, \"nine\")\n        }\n    }\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpw2bw8dnm.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmpw2bw8dnm.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n            <#type#>\n/tmp/tmpw2bw8dnm.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n/tmp/tmpw2bw8dnm.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n/tmp/tmpw2bw8dnm.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpw2bw8dnm.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmpw2bw8dnm.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmpw2bw8dnm.swift:34:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n/tmp/tmpw2bw8dnm.swift:11:22: error: cannot find 'strings' in scope\n        var number = strings.Trim(numbers_split[i], \" \")\n                     ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = numbers.split(\" \")\n    numbers.sort()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpnq7rm2ma.swift:8:23: error: no exact matches in call to instance method 'split'\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:5: error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers = numbers.split(\" \")\n    ^~~~~~~\n/tmp/tmpnq7rm2ma.swift:8:23: error: no 'split' candidates produce the expected contextual result type 'String'\n    numbers = numbers.split(\" \")\n                      ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpnq7rm2ma.swift:9:13: error: value of type 'String' has no member 'sort'\n    numbers.sort()\n    ~~~~~~~ ^~~~\n/tmp/tmpnq7rm2ma.swift:10:20: error: value of type 'String' has no member 'join'\n    return numbers.join(\" \")\n           ~~~~~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for _, num := range numbers_split {\n        if num != \"\" {\n            numbers_sorted = append(numbers_sorted, num)\n        }\n    }\n    sort.Strings(numbers_sorted)\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp2cq7augx.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmp2cq7augx.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_split {\n         ^\n/tmp/tmp2cq7augx.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_split {\n         ^\n/tmp/tmp2cq7augx.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmp2cq7augx.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmp2cq7augx.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmp2cq7augx.swift:16:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp6bba_pzk.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp6bba_pzk.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp6bba_pzk.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp6bba_pzk.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp6bba_pzk.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        sorted_numbers.append(numbers_array[i])\n    }\n    sorted_numbers.sort()\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpb0rqpdo1.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpb0rqpdo1.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpb0rqpdo1.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpb0rqpdo1.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpb0rqpdo1.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmpb0rqpdo1.swift:14:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        sorted_numbers = append(sorted_numbers, numbers_array[i])\n    }\n    sorted_numbers.sort()\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp_71wclk2.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp_71wclk2.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmp_71wclk2.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp_71wclk2.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp_71wclk2.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp_71wclk2.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp_71wclk2.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp_71wclk2.swift:14:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpri8kqcvq.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpri8kqcvq.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpri8kqcvq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpri8kqcvq.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpri8kqcvq.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums []int\n    var num_strs []string\n    for _, num_str := range strings.Split(numbers, \" \") {\n        num, err := strconv.Atoi(num_str)\n        if err != nil {\n            panic(err)\n        }\n        nums = append(nums, num)\n        num_strs = append(num_strs, num_str)\n    }\n    sort.Ints(nums)\n    return strings.Join(num_strs, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp8ddb4ma0.swift:8:13: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n            ^\n            ;\n/tmp/tmp8ddb4ma0.swift:8:16: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n               ^\n               ;\n/tmp/tmp8ddb4ma0.swift:9:17: error: consecutive statements on a line must be separated by ';'\n    var num_strs []string\n                ^\n                ;\n/tmp/tmp8ddb4ma0.swift:9:20: error: consecutive statements on a line must be separated by ';'\n    var num_strs []string\n                   ^\n                   ;\n/tmp/tmp8ddb4ma0.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num_str := range strings.Split(numbers, \" \") {\n         ^\n/tmp/tmp8ddb4ma0.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num_str := range strings.Split(numbers, \" \") {\n         ^\n/tmp/tmp8ddb4ma0.swift:11:12: error: consecutive statements on a line must be separated by ';'\n        num, err := strconv.Atoi(num_str)\n           ^\n           ;\n/tmp/tmp8ddb4ma0.swift:11:12: error: expected expression\n        num, err := strconv.Atoi(num_str)\n           ^\n/tmp/tmp8ddb4ma0.swift:8:9: error: type annotation missing in pattern\n    var nums []int\n        ^\n/tmp/tmp8ddb4ma0.swift:8:14: error: empty collection literal requires an explicit type\n    var nums []int\n             ^~\n/tmp/tmp8ddb4ma0.swift:8:14: warning: expression of type '[Any]' is unused\n    var nums []int\n             ^~\n/tmp/tmp8ddb4ma0.swift:8:16: error: cannot find 'int' in scope\n    var nums []int\n               ^~~\n/tmp/tmp8ddb4ma0.swift:9:9: error: type annotation missing in pattern\n    var num_strs []string\n        ^\n/tmp/tmp8ddb4ma0.swift:9:18: error: empty collection literal requires an explicit type\n    var num_strs []string\n                 ^~\n/tmp/tmp8ddb4ma0.swift:9:18: warning: expression of type '[Any]' is unused\n    var num_strs []string\n                 ^~\n/tmp/tmp8ddb4ma0.swift:9:20: error: cannot find 'string' in scope\n    var num_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        sorted_numbers.append(numbers_array[i])\n    }\n    sorted_numbers.sort()\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpb0rqpdo1.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpb0rqpdo1.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpb0rqpdo1.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpb0rqpdo1.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpb0rqpdo1.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmpb0rqpdo1.swift:14:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for _, number := range numbers_split {\n        if number == \"zero\" {\n            numbers_sorted = append(numbers_sorted, \"zero\")\n        } else if number == \"one\" {\n            numbers_sorted = append(numbers_sorted, \"one\")\n        } else if number == \"two\" {\n            numbers_sorted = append(numbers_sorted, \"two\")\n        } else if number == \"three\" {\n            numbers_sorted = append(numbers_sorted, \"three\")\n        } else if number == \"four\" {\n            numbers_sorted = append(numbers_sorted, \"four\")\n        } else if number == \"five\" {\n            numbers_sorted = append(numbers_sorted, \"five\")\n        } else if number == \"six\" {\n            numbers_sorted = append(numbers_sorted, \"six\")\n        } else if number == \"seven\" {\n            numbers_sorted = append(numbers_sorted, \"seven\")\n        } else if number == \"eight\" {\n            numbers_sorted = append(numbers_sorted, \"eight\")\n        } else if number == \"nine\" {\n            numbers_sorted = append(numbers_sorted, \"nine\")\n        }\n    }\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpxcbnal50.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmpxcbnal50.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_split {\n         ^\n/tmp/tmpxcbnal50.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_split {\n         ^\n/tmp/tmpxcbnal50.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpxcbnal50.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmpxcbnal50.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmpxcbnal50.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 0 && number_int <= 9 {\n            sorted_numbers.append(number)\n        }\n    }\n    sorted_numbers.sort()\n    return strings.join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpu6somvvi.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpu6somvvi.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpu6somvvi.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpu6somvvi.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpu6somvvi.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmpu6somvvi.swift:18:12: error: cannot find 'strings' in scope\n    return strings.join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmpu6somvvi.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp6bba_pzk.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp6bba_pzk.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp6bba_pzk.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp6bba_pzk.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp6bba_pzk.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp6bba_pzk.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp6bba_pzk.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp6bba_pzk.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp6bba_pzk.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp6bba_pzk.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp6bba_pzk.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp6bba_pzk.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp6bba_pzk.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp6bba_pzk.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp6bba_pzk.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for i := 0; i < len(numbers_split); i++ {\n        var number = strings.Trim(numbers_split[i], \" \")\n        if number == \"zero\" {\n            numbers_sorted = append(numbers_sorted, \"zero\")\n        } else if number == \"one\" {\n            numbers_sorted = append(numbers_sorted, \"one\")\n        } else if number == \"two\" {\n            numbers_sorted = append(numbers_sorted, \"two\")\n        } else if number == \"three\" {\n            numbers_sorted = append(numbers_sorted, \"three\")\n        } else if number == \"four\" {\n            numbers_sorted = append(numbers_sorted, \"four\")\n        } else if number == \"five\" {\n            numbers_sorted = append(numbers_sorted, \"five\")\n        } else if number == \"six\" {\n            numbers_sorted = append(numbers_sorted, \"six\")\n        } else if number == \"seven\" {\n            numbers_sorted = append(numbers_sorted, \"seven\")\n        } else if number == \"eight\" {\n            numbers_sorted = append(numbers_sorted, \"eight\")\n        } else if number == \"nine\" {\n            numbers_sorted = append(numbers_sorted, \"nine\")\n        }\n    }\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpw2bw8dnm.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmpw2bw8dnm.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n            <#type#>\n/tmp/tmpw2bw8dnm.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n/tmp/tmpw2bw8dnm.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n/tmp/tmpw2bw8dnm.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpw2bw8dnm.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmpw2bw8dnm.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmpw2bw8dnm.swift:34:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n/tmp/tmpw2bw8dnm.swift:11:22: error: cannot find 'strings' in scope\n        var number = strings.Trim(numbers_split[i], \" \")\n                     ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var numbers_array_sorted = []\n    for i := 0; i < len(numbers_array); i++ {\n        numbers_array_sorted.append(numbers_array[i])\n    }\n    numbers_array_sorted.sort()\n    return strings.Join(numbers_array_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpp1ock_vc.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpp1ock_vc.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpp1ock_vc.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpp1ock_vc.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpp1ock_vc.swift:9:32: error: empty collection literal requires an explicit type\n    var numbers_array_sorted = []\n                               ^~\n/tmp/tmpp1ock_vc.swift:14:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_array_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if numbers_array[i] == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        } else if numbers_array[i] == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if numbers_array[i] == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if numbers_array[i] == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if numbers_array[i] == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if numbers_array[i] == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if numbers_array[i] == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if numbers_array[i] == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if numbers_array[i] == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else {\n            sorted_numbers = append(sorted_numbers, numbers_array[i])\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpw72h5yjg.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpw72h5yjg.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpw72h5yjg.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpw72h5yjg.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpw72h5yjg.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpw72h5yjg.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpw72h5yjg.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpw72h5yjg.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_list); i++ {\n        if strings.Contains(numbers_list[i], \"one\") {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if strings.Contains(numbers_list[i], \"two\") {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if strings.Contains(numbers_list[i], \"three\") {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if strings.Contains(numbers_list[i], \"four\") {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if strings.Contains(numbers_list[i], \"five\") {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if strings.Contains(numbers_list[i], \"six\") {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if strings.Contains(numbers_list[i], \"seven\") {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if strings.Contains(numbers_list[i], \"eight\") {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if strings.Contains(numbers_list[i], \"nine\") {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpcwf9zosa.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpcwf9zosa.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_list); i++ {\n           ^\n            <#type#>\n/tmp/tmpcwf9zosa.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_list); i++ {\n           ^\n/tmp/tmpcwf9zosa.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_list); i++ {\n           ^\n/tmp/tmpcwf9zosa.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpcwf9zosa.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpcwf9zosa.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpcwf9zosa.swift:31:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        if number == \"zero\" {\n            sorted_numbers.append(\"zero\")\n        } else if number == \"one\" {\n            sorted_numbers.append(\"one\")\n        } else if number == \"two\" {\n            sorted_numbers.append(\"two\")\n        } else if number == \"three\" {\n            sorted_numbers.append(\"three\")\n        } else if number == \"four\" {\n            sorted_numbers.append(\"four\")\n        } else if number == \"five\" {\n            sorted_numbers.append(\"five\")\n        } else if number == \"six\" {\n            sorted_numbers.append(\"six\")\n        } else if number == \"seven\" {\n            sorted_numbers.append(\"seven\")\n        } else if number == \"eight\" {\n            sorted_numbers.append(\"eight\")\n        } else if number == \"nine\" {\n            sorted_numbers.append(\"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpk26qn49g.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpk26qn49g.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpk26qn49g.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpk26qn49g.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpk26qn49g.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpk26qn49g.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpk26qn49g.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpk26qn49g.swift:34:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var numbers_array_sorted = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        var number = strings.Trim(numbers_array[i], \" \")\n        if number == \"zero\" {\n            numbers_array_sorted = append(numbers_array_sorted, \"zero\")\n        } else if number == \"one\" {\n            numbers_array_sorted = append(numbers_array_sorted, \"one\")\n        } else if number == \"two\" {\n            numbers_array_sorted = append(numbers_array_sorted, \"two\")\n        } else if number == \"three\" {\n            numbers_array_sorted = append(numbers_array_sorted, \"three\")\n        } else if number == \"four\" {\n            numbers_array_sorted = append(numbers_array_sorted, \"four\")\n        } else if number == \"five\" {\n            numbers_array_sorted = append(numbers_array_sorted, \"five\")\n        } else if number == \"six\" {\n            numbers_array_sorted = append(numbers_array_sorted, \"six\")\n        } else if number == \"seven\" {\n            numbers_array_sorted = append(numbers_array_sorted, \"seven\")\n        } else if number == \"eight\" {\n            numbers_array_sorted = append(numbers_array_sorted, \"eight\")\n        } else if number == \"nine\" {\n            numbers_array_sorted = append(numbers_array_sorted, \"nine\")\n        }\n    }\n    return strings.Join(numbers_array_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpsmew76r4.swift:9:34: error: consecutive statements on a line must be separated by ';'\n    var numbers_array_sorted = []string{}\n                                 ^\n                                 ;\n/tmp/tmpsmew76r4.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpsmew76r4.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpsmew76r4.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpsmew76r4.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpsmew76r4.swift:9:32: error: empty collection literal requires an explicit type\n    var numbers_array_sorted = []string{}\n                               ^~\n/tmp/tmpsmew76r4.swift:9:34: error: cannot find 'string' in scope\n    var numbers_array_sorted = []string{}\n                                 ^~~~~~\n/tmp/tmpsmew76r4.swift:34:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_array_sorted, \" \")\n           ^~~~~~~\n/tmp/tmpsmew76r4.swift:11:22: error: cannot find 'strings' in scope\n        var number = strings.Trim(numbers_array[i], \" \")\n                     ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for _, num := range numbers_split {\n        if num == \"zero\" {\n            numbers_sorted = append(numbers_sorted, \"zero\")\n        } else if num == \"one\" {\n            numbers_sorted = append(numbers_sorted, \"one\")\n        } else if num == \"two\" {\n            numbers_sorted = append(numbers_sorted, \"two\")\n        } else if num == \"three\" {\n            numbers_sorted = append(numbers_sorted, \"three\")\n        } else if num == \"four\" {\n            numbers_sorted = append(numbers_sorted, \"four\")\n        } else if num == \"five\" {\n            numbers_sorted = append(numbers_sorted, \"five\")\n        } else if num == \"six\" {\n            numbers_sorted = append(numbers_sorted, \"six\")\n        } else if num == \"seven\" {\n            numbers_sorted = append(numbers_sorted, \"seven\")\n        } else if num == \"eight\" {\n            numbers_sorted = append(numbers_sorted, \"eight\")\n        } else if num == \"nine\" {\n            numbers_sorted = append(numbers_sorted, \"nine\")\n        }\n    }\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpq_zc7mv8.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmpq_zc7mv8.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpq_zc7mv8.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpq_zc7mv8.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpq_zc7mv8.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmpq_zc7mv8.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmpq_zc7mv8.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else {\n            sorted_numbers = append(sorted_numbers, num)\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmppr3gaiat.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmppr3gaiat.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmppr3gaiat.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmppr3gaiat.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmppr3gaiat.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmppr3gaiat.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmppr3gaiat.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp6bba_pzk.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp6bba_pzk.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp6bba_pzk.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp6bba_pzk.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp6bba_pzk.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        var number = strings.TrimSpace(numbers_array[i])\n        if number == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if number == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if number == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if number == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if number == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if number == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if number == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if number == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if number == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if number == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpvnj7mirn.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpvnj7mirn.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpvnj7mirn.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpvnj7mirn.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpvnj7mirn.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpvnj7mirn.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpvnj7mirn.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpvnj7mirn.swift:34:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmpvnj7mirn.swift:11:22: error: cannot find 'strings' in scope\n        var number = strings.TrimSpace(numbers_array[i])\n                     ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpomyw_thv.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                         ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:39: error: cannot find 'sorted' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                                      ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_arr = numbers.split(\" \")\n    var numbers_arr_sorted = []\n    for i := 0; i < len(numbers_arr); i++ {\n        var number = numbers_arr[i]\n        var number_int = parseInt(number)\n        numbers_arr_sorted.append(number_int)\n    }\n    numbers_arr_sorted.sort()\n    var numbers_arr_sorted_string = \"\"\n    for i := 0; i < len(numbers_arr_sorted); i++ {\n        var number = numbers_arr_sorted[i]\n        numbers_arr_sorted_string += number\n        if i < len(numbers_arr_sorted) - 1 {\n            numbers_arr_sorted_string += \" \"\n        }\n    }\n    return numbers_arr_sorted_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpvh9cm7bo.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpvh9cm7bo.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n/tmp/tmpvh9cm7bo.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n/tmp/tmpvh9cm7bo.swift:17:12: error: expected type\n    for i := 0; i < len(numbers_arr_sorted); i++ {\n           ^\n            <#type#>\n/tmp/tmpvh9cm7bo.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_arr_sorted); i++ {\n           ^\n/tmp/tmpvh9cm7bo.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_arr_sorted); i++ {\n           ^\n/tmp/tmpvh9cm7bo.swift:8:31: error: no exact matches in call to instance method 'split'\n    var numbers_arr = numbers.split(\" \")\n                              ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpvh9cm7bo.swift:9:30: error: empty collection literal requires an explicit type\n    var numbers_arr_sorted = []\n                             ^~\n/tmp/tmpvh9cm7bo.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for _, num := range numbers_split {\n        if num == \"zero\" {\n            numbers_sorted = append(numbers_sorted, \"zero\")\n        } else if num == \"one\" {\n            numbers_sorted = append(numbers_sorted, \"one\")\n        } else if num == \"two\" {\n            numbers_sorted = append(numbers_sorted, \"two\")\n        } else if num == \"three\" {\n            numbers_sorted = append(numbers_sorted, \"three\")\n        } else if num == \"four\" {\n            numbers_sorted = append(numbers_sorted, \"four\")\n        } else if num == \"five\" {\n            numbers_sorted = append(numbers_sorted, \"five\")\n        } else if num == \"six\" {\n            numbers_sorted = append(numbers_sorted, \"six\")\n        } else if num == \"seven\" {\n            numbers_sorted = append(numbers_sorted, \"seven\")\n        } else if num == \"eight\" {\n            numbers_sorted = append(numbers_sorted, \"eight\")\n        } else if num == \"nine\" {\n            numbers_sorted = append(numbers_sorted, \"nine\")\n        }\n    }\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpq_zc7mv8.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmpq_zc7mv8.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpq_zc7mv8.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpq_zc7mv8.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpq_zc7mv8.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmpq_zc7mv8.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmpq_zc7mv8.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpri8kqcvq.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpri8kqcvq.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpri8kqcvq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpri8kqcvq.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpri8kqcvq.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_list {\n        if number == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if number == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if number == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if number == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if number == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if number == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if number == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if number == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if number == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if number == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp48r1yc5w.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp48r1yc5w.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_list {\n         ^\n/tmp/tmp48r1yc5w.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_list {\n         ^\n/tmp/tmp48r1yc5w.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp48r1yc5w.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp48r1yc5w.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp48r1yc5w.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_list {\n        if number == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        } else if number == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if number == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if number == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if number == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if number == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if number == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if number == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if number == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else {\n            sorted_numbers = append(sorted_numbers, number)\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpcuk5bo9v.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpcuk5bo9v.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_list {\n         ^\n/tmp/tmpcuk5bo9v.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_list {\n         ^\n/tmp/tmpcuk5bo9v.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpcuk5bo9v.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpcuk5bo9v.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpcuk5bo9v.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp2lfplmmw.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp2lfplmmw.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmp2lfplmmw.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmp2lfplmmw.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp2lfplmmw.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp2lfplmmw.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp2lfplmmw.swift:31:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = numbers.split(\" \")\n    numbers.sort()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpnq7rm2ma.swift:8:23: error: no exact matches in call to instance method 'split'\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:5: error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers = numbers.split(\" \")\n    ^~~~~~~\n/tmp/tmpnq7rm2ma.swift:8:23: error: no 'split' candidates produce the expected contextual result type 'String'\n    numbers = numbers.split(\" \")\n                      ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpnq7rm2ma.swift:9:13: error: value of type 'String' has no member 'sort'\n    numbers.sort()\n    ~~~~~~~ ^~~~\n/tmp/tmpnq7rm2ma.swift:10:20: error: value of type 'String' has no member 'join'\n    return numbers.join(\" \")\n           ~~~~~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num != \"\" {\n            sorted_numbers = append(sorted_numbers, num)\n        }\n    }\n    sort.Strings(sorted_numbers)\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpm7p0i9hc.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpm7p0i9hc.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpm7p0i9hc.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpm7p0i9hc.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpm7p0i9hc.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpm7p0i9hc.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpm7p0i9hc.swift:16:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sort_numbers_helper(numbers_list), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpgoxq21yw.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpgoxq21yw.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sort_numbers_helper(numbers_list), \" \")\n                         ^~~~~~~\n/tmp/tmpgoxq21yw.swift:9:39: error: cannot find 'sort_numbers_helper' in scope\n    var sorted_numbers = strings.Join(sort_numbers_helper(numbers_list), \" \")\n                                      ^~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 9 {\n            number_int = 9\n        }\n        if number_int < 0 {\n            number_int = 0\n        }\n        sorted_numbers.append(number_int)\n    }\n    sorted_numbers.sort()\n    sorted_numbers.reverse()\n    return sorted_numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp7jgrbzql.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmp7jgrbzql.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp7jgrbzql.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp7jgrbzql.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp7jgrbzql.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmp7jgrbzql.swift:23:27: error: value of type '[Any]' has no member 'join'\n    return sorted_numbers.join(\" \")\n           ~~~~~~~~~~~~~~ ^~~~\n/tmp/tmp7jgrbzql.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 9 {\n            number_int = 9\n        }\n        if number_int < 0 {\n            number_int = 0\n        }\n        sorted_numbers.append(number_int)\n    }\n    sorted_numbers.sort()\n    return sorted_numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp7qqdo9jq.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmp7qqdo9jq.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp7qqdo9jq.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp7qqdo9jq.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp7qqdo9jq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmp7qqdo9jq.swift:22:27: error: value of type '[Any]' has no member 'join'\n    return sorted_numbers.join(\" \")\n           ~~~~~~~~~~~~~~ ^~~~\n/tmp/tmp7qqdo9jq.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_list); i++ {\n        if numbers_list[i] == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if numbers_list[i] == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if numbers_list[i] == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if numbers_list[i] == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if numbers_list[i] == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if numbers_list[i] == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if numbers_list[i] == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if numbers_list[i] == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if numbers_list[i] == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp1azf39ry.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp1azf39ry.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_list); i++ {\n           ^\n            <#type#>\n/tmp/tmp1azf39ry.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_list); i++ {\n           ^\n/tmp/tmp1azf39ry.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_list); i++ {\n           ^\n/tmp/tmp1azf39ry.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp1azf39ry.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp1azf39ry.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp1azf39ry.swift:31:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if strings.Contains(numbers_array[i], \"one\") {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if strings.Contains(numbers_array[i], \"two\") {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if strings.Contains(numbers_array[i], \"three\") {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if strings.Contains(numbers_array[i], \"four\") {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if strings.Contains(numbers_array[i], \"five\") {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if strings.Contains(numbers_array[i], \"six\") {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if strings.Contains(numbers_array[i], \"seven\") {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if strings.Contains(numbers_array[i], \"eight\") {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if strings.Contains(numbers_array[i], \"nine\") {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpiu3ufieb.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpiu3ufieb.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpiu3ufieb.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpiu3ufieb.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpiu3ufieb.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpiu3ufieb.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpiu3ufieb.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpiu3ufieb.swift:31:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list: List[Int] = []\n    var numbers_str: String = \"\"\n    for _, num := range numbers.split(\" \") {\n        numbers_list = append(numbers_list, int(num))\n    }\n    sort.Ints(numbers_list)\n    for _, num := range numbers_list {\n        numbers_str += str(num) + \" \"\n    }\n    return numbers_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp37_rr16n.swift:8:27: error: array types are now written with the brackets around the element type\n    var numbers_list: List[Int] = []\n                          ^\n                      [   \n/tmp/tmp37_rr16n.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers.split(\" \") {\n         ^\n/tmp/tmp37_rr16n.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers.split(\" \") {\n         ^\n/tmp/tmp37_rr16n.swift:14:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp37_rr16n.swift:14:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp37_rr16n.swift:8:23: error: cannot find type 'List' in scope\n    var numbers_list: List[Int] = []\n                      ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for i := 0; i < len(numbers_split); i++ {\n        var number = strings.Trim(numbers_split[i], \" \")\n        var number_int = strings.Split(number, \"\")\n        var number_int_sorted = []string{}\n        for j := 0; j < len(number_int); j++ {\n            var number_int_sorted_item = strings.Trim(number_int[j], \" \")\n            number_int_sorted = append(number_int_sorted, number_int_sorted_item)\n        }\n        sort.Strings(number_int_sorted)\n        numbers_sorted = append(numbers_sorted, strings.Join(number_int_sorted, \" \"))\n    }\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp98m5icen.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmp98m5icen.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n            <#type#>\n/tmp/tmp98m5icen.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n/tmp/tmp98m5icen.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n/tmp/tmp98m5icen.swift:13:35: error: consecutive statements on a line must be separated by ';'\n        var number_int_sorted = []string{}\n                                  ^\n                                  ;\n/tmp/tmp98m5icen.swift:14:16: error: expected type\n        for j := 0; j < len(number_int); j++ {\n               ^\n                <#type#>\n/tmp/tmp98m5icen.swift:14:16: error: expected 'in' after for-each pattern\n        for j := 0; j < len(number_int); j++ {\n               ^\n/tmp/tmp98m5icen.swift:14:16: error: expected Sequence expression for for-each loop\n        for j := 0; j < len(number_int); j++ {\n               ^\n/tmp/tmp98m5icen.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmp98m5icen.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmp98m5icen.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmp98m5icen.swift:21:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n/tmp/tmp98m5icen.swift:11:22: error: cannot find 'strings' in scope\n        var number = strings.Trim(numbers_split[i], \" \")\n                     ^~~~~~~\n/tmp/tmp98m5icen.swift:12:26: error: cannot find 'strings' in scope\n        var number_int = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_list, \" \")).Sort(), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpacssjxe7.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpacssjxe7.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_list, \" \")).Sort(), \" \")\n                         ^~~~~~~\n/tmp/tmpacssjxe7.swift:9:39: error: cannot find 'sort' in scope\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_list, \" \")).Sort(), \" \")\n                                      ^~~~\n/tmp/tmpacssjxe7.swift:9:53: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_list, \" \")).Sort(), \" \")\n                                                    ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if numbers_array[i] == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if numbers_array[i] == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if numbers_array[i] == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if numbers_array[i] == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if numbers_array[i] == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if numbers_array[i] == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if numbers_array[i] == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if numbers_array[i] == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if numbers_array[i] == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if numbers_array[i] == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpfq517gy4.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpfq517gy4.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpfq517gy4.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpfq517gy4.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpfq517gy4.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpfq517gy4.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpfq517gy4.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpfq517gy4.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for _, num := range numbers_split {\n        if num == \"zero\" {\n            numbers_sorted = append(numbers_sorted, \"zero\")\n        } else if num == \"one\" {\n            numbers_sorted = append(numbers_sorted, \"one\")\n        } else if num == \"two\" {\n            numbers_sorted = append(numbers_sorted, \"two\")\n        } else if num == \"three\" {\n            numbers_sorted = append(numbers_sorted, \"three\")\n        } else if num == \"four\" {\n            numbers_sorted = append(numbers_sorted, \"four\")\n        } else if num == \"five\" {\n            numbers_sorted = append(numbers_sorted, \"five\")\n        } else if num == \"six\" {\n            numbers_sorted = append(numbers_sorted, \"six\")\n        } else if num == \"seven\" {\n            numbers_sorted = append(numbers_sorted, \"seven\")\n        } else if num == \"eight\" {\n            numbers_sorted = append(numbers_sorted, \"eight\")\n        } else if num == \"nine\" {\n            numbers_sorted = append(numbers_sorted, \"nine\")\n        }\n    }\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpq_zc7mv8.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmpq_zc7mv8.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpq_zc7mv8.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpq_zc7mv8.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpq_zc7mv8.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmpq_zc7mv8.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmpq_zc7mv8.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = numbers.split(\" \")\n    numbers.sort()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpnq7rm2ma.swift:8:23: error: no exact matches in call to instance method 'split'\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:5: error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers = numbers.split(\" \")\n    ^~~~~~~\n/tmp/tmpnq7rm2ma.swift:8:23: error: no 'split' candidates produce the expected contextual result type 'String'\n    numbers = numbers.split(\" \")\n                      ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpnq7rm2ma.swift:9:13: error: value of type 'String' has no member 'sort'\n    numbers.sort()\n    ~~~~~~~ ^~~~\n/tmp/tmpnq7rm2ma.swift:10:20: error: value of type 'String' has no member 'join'\n    return numbers.join(\" \")\n           ~~~~~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var numbers_array_sorted = []\n    var numbers_array_sorted_string = \"\"\n    for i := 0; i < len(numbers_array); i++ {\n        numbers_array_sorted.append(numbers_array[i])\n    }\n    numbers_array_sorted.sort()\n    for i := 0; i < len(numbers_array_sorted); i++ {\n        numbers_array_sorted_string += numbers_array_sorted[i] + \" \"\n    }\n    return numbers_array_sorted_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp07q93jgh.swift:11:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmp07q93jgh.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp07q93jgh.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp07q93jgh.swift:15:12: error: expected type\n    for i := 0; i < len(numbers_array_sorted); i++ {\n           ^\n            <#type#>\n/tmp/tmp07q93jgh.swift:15:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array_sorted); i++ {\n           ^\n/tmp/tmp07q93jgh.swift:15:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array_sorted); i++ {\n           ^\n/tmp/tmp07q93jgh.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp07q93jgh.swift:9:32: error: empty collection literal requires an explicit type\n    var numbers_array_sorted = []\n                               ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_arr = strings.Split(numbers, \" \")\n    var sorted_arr = []string{}\n    for _, num := range numbers_arr {\n        if num == \"zero\" {\n            sorted_arr = append(sorted_arr, \"zero\")\n        } else if num == \"one\" {\n            sorted_arr = append(sorted_arr, \"one\")\n        } else if num == \"two\" {\n            sorted_arr = append(sorted_arr, \"two\")\n        } else if num == \"three\" {\n            sorted_arr = append(sorted_arr, \"three\")\n        } else if num == \"four\" {\n            sorted_arr = append(sorted_arr, \"four\")\n        } else if num == \"five\" {\n            sorted_arr = append(sorted_arr, \"five\")\n        } else if num == \"six\" {\n            sorted_arr = append(sorted_arr, \"six\")\n        } else if num == \"seven\" {\n            sorted_arr = append(sorted_arr, \"seven\")\n        } else if num == \"eight\" {\n            sorted_arr = append(sorted_arr, \"eight\")\n        } else if num == \"nine\" {\n            sorted_arr = append(sorted_arr, \"nine\")\n        }\n    }\n    return strings.Join(sorted_arr, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpyqd9yr5f.swift:9:24: error: consecutive statements on a line must be separated by ';'\n    var sorted_arr = []string{}\n                       ^\n                       ;\n/tmp/tmpyqd9yr5f.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_arr {\n         ^\n/tmp/tmpyqd9yr5f.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_arr {\n         ^\n/tmp/tmpyqd9yr5f.swift:8:23: error: cannot find 'strings' in scope\n    var numbers_arr = strings.Split(numbers, \" \")\n                      ^~~~~~~\n/tmp/tmpyqd9yr5f.swift:9:22: error: empty collection literal requires an explicit type\n    var sorted_arr = []string{}\n                     ^~\n/tmp/tmpyqd9yr5f.swift:9:24: error: cannot find 'string' in scope\n    var sorted_arr = []string{}\n                       ^~~~~~\n/tmp/tmpyqd9yr5f.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_arr, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int < 10 {\n            sorted_numbers.append(number)\n        }\n    }\n    sorted_numbers.sort()\n    return strings.join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmptu74nglt.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmptu74nglt.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmptu74nglt.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmptu74nglt.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmptu74nglt.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmptu74nglt.swift:18:12: error: cannot find 'strings' in scope\n    return strings.join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmptu74nglt.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if numbers_array[i] == \"nine\" {\n            sorted_numbers.append(\"nine\")\n        } else if numbers_array[i] == \"eight\" {\n            sorted_numbers.append(\"eight\")\n        } else if numbers_array[i] == \"seven\" {\n            sorted_numbers.append(\"seven\")\n        } else if numbers_array[i] == \"six\" {\n            sorted_numbers.append(\"six\")\n        } else if numbers_array[i] == \"five\" {\n            sorted_numbers.append(\"five\")\n        } else if numbers_array[i] == \"four\" {\n            sorted_numbers.append(\"four\")\n        } else if numbers_array[i] == \"three\" {\n            sorted_numbers.append(\"three\")\n        } else if numbers_array[i] == \"two\" {\n            sorted_numbers.append(\"two\")\n        } else if numbers_array[i] == \"one\" {\n            sorted_numbers.append(\"one\")\n        } else {\n            sorted_numbers.append(numbers_array[i])\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpniezxd5x.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpniezxd5x.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpniezxd5x.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpniezxd5x.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpniezxd5x.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpniezxd5x.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpniezxd5x.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpniezxd5x.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int < 10 {\n            sorted_numbers.append(number)\n        }\n    }\n    sorted_numbers.sort()\n    return sorted_numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpxzbmpifz.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpxzbmpifz.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpxzbmpifz.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpxzbmpifz.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpxzbmpifz.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmpxzbmpifz.swift:18:27: error: value of type '[Any]' has no member 'join'\n    return sorted_numbers.join(\" \")\n           ~~~~~~~~~~~~~~ ^~~~\n/tmp/tmpxzbmpifz.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpomyw_thv.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                         ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:39: error: cannot find 'sorted' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                                      ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if numbers_array[i] == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if numbers_array[i] == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if numbers_array[i] == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if numbers_array[i] == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if numbers_array[i] == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if numbers_array[i] == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if numbers_array[i] == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if numbers_array[i] == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if numbers_array[i] == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if numbers_array[i] == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpj83h6isk.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpj83h6isk.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpj83h6isk.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpj83h6isk.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpj83h6isk.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpj83h6isk.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpj83h6isk.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpj83h6isk.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp6bba_pzk.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp6bba_pzk.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp6bba_pzk.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp6bba_pzk.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp6bba_pzk.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int < 10 {\n            sorted_numbers = append(sorted_numbers, number)\n        }\n    }\n    sorted_numbers.sort()\n    sorted_numbers.reverse()\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp3pghcf86.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmp3pghcf86.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp3pghcf86.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp3pghcf86.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp3pghcf86.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmp3pghcf86.swift:19:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmp3pghcf86.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_array, \" \")).Sort(), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmphoiqlbfh.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmphoiqlbfh.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_array, \" \")).Sort(), \" \")\n                         ^~~~~~~\n/tmp/tmphoiqlbfh.swift:9:39: error: cannot find 'sort' in scope\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_array, \" \")).Sort(), \" \")\n                                      ^~~~\n/tmp/tmphoiqlbfh.swift:9:53: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_array, \" \")).Sort(), \" \")\n                                                    ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sorted(numbers_array), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp_age3m7n.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmp_age3m7n.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_array), \" \")\n                         ^~~~~~~\n/tmp/tmp_age3m7n.swift:9:39: error: cannot find 'sorted' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_array), \" \")\n                                      ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp6bba_pzk.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp6bba_pzk.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp6bba_pzk.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp6bba_pzk.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp6bba_pzk.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 9 {\n            number_int = 9\n        }\n        if number_int < 0 {\n            number_int = 0\n        }\n        sorted_numbers.append(number_int)\n    }\n    sorted_numbers.sort()\n    sorted_numbers.reverse()\n    var sorted_string = \"\"\n    for i := 0; i < len(sorted_numbers); i++ {\n        var number = sorted_numbers[i]\n        sorted_string += number\n        if i < len(sorted_numbers) - 1 {\n            sorted_string += \" \"\n        }\n    }\n    return sorted_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp247ndlwm.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmp247ndlwm.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp247ndlwm.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp247ndlwm.swift:24:12: error: expected type\n    for i := 0; i < len(sorted_numbers); i++ {\n           ^\n            <#type#>\n/tmp/tmp247ndlwm.swift:24:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(sorted_numbers); i++ {\n           ^\n/tmp/tmp247ndlwm.swift:24:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(sorted_numbers); i++ {\n           ^\n/tmp/tmp247ndlwm.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp247ndlwm.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmp247ndlwm.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num != \"\" {\n            sorted_numbers = append(sorted_numbers, num)\n        }\n    }\n    sort.Strings(sorted_numbers)\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmppe9p2yu7.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmppe9p2yu7.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmppe9p2yu7.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmppe9p2yu7.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmppe9p2yu7.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmppe9p2yu7.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmppe9p2yu7.swift:16:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp6bba_pzk.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp6bba_pzk.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp6bba_pzk.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp6bba_pzk.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp6bba_pzk.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var numbers_array_sorted = []\n    for i := 0; i < len(numbers_array); i++ {\n        numbers_array_sorted.append(numbers_array[i])\n    }\n    numbers_array_sorted.sort()\n    return strings.Join(numbers_array_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpp1ock_vc.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpp1ock_vc.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpp1ock_vc.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpp1ock_vc.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpp1ock_vc.swift:9:32: error: empty collection literal requires an explicit type\n    var numbers_array_sorted = []\n                               ^~\n/tmp/tmpp1ock_vc.swift:14:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_array_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sorted(numbers_array), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp_age3m7n.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmp_age3m7n.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_array), \" \")\n                         ^~~~~~~\n/tmp/tmp_age3m7n.swift:9:39: error: cannot find 'sorted' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_array), \" \")\n                                      ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_arr = numbers.split(\" \")\n    var sorted_arr = []\n    for i := 0; i < len(numbers_arr); i++ {\n        var num = numbers_arr[i]\n        var num_arr = num.split(\" \")\n        var num_int = num_arr[0]\n        var num_str = num_arr[1]\n        var num_int_int = num_int.toInt()\n        var num_str_int = num_str.toInt()\n        if num_int_int > num_str_int {\n            sorted_arr.append(num)\n        } else {\n            sorted_arr.append(num_str)\n        }\n    }\n    return sorted_arr.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpz01ao7n3.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpz01ao7n3.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n/tmp/tmpz01ao7n3.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n/tmp/tmpz01ao7n3.swift:8:31: error: no exact matches in call to instance method 'split'\n    var numbers_arr = numbers.split(\" \")\n                              ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpz01ao7n3.swift:9:22: error: empty collection literal requires an explicit type\n    var sorted_arr = []\n                     ^~\n/tmp/tmpz01ao7n3.swift:23:23: error: value of type '[Any]' has no member 'join'\n    return sorted_arr.join(\" \")\n           ~~~~~~~~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var numbers_array_sorted = []\n    for i := 0; i < len(numbers_array); i++ {\n        numbers_array_sorted = append(numbers_array_sorted, numbers_array[i])\n    }\n    sort.Ints(numbers_array_sorted)\n    return strings.Join(numbers_array_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpnmhv0ne8.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpnmhv0ne8.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpnmhv0ne8.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpnmhv0ne8.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpnmhv0ne8.swift:9:32: error: empty collection literal requires an explicit type\n    var numbers_array_sorted = []\n                               ^~\n/tmp/tmpnmhv0ne8.swift:14:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_array_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for _, num := range numbers_split {\n        if num == \"zero\" {\n            numbers_sorted = append(numbers_sorted, \"zero\")\n        } else if num == \"one\" {\n            numbers_sorted = append(numbers_sorted, \"one\")\n        } else if num == \"two\" {\n            numbers_sorted = append(numbers_sorted, \"two\")\n        } else if num == \"three\" {\n            numbers_sorted = append(numbers_sorted, \"three\")\n        } else if num == \"four\" {\n            numbers_sorted = append(numbers_sorted, \"four\")\n        } else if num == \"five\" {\n            numbers_sorted = append(numbers_sorted, \"five\")\n        } else if num == \"six\" {\n            numbers_sorted = append(numbers_sorted, \"six\")\n        } else if num == \"seven\" {\n            numbers_sorted = append(numbers_sorted, \"seven\")\n        } else if num == \"eight\" {\n            numbers_sorted = append(numbers_sorted, \"eight\")\n        } else if num == \"nine\" {\n            numbers_sorted = append(numbers_sorted, \"nine\")\n        }\n    }\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpq_zc7mv8.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmpq_zc7mv8.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpq_zc7mv8.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpq_zc7mv8.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpq_zc7mv8.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmpq_zc7mv8.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmpq_zc7mv8.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_arr = numbers.split(\" \")\n    var numbers_arr_sorted = []\n    for i in range(len(numbers_arr)) {\n        var number = numbers_arr[i]\n        var number_int = parseInt(number)\n        numbers_arr_sorted.append(number_int)\n    }\n    numbers_arr_sorted.sort()\n    var numbers_arr_sorted_string = \"\"\n    for i in range(len(numbers_arr_sorted)) {\n        var number = numbers_arr_sorted[i]\n        numbers_arr_sorted_string += number\n        if i < len(numbers_arr_sorted) - 1 {\n            numbers_arr_sorted_string += \" \"\n        }\n    }\n    return numbers_arr_sorted_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmphpvemqqw.swift:8:31: error: no exact matches in call to instance method 'split'\n    var numbers_arr = numbers.split(\" \")\n                              ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmphpvemqqw.swift:9:30: error: empty collection literal requires an explicit type\n    var numbers_arr_sorted = []\n                             ^~\n/tmp/tmphpvemqqw.swift:10:14: error: cannot find 'range' in scope\n    for i in range(len(numbers_arr)) {\n             ^~~~~\n/tmp/tmphpvemqqw.swift:10:20: error: cannot find 'len' in scope\n    for i in range(len(numbers_arr)) {\n                   ^~~\n/tmp/tmphpvemqqw.swift:15:5: error: type 'Any' cannot conform to 'Comparable'\n    numbers_arr_sorted.sort()\n    ^\n/tmp/tmphpvemqqw.swift:15:5: note: only concrete types such as structs, enums and classes can conform to protocols\n    numbers_arr_sorted.sort()\n    ^\n/tmp/tmphpvemqqw.swift:15:5: note: required by referencing instance method 'sort()' on 'MutableCollection' where 'Self.Element' = 'Any'\n    numbers_arr_sorted.sort()\n    ^\n/tmp/tmphpvemqqw.swift:17:14: error: cannot find 'range' in scope\n    for i in range(len(numbers_arr_sorted)) {\n             ^~~~~\n/tmp/tmphpvemqqw.swift:17:20: error: cannot find 'len' in scope\n    for i in range(len(numbers_arr_sorted)) {\n                   ^~~\n/tmp/tmphpvemqqw.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_list {\n        if number != \"\" {\n            sorted_numbers = append(sorted_numbers, number)\n        }\n    }\n    sort.Strings(sorted_numbers)\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmptav3wwpo.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmptav3wwpo.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_list {\n         ^\n/tmp/tmptav3wwpo.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_list {\n         ^\n/tmp/tmptav3wwpo.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmptav3wwpo.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmptav3wwpo.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmptav3wwpo.swift:16:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if numbers_array[i] == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if numbers_array[i] == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if numbers_array[i] == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if numbers_array[i] == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if numbers_array[i] == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if numbers_array[i] == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if numbers_array[i] == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if numbers_array[i] == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if numbers_array[i] == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpfn1xu0_b.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpfn1xu0_b.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpfn1xu0_b.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpfn1xu0_b.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpfn1xu0_b.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpfn1xu0_b.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpfn1xu0_b.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpfn1xu0_b.swift:31:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for _, num := range numbers_split {\n        if num == \"zero\" {\n            numbers_sorted = append(numbers_sorted, \"zero\")\n        } else if num == \"one\" {\n            numbers_sorted = append(numbers_sorted, \"one\")\n        } else if num == \"two\" {\n            numbers_sorted = append(numbers_sorted, \"two\")\n        } else if num == \"three\" {\n            numbers_sorted = append(numbers_sorted, \"three\")\n        } else if num == \"four\" {\n            numbers_sorted = append(numbers_sorted, \"four\")\n        } else if num == \"five\" {\n            numbers_sorted = append(numbers_sorted, \"five\")\n        } else if num == \"six\" {\n            numbers_sorted = append(numbers_sorted, \"six\")\n        } else if num == \"seven\" {\n            numbers_sorted = append(numbers_sorted, \"seven\")\n        } else if num == \"eight\" {\n            numbers_sorted = append(numbers_sorted, \"eight\")\n        } else if num == \"nine\" {\n            numbers_sorted = append(numbers_sorted, \"nine\")\n        }\n    }\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpq_zc7mv8.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmpq_zc7mv8.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpq_zc7mv8.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpq_zc7mv8.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpq_zc7mv8.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmpq_zc7mv8.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmpq_zc7mv8.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_array {\n        if number == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if number == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if number == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if number == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if number == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if number == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if number == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if number == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if number == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if number == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp39dj81ge.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp39dj81ge.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_array {\n         ^\n/tmp/tmp39dj81ge.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_array {\n         ^\n/tmp/tmp39dj81ge.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmp39dj81ge.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp39dj81ge.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp39dj81ge.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums []int\n    for _, num := range numbers.split(\" \") {\n        nums = append(nums, int(num[0]-'0'))\n    }\n    sort.Ints(nums)\n    return strings.Join([]string{strconv.Itoa(nums[0])}, \" \") + \" \" + strings.Join([]string{strconv.Itoa(nums[1])}, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpfuqdfd15.swift:8:13: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n            ^\n            ;\n/tmp/tmpfuqdfd15.swift:8:16: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n               ^\n               ;\n/tmp/tmpfuqdfd15.swift:9:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers.split(\" \") {\n         ^\n/tmp/tmpfuqdfd15.swift:9:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers.split(\" \") {\n         ^\n/tmp/tmpfuqdfd15.swift:10:40: error: single-quoted string literal found, use '\"'\n        nums = append(nums, int(num[0]-'0'))\n                                       ^~~\n                                       \"0\"\n/tmp/tmpfuqdfd15.swift:13:27: error: expected ',' separator\n    return strings.Join([]string{strconv.Itoa(nums[0])}, \" \") + \" \" + strings.Join([]string{strconv.Itoa(nums[1])}, \" \")\n                          ^\n                          ,\n/tmp/tmpfuqdfd15.swift:13:86: error: expected ',' separator\n    return strings.Join([]string{strconv.Itoa(nums[0])}, \" \") + \" \" + strings.Join([]string{strconv.Itoa(nums[1])}, \" \")\n                                                                                     ^\n                                                                                     ,\n/tmp/tmpfuqdfd15.swift:8:9: error: type annotation missing in pattern\n    var nums []int\n        ^\n/tmp/tmpfuqdfd15.swift:8:14: error: empty collection literal requires an explicit type\n    var nums []int\n             ^~\n/tmp/tmpfuqdfd15.swift:8:14: warning: expression of type '[Any]' is unused\n    var nums []int\n             ^~\n/tmp/tmpfuqdfd15.swift:8:16: error: cannot find 'int' in scope\n    var nums []int\n               ^~~\n/tmp/tmpfuqdfd15.swift:13:12: error: cannot find 'strings' in scope\n    return strings.Join([]string{strconv.Itoa(nums[0])}, \" \") + \" \" + strings.Join([]string{strconv.Itoa(nums[1])}, \" \")\n           ^~~~~~~\n/tmp/tmpfuqdfd15.swift:13:27: error: cannot find",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpri8kqcvq.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpri8kqcvq.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpri8kqcvq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpri8kqcvq.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpri8kqcvq.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_split {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpo_l4513u.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpo_l4513u.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpo_l4513u.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpo_l4513u.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpo_l4513u.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpo_l4513u.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpo_l4513u.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_list {\n        if number == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if number == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if number == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if number == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if number == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if number == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if number == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if number == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if number == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if number == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp48r1yc5w.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp48r1yc5w.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_list {\n         ^\n/tmp/tmp48r1yc5w.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_list {\n         ^\n/tmp/tmp48r1yc5w.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp48r1yc5w.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp48r1yc5w.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp48r1yc5w.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list: List[String] = []\n    var numbers_list_copy: List[String] = []\n    var numbers_list_copy_sorted: List[String] = []\n    var numbers_list_copy_sorted_str: String = \"\"\n    var numbers_list_copy_sorted_str_str: String = \"\"\n    var numbers_list_copy_sorted_str_str_str: String = \"\"\n    var numbers_list_copy_sorted_str_str_str_str: String = \"\"\n    var numbers_list_copy_sorted_str_str_str_str_str: String = \"\"\n    var numbers_list_copy_sorted_str_str_str_str_str_str: String = \"\"\n    var numbers_list_copy_sorted_str_str_str_str_str_str_str: String = \"\"\n    var numbers_list_copy_sorted_str_str_str_str_str_str_str_str: String = \"\"\n    var numbers_list_copy_sorted_str_str_str_str_str_str_str_str_str: String = \"\"\n    var numbers_list_copy_sorted_str_str_str_str_str_str_str_str_str_str: String = \"\"\n    var numbers_list_copy_sorted_str_str_str_str_str_str_str_str_str_str_str: String = \"\"\n    var numbers_list_copy_sorted_str_str_str_str_str_str_str_str_str_str_str_str: String = \"\"\n    var numbers_list_copy_sorted_str_str_str_str_str_str_str_str_str_str_str_str_str: String = \"\"\n    var numbers_list_copy_sorted_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str: String = \"\"\n    var numbers_list_copy_sorted_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmppkxwlv7w.swift:8:27: error: array types are now written with the brackets around the element type\n    var numbers_list: List[String] = []\n                          ^\n                      [   \n/tmp/tmppkxwlv7w.swift:9:32: error: array types are now written with the brackets around the element type\n    var numbers_list_copy: List[String] = []\n                               ^\n                           [   \n/tmp/tmppkxwlv7w.swift:10:39: error: array types are now written with the brackets around the element type\n    var numbers_list_copy_sorted: List[String] = []\n                                      ^\n                                  [   \n/tmp/tmppkxwlv7w.swift:8:23: error: cannot find type 'List' in scope\n    var numbers_list: List[String] = []\n                      ^~~~\n/tmp/tmppkxwlv7w.swift:9:28: error: cannot find type 'List' in scope\n    var numbers_list_copy: List[String] = []\n                           ^~~~\n/tmp/tmppkxwlv7w.swift:10:35: error: cannot find type 'List' in scope\n    var numbers_list_copy_sorted: List[String] = []\n                                  ^~~~\n/tmp/tmppkxwlv7w.swift:25:9: error: type annotation missing in pattern\n    var numbers_list_copy_sorted_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp6bba_pzk.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp6bba_pzk.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp6bba_pzk.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp6bba_pzk.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp6bba_pzk.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_array {\n        if number == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        } else if number == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if number == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if number == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if number == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if number == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if number == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if number == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if number == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else {\n            sorted_numbers = append(sorted_numbers, number)\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmplr85bp_f.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmplr85bp_f.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_array {\n         ^\n/tmp/tmplr85bp_f.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_array {\n         ^\n/tmp/tmplr85bp_f.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmplr85bp_f.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmplr85bp_f.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmplr85bp_f.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for _, num := range numbers_split {\n        if num != \"\" {\n            numbers_sorted = append(numbers_sorted, num)\n        }\n    }\n    sort.Strings(numbers_sorted)\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp2cq7augx.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmp2cq7augx.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_split {\n         ^\n/tmp/tmp2cq7augx.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_split {\n         ^\n/tmp/tmp2cq7augx.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmp2cq7augx.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmp2cq7augx.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmp2cq7augx.swift:16:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_arr = numbers.split(\" \")\n    var numbers_arr_sorted = []\n    var numbers_arr_sorted_str = \"\"\n    for i := 0; i < len(numbers_arr); i++ {\n        numbers_arr_sorted.append(numbers_arr[i])\n    }\n    numbers_arr_sorted.sort()\n    for i := 0; i < len(numbers_arr_sorted); i++ {\n        numbers_arr_sorted_str += numbers_arr_sorted[i] + \" \"\n    }\n    return numbers_arr_sorted_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp1rmwr07q.swift:11:12: error: expected type\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp1rmwr07q.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n/tmp/tmp1rmwr07q.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n/tmp/tmp1rmwr07q.swift:15:12: error: expected type\n    for i := 0; i < len(numbers_arr_sorted); i++ {\n           ^\n            <#type#>\n/tmp/tmp1rmwr07q.swift:15:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_arr_sorted); i++ {\n           ^\n/tmp/tmp1rmwr07q.swift:15:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_arr_sorted); i++ {\n           ^\n/tmp/tmp1rmwr07q.swift:8:31: error: no exact matches in call to instance method 'split'\n    var numbers_arr = numbers.split(\" \")\n                              ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp1rmwr07q.swift:9:30: error: empty collection literal requires an explicit type\n    var numbers_arr_sorted = []\n                             ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    sort.Strings(sorted_numbers)\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpkb26zoip.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpkb26zoip.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpkb26zoip.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpkb26zoip.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpkb26zoip.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpkb26zoip.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpkb26zoip.swift:34:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = numbers.split(\" \")\n    numbers.sort()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpnq7rm2ma.swift:8:23: error: no exact matches in call to instance method 'split'\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:5: error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers = numbers.split(\" \")\n    ^~~~~~~\n/tmp/tmpnq7rm2ma.swift:8:23: error: no 'split' candidates produce the expected contextual result type 'String'\n    numbers = numbers.split(\" \")\n                      ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpnq7rm2ma.swift:9:13: error: value of type 'String' has no member 'sort'\n    numbers.sort()\n    ~~~~~~~ ^~~~\n/tmp/tmpnq7rm2ma.swift:10:20: error: value of type 'String' has no member 'join'\n    return numbers.join(\" \")\n           ~~~~~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    sort.Strings(sorted_numbers)\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpkb26zoip.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpkb26zoip.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpkb26zoip.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpkb26zoip.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpkb26zoip.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpkb26zoip.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpkb26zoip.swift:34:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for i := 0; i < len(numbers_split); i++ {\n        if numbers_split[i] == \"one\" {\n            numbers_sorted = append(numbers_sorted, \"one\")\n        } else if numbers_split[i] == \"two\" {\n            numbers_sorted = append(numbers_sorted, \"two\")\n        } else if numbers_split[i] == \"three\" {\n            numbers_sorted = append(numbers_sorted, \"three\")\n        } else if numbers_split[i] == \"four\" {\n            numbers_sorted = append(numbers_sorted, \"four\")\n        } else if numbers_split[i] == \"five\" {\n            numbers_sorted = append(numbers_sorted, \"five\")\n        } else if numbers_split[i] == \"six\" {\n            numbers_sorted = append(numbers_sorted, \"six\")\n        } else if numbers_split[i] == \"seven\" {\n            numbers_sorted = append(numbers_sorted, \"seven\")\n        } else if numbers_split[i] == \"eight\" {\n            numbers_sorted = append(numbers_sorted, \"eight\")\n        } else if numbers_split[i] == \"nine\" {\n            numbers_sorted = append(numbers_sorted, \"nine\")\n        }\n    }\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpojmk1ius.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmpojmk1ius.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n            <#type#>\n/tmp/tmpojmk1ius.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n/tmp/tmpojmk1ius.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_split); i++ {\n           ^\n/tmp/tmpojmk1ius.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpojmk1ius.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmpojmk1ius.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmpojmk1ius.swift:31:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if numbers_array[i] == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        } else if numbers_array[i] == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if numbers_array[i] == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if numbers_array[i] == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if numbers_array[i] == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if numbers_array[i] == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if numbers_array[i] == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if numbers_array[i] == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if numbers_array[i] == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpz4v3n7_z.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpz4v3n7_z.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpz4v3n7_z.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpz4v3n7_z.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpz4v3n7_z.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpz4v3n7_z.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpz4v3n7_z.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpz4v3n7_z.swift:31:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums []int\n    for _, num := range numbers.split(\" \") {\n        nums = append(nums, int(num))\n    }\n    sort.Ints(nums)\n    return strings.Join(numbers.split(\" \"), \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmph_9iptlh.swift:8:13: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n            ^\n            ;\n/tmp/tmph_9iptlh.swift:8:16: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n               ^\n               ;\n/tmp/tmph_9iptlh.swift:9:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers.split(\" \") {\n         ^\n/tmp/tmph_9iptlh.swift:9:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers.split(\" \") {\n         ^\n/tmp/tmph_9iptlh.swift:8:9: error: type annotation missing in pattern\n    var nums []int\n        ^\n/tmp/tmph_9iptlh.swift:8:14: error: empty collection literal requires an explicit type\n    var nums []int\n             ^~\n/tmp/tmph_9iptlh.swift:8:14: warning: expression of type '[Any]' is unused\n    var nums []int\n             ^~\n/tmp/tmph_9iptlh.swift:8:16: error: cannot find 'int' in scope\n    var nums []int\n               ^~~\n/tmp/tmph_9iptlh.swift:13:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers.split(\" \"), \" \")\n           ^~~~~~~\n/tmp/tmph_9iptlh.swift:13:39: error: missing argument label 'separator:' in call\n    return strings.Join(numbers.split(\" \"), \" \")\n                                      ^\n                                      separator: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 0 && number_int < 10 {\n            sorted_numbers.append(number)\n        }\n    }\n    sorted_numbers.sort()\n    return strings.join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp5imy20sw.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmp5imy20sw.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp5imy20sw.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp5imy20sw.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp5imy20sw.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmp5imy20sw.swift:18:12: error: cannot find 'strings' in scope\n    return strings.join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmp5imy20sw.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_array {\n        if number != \"\" {\n            sorted_numbers = append(sorted_numbers, number)\n        }\n    }\n    sort.Strings(sorted_numbers)\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmph9izvr7_.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmph9izvr7_.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_array {\n         ^\n/tmp/tmph9izvr7_.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_array {\n         ^\n/tmp/tmph9izvr7_.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmph9izvr7_.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmph9izvr7_.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmph9izvr7_.swift:16:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_array {\n        if number != \"\" {\n            sorted_numbers = append(sorted_numbers, number)\n        }\n    }\n    sort.Strings(sorted_numbers)\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmph9izvr7_.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmph9izvr7_.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_array {\n         ^\n/tmp/tmph9izvr7_.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_array {\n         ^\n/tmp/tmph9izvr7_.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmph9izvr7_.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmph9izvr7_.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmph9izvr7_.swift:16:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var num_list: List[Int] = []\n    var num_str: String = \"\"\n    var num_str_len: Int = 0\n    var num_str_index: Int = 0\n    var num_str_start: Int = 0\n    var num_str_end: Int = 0\n    var num_str_start_index: Int = 0\n    var num_str_end_index: Int = 0\n    var num_str_start_index_str: String = \"\"\n    var num_str_end_index_str: String = \"\"\n    var num_str_start_index_str_len: Int = 0\n    var num_str_end_index_str_len: Int = 0\n    var num_str_start_index_str_index: Int = 0\n    var num_str_end_index_str_index: Int = 0\n    var num_str_start_index_str_start: Int = 0\n    var num_str_end_index_str_end: Int = 0\n    var num_str_start_index_str_end_index: Int = 0\n    var num_str_start_index_str_end_index_str: String = \"\"\n    var num_str_start_index_str_end_index_str_len: Int = 0\n    var num_str_start_index_str_end_index_str_index: Int = 0\n    var num_str_start_index_str_end_index_str_start: Int = 0\n    var num_str_start_index_str_end_index_str_end: Int = 0\n    var num_str_start_index_str_end_index_str_end_index: Int = 0\n    var num_str_start_index_str_end_index_str_end_index_str: String = \"\"\n    var num_str_start_index_str_end_index_str_end_index_str_len: Int = 0\n    var num_str_start_index_str_end_index_str_end_index_str_index: Int = 0\n    var num_str_start_index_str_end_index_str_end_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp0j05rs9g.swift:8:23: error: array types are now written with the brackets around the element type\n    var num_list: List[Int] = []\n                      ^\n                  [   \n/tmp/tmp0j05rs9g.swift:8:19: error: cannot find type 'List' in scope\n    var num_list: List[Int] = []\n                  ^~~~\n/tmp/tmp0j05rs9g.swift:34:9: error: type annotation missing in pattern\n    var num_str_start_index_str_end_index_str_end_index\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpri8kqcvq.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpri8kqcvq.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpri8kqcvq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpri8kqcvq.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpri8kqcvq.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_split = strings.Split(numbers, \" \")\n    var numbers_sorted = []string{}\n    for _, num := range numbers_split {\n        if num == \"nine\" {\n            numbers_sorted = append(numbers_sorted, \"nine\")\n        } else if num == \"eight\" {\n            numbers_sorted = append(numbers_sorted, \"eight\")\n        } else if num == \"seven\" {\n            numbers_sorted = append(numbers_sorted, \"seven\")\n        } else if num == \"six\" {\n            numbers_sorted = append(numbers_sorted, \"six\")\n        } else if num == \"five\" {\n            numbers_sorted = append(numbers_sorted, \"five\")\n        } else if num == \"four\" {\n            numbers_sorted = append(numbers_sorted, \"four\")\n        } else if num == \"three\" {\n            numbers_sorted = append(numbers_sorted, \"three\")\n        } else if num == \"two\" {\n            numbers_sorted = append(numbers_sorted, \"two\")\n        } else if num == \"one\" {\n            numbers_sorted = append(numbers_sorted, \"one\")\n        } else {\n            numbers_sorted = append(numbers_sorted, num)\n        }\n    }\n    return strings.Join(numbers_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpj5rknncl.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var numbers_sorted = []string{}\n                           ^\n                           ;\n/tmp/tmpj5rknncl.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpj5rknncl.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_split {\n         ^\n/tmp/tmpj5rknncl.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_split = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpj5rknncl.swift:9:26: error: empty collection literal requires an explicit type\n    var numbers_sorted = []string{}\n                         ^~\n/tmp/tmpj5rknncl.swift:9:28: error: cannot find 'string' in scope\n    var numbers_sorted = []string{}\n                           ^~~~~~\n/tmp/tmpj5rknncl.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpri8kqcvq.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpri8kqcvq.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpri8kqcvq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpri8kqcvq.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpri8kqcvq.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_arr = numbers.split(\" \")\n    var sorted_arr = []\n    for i := 0; i < len(numbers_arr); i++ {\n        var num = numbers_arr[i]\n        var num_arr = num.split(\"\")\n        var num_arr_len = len(num_arr)\n        var num_arr_sorted = []\n        for j := 0; j < num_arr_len; j++ {\n            var num_arr_j = num_arr[j]\n            var num_arr_j_int = int(num_arr_j)\n            if num_arr_j_int > 9 {\n                num_arr_j_int = num_arr_j_int - 9\n            }\n            num_arr_sorted.append(str(num_arr_j_int))\n        }\n        sorted_arr.append(strings.Join(num_arr_sorted, \"\"))\n    }\n    return strings.Join(sorted_arr, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpyagsc5xp.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpyagsc5xp.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n/tmp/tmpyagsc5xp.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_arr); i++ {\n           ^\n/tmp/tmpyagsc5xp.swift:15:16: error: expected type\n        for j := 0; j < num_arr_len; j++ {\n               ^\n                <#type#>\n/tmp/tmpyagsc5xp.swift:15:16: error: expected 'in' after for-each pattern\n        for j := 0; j < num_arr_len; j++ {\n               ^\n/tmp/tmpyagsc5xp.swift:15:16: error: expected Sequence expression for for-each loop\n        for j := 0; j < num_arr_len; j++ {\n               ^\n/tmp/tmpyagsc5xp.swift:8:31: error: no exact matches in call to instance method 'split'\n    var numbers_arr = numbers.split(\" \")\n                              ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpyagsc5xp.swift:9:22: error: empty collection literal requires an explicit type\n    var sorted_arr = []\n                     ^~\n/tmp/tmpyagsc5xp.swift:25:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_arr, \" \")\n           ^~~~~~~\n/tmp/tmpyagsc5xp.swift:13:27: error: cannot find 'len' in scope\n        var num_arr_len = len(num_arr)\n                          ^~~\n/tmp/tmpyagsc5xp.swift:14:30: error: empty collection literal requires",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 0 && number_int <= 9 {\n            sorted_numbers.append(number)\n        }\n    }\n    sorted_numbers.sort()\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpiunhtc4v.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpiunhtc4v.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpiunhtc4v.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpiunhtc4v.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpiunhtc4v.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmpiunhtc4v.swift:18:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmpiunhtc4v.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 0 && number_int < 10 {\n            sorted_numbers = append(sorted_numbers, number)\n        }\n    }\n    sorted_numbers.sort()\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpk2rcz34x.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpk2rcz34x.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpk2rcz34x.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpk2rcz34x.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpk2rcz34x.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpk2rcz34x.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpk2rcz34x.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpk2rcz34x.swift:18:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmpk2rcz34x.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_list, \" \")).Sort(), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpacssjxe7.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpacssjxe7.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_list, \" \")).Sort(), \" \")\n                         ^~~~~~~\n/tmp/tmpacssjxe7.swift:9:39: error: cannot find 'sort' in scope\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_list, \" \")).Sort(), \" \")\n                                      ^~~~\n/tmp/tmpacssjxe7.swift:9:53: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_list, \" \")).Sort(), \" \")\n                                                    ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if numbers_array[i] == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if numbers_array[i] == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if numbers_array[i] == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if numbers_array[i] == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if numbers_array[i] == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if numbers_array[i] == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if numbers_array[i] == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if numbers_array[i] == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if numbers_array[i] == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpfn1xu0_b.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpfn1xu0_b.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpfn1xu0_b.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpfn1xu0_b.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpfn1xu0_b.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpfn1xu0_b.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpfn1xu0_b.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpfn1xu0_b.swift:31:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []int{}\n    for _, num := range numbers_list {\n        num_int, _ := strconv.Atoi(num)\n        sorted_numbers = append(sorted_numbers, num_int)\n    }\n    sort.Ints(sorted_numbers)\n    sorted_numbers_string := \"\"\n    for _, num := range sorted_numbers {\n        sorted_numbers_string += strconv.Itoa(num) + \" \"\n    }\n    return strings.TrimSpace(sorted_numbers_string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpvos3thb8.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []int{}\n                           ^\n                           ;\n/tmp/tmpvos3thb8.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpvos3thb8.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpvos3thb8.swift:11:16: error: consecutive statements on a line must be separated by ';'\n        num_int, _ := strconv.Atoi(num)\n               ^\n               ;\n/tmp/tmpvos3thb8.swift:11:16: error: expected expression\n        num_int, _ := strconv.Atoi(num)\n               ^\n/tmp/tmpvos3thb8.swift:16:10: error: expected 'in' after for-each pattern\n    for _, num := range sorted_numbers {\n         ^\n/tmp/tmpvos3thb8.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, num := range sorted_numbers {\n         ^\n/tmp/tmpvos3thb8.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpvos3thb8.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []int{}\n                         ^~\n/tmp/tmpvos3thb8.swift:9:28: error: cannot find 'int' in scope\n    var sorted_numbers = []int{}\n                           ^~~\n/tmp/tmpvos3thb8.swift:19:12: error: cannot find 'strings' in scope\n    return strings.TrimSpace(sorted_numbers_string)\n           ^~~~~~~\n/tmp/tmpvos3thb8.swift:19:30: error: cannot find 'sorted_numbers_string' in scope\n    return strings.TrimSpace(sorted_numbers_string)\n                             ^~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 9 {\n            number_int = 9\n        }\n        if number_int < 0 {\n            number_int = 0\n        }\n        sorted_numbers = append(sorted_numbers, strconv.Itoa(number_int))\n    }\n    sorted_numbers.sort()\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpr52efawd.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpr52efawd.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpr52efawd.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpr52efawd.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpr52efawd.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpr52efawd.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpr52efawd.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpr52efawd.swift:22:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmpr52efawd.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int < 10 {\n            sorted_numbers = append(sorted_numbers, number)\n        }\n    }\n    sorted_numbers.sort()\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp18fwd_7h.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmp18fwd_7h.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp18fwd_7h.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp18fwd_7h.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp18fwd_7h.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmp18fwd_7h.swift:18:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmp18fwd_7h.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums []int\n    var num_strs []string\n    var i int\n    var j int\n    var num_str string\n    var num int\n    var num_str_len int\n    var num_str_len_str string\n    var num_str_len_str_str string\n    var num_str_len_str_str_str string\n    var num_str_len_str_str_str_str string\n    var num_str_len_str_str_str_str_str string\n    var num_str_len_str_str_str_str_str_str string\n    var num_str_len_str_str_str_str_str_str_str string\n    var num_str_len_str_str_str_str_str_str_str_str string\n    var num_str_len_str_str_str_str_str_str_str_str_str string\n    var num_str_len_str_str_str_str_str_str_str_str_str_str string\n    var num_str_len_str_str_str_str_str_str_str_str_str_str_str string\n    var num_str_len_str_str_str_str_str_str_str_str_str_str_str_str string\n    var num_str_len_str_str_str_str_str_str_str_str_str_str_str_str_str string\n    var num_str_len_str_str_str_str_str_str_str_str_str_str_str_str_str_str string\n    var num_str_len_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str string\n    var num_str_len_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str string\n    var num_str_len_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str string\n    var num_str_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpqjmuwk0o.swift:8:13: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n            ^\n            ;\n/tmp/tmpqjmuwk0o.swift:8:16: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n               ^\n               ;\n/tmp/tmpqjmuwk0o.swift:9:17: error: consecutive statements on a line must be separated by ';'\n    var num_strs []string\n                ^\n                ;\n/tmp/tmpqjmuwk0o.swift:9:20: error: consecutive statements on a line must be separated by ';'\n    var num_strs []string\n                   ^\n                   ;\n/tmp/tmpqjmuwk0o.swift:10:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var i int\n          ^\n/tmp/tmpqjmuwk0o.swift:10:11: note: join the identifiers together\n    var i int\n        ~~^~~\n        iint\n/tmp/tmpqjmuwk0o.swift:10:11: note: join the identifiers together with camel-case\n    var i int\n        ~~^~~\n        iInt\n/tmp/tmpqjmuwk0o.swift:11:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var j int\n          ^\n/tmp/tmpqjmuwk0o.swift:11:11: note: join the identifiers together\n    var j int\n        ~~^~~\n        jint\n/tmp/tmpqjmuwk0o.swift:11:11: note: join the identifiers together with camel-case\n    var j int\n        ~~^~~\n        jInt\n/tmp/tmpqjmuwk0o.swift:12:17: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var num_str string\n                ^\n/tmp/tmpqjmuwk0o.swift:12:17: note: join the identifiers together\n    var num_str string\n        ~~~~~~~~^~~~~~\n        num_strstring\n/tmp/tmpqjmuwk0o.swift:12:17: note: join the identifiers together with camel-case\n    var num_str string\n        ~~~~~~~~^~~~~~\n        num_strString\n/tmp/tmpqjmuwk0o.swift:13:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var num int\n            ^\n/tmp/tmpqjmuwk0o.swift:13:13: note: join the identifier",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 9 {\n            number_int = 9\n        }\n        if number_int < 0 {\n            number_int = 0\n        }\n        sorted_numbers.append(number_int)\n    }\n    sorted_numbers.sort()\n    sorted_numbers.reverse()\n    return join_strings(sorted_numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpspj4397s.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpspj4397s.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpspj4397s.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpspj4397s.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpspj4397s.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmpspj4397s.swift:23:12: error: cannot find 'join_strings' in scope\n    return join_strings(sorted_numbers)\n           ^~~~~~~~~~~~\n/tmp/tmpspj4397s.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, number := range numbers_array {\n        if number == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if number == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if number == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if number == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if number == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if number == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if number == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if number == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if number == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if number == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp39dj81ge.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp39dj81ge.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_array {\n         ^\n/tmp/tmp39dj81ge.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_array {\n         ^\n/tmp/tmp39dj81ge.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmp39dj81ge.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp39dj81ge.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp39dj81ge.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 0 && number_int < 10 {\n            sorted_numbers = append(sorted_numbers, number)\n        }\n    }\n    sorted_numbers.sort()\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpk2rcz34x.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpk2rcz34x.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpk2rcz34x.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpk2rcz34x.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpk2rcz34x.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpk2rcz34x.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpk2rcz34x.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpk2rcz34x.swift:18:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmpk2rcz34x.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        if number_int > 9 {\n            number_int = 9\n        }\n        if number_int < 0 {\n            number_int = 0\n        }\n        sorted_numbers.append(number_int)\n    }\n    sorted_numbers.sort()\n    sorted_numbers.reverse()\n    return sorted_numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp7jgrbzql.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmp7jgrbzql.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp7jgrbzql.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp7jgrbzql.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp7jgrbzql.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmp7jgrbzql.swift:23:27: error: value of type '[Any]' has no member 'join'\n    return sorted_numbers.join(\" \")\n           ~~~~~~~~~~~~~~ ^~~~\n/tmp/tmp7jgrbzql.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_list); i++ {\n        if numbers_list[i] == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if numbers_list[i] == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if numbers_list[i] == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if numbers_list[i] == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if numbers_list[i] == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if numbers_list[i] == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if numbers_list[i] == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if numbers_list[i] == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if numbers_list[i] == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp1azf39ry.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp1azf39ry.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_list); i++ {\n           ^\n            <#type#>\n/tmp/tmp1azf39ry.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_list); i++ {\n           ^\n/tmp/tmp1azf39ry.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_list); i++ {\n           ^\n/tmp/tmp1azf39ry.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp1azf39ry.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp1azf39ry.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp1azf39ry.swift:31:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = numbers.split(\" \")\n    numbers.sort()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpnq7rm2ma.swift:8:23: error: no exact matches in call to instance method 'split'\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:5: error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers = numbers.split(\" \")\n    ^~~~~~~\n/tmp/tmpnq7rm2ma.swift:8:23: error: no 'split' candidates produce the expected contextual result type 'String'\n    numbers = numbers.split(\" \")\n                      ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpnq7rm2ma.swift:9:13: error: value of type 'String' has no member 'sort'\n    numbers.sort()\n    ~~~~~~~ ^~~~\n/tmp/tmpnq7rm2ma.swift:10:20: error: value of type 'String' has no member 'join'\n    return numbers.join(\" \")\n           ~~~~~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpri8kqcvq.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpri8kqcvq.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpri8kqcvq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpri8kqcvq.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpri8kqcvq.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []int{}\n    for _, number := range numbers_array {\n        var num = strings.Trim(number, \" \")\n        var num_int = strings.ToInt(num)\n        sorted_numbers = append(sorted_numbers, num_int)\n    }\n    sort.Ints(sorted_numbers)\n    var sorted_string = \"\"\n    for _, num := range sorted_numbers {\n        sorted_string += strconv.Itoa(num) + \" \"\n    }\n    return strings.Trim(sorted_string, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpxac63u5c.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []int{}\n                           ^\n                           ;\n/tmp/tmpxac63u5c.swift:10:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_array {\n         ^\n/tmp/tmpxac63u5c.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_array {\n         ^\n/tmp/tmpxac63u5c.swift:17:10: error: expected 'in' after for-each pattern\n    for _, num := range sorted_numbers {\n         ^\n/tmp/tmpxac63u5c.swift:17:10: error: expected Sequence expression for for-each loop\n    for _, num := range sorted_numbers {\n         ^\n/tmp/tmpxac63u5c.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpxac63u5c.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []int{}\n                         ^~\n/tmp/tmpxac63u5c.swift:9:28: error: cannot find 'int' in scope\n    var sorted_numbers = []int{}\n                           ^~~\n/tmp/tmpxac63u5c.swift:20:12: error: cannot find 'strings' in scope\n    return strings.Trim(sorted_string, \" \")\n           ^~~~~~~\n/tmp/tmpxac63u5c.swift:11:19: error: cannot find 'strings' in scope\n        var num = strings.Trim(number, \" \")\n                  ^~~~~~~\n/tmp/tmpxac63u5c.swift:11:32: error: cannot find 'number' in scope\n        var num = strings.Trim(number, \" \")\n                               ^~~~~~\n/tmp/tmpxac63u5c.swift:12:23: error: cannot find 'strings' in scope\n        var num_int = strings.ToInt(num)\n                      ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = numbers.split(\" \")\n    numbers.sort()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpnq7rm2ma.swift:8:23: error: no exact matches in call to instance method 'split'\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:23: note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n    numbers = numbers.split(\" \")\n                      ^\n/tmp/tmpnq7rm2ma.swift:8:5: error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers = numbers.split(\" \")\n    ^~~~~~~\n/tmp/tmpnq7rm2ma.swift:8:23: error: no 'split' candidates produce the expected contextual result type 'String'\n    numbers = numbers.split(\" \")\n                      ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual result type 'String'\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpnq7rm2ma.swift:9:13: error: value of type 'String' has no member 'sort'\n    numbers.sort()\n    ~~~~~~~ ^~~~\n/tmp/tmpnq7rm2ma.swift:10:20: error: value of type 'String' has no member 'join'\n    return numbers.join(\" \")\n           ~~~~~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums []int\n    for _, num := range numbers.split(\" \") {\n        nums = append(nums, int(num))\n    }\n    sort.Ints(nums)\n    return strings.Join(numbers.split(\" \"), \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmph_9iptlh.swift:8:13: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n            ^\n            ;\n/tmp/tmph_9iptlh.swift:8:16: error: consecutive statements on a line must be separated by ';'\n    var nums []int\n               ^\n               ;\n/tmp/tmph_9iptlh.swift:9:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers.split(\" \") {\n         ^\n/tmp/tmph_9iptlh.swift:9:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers.split(\" \") {\n         ^\n/tmp/tmph_9iptlh.swift:8:9: error: type annotation missing in pattern\n    var nums []int\n        ^\n/tmp/tmph_9iptlh.swift:8:14: error: empty collection literal requires an explicit type\n    var nums []int\n             ^~\n/tmp/tmph_9iptlh.swift:8:14: warning: expression of type '[Any]' is unused\n    var nums []int\n             ^~\n/tmp/tmph_9iptlh.swift:8:16: error: cannot find 'int' in scope\n    var nums []int\n               ^~~\n/tmp/tmph_9iptlh.swift:13:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers.split(\" \"), \" \")\n           ^~~~~~~\n/tmp/tmph_9iptlh.swift:13:39: error: missing argument label 'separator:' in call\n    return strings.Join(numbers.split(\" \"), \" \")\n                                      ^\n                                      separator: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num != \"\" {\n            sorted_numbers = append(sorted_numbers, num)\n        }\n    }\n    sort.Strings(sorted_numbers)\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpm7p0i9hc.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpm7p0i9hc.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpm7p0i9hc.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpm7p0i9hc.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpm7p0i9hc.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpm7p0i9hc.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpm7p0i9hc.swift:16:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        if number == \"zero\" {\n            sorted_numbers.append(number)\n        } else if number == \"one\" {\n            sorted_numbers.append(number)\n        } else if number == \"two\" {\n            sorted_numbers.append(number)\n        } else if number == \"three\" {\n            sorted_numbers.append(number)\n        } else if number == \"four\" {\n            sorted_numbers.append(number)\n        } else if number == \"five\" {\n            sorted_numbers.append(number)\n        } else if number == \"six\" {\n            sorted_numbers.append(number)\n        } else if number == \"seven\" {\n            sorted_numbers.append(number)\n        } else if number == \"eight\" {\n            sorted_numbers.append(number)\n        } else if number == \"nine\" {\n            sorted_numbers.append(number)\n        }\n    }\n    return sorted_numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpftktixno.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpftktixno.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpftktixno.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpftktixno.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpftktixno.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmpftktixno.swift:34:27: error: value of type '[Any]' has no member 'join'\n    return sorted_numbers.join(\" \")\n           ~~~~~~~~~~~~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp6bba_pzk.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmp6bba_pzk.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmp6bba_pzk.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp6bba_pzk.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmp6bba_pzk.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmp6bba_pzk.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        var number = strings.Trim(numbers_array[i], \" \")\n        if number == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if number == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if number == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if number == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if number == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if number == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if number == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if number == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if number == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if number == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpdfdqz6gv.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpdfdqz6gv.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpdfdqz6gv.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpdfdqz6gv.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpdfdqz6gv.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpdfdqz6gv.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpdfdqz6gv.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpdfdqz6gv.swift:34:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n/tmp/tmpdfdqz6gv.swift:11:22: error: cannot find 'strings' in scope\n        var number = strings.Trim(numbers_array[i], \" \")\n                     ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_list {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    sort.Strings(sorted_numbers)\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpkb26zoip.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpkb26zoip.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpkb26zoip.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_list {\n         ^\n/tmp/tmpkb26zoip.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpkb26zoip.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpkb26zoip.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpkb26zoip.swift:34:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpri8kqcvq.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpri8kqcvq.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpri8kqcvq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpri8kqcvq.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpri8kqcvq.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_list, \" \")).Reverse(), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp_qwqudac.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmp_qwqudac.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_list, \" \")).Reverse(), \" \")\n                         ^~~~~~~\n/tmp/tmp_qwqudac.swift:9:39: error: cannot find 'sort' in scope\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_list, \" \")).Reverse(), \" \")\n                                      ^~~~\n/tmp/tmp_qwqudac.swift:9:53: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sort.IntSlice(strings.Split(numbers_list, \" \")).Reverse(), \" \")\n                                                    ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_arr = strings.Split(numbers, \" \")\n    var sorted_arr = []string{}\n    for _, num := range numbers_arr {\n        if num == \"zero\" {\n            sorted_arr = append(sorted_arr, \"zero\")\n        } else if num == \"one\" {\n            sorted_arr = append(sorted_arr, \"one\")\n        } else if num == \"two\" {\n            sorted_arr = append(sorted_arr, \"two\")\n        } else if num == \"three\" {\n            sorted_arr = append(sorted_arr, \"three\")\n        } else if num == \"four\" {\n            sorted_arr = append(sorted_arr, \"four\")\n        } else if num == \"five\" {\n            sorted_arr = append(sorted_arr, \"five\")\n        } else if num == \"six\" {\n            sorted_arr = append(sorted_arr, \"six\")\n        } else if num == \"seven\" {\n            sorted_arr = append(sorted_arr, \"seven\")\n        } else if num == \"eight\" {\n            sorted_arr = append(sorted_arr, \"eight\")\n        } else if num == \"nine\" {\n            sorted_arr = append(sorted_arr, \"nine\")\n        }\n    }\n    sort.Strings(sorted_arr)\n    return strings.Join(sorted_arr, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpsmtyfr_d.swift:9:24: error: consecutive statements on a line must be separated by ';'\n    var sorted_arr = []string{}\n                       ^\n                       ;\n/tmp/tmpsmtyfr_d.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_arr {\n         ^\n/tmp/tmpsmtyfr_d.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_arr {\n         ^\n/tmp/tmpsmtyfr_d.swift:8:23: error: cannot find 'strings' in scope\n    var numbers_arr = strings.Split(numbers, \" \")\n                      ^~~~~~~\n/tmp/tmpsmtyfr_d.swift:9:22: error: empty collection literal requires an explicit type\n    var sorted_arr = []string{}\n                     ^~\n/tmp/tmpsmtyfr_d.swift:9:24: error: cannot find 'string' in scope\n    var sorted_arr = []string{}\n                       ^~~~~~\n/tmp/tmpsmtyfr_d.swift:34:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_arr, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var numbers_array_sorted = []\n    for i := 0; i < len(numbers_array); i++ {\n        numbers_array_sorted.append(numbers_array[i])\n    }\n    numbers_array_sorted.sort()\n    return strings.Join(numbers_array_sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpp1ock_vc.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpp1ock_vc.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpp1ock_vc.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpp1ock_vc.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpp1ock_vc.swift:9:32: error: empty collection literal requires an explicit type\n    var numbers_array_sorted = []\n                               ^~\n/tmp/tmpp1ock_vc.swift:14:12: error: cannot find 'strings' in scope\n    return strings.Join(numbers_array_sorted, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums = strings.Split(numbers, \" \")\n    sort.Ints(nums)\n    return strings.Join(nums, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmprj_dcl1j.swift:8:16: error: cannot find 'strings' in scope\n    var nums = strings.Split(numbers, \" \")\n               ^~~~~~~\n/tmp/tmprj_dcl1j.swift:9:5: error: cannot find 'sort' in scope\n    sort.Ints(nums)\n    ^~~~\n/tmp/tmprj_dcl1j.swift:10:12: error: cannot find 'strings' in scope\n    return strings.Join(nums, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_list = strings.Split(numbers, \" \")\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpomyw_thv.swift:8:24: error: cannot find 'strings' in scope\n    var numbers_list = strings.Split(numbers, \" \")\n                       ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:26: error: cannot find 'strings' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                         ^~~~~~~\n/tmp/tmpomyw_thv.swift:9:39: error: cannot find 'sorted' in scope\n    var sorted_numbers = strings.Join(sorted(numbers_list), \" \")\n                                      ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums = strings.Split(numbers, \" \")\n    sort.Ints(nums)\n    return strings.Join(nums, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmprj_dcl1j.swift:8:16: error: cannot find 'strings' in scope\n    var nums = strings.Split(numbers, \" \")\n               ^~~~~~~\n/tmp/tmprj_dcl1j.swift:9:5: error: cannot find 'sort' in scope\n    sort.Ints(nums)\n    ^~~~\n/tmp/tmprj_dcl1j.swift:10:12: error: cannot find 'strings' in scope\n    return strings.Join(nums, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for _, num := range numbers_array {\n        if num == \"zero\" {\n            sorted_numbers = append(sorted_numbers, \"zero\")\n        } else if num == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if num == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if num == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if num == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if num == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if num == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if num == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if num == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if num == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpri8kqcvq.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpri8kqcvq.swift:10:10: error: expected 'in' after for-each pattern\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:10:10: error: expected Sequence expression for for-each loop\n    for _, num := range numbers_array {\n         ^\n/tmp/tmpri8kqcvq.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpri8kqcvq.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpri8kqcvq.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpri8kqcvq.swift:33:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = strings.Split(numbers, \" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if strings.Contains(numbers_array[i], \"one\") {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if strings.Contains(numbers_array[i], \"two\") {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if strings.Contains(numbers_array[i], \"three\") {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if strings.Contains(numbers_array[i], \"four\") {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if strings.Contains(numbers_array[i], \"five\") {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if strings.Contains(numbers_array[i], \"six\") {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if strings.Contains(numbers_array[i], \"seven\") {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if strings.Contains(numbers_array[i], \"eight\") {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if strings.Contains(numbers_array[i], \"nine\") {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpiu3ufieb.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpiu3ufieb.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpiu3ufieb.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpiu3ufieb.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpiu3ufieb.swift:8:25: error: cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers, \" \")\n                        ^~~~~~~\n/tmp/tmpiu3ufieb.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpiu3ufieb.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpiu3ufieb.swift:31:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []\n    for i := 0; i < len(numbers_array); i++ {\n        var number = numbers_array[i]\n        var number_int = parseInt(number)\n        sorted_numbers.append(number_int)\n    }\n    sorted_numbers.sort()\n    var sorted_numbers_string = \"\"\n    for i := 0; i < len(sorted_numbers); i++ {\n        var number = sorted_numbers[i]\n        sorted_numbers_string += number\n        if i < len(sorted_numbers) - 1 {\n            sorted_numbers_string += \" \"\n        }\n    }\n    return sorted_numbers_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmp8z9n25l6.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmp8z9n25l6.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp8z9n25l6.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmp8z9n25l6.swift:17:12: error: expected type\n    for i := 0; i < len(sorted_numbers); i++ {\n           ^\n            <#type#>\n/tmp/tmp8z9n25l6.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(sorted_numbers); i++ {\n           ^\n/tmp/tmp8z9n25l6.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(sorted_numbers); i++ {\n           ^\n/tmp/tmp8z9n25l6.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp8z9n25l6.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []\n                         ^~\n/tmp/tmp8z9n25l6.swift:12:26: error: cannot find 'parseInt' in scope\n        var number_int = parseInt(number)\n                         ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\" \")\n    var sorted_numbers = []string{}\n    for i := 0; i < len(numbers_array); i++ {\n        if numbers_array[i] == \"one\" {\n            sorted_numbers = append(sorted_numbers, \"one\")\n        } else if numbers_array[i] == \"two\" {\n            sorted_numbers = append(sorted_numbers, \"two\")\n        } else if numbers_array[i] == \"three\" {\n            sorted_numbers = append(sorted_numbers, \"three\")\n        } else if numbers_array[i] == \"four\" {\n            sorted_numbers = append(sorted_numbers, \"four\")\n        } else if numbers_array[i] == \"five\" {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        } else if numbers_array[i] == \"six\" {\n            sorted_numbers = append(sorted_numbers, \"six\")\n        } else if numbers_array[i] == \"seven\" {\n            sorted_numbers = append(sorted_numbers, \"seven\")\n        } else if numbers_array[i] == \"eight\" {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        } else if numbers_array[i] == \"nine\" {\n            sorted_numbers = append(sorted_numbers, \"nine\")\n        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "/tmp/tmpfn1xu0_b.swift:9:28: error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers = []string{}\n                           ^\n                           ;\n/tmp/tmpfn1xu0_b.swift:10:12: error: expected type\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n            <#type#>\n/tmp/tmpfn1xu0_b.swift:10:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpfn1xu0_b.swift:10:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers_array); i++ {\n           ^\n/tmp/tmpfn1xu0_b.swift:8:33: error: no exact matches in call to instance method 'split'\n    var numbers_array = numbers.split(\" \")\n                                ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmpfn1xu0_b.swift:9:26: error: empty collection literal requires an explicit type\n    var sorted_numbers = []string{}\n                         ^~\n/tmp/tmpfn1xu0_b.swift:9:28: error: cannot find 'string' in scope\n    var sorted_numbers = []string{}\n                           ^~~~~~\n/tmp/tmpfn1xu0_b.swift:31:12: error: cannot find 'strings' in scope\n    return strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}