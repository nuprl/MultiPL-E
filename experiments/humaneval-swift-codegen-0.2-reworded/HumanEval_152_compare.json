{
  "name": "HumanEval_152_compare",
  "language": "swift",
  "prompt": "\n/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n/// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0, 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0, 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])",
  "completions": [
    "    ",
    "    ",
    "    ",
    "    ",
    "\tvar result = make([]Int, len(game))\n\tfor i := 0; i < len(game); i++ {\n\t\tresult[i] = abs(game[i] - guess[i])\n\t}\n\treturn result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "\t// write your code in Go (https://github.com/gobyexample/examples/blob/master/matching_guesses/matching_guesses.go)\n\treturn nil",
    "\t// Write your code here\n\treturn",
    "    ",
    "\t// write your code in Go (https://github.com/gobyexample/examples/blob/master/goby/examples/matching/compare.go)\n\treturn nil",
    "    ",
    "    var result = [Int]\n    for i, g in enumerate(guess) {\n        if game[i] == g {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - g)\n        }\n    }\n    return result",
    "\t// Write your code here\n\treturn",
    "\t// write your code in Java SE 8\n\treturn nil",
    "    ",
    "\t// Write your code here\n\treturn",
    "    ",
    "    ",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = game[i] - guess[i]\n        }\n    }\n    return result",
    "    ",
    "    // Write your code here\n    return",
    "\tvar result []Int\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult = append(result, 0)\n\t\t} else {\n\t\t\tresult = append(result, abs(game[i] - guess[i]))\n\t\t}\n\t}\n\treturn result",
    "\t// Write your code here\n\treturn",
    "    // Write your code here\n    return",
    "\t// Write your code here\n\tvar result = make([]int, len(game))\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "    // Write your code here\n    return",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    ",
    "    var result = [Int]\n    for i, g in enumerate(guess) {\n        if game[i] == g {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - g)\n        }\n    }\n    return result",
    "    ",
    "\tvar result [Int]\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "\tvar result [Int]\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "\t// write your code in Go 1.4\n\treturn nil",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    // Write your code here\n    var result = make([]Int, len(game))\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "\t// Write your code here\n\treturn",
    "    ",
    "    ",
    "\t// write your code in Java SE 8\n\t// game = [1, 2, 3, 4, 5, 1]\n\t// guess = [1, 2, 3, 4, 2, -2]\n\t// game = [0, 5, 0, 0, 0, 4]\n\t// guess = [4, 1, 1, 0, 0, -2]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0",
    "\tvar result [Int]\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "\t// write your code in Go\n\t// game: [1, 2, 3, 4, 5, 1]\n\t// guess: [1, 2, 3, 4, 2, -2]\n\t// game: [0, 5, 0, 0, 0, 4]\n\t// guess: [4, 1, 1, 0, 0, -2]\n\t// game: [0, 0, 0, 0, 0, 0]\n\t// guess: [0, 0, 0, 0, 0, 0]\n\t// game: [0, 0, 0, 0, 0, 0]\n\t// guess: [0, 0, 0, 0, 0, 0]\n\t// game: [0, 0, 0, 0, 0, 0]\n\t// guess: [0, 0, 0, 0, 0, 0]\n\t// game: [0, 0, 0, 0, 0, 0]\n\t// guess: [0, 0, 0, 0, 0, 0]\n\t// game: [0, 0, 0, 0, 0, 0]\n\t// guess: [0, 0, 0, 0, 0, 0]\n\t// game: [0, 0, 0, 0, 0, 0]\n\t// guess: [0, 0, 0, 0, 0, 0]\n\t// game: [0, 0, 0, 0, 0, 0]\n\t// guess: [0, 0, 0, 0, 0, 0]\n\t// game: [0, 0, 0, 0, 0, 0]\n\t// guess: [0, 0, 0, 0, 0, 0]\n\t// game: [0, 0, 0, 0, 0, 0]\n\t// guess: [0, 0, 0, 0, 0, 0]\n\t// game: [0, 0, 0, 0, 0, 0]\n\t// guess: [0, 0, 0, 0, 0, 0]\n\t// game: [0, 0, 0, 0, 0, 0]\n\t// guess: [0, 0, 0, 0, 0, 0]\n\t// game: [0, 0, 0, 0, 0, 0]\n\t// guess: [0, 0, 0, 0, 0, 0",
    "    ",
    "    var result [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    // Write your code here\n    var result = []\n    for i := 0; i < len(game); i++ {\n        result = append(result, abs(game[i] - guess[i]))\n    }\n    return result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    ",
    "\t// write your code in Go\n\t// game = [1, 2, 3, 4, 5, 1]\n\t// guess = [1, 2, 3, 4, 2, -2]\n\t// game = [0, 5, 0, 0, 0, 4]\n\t// guess = [4, 1, 1, 0, 0, -2]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0",
    "    var result = make([]Int, len(game))\n    for i, g := range game {\n        result[i] = abs(g - guess[i])\n    }\n    return result",
    "    ",
    "    var result = [Int]\n    for i, g in enumerate(guess) {\n        if game[i] == g {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - g)\n        }\n    }\n    return result",
    "    var result = [Int]\n    for i, g in enumerate(guess) {\n        result[i] = abs(g - game[i])\n    }\n    return result",
    "\tvar result = make([]int, len(game))\n\tfor i := range game {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "    ",
    "\tvar result = make([]int, len(game))\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "\t// Write your code here\n\treturn nil",
    "    var result = make([]Int, len(game))\n    for i, _ := range game {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "\tvar result = make([]int, len(game))\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "\t// Write your code here\n\treturn nil",
    "    ",
    "    // Write your code here\n    var result = make([]Int, len(game))\n    for i := range game {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result",
    "    ",
    "    ",
    "    var result = [Int]\n    for i, g in enumerate(guess) {\n        if game[i] == g {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - g)\n        }\n    }\n    return result",
    "\tvar result = make([]int, len(game))\n\tfor i := range game {\n\t\tresult[i] = abs(game[i] - guess[i])\n\t}\n\treturn result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    ",
    "\tvar result = make([]Int, len(game))\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "    ",
    "    var result [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    ",
    "    // Write your code here\n    return",
    "    var result = [Int]\n    for i, g in enumerate(guess) {\n        if game[i] == g {\n            result[i] = 0\n        } else {\n            result[i] = abs(g - game[i])\n        }\n    }\n    return result",
    "    ",
    "\t// write your code in Go 1.0\n\tvar result [Int]\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "    ",
    "\tvar result = make([]int, len(game))\n\tfor i := 0; i < len(game); i++ {\n\t\tresult[i] = abs(game[i] - guess[i])\n\t}\n\treturn result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result",
    "    // Write your code here\n    var result = []\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result = append(result, 0)\n        } else {\n            result = append(result, abs(game[i] - guess[i]))\n        }\n    }\n    return result",
    "    ",
    "    ",
    "    ",
    "    ",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    ",
    "\tvar result = make([]int, len(game))\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "    ",
    "    var result: [Int] = []\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result = append(result, 0)\n        } else {\n            result = append(result, abs(game[i] - guess[i]))\n        }\n    }\n    return result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    var result [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    ",
    "\t// Write your code here\n\treturn",
    "    // Write your code here\n    var result = make([]Int, len(game))\n    for i := 0; i < len(game); i++ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result",
    "    // Write your code here\n    return",
    "    // Write your code here\n    var result = []\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result = append(result, 0)\n        } else {\n            result = append(result, abs(game[i] - guess[i]))\n        }\n    }\n    return result",
    "\tvar result = make([]int, len(game))\n\tfor i := range game {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "    ",
    "    ",
    "    ",
    "    // Write your code here\n    var result = make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    ",
    "    ",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    // Write your code here\n    var result = make([]Int, len(game))\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    // Write your code here\n    var result = make([]int, len(game))\n    for i := range game {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    ",
    "\tvar result = make([]Int, len(game))\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "    ",
    "\tvar result [Int]\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "    ",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    ",
    "    var result = make([]Int, len(game))\n    for i := 0; i < len(game); i++ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result",
    "    ",
    "    ",
    "    ",
    "\tvar result [Int]\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "\t// Write your code here\n\tvar result = make([]int, len(game))\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "    ",
    "    ",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    var result = make([]Int, len(game))\n    for i := 0; i < len(game); i++ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result",
    "    // Write your code here\n    return",
    "    ",
    "\tvar result = make([]int, len(game))\n\tfor i := range game {\n\t\tresult[i] = abs(game[i] - guess[i])\n\t}\n\treturn result",
    "\tvar result = make([]int, len(game))\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "    var result [Int] = [0] * len(game)\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "\tvar result [Int]\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "    ",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    // Write your code here\n    var result = make([]Int, len(game))\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    ",
    "\t// Write your code here\n\treturn",
    "    ",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "\t// Write your code here\n\tvar result = make([]int, len(game))\n\tfor i := range game {\n\t\tresult[i] = abs(game[i] - guess[i])\n\t}\n\treturn result",
    "\t// write your code in Java SE 8\n\treturn nil",
    "    ",
    "    ",
    "    ",
    "\t// write your code in Java SE 8\n\treturn nil",
    "    ",
    "\tvar result [Int]\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "\t// write your code in Java SE 8\n\treturn nil",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "\t// write your code in Go syntax\n\t// return [Int]\n\treturn nil",
    "\t// Write your code here\n\treturn",
    "\t// write your code in Java SE 8\n\t// game = [1, 2, 3, 4, 5, 1]\n\t// guess = [1, 2, 3, 4, 2, -2]\n\t// game = [0, 5, 0, 0, 0, 4]\n\t// guess = [4, 1, 1, 0, 0, -2]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0",
    "\t// Write your code here\n\treturn",
    "\t// write your code in Java SE 8\n\treturn nil",
    "\t// Write your code here\n\treturn",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "\tvar result [Int]\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "    ",
    "\t// write your code in Go\n\tvar result []int\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult = append(result, 0)\n\t\t} else {\n\t\t\tresult = append(result, abs(game[i] - guess[i]))\n\t\t}\n\t}\n\treturn result",
    "\t// write your code in Go 1.4\n\treturn nil",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    ",
    "    ",
    "    var result = make([]Int, len(game))\n    for i, _ := range game {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = game[i] - guess[i]\n        }\n    }\n    return result",
    "    ",
    "    // Write your code here\n    var result = make([]int, len(game))\n    for i := range game {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result",
    "    ",
    "    ",
    "\t// write your code in Java SE 8\n\treturn nil",
    "    // Write your code here\n    var result = make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result",
    "\t// Write your code here\n\tvar result = make([]int, len(game))\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "    var result [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    ",
    "    ",
    "    ",
    "    var result: [Int] = []\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result = append(result, 0)\n        } else {\n            result = append(result, abs(game[i] - guess[i]))\n        }\n    }\n    return result",
    "    ",
    "\t// Write your code here\n\treturn nil",
    "    var result [Int] = [0] * len(game)\n    for i := 0; i < len(game); i++ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result",
    "\t// Write your code here\n\tvar result = make([]int, len(game))\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult[i] = 0\n\t\t} else {\n\t\t\tresult[i] = abs(game[i] - guess[i])\n\t\t}\n\t}\n\treturn result",
    "\t// write your code in Java SE 8\n\t// game = [1, 2, 3, 4, 5, 1]\n\t// guess = [1, 2, 3, 4, 2, -2]\n\t// game = [0, 5, 0, 0, 0, 4]\n\t// guess = [4, 1, 1, 0, 0, -2]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0, 0]\n\t// game = [0, 0, 0, 0, 0, 0]\n\t// guess = [0, 0, 0, 0, 0",
    "\tvar result []Int\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult = append(result, 0)\n\t\t} else {\n\t\t\tresult = append(result, abs(game[i] - guess[i]))\n\t\t}\n\t}\n\treturn result",
    "\t// write your code in Java SE 8\n\treturn nil",
    "    // Write your code here\n    var result = make([]Int, len(game))\n    for i := range game {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result",
    "    ",
    "    ",
    "    ",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    ",
    "    ",
    "\tvar result []Int\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] == guess[i] {\n\t\t\tresult = append(result, 0)\n\t\t} else {\n\t\t\tresult = append(result, abs(game[i] - guess[i]))\n\t\t}\n\t}\n\treturn result",
    "    var result = [Int]\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result",
    "    ",
    "    // Write your code here\n    return",
    "    "
  ],
  "stop_tokens": [
    "\n}"
  ]
}