{
  "name": "HumanEval_103_rounded_avg",
  "language": "swift",
  "prompt": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.toBinary(n + (m - n) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpjhhrvuc_.swift:22:31: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(n + (m - n) / 2))\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmwwiw91l.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpmwwiw91l.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpmwwiw91l.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpmwwiw91l.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n/tmp/tmpmwwiw91l.swift:27:45: error: cannot find 'sum' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmwwiw91l.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpmwwiw91l.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpmwwiw91l.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpmwwiw91l.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n/tmp/tmpmwwiw91l.swift:27:45: error: cannot find 'sum' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"0b%b\", n.to_i() + m.to_i() / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp7onsvtvi.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"0b%b\", n.to_i() + m.to_i() / 2))\n                          ^~~\n/tmp/tmp7onsvtvi.swift:22:49: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"0b%b\", n.to_i() + m.to_i() / 2))\n                                              ~ ^~~~\n/tmp/tmp7onsvtvi.swift:22:60: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"0b%b\", n.to_i() + m.to_i() / 2))\n                                                         ~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpuwo7eyuh.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.to_s(2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp3pf2s_mm.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmp3pf2s_mm.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmp3pf2s_mm.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp3pf2s_mm.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3pf2s_mm.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3pf2s_mm.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmp3pf2s_mm.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.to_s(2))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpw9agsggv.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpw9agsggv.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpw9agsggv.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpw9agsggv.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmwwiw91l.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpmwwiw91l.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpmwwiw91l.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpmwwiw91l.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n/tmp/tmpmwwiw91l.swift:27:45: error: cannot find 'sum' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / 2\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpto93cipt.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpto93cipt.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp3im4dfql.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmp3im4dfql.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmp3im4dfql.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp3im4dfql.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3im4dfql.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3im4dfql.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmp3im4dfql.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.to_string())\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / 2\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpto93cipt.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpto93cipt.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpvzvb0hgy.swift:22:31: error: type 'Int' has no member 'to_string'\n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n                          ~~~ ^~~~~~~~~\n/tmp/tmpvzvb0hgy.swift:22:45: error: type 'Int' has no member 'div'\n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n                                        ~~~ ^~~\n/tmp/tmpvzvb0hgy.swift:22:53: error: type 'Int' has no member 'add'\n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n                                                ~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(avg(n, m))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmprcibemsn.swift:18:27: error: cannot find 'avg' in scope\n    return Result.success(avg(n, m))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int(math.Floor(float64(n + m) / 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpue1bx11j.swift:22:31: error: cannot find 'math' in scope\n    return Result.success(Int(math.Floor(float64(n + m) / 2)))\n                              ^~~~\n/tmp/tmpue1bx11j.swift:22:42: error: cannot find 'float64' in scope\n    return Result.success(Int(math.Floor(float64(n + m) / 2)))\n                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpuwo7eyuh.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(sum / (m - n + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp50xp1v0x.swift:22:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum Int\n            ^\n/tmp/tmp50xp1v0x.swift:22:13: note: join the identifiers together\n    var sum Int\n        ~~~~^~~\n        sumInt\n/tmp/tmp50xp1v0x.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp50xp1v0x.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp50xp1v0x.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp50xp1v0x.swift:22:9: error: type annotation missing in pattern\n    var sum Int\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpuwo7eyuh.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i: Int = n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpqqkhihld.swift:23:16: error: expected 'in' after for-each pattern\n    for i: Int = n; i <= m; i += 1 {\n               ^\n/tmp/tmpqqkhihld.swift:23:16: error: expected Sequence expression for for-each loop\n    for i: Int = n; i <= m; i += 1 {\n               ^\n/tmp/tmpqqkhihld.swift:29:31: error: value of type 'Int' has no member 'to_string'\n    return Result.success(avg.to_string())\n                          ~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpuwo7eyuh.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpuwo7eyuh.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.to_s(2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp3pf2s_mm.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmp3pf2s_mm.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmp3pf2s_mm.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp3pf2s_mm.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3pf2s_mm.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3pf2s_mm.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmp3pf2s_mm.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.to_s(2))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", (n + m) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpadkyaqb3.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", (n + m) / 2))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / 2\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpto93cipt.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpto93cipt.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n + m / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmqfe5ak2.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n + m / 2))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpk77k68uw.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n                          ^~~\n/tmp/tmpk77k68uw.swift:22:47: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n                                            ~ ^~~~\n/tmp/tmpk77k68uw.swift:22:58: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n                                                       ~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmwwiw91l.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpmwwiw91l.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpmwwiw91l.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpmwwiw91l.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n/tmp/tmpmwwiw91l.swift:27:45: error: cannot find 'sum' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(to_bin(avg(n, m)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmphxxcgf9o.swift:18:27: error: cannot find 'to_bin' in scope\n    return Result.success(to_bin(avg(n, m)))\n                          ^~~~~~\n/tmp/tmphxxcgf9o.swift:18:34: error: cannot find 'avg' in scope\n    return Result.success(to_bin(avg(n, m)))\n                                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(to_bin(n + (m - n) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpl7c4wusw.swift:22:27: error: cannot find 'to_bin' in scope\n    return Result.success(to_bin(n + (m - n) / 2))\n                          ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int(round(avg(n, m))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpbpoqugye.swift:22:31: error: cannot find 'round' in scope\n    return Result.success(Int(round(avg(n, m))))\n                              ^~~~~\n/tmp/tmpbpoqugye.swift:22:37: error: cannot find 'avg' in scope\n    return Result.success(Int(round(avg(n, m))))\n                                    ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmwwiw91l.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpmwwiw91l.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpmwwiw91l.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpmwwiw91l.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n/tmp/tmpmwwiw91l.swift:27:45: error: cannot find 'sum' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg Int\n    avg = sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpv_2sj0ho.swift:22:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum Int\n            ^\n/tmp/tmpv_2sj0ho.swift:22:13: note: join the identifiers together\n    var sum Int\n        ~~~~^~~\n        sumInt\n/tmp/tmpv_2sj0ho.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpv_2sj0ho.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpv_2sj0ho.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpv_2sj0ho.swift:27:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var avg Int\n            ^\n/tmp/tmpv_2sj0ho.swift:27:13: note: join the identifiers together\n    var avg Int\n        ~~~~^~~\n        avgInt\n/tmp/tmpv_2sj0ho.swift:22:9: error: type annotation missing in pattern\n    var sum Int\n        ^\n/tmp/tmpv_2sj0ho.swift:27:9: error: type annotation missing in pattern\n    var avg Int\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(int(math.Floor(float64(n + m) / 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp18dj5oh8.swift:22:27: error: cannot find 'int' in scope\n    return Result.success(int(math.Floor(float64(n + m) / 2)))\n                          ^~~\n/tmp/tmp18dj5oh8.swift:22:31: error: cannot find 'math' in scope\n    return Result.success(int(math.Floor(float64(n + m) / 2)))\n                              ^~~~\n/tmp/tmp18dj5oh8.swift:22:42: error: cannot find 'float64' in scope\n    return Result.success(int(math.Floor(float64(n + m) / 2)))\n                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.toBinary(Int.avg(n, m)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpqz6zirrj.swift:22:31: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(Int.avg(n, m)))\n                          ~~~ ^~~~~~~~\n/tmp/tmpqz6zirrj.swift:22:44: error: type 'Int' has no member 'avg'\n    return Result.success(Int.toBinary(Int.avg(n, m)))\n                                       ~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmwwiw91l.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpmwwiw91l.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpmwwiw91l.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpmwwiw91l.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n/tmp/tmpmwwiw91l.swift:27:45: error: cannot find 'sum' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n.rounded_avg(m)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmprrm83gc0.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n.rounded_avg(m)))\n                          ^~~\n/tmp/tmprrm83gc0.swift:22:47: error: value of type 'Int' has no member 'rounded_avg'\n    return Result.success(fmt.Sprintf(\"%b\", n.rounded_avg(m)))\n                                            ~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(Int.to_string(sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpce44qvtc.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpce44qvtc.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpce44qvtc.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpce44qvtc.swift:27:31: error: type 'Int' has no member 'to_string'\n    return Result.success(Int.to_string(sum / (m - n + 1)))\n                          ~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpzec2oxvk.swift:22:31: error: type 'Int' has no member 'from_bits'\n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) / 2))\n                          ~~~ ^~~~~~~~~\n/tmp/tmpzec2oxvk.swift:22:45: error: type 'Int' has no member 'to_bits'\n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) / 2))\n                                        ~~~ ^~~~~~~\n/tmp/tmpzec2oxvk.swift:22:62: error: type 'Int' has no member 'to_bits'\n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) / 2))\n                                                         ~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(String(Int(n).rounded_avg(m)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmphce5eyob.swift:22:41: error: value of type 'Int' has no member 'rounded_avg'\n    return Result.success(String(Int(n).rounded_avg(m)))\n                                 ~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg = sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpjjpabdtx.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpjjpabdtx.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpjjpabdtx.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpjjpabdtx.swift:29:31: error: value of type 'Int' has no member 'to_string'\n    return Result.success(avg.to_string())\n                          ~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int(math.Floor(float64(n + m) / 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpue1bx11j.swift:22:31: error: cannot find 'math' in scope\n    return Result.success(Int(math.Floor(float64(n + m) / 2)))\n                              ^~~~\n/tmp/tmpue1bx11j.swift:22:42: error: cannot find 'float64' in scope\n    return Result.success(Int(math.Floor(float64(n + m) / 2)))\n                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.toBinary(Int.div(Int.add(n, m), 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpez3dx7gb.swift:22:31: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(Int.div(Int.add(n, m), 2)))\n                          ~~~ ^~~~~~~~\n/tmp/tmpez3dx7gb.swift:22:44: error: type 'Int' has no member 'div'\n    return Result.success(Int.toBinary(Int.div(Int.add(n, m), 2)))\n                                       ~~~ ^~~\n/tmp/tmpez3dx7gb.swift:22:52: error: type 'Int' has no member 'add'\n    return Result.success(Int.toBinary(Int.div(Int.add(n, m), 2)))\n                                               ~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(Int.toBinary(n + m) + Int.toBinary(m - n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp0t_lidio.swift:18:31: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(n + m) + Int.toBinary(m - n))\n                          ~~~ ^~~~~~~~\n/tmp/tmp0t_lidio.swift:18:53: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(n + m) + Int.toBinary(m - n))\n                                                ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpuwo7eyuh.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpbge6brqm.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpbge6brqm.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpbge6brqm.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpbge6brqm.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.toString())\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmwwiw91l.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpmwwiw91l.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpmwwiw91l.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpmwwiw91l.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n/tmp/tmpmwwiw91l.swift:27:45: error: cannot find 'sum' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpbge6brqm.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpbge6brqm.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpbge6brqm.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpbge6brqm.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.toString())\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(to_bin(n + (m - n) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpl7c4wusw.swift:22:27: error: cannot find 'to_bin' in scope\n    return Result.success(to_bin(n + (m - n) / 2))\n                          ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg Int = sum / Int(m - n + 1)\n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpuj8iuxf9.swift:22:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum Int = 0\n            ^\n/tmp/tmpuj8iuxf9.swift:22:13: note: join the identifiers together\n    var sum Int = 0\n        ~~~~^~~\n        sumInt\n/tmp/tmpuj8iuxf9.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpuj8iuxf9.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuj8iuxf9.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuj8iuxf9.swift:27:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var avg Int = sum / Int(m - n + 1)\n            ^\n/tmp/tmpuj8iuxf9.swift:27:13: note: join the identifiers together\n    var avg Int = sum / Int(m - n + 1)\n        ~~~~^~~\n        avgInt\n/tmp/tmpuj8iuxf9.swift:28:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp3im4dfql.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmp3im4dfql.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmp3im4dfql.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp3im4dfql.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3im4dfql.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3im4dfql.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmp3im4dfql.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.to_string())\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(sum / (m - n + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "/tmp/tmpbehk6wdg.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpbehk6wdg.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbehk6wdg.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbehk6wdg.swift:27:31: error: cannot convert value of type 'Int' to expected argument type 'String'\n    return Result.success(sum / (m - n + 1))\n                              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(Int(sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpyjv84t1k.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpyjv84t1k.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpyjv84t1k.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpyjv84t1k.swift:27:27: error: cannot convert value of type 'Int' to expected argument type 'String'\n    return Result.success(Int(sum / (m - n + 1)))\n                          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.toBinary(n + (m - n) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpjhhrvuc_.swift:22:31: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(n + (m - n) / 2))\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.toBinary(Int.avg(n, m)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpqz6zirrj.swift:22:31: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(Int.avg(n, m)))\n                          ~~~ ^~~~~~~~\n/tmp/tmpqz6zirrj.swift:22:44: error: type 'Int' has no member 'avg'\n    return Result.success(Int.toBinary(Int.avg(n, m)))\n                                       ~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp3im4dfql.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmp3im4dfql.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmp3im4dfql.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp3im4dfql.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3im4dfql.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3im4dfql.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmp3im4dfql.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.to_string())\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n + m - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpjfeconnn.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n + m - 1))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n.div(m).add(1).div(2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmnfgwj7d.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n.div(m).add(1).div(2)))\n                          ^~~\n/tmp/tmpmnfgwj7d.swift:22:47: error: value of type 'Int' has no member 'div'\n    return Result.success(fmt.Sprintf(\"%b\", n.div(m).add(1).div(2)))\n                                            ~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg = sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpjjpabdtx.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpjjpabdtx.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpjjpabdtx.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpjjpabdtx.swift:29:31: error: value of type 'Int' has no member 'to_string'\n    return Result.success(avg.to_string())\n                          ~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpdsmpsimj.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpdsmpsimj.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpdsmpsimj.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpdsmpsimj.swift:29:31: error: value of type 'Int' has no member 'to_string'\n    return Result.success(avg.to_string())\n                          ~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + (m - n).to_i() / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "/tmp/tmp7s3md3cd.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + (m - n).to_i() / 2))\n                          ^~~\n/tmp/tmp7s3md3cd.swift:22:47: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + (m - n).to_i() / 2))\n                                            ~ ^~~~\n/tmp/tmp7s3md3cd.swift:22:64: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + (m - n).to_i() / 2))\n                                                       ~~~~~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(sum.to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp6tw_n0r_.swift:22:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum Int\n            ^\n/tmp/tmp6tw_n0r_.swift:22:13: note: join the identifiers together\n    var sum Int\n        ~~~~^~~\n        sumInt\n/tmp/tmp6tw_n0r_.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp6tw_n0r_.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp6tw_n0r_.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp6tw_n0r_.swift:22:9: error: type annotation missing in pattern\n    var sum Int\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n + m / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmqfe5ak2.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n + m / 2))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpdsmpsimj.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpdsmpsimj.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpdsmpsimj.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpdsmpsimj.swift:29:31: error: value of type 'Int' has no member 'to_string'\n    return Result.success(avg.to_string())\n                          ~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(String.fromCharCode(n.to_i() + m.to_i() / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpa3u8geqm.swift:18:34: error: type 'String' has no member 'fromCharCode'\n    return Result.success(String.fromCharCode(n.to_i() + m.to_i() / 2))\n                          ~~~~~~ ^~~~~~~~~~~~\n/tmp/tmpa3u8geqm.swift:18:49: error: value of type 'Int' has no member 'to_i'\n    return Result.success(String.fromCharCode(n.to_i() + m.to_i() / 2))\n                                              ~ ^~~~\n/tmp/tmpa3u8geqm.swift:18:60: error: value of type 'Int' has no member 'to_i'\n    return Result.success(String.fromCharCode(n.to_i() + m.to_i() / 2))\n                                                         ~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp6zhavvnm.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp6zhavvnm.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp6zhavvnm.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp6zhavvnm.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", (n + m) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpadkyaqb3.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", (n + m) / 2))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpbge6brqm.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpbge6brqm.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpbge6brqm.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpbge6brqm.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.toString())\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpuwo7eyuh.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpw9agsggv.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpw9agsggv.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpw9agsggv.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpw9agsggv.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) + 1).to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp0yw2l08m.swift:22:31: error: type 'Int' has no member 'from_bits'\n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) + 1).to_string())\n                          ~~~ ^~~~~~~~~\n/tmp/tmp0yw2l08m.swift:22:45: error: type 'Int' has no member 'to_bits'\n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) + 1).to_string())\n                                        ~~~ ^~~~~~~\n/tmp/tmp0yw2l08m.swift:22:62: error: type 'Int' has no member 'to_bits'\n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) + 1).to_string())\n                                                         ~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_s(2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp0cef4mx2.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp0cef4mx2.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp0cef4mx2.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp0cef4mx2.swift:29:31: error: value of type 'Int' has no member 'to_s'\n    return Result.success(avg.to_s(2))\n                          ~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + (m.to_i() - n.to_i()) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp9m8jyuup.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + (m.to_i() - n.to_i()) / 2))\n                          ^~~\n/tmp/tmp9m8jyuup.swift:22:47: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + (m.to_i() - n.to_i()) / 2))\n                                            ~ ^~~~\n/tmp/tmp9m8jyuup.swift:22:59: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + (m.to_i() - n.to_i()) / 2))\n                                                        ~ ^~~~\n/tmp/tmp9m8jyuup.swift:22:70: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + (m.to_i() - n.to_i()) / 2))\n                                                                   ~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"0b%b\", n.to_int() + m.to_int() / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpo65jfemr.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"0b%b\", n.to_int() + m.to_int() / 2))\n                          ^~~\n/tmp/tmpo65jfemr.swift:22:49: error: value of type 'Int' has no member 'to_int'\n    return Result.success(fmt.Sprintf(\"0b%b\", n.to_int() + m.to_int() / 2))\n                                              ~ ^~~~~~\n/tmp/tmpo65jfemr.swift:22:62: error: value of type 'Int' has no member 'to_int'\n    return Result.success(fmt.Sprintf(\"0b%b\", n.to_int() + m.to_int() / 2))\n                                                           ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n + m - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpjfeconnn.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n + m - 1))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(String(Int(n).to_i() + Int(m).to_i()).to_s())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpu9kbwsog.swift:22:41: error: value of type 'Int' has no member 'to_i'\n    return Result.success(String(Int(n).to_i() + Int(m).to_i()).to_s())\n                                 ~~~~~~ ^~~~\n/tmp/tmpu9kbwsog.swift:22:57: error: value of type 'Int' has no member 'to_i'\n    return Result.success(String(Int(n).to_i() + Int(m).to_i()).to_s())\n                                                 ~~~~~~ ^~~~\n/tmp/tmpu9kbwsog.swift:22:65: error: value of type 'String' has no member 'to_s'\n    return Result.success(String(Int(n).to_i() + Int(m).to_i()).to_s())\n                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpk77k68uw.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n                          ^~~\n/tmp/tmpk77k68uw.swift:22:47: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n                                            ~ ^~~~\n/tmp/tmpk77k68uw.swift:22:58: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n                                                       ~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(int_to_bin(n + m) + \"0b\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp41bfyrza.swift:22:27: error: cannot find 'int_to_bin' in scope\n    return Result.success(int_to_bin(n + m) + \"0b\")\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(sum / (m - n + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "/tmp/tmpxnc5dhku.swift:22:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum Int = 0\n            ^\n/tmp/tmpxnc5dhku.swift:22:13: note: join the identifiers together\n    var sum Int = 0\n        ~~~~^~~\n        sumInt\n/tmp/tmpxnc5dhku.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpxnc5dhku.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpxnc5dhku.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpxnc5dhku.swift:27:31: error: cannot convert value of type 'Int' to expected argument type 'String'\n    return Result.success(sum / (m - n + 1))\n                              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(int_to_bin(n + (m - n) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpjbng9ofy.swift:22:27: error: cannot find 'int_to_bin' in scope\n    return Result.success(int_to_bin(n + (m - n) / 2))\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(String.fromCharCode(n + m) + String.fromCharCode(n - m))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp5cxpizoi.swift:18:34: error: type 'String' has no member 'fromCharCode'\n    return Result.success(String.fromCharCode(n + m) + String.fromCharCode(n - m))\n                          ~~~~~~ ^~~~~~~~~~~~\n/tmp/tmp5cxpizoi.swift:18:63: error: type 'String' has no member 'fromCharCode'\n    return Result.success(String.fromCharCode(n + m) + String.fromCharCode(n - m))\n                                                       ~~~~~~ ^~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / 2\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpto93cipt.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpto93cipt.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n.to_int() - m.to_int()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp8hbm8rpg.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n.to_int() - m.to_int()))\n                          ^~~\n/tmp/tmp8hbm8rpg.swift:22:47: error: value of type 'Int' has no member 'to_int'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_int() - m.to_int()))\n                                            ~ ^~~~~~\n/tmp/tmp8hbm8rpg.swift:22:60: error: value of type 'Int' has no member 'to_int'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_int() - m.to_int()))\n                                                         ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpbge6brqm.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpbge6brqm.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpbge6brqm.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpbge6brqm.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.toString())\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmwwiw91l.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpmwwiw91l.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpmwwiw91l.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpmwwiw91l.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n/tmp/tmpmwwiw91l.swift:27:45: error: cannot find 'sum' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / 2\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpto93cipt.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpto93cipt.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpdsmpsimj.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpdsmpsimj.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpdsmpsimj.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpdsmpsimj.swift:29:31: error: value of type 'Int' has no member 'to_string'\n    return Result.success(avg.to_string())\n                          ~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    return Result.success(fmt.Sprintf(\"%b\", n.rounded_avg(m)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpw5pb8e7g.swift:21:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n.rounded_avg(m)))\n                          ^~~\n/tmp/tmpw5pb8e7g.swift:21:47: error: value of type 'Int' has no member 'rounded_avg'\n    return Result.success(fmt.Sprintf(\"%b\", n.rounded_avg(m)))\n                                            ~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int(math.Floor(float64(n + m) / 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpue1bx11j.swift:22:31: error: cannot find 'math' in scope\n    return Result.success(Int(math.Floor(float64(n + m) / 2)))\n                              ^~~~\n/tmp/tmpue1bx11j.swift:22:42: error: cannot find 'float64' in scope\n    return Result.success(Int(math.Floor(float64(n + m) / 2)))\n                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + (m.to_i() - n.to_i()) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp9m8jyuup.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + (m.to_i() - n.to_i()) / 2))\n                          ^~~\n/tmp/tmp9m8jyuup.swift:22:47: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + (m.to_i() - n.to_i()) / 2))\n                                            ~ ^~~~\n/tmp/tmp9m8jyuup.swift:22:59: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + (m.to_i() - n.to_i()) / 2))\n                                                        ~ ^~~~\n/tmp/tmp9m8jyuup.swift:22:70: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + (m.to_i() - n.to_i()) / 2))\n                                                                   ~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpuwo7eyuh.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmwwiw91l.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpmwwiw91l.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpmwwiw91l.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpmwwiw91l.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n/tmp/tmpmwwiw91l.swift:27:45: error: cannot find 'sum' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(sum / (m - n + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp50xp1v0x.swift:22:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum Int\n            ^\n/tmp/tmp50xp1v0x.swift:22:13: note: join the identifiers together\n    var sum Int\n        ~~~~^~~\n        sumInt\n/tmp/tmp50xp1v0x.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp50xp1v0x.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp50xp1v0x.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp50xp1v0x.swift:22:9: error: type annotation missing in pattern\n    var sum Int\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg = sum / (m - n + 1)\n    \n    return Result.success(avg.to_s(2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp_t4v1wx6.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp_t4v1wx6.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp_t4v1wx6.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp_t4v1wx6.swift:29:31: error: value of type 'Int' has no member 'to_s'\n    return Result.success(avg.to_s(2))\n                          ~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / 2\n    \n    return Result.success(avg.to_s(2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp_sypq0ah.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp_sypq0ah.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp_sypq0ah.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp_sypq0ah.swift:29:31: error: value of type 'Int' has no member 'to_s'\n    return Result.success(avg.to_s(2))\n                          ~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpvzvb0hgy.swift:22:31: error: type 'Int' has no member 'to_string'\n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n                          ~~~ ^~~~~~~~~\n/tmp/tmpvzvb0hgy.swift:22:45: error: type 'Int' has no member 'div'\n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n                                        ~~~ ^~~\n/tmp/tmpvzvb0hgy.swift:22:53: error: type 'Int' has no member 'add'\n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n                                                ~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(avg(n, m))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmprcibemsn.swift:18:27: error: cannot find 'avg' in scope\n    return Result.success(avg(n, m))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(to_bin(n + m) / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "/tmp/tmpd9icz9yq.swift:22:27: error: cannot find 'to_bin' in scope\n    return Result.success(to_bin(n + m) / 2)\n                          ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int(math.Floor(float64(n + m) / 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpue1bx11j.swift:22:31: error: cannot find 'math' in scope\n    return Result.success(Int(math.Floor(float64(n + m) / 2)))\n                              ^~~~\n/tmp/tmpue1bx11j.swift:22:42: error: cannot find 'float64' in scope\n    return Result.success(Int(math.Floor(float64(n + m) / 2)))\n                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmwwiw91l.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpmwwiw91l.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpmwwiw91l.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpmwwiw91l.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n/tmp/tmpmwwiw91l.swift:27:45: error: cannot find 'sum' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_s(2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp0cef4mx2.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp0cef4mx2.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp0cef4mx2.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp0cef4mx2.swift:29:31: error: value of type 'Int' has no member 'to_s'\n    return Result.success(avg.to_s(2))\n                          ~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmwwiw91l.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpmwwiw91l.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpmwwiw91l.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpmwwiw91l.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n/tmp/tmpmwwiw91l.swift:27:45: error: cannot find 'sum' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(to_bin(n + m) / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "/tmp/tmpd9icz9yq.swift:22:27: error: cannot find 'to_bin' in scope\n    return Result.success(to_bin(n + m) / 2)\n                          ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg Int = sum / Int(m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp3ixwx7nh.swift:22:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum Int = 0\n            ^\n/tmp/tmp3ixwx7nh.swift:22:13: note: join the identifiers together\n    var sum Int = 0\n        ~~~~^~~\n        sumInt\n/tmp/tmp3ixwx7nh.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp3ixwx7nh.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3ixwx7nh.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3ixwx7nh.swift:27:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var avg Int = sum / Int(m - n + 1)\n            ^\n/tmp/tmp3ixwx7nh.swift:27:13: note: join the identifiers together\n    var avg Int = sum / Int(m - n + 1)\n        ~~~~^~~\n        avgInt\n/tmp/tmp3ixwx7nh.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"0b%b\", (n + m) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpruooic9d.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"0b%b\", (n + m) / 2))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(to_bin(avg(n, m)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpqjij7vfl.swift:22:27: error: cannot find 'to_bin' in scope\n    return Result.success(to_bin(avg(n, m)))\n                          ^~~~~~\n/tmp/tmpqjij7vfl.swift:22:34: error: cannot find 'avg' in scope\n    return Result.success(to_bin(avg(n, m)))\n                                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(Int.toBinary(n + m / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpx0kignba.swift:18:31: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(n + m / 2))\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpbge6brqm.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpbge6brqm.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpbge6brqm.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpbge6brqm.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.toString())\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", (n + m) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpadkyaqb3.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", (n + m) / 2))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int(math.Floor(float64(n + m) / 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpue1bx11j.swift:22:31: error: cannot find 'math' in scope\n    return Result.success(Int(math.Floor(float64(n + m) / 2)))\n                              ^~~~\n/tmp/tmpue1bx11j.swift:22:42: error: cannot find 'float64' in scope\n    return Result.success(Int(math.Floor(float64(n + m) / 2)))\n                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(avg(n, m))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmprcibemsn.swift:18:27: error: cannot find 'avg' in scope\n    return Result.success(avg(n, m))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(int_to_binary(n + m) + \"0b\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "/tmp/tmpmuq4goun.swift:22:27: error: cannot find 'int_to_binary' in scope\n    return Result.success(int_to_binary(n + m) + \"0b\")\n                          ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpk77k68uw.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n                          ^~~\n/tmp/tmpk77k68uw.swift:22:47: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n                                            ~ ^~~~\n/tmp/tmpk77k68uw.swift:22:58: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n                                                       ~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int(round(avg(n, m))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpbpoqugye.swift:22:31: error: cannot find 'round' in scope\n    return Result.success(Int(round(avg(n, m))))\n                              ^~~~~\n/tmp/tmpbpoqugye.swift:22:37: error: cannot find 'avg' in scope\n    return Result.success(Int(round(avg(n, m))))\n                                    ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpvzvb0hgy.swift:22:31: error: type 'Int' has no member 'to_string'\n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n                          ~~~ ^~~~~~~~~\n/tmp/tmpvzvb0hgy.swift:22:45: error: type 'Int' has no member 'div'\n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n                                        ~~~ ^~~\n/tmp/tmpvzvb0hgy.swift:22:53: error: type 'Int' has no member 'add'\n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n                                                ~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "/tmp/tmp8zs1xexb.swift:22:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum Int = 0\n            ^\n/tmp/tmp8zs1xexb.swift:22:13: note: join the identifiers together\n    var sum Int = 0\n        ~~~~^~~\n        sumInt\n/tmp/tmp8zs1xexb.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp8zs1xexb.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp8zs1xexb.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp8zs1xexb.swift:27:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var avg Int = sum / (m - n + 1)\n            ^\n/tmp/tmp8zs1xexb.swift:27:13: note: join the identifiers together\n    var avg Int = sum / (m - n + 1)\n        ~~~~^~~\n        avgInt\n/tmp/tmp8zs1xexb.swift:29:31: error: value of type 'Int' has no member 'to_string'\n    return Result.success(avg.to_string())\n                          ~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpuwo7eyuh.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpuwo7eyuh.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp3im4dfql.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmp3im4dfql.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmp3im4dfql.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp3im4dfql.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3im4dfql.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3im4dfql.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmp3im4dfql.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.to_string())\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(intToBinary(n + m) + intToBinary(n - m))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "/tmp/tmpxucgnf2s.swift:22:27: error: cannot find 'intToBinary' in scope\n    return Result.success(intToBinary(n + m) + intToBinary(n - m))\n                          ^~~~~~~~~~~\n/tmp/tmpxucgnf2s.swift:22:48: error: cannot find 'intToBinary' in scope\n    return Result.success(intToBinary(n + m) + intToBinary(n - m))\n                                               ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(avg(n, m))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmprcibemsn.swift:18:27: error: cannot find 'avg' in scope\n    return Result.success(avg(n, m))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpw9agsggv.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpw9agsggv.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpw9agsggv.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpw9agsggv.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp6zhavvnm.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp6zhavvnm.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp6zhavvnm.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp6zhavvnm.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpbge6brqm.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpbge6brqm.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpbge6brqm.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpbge6brqm.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.toString())\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpvzvb0hgy.swift:22:31: error: type 'Int' has no member 'to_string'\n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n                          ~~~ ^~~~~~~~~\n/tmp/tmpvzvb0hgy.swift:22:45: error: type 'Int' has no member 'div'\n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n                                        ~~~ ^~~\n/tmp/tmpvzvb0hgy.swift:22:53: error: type 'Int' has no member 'add'\n    return Result.success(Int.to_string(Int.div(Int.add(n, m), 2)))\n                                                ~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(Int.toBinary(Int.avg(n, m)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "/tmp/tmpzousyf6p.swift:18:31: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(Int.avg(n, m)))\n                          ~~~ ^~~~~~~~\n/tmp/tmpzousyf6p.swift:18:44: error: type 'Int' has no member 'avg'\n    return Result.success(Int.toBinary(Int.avg(n, m)))\n                                       ~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpbge6brqm.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpbge6brqm.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpbge6brqm.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpbge6brqm.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.toString())\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.from_big_int(Int.from_int(n).add(Int.from_int(m)).div(Int.from_int(2))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "/tmp/tmpoty9sxac.swift:22:31: error: type 'Int' has no member 'from_big_int'\n    return Result.success(Int.from_big_int(Int.from_int(n).add(Int.from_int(m)).div(Int.from_int(2))))\n                          ~~~ ^~~~~~~~~~~~\n/tmp/tmpoty9sxac.swift:22:48: error: type 'Int' has no member 'from_int'\n    return Result.success(Int.from_big_int(Int.from_int(n).add(Int.from_int(m)).div(Int.from_int(2))))\n                                           ~~~ ^~~~~~~~\n/tmp/tmpoty9sxac.swift:22:68: error: type 'Int' has no member 'from_int'\n    return Result.success(Int.from_big_int(Int.from_int(n).add(Int.from_int(m)).div(Int.from_int(2))))\n                                                               ~~~ ^~~~~~~~\n/tmp/tmpoty9sxac.swift:22:89: error: type 'Int' has no member 'from_int'\n    return Result.success(Int.from_big_int(Int.from_int(n).add(Int.from_int(m)).div(Int.from_int(2))))\n                                                                                    ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpuwo7eyuh.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(sum / (m - n + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp50xp1v0x.swift:22:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum Int\n            ^\n/tmp/tmp50xp1v0x.swift:22:13: note: join the identifiers together\n    var sum Int\n        ~~~~^~~\n        sumInt\n/tmp/tmp50xp1v0x.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp50xp1v0x.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp50xp1v0x.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp50xp1v0x.swift:22:9: error: type annotation missing in pattern\n    var sum Int\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / 2\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpto93cipt.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpto93cipt.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(sum / (m - n + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp50xp1v0x.swift:22:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum Int\n            ^\n/tmp/tmp50xp1v0x.swift:22:13: note: join the identifiers together\n    var sum Int\n        ~~~~^~~\n        sumInt\n/tmp/tmp50xp1v0x.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp50xp1v0x.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp50xp1v0x.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp50xp1v0x.swift:22:9: error: type annotation missing in pattern\n    var sum Int\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_s(2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp0cef4mx2.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp0cef4mx2.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp0cef4mx2.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp0cef4mx2.swift:29:31: error: value of type 'Int' has no member 'to_s'\n    return Result.success(avg.to_s(2))\n                          ~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(Int.toBinary(n + m) + Int.toBinary(m - n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp0t_lidio.swift:18:31: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(n + m) + Int.toBinary(m - n))\n                          ~~~ ^~~~~~~~\n/tmp/tmp0t_lidio.swift:18:53: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(n + m) + Int.toBinary(m - n))\n                                                ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpw9agsggv.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpw9agsggv.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpw9agsggv.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpw9agsggv.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", (n + m) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpadkyaqb3.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", (n + m) / 2))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(sum.to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp6tw_n0r_.swift:22:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var sum Int\n            ^\n/tmp/tmp6tw_n0r_.swift:22:13: note: join the identifiers together\n    var sum Int\n        ~~~~^~~\n        sumInt\n/tmp/tmp6tw_n0r_.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp6tw_n0r_.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp6tw_n0r_.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp6tw_n0r_.swift:22:9: error: type annotation missing in pattern\n    var sum Int\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpbge6brqm.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpbge6brqm.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpbge6brqm.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpbge6brqm.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.toString())\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmwwiw91l.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpmwwiw91l.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpmwwiw91l.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpmwwiw91l.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n/tmp/tmpmwwiw91l.swift:27:45: error: cannot find 'sum' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(Int.toBinary(n + m) + Int.toBinary(m))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "/tmp/tmpnfqjall7.swift:18:31: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(n + m) + Int.toBinary(m))\n                          ~~~ ^~~~~~~~\n/tmp/tmpnfqjall7.swift:18:53: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(n + m) + Int.toBinary(m))\n                                                ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"0b%b\", n.to_i() + m.to_i() / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp7onsvtvi.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"0b%b\", n.to_i() + m.to_i() / 2))\n                          ^~~\n/tmp/tmp7onsvtvi.swift:22:49: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"0b%b\", n.to_i() + m.to_i() / 2))\n                                              ~ ^~~~\n/tmp/tmp7onsvtvi.swift:22:60: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"0b%b\", n.to_i() + m.to_i() / 2))\n                                                         ~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"0b%b\", (n + m) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpruooic9d.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"0b%b\", (n + m) / 2))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmwwiw91l.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpmwwiw91l.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpmwwiw91l.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpmwwiw91l.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n/tmp/tmpmwwiw91l.swift:27:45: error: cannot find 'sum' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "/tmp/tmp6cdtejao.swift:18:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n                          ^~~\n/tmp/tmp6cdtejao.swift:18:47: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n                                            ~ ^~~~\n/tmp/tmp6cdtejao.swift:18:58: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n                                                       ~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(Int.toBinary(Int.avg(n, m)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "/tmp/tmpzousyf6p.swift:18:31: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(Int.avg(n, m)))\n                          ~~~ ^~~~~~~~\n/tmp/tmpzousyf6p.swift:18:44: error: type 'Int' has no member 'avg'\n    return Result.success(Int.toBinary(Int.avg(n, m)))\n                                       ~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpzec2oxvk.swift:22:31: error: type 'Int' has no member 'from_bits'\n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) / 2))\n                          ~~~ ^~~~~~~~~\n/tmp/tmpzec2oxvk.swift:22:45: error: type 'Int' has no member 'to_bits'\n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) / 2))\n                                        ~~~ ^~~~~~~\n/tmp/tmpzec2oxvk.swift:22:62: error: type 'Int' has no member 'to_bits'\n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) / 2))\n                                                         ~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp3im4dfql.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmp3im4dfql.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmp3im4dfql.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp3im4dfql.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3im4dfql.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp3im4dfql.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmp3im4dfql.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.to_string())\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.toBinary(Int.avg(n, m)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpqz6zirrj.swift:22:31: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(Int.avg(n, m)))\n                          ~~~ ^~~~~~~~\n/tmp/tmpqz6zirrj.swift:22:44: error: type 'Int' has no member 'avg'\n    return Result.success(Int.toBinary(Int.avg(n, m)))\n                                       ~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpbge6brqm.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpbge6brqm.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpbge6brqm.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpbge6brqm.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpbge6brqm.swift:29:27: error: cannot find 'avg' in scope\n    return Result.success(avg.toString())\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(to_bin(n + (m - n) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpl7c4wusw.swift:22:27: error: cannot find 'to_bin' in scope\n    return Result.success(to_bin(n + (m - n) / 2))\n                          ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpzec2oxvk.swift:22:31: error: type 'Int' has no member 'from_bits'\n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) / 2))\n                          ~~~ ^~~~~~~~~\n/tmp/tmpzec2oxvk.swift:22:45: error: type 'Int' has no member 'to_bits'\n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) / 2))\n                                        ~~~ ^~~~~~~\n/tmp/tmpzec2oxvk.swift:22:62: error: type 'Int' has no member 'to_bits'\n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m) / 2))\n                                                         ~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.from_bits(Int.bits_of_int(n) + Int.bits_of_int(m) + 1).to_string())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "/tmp/tmpsu0yi4_a.swift:22:31: error: type 'Int' has no member 'from_bits'\n    return Result.success(Int.from_bits(Int.bits_of_int(n) + Int.bits_of_int(m) + 1).to_string())\n                          ~~~ ^~~~~~~~~\n/tmp/tmpsu0yi4_a.swift:22:45: error: type 'Int' has no member 'bits_of_int'\n    return Result.success(Int.from_bits(Int.bits_of_int(n) + Int.bits_of_int(m) + 1).to_string())\n                                        ~~~ ^~~~~~~~~~~\n/tmp/tmpsu0yi4_a.swift:22:66: error: type 'Int' has no member 'bits_of_int'\n    return Result.success(Int.from_bits(Int.bits_of_int(n) + Int.bits_of_int(m) + 1).to_string())\n                                                             ~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_s(2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp0cef4mx2.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp0cef4mx2.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp0cef4mx2.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp0cef4mx2.swift:29:31: error: value of type 'Int' has no member 'to_s'\n    return Result.success(avg.to_s(2))\n                          ~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", (n + m) / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpadkyaqb3.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", (n + m) / 2))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(to_bin(avg(n, m)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpqjij7vfl.swift:22:27: error: cannot find 'to_bin' in scope\n    return Result.success(to_bin(avg(n, m)))\n                          ^~~~~~\n/tmp/tmpqjij7vfl.swift:22:34: error: cannot find 'avg' in scope\n    return Result.success(to_bin(avg(n, m)))\n                                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(avg(n, m))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmprcibemsn.swift:18:27: error: cannot find 'avg' in scope\n    return Result.success(avg(n, m))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpk77k68uw.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n                          ^~~\n/tmp/tmpk77k68uw.swift:22:47: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n                                            ~ ^~~~\n/tmp/tmpk77k68uw.swift:22:58: error: value of type 'Int' has no member 'to_i'\n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))\n                                                       ~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpuwo7eyuh.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpuwo7eyuh.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmwwiw91l.swift:22:8: error: consecutive statements on a line must be separated by ';'\n    sum := 0\n       ^\n       ;\n/tmp/tmpmwwiw91l.swift:22:9: error: expected expression\n    sum := 0\n        ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpmwwiw91l.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpmwwiw91l.swift:22:5: error: cannot find 'sum' in scope\n    sum := 0\n    ^~~\n/tmp/tmpmwwiw91l.swift:27:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                          ^~~\n/tmp/tmpmwwiw91l.swift:27:45: error: cannot find 'sum' in scope\n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(avg(n, m))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmprcibemsn.swift:18:27: error: cannot find 'avg' in scope\n    return Result.success(avg(n, m))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return Result.success(Int.toBinary(Int.div(Int.add(n, m), 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "/tmp/tmprvmmcv06.swift:18:31: error: type 'Int' has no member 'toBinary'\n    return Result.success(Int.toBinary(Int.div(Int.add(n, m), 2)))\n                          ~~~ ^~~~~~~~\n/tmp/tmprvmmcv06.swift:18:44: error: type 'Int' has no member 'div'\n    return Result.success(Int.toBinary(Int.div(Int.add(n, m), 2)))\n                                       ~~~ ^~~\n/tmp/tmprvmmcv06.swift:18:52: error: type 'Int' has no member 'add'\n    return Result.success(Int.toBinary(Int.div(Int.add(n, m), 2)))\n                                               ~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n + m / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpmqfe5ak2.swift:22:27: error: cannot find 'fmt' in scope\n    return Result.success(fmt.Sprintf(\"%b\", n + m / 2))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / 2\n    \n    return Result.success(avg.to_s(2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmp_sypq0ah.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp_sypq0ah.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp_sypq0ah.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmp_sypq0ah.swift:29:31: error: value of type 'Int' has no member 'to_s'\n    return Result.success(avg.to_s(2))\n                          ~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / 2\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpto93cipt.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpto93cipt.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / 2\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpto93cipt.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpto93cipt.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpobpx6kwo.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpobpx6kwo.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpobpx6kwo.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum / 2\n    \n    return Result.success(avg.toString())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "/tmp/tmpto93cipt.swift:23:12: error: expected type\n    for i := n; i <= m; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpto93cipt.swift:23:12: error: expected 'in' after for-each pattern\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := n; i <= m; i += 1 {\n           ^\n/tmp/tmpto93cipt.swift:29:31: error: value of type 'Int' has no member 'toString'\n    return Result.success(avg.toString())\n                          ~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}