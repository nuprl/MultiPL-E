{
  "name": "HumanEval_15_string_sequence",
  "language": "swift",
  "prompt": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
  "completions": [
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn strings.Repeat(\" \", n) + strings.Repeat(\"0\", n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    } else {\n        return string_sequence(n - 1) + \" \" + str(n)\n    }",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return to_string(n) + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"string_sequence: n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "\tif n <= 0 {\n\t\treturn \"\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)",
    "\tif n < 0 {\n\t\tpanic(\"n must be non-negative\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + n.toString()",
    "    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "\tif n < 0 {\n\t\tpanic(\"n must be non-negative\")\n\t}\n\treturn strings.Repeat(\" \", int(n))",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n <= 0 {\n        return \"\"\n    }\n    return to_string(n) + \" \" + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"string_sequence: n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    } else {\n        return string_sequence(n - 1) + \" \" + string(n)\n    }",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    return String.fromCharCode(...[0, ...range(n)])",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\treturn strings.Repeat(\" \", int(n))",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + Int(n).to_string()",
    "\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\treturn strings.Repeat(\" \", int(n))",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "\treturn \"\"",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return to_string(n) + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return \" \".join(str(i) for i in range(n))",
    "\tif n <= 0 {\n\t\treturn \"\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))",
    "    if n == 0 {\n        return \"0\"\n    } else {\n        return string_sequence(n - 1) + \" \" + string(n)\n    }",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + string(n)",
    "\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\treturn strings.Repeat(\" \", int(n))",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "\treturn \"\"",
    "\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)",
    "\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))",
    "    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn strings.Join([]string{fmt.Sprint(n), string_sequence(n - 1)}, \" \")",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return to_string(n) + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"string_sequence: n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "\tif n < 0 {\n\t\tpanic(\"string_sequence: n < 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + string(n)",
    "\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\treturn strings.Join([]string{strconv.Itoa(n), \" \", string_sequence(n - 1)}, \"\")",
    "\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn fmt.Sprintf(\"%d\", 0) + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "\tif n < 0 {\n\t\tpanic(\"n must be non-negative\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + strconv.Itoa(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return to_string(n) + string_sequence(n - 1)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)",
    "\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be non-negative\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn strings.Repeat(\" \", n) + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + Int(n).to_string()",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n <= 0 {\n        return \"\"\n    }\n    return to_string(n) + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n <= 0 {\n        return \"\"\n    }\n    return to_string(n) + string_sequence(n - 1)",
    "\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    return strings.Join([]string{fmt.Sprint(n)}, \" \")",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + n.to_string()",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\treturn strings.Repeat(\" \", n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    return strings.Join(strings.Repeat(\" \", int(n)), \"\")",
    "\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "\tif n < 0 {\n\t\tpanic(\"string_sequence: n < 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + n.toString()",
    "    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"string_sequence: n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"string_sequence: n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be non-negative\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    return strings.Join(strings.Repeat(\" \", int(n)), \"\")",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn strings.Join(strings.Fields(fmt.Sprint(n)), \" \")",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "\treturn \"\"",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)",
    "    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)",
    "    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)"
  ],
  "stop_tokens": [
    "\n}"
  ]
}