{
  "name": "HumanEval_92_any_int",
  "language": "swift",
  "prompt": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpdqtu14tm.swift:15:26: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                         ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:39: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                      ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:52: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                                   ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z && is_int(x) && is_int(y) && is_int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmputbppvyd.swift:15:26: error: cannot find 'is_int' in scope\n    return x + y == z && is_int(x) && is_int(y) && is_int(z)\n                         ^~~~~~\n/tmp/tmputbppvyd.swift:15:39: error: cannot find 'is_int' in scope\n    return x + y == z && is_int(x) && is_int(y) && is_int(z)\n                                      ^~~~~~\n/tmp/tmputbppvyd.swift:15:52: error: cannot find 'is_int' in scope\n    return x + y == z && is_int(x) && is_int(y) && is_int(z)\n                                                   ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpdqtu14tm.swift:15:26: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                         ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:39: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                      ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:52: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                                   ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n        if x.value + y.value == z.value {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmp9ihnnb_z.swift:15:10: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n       ~ ^~~~~~~~~~\n/tmp/tmp9ihnnb_z.swift:15:28: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                         ~ ^~~~~~~~~~\n/tmp/tmp9ihnnb_z.swift:15:46: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                                           ~ ^~~~~~~~~~\n/tmp/tmp9ihnnb_z.swift:16:14: error: value of type 'Double' has no member 'value'\n        if x.value + y.value == z.value {\n           ~ ^~~~~\n/tmp/tmp9ihnnb_z.swift:16:24: error: value of type 'Double' has no member 'value'\n        if x.value + y.value == z.value {\n                     ~ ^~~~~\n/tmp/tmp9ihnnb_z.swift:16:35: error: value of type 'Double' has no member 'value'\n        if x.value + y.value == z.value {\n                                ~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z && x.is_integer() && y.is_integer() && z.is_integer()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmp4iftmwov.swift:15:28: error: value of type 'Double' has no member 'is_integer'\n    return x == y + z && x.is_integer() && y.is_integer() && z.is_integer()\n                         ~ ^~~~~~~~~~\n/tmp/tmp4iftmwov.swift:15:46: error: value of type 'Double' has no member 'is_integer'\n    return x == y + z && x.is_integer() && y.is_integer() && z.is_integer()\n                                           ~ ^~~~~~~~~~\n/tmp/tmp4iftmwov.swift:15:64: error: value of type 'Double' has no member 'is_integer'\n    return x == y + z && x.is_integer() && y.is_integer() && z.is_integer()\n                                                             ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpdqtu14tm.swift:15:26: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                         ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:39: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                      ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:52: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                                   ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpdqtu14tm.swift:15:26: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                         ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:39: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                      ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:52: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                                   ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.isInteger() && y.isInteger() && z.isInteger() {\n        if x.value + y.value + z.value == 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpj5otx4fz.swift:15:10: error: value of type 'Double' has no member 'isInteger'\n    if x.isInteger() && y.isInteger() && z.isInteger() {\n       ~ ^~~~~~~~~\n/tmp/tmpj5otx4fz.swift:15:27: error: value of type 'Double' has no member 'isInteger'\n    if x.isInteger() && y.isInteger() && z.isInteger() {\n                        ~ ^~~~~~~~~\n/tmp/tmpj5otx4fz.swift:15:44: error: value of type 'Double' has no member 'isInteger'\n    if x.isInteger() && y.isInteger() && z.isInteger() {\n                                         ~ ^~~~~~~~~\n/tmp/tmpj5otx4fz.swift:16:14: error: value of type 'Double' has no member 'value'\n        if x.value + y.value + z.value == 0 {\n           ~ ^~~~~\n/tmp/tmpj5otx4fz.swift:16:24: error: value of type 'Double' has no member 'value'\n        if x.value + y.value + z.value == 0 {\n                     ~ ^~~~~\n/tmp/tmpj5otx4fz.swift:16:34: error: value of type 'Double' has no member 'value'\n        if x.value + y.value + z.value == 0 {\n                               ~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z && x.is_integer() && y.is_integer() && z.is_integer()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpfbez12xd.swift:15:28: error: value of type 'Double' has no member 'is_integer'\n    return x + y == z && x.is_integer() && y.is_integer() && z.is_integer()\n                         ~ ^~~~~~~~~~\n/tmp/tmpfbez12xd.swift:15:46: error: value of type 'Double' has no member 'is_integer'\n    return x + y == z && x.is_integer() && y.is_integer() && z.is_integer()\n                                           ~ ^~~~~~~~~~\n/tmp/tmpfbez12xd.swift:15:64: error: value of type 'Double' has no member 'is_integer'\n    return x + y == z && x.is_integer() && y.is_integer() && z.is_integer()\n                                                             ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n        if x + y == z || y + z == x || z + x == y {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpov7edjvs.swift:15:10: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n       ~ ^~~~~~~~~~\n/tmp/tmpov7edjvs.swift:15:28: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                         ~ ^~~~~~~~~~\n/tmp/tmpov7edjvs.swift:15:46: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                                           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z && x.isInteger() && y.isInteger() && z.isInteger()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpfym5qdc5.swift:15:28: error: value of type 'Double' has no member 'isInteger'\n    return x + y == z && x.isInteger() && y.isInteger() && z.isInteger()\n                         ~ ^~~~~~~~~\n/tmp/tmpfym5qdc5.swift:15:45: error: value of type 'Double' has no member 'isInteger'\n    return x + y == z && x.isInteger() && y.isInteger() && z.isInteger()\n                                          ~ ^~~~~~~~~\n/tmp/tmpfym5qdc5.swift:15:62: error: value of type 'Double' has no member 'isInteger'\n    return x + y == z && x.isInteger() && y.isInteger() && z.isInteger()\n                                                           ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z && is_int(x) && is_int(y) && is_int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmputbppvyd.swift:15:26: error: cannot find 'is_int' in scope\n    return x + y == z && is_int(x) && is_int(y) && is_int(z)\n                         ^~~~~~\n/tmp/tmputbppvyd.swift:15:39: error: cannot find 'is_int' in scope\n    return x + y == z && is_int(x) && is_int(y) && is_int(z)\n                                      ^~~~~~\n/tmp/tmputbppvyd.swift:15:52: error: cannot find 'is_int' in scope\n    return x + y == z && is_int(x) && is_int(y) && is_int(z)\n                                                   ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x.isInteger() && y.isInteger() && z.isInteger()) {\n        if (x.value + y.value + z.value == x.value + y.value + z.value) {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpd6k5yovq.swift:15:11: error: value of type 'Double' has no member 'isInteger'\n    if (x.isInteger() && y.isInteger() && z.isInteger()) {\n        ~ ^~~~~~~~~\n/tmp/tmpd6k5yovq.swift:15:28: error: value of type 'Double' has no member 'isInteger'\n    if (x.isInteger() && y.isInteger() && z.isInteger()) {\n                         ~ ^~~~~~~~~\n/tmp/tmpd6k5yovq.swift:15:45: error: value of type 'Double' has no member 'isInteger'\n    if (x.isInteger() && y.isInteger() && z.isInteger()) {\n                                          ~ ^~~~~~~~~\n/tmp/tmpd6k5yovq.swift:16:15: error: value of type 'Double' has no member 'value'\n        if (x.value + y.value + z.value == x.value + y.value + z.value) {\n            ~ ^~~~~\n/tmp/tmpd6k5yovq.swift:16:25: error: value of type 'Double' has no member 'value'\n        if (x.value + y.value + z.value == x.value + y.value + z.value) {\n                      ~ ^~~~~\n/tmp/tmpd6k5yovq.swift:16:35: error: value of type 'Double' has no member 'value'\n        if (x.value + y.value + z.value == x.value + y.value + z.value) {\n                                ~ ^~~~~\n/tmp/tmpd6k5yovq.swift:16:46: error: value of type 'Double' has no member 'value'\n        if (x.value + y.value + z.value == x.value + y.value + z.value) {\n                                           ~ ^~~~~\n/tmp/tmpd6k5yovq.swift:16:56: error: value of type 'Double' has no member 'value'\n        if (x.value + y.value + z.value == x.value + y.value + z.value) {\n                                                     ~ ^~~~~\n/tmp/tmpd6k5yovq.swift:16:66: error: value of type 'Double' has no member 'value'\n        if (x.value + y.value + z.value == x.value + y.value + z.value) {\n                                                               ~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n        if x.value + y.value == z.value {\n            return true\n        } else {\n            return false\n        }\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmp25qx265n.swift:15:10: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n       ~ ^~~~~~~~~~\n/tmp/tmp25qx265n.swift:15:28: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                         ~ ^~~~~~~~~~\n/tmp/tmp25qx265n.swift:15:46: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                                           ~ ^~~~~~~~~~\n/tmp/tmp25qx265n.swift:16:14: error: value of type 'Double' has no member 'value'\n        if x.value + y.value == z.value {\n           ~ ^~~~~\n/tmp/tmp25qx265n.swift:16:24: error: value of type 'Double' has no member 'value'\n        if x.value + y.value == z.value {\n                     ~ ^~~~~\n/tmp/tmp25qx265n.swift:16:35: error: value of type 'Double' has no member 'value'\n        if x.value + y.value == z.value {\n                                ~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpdqtu14tm.swift:15:26: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                         ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:39: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                      ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:52: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                                   ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpdqtu14tm.swift:15:26: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                         ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:39: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                      ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:52: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                                   ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n        if x.value + y.value == z.value {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmp9ihnnb_z.swift:15:10: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n       ~ ^~~~~~~~~~\n/tmp/tmp9ihnnb_z.swift:15:28: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                         ~ ^~~~~~~~~~\n/tmp/tmp9ihnnb_z.swift:15:46: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                                           ~ ^~~~~~~~~~\n/tmp/tmp9ihnnb_z.swift:16:14: error: value of type 'Double' has no member 'value'\n        if x.value + y.value == z.value {\n           ~ ^~~~~\n/tmp/tmp9ihnnb_z.swift:16:24: error: value of type 'Double' has no member 'value'\n        if x.value + y.value == z.value {\n                     ~ ^~~~~\n/tmp/tmp9ihnnb_z.swift:16:35: error: value of type 'Double' has no member 'value'\n        if x.value + y.value == z.value {\n                                ~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpdqtu14tm.swift:15:26: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                         ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:39: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                      ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:52: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                                   ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z && x.is_integer() && y.is_integer() && z.is_integer()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmp4iftmwov.swift:15:28: error: value of type 'Double' has no member 'is_integer'\n    return x == y + z && x.is_integer() && y.is_integer() && z.is_integer()\n                         ~ ^~~~~~~~~~\n/tmp/tmp4iftmwov.swift:15:46: error: value of type 'Double' has no member 'is_integer'\n    return x == y + z && x.is_integer() && y.is_integer() && z.is_integer()\n                                           ~ ^~~~~~~~~~\n/tmp/tmp4iftmwov.swift:15:64: error: value of type 'Double' has no member 'is_integer'\n    return x == y + z && x.is_integer() && y.is_integer() && z.is_integer()\n                                                             ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z && x.isInteger() && y.isInteger() && z.isInteger()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpfym5qdc5.swift:15:28: error: value of type 'Double' has no member 'isInteger'\n    return x + y == z && x.isInteger() && y.isInteger() && z.isInteger()\n                         ~ ^~~~~~~~~\n/tmp/tmpfym5qdc5.swift:15:45: error: value of type 'Double' has no member 'isInteger'\n    return x + y == z && x.isInteger() && y.isInteger() && z.isInteger()\n                                          ~ ^~~~~~~~~\n/tmp/tmpfym5qdc5.swift:15:62: error: value of type 'Double' has no member 'isInteger'\n    return x + y == z && x.isInteger() && y.isInteger() && z.isInteger()\n                                                           ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.isInteger() && y.isInteger() && z.isInteger() {\n        if x.value + y.value == z.value {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpzcjkgzmu.swift:15:10: error: value of type 'Double' has no member 'isInteger'\n    if x.isInteger() && y.isInteger() && z.isInteger() {\n       ~ ^~~~~~~~~\n/tmp/tmpzcjkgzmu.swift:15:27: error: value of type 'Double' has no member 'isInteger'\n    if x.isInteger() && y.isInteger() && z.isInteger() {\n                        ~ ^~~~~~~~~\n/tmp/tmpzcjkgzmu.swift:15:44: error: value of type 'Double' has no member 'isInteger'\n    if x.isInteger() && y.isInteger() && z.isInteger() {\n                                         ~ ^~~~~~~~~\n/tmp/tmpzcjkgzmu.swift:16:14: error: value of type 'Double' has no member 'value'\n        if x.value + y.value == z.value {\n           ~ ^~~~~\n/tmp/tmpzcjkgzmu.swift:16:24: error: value of type 'Double' has no member 'value'\n        if x.value + y.value == z.value {\n                     ~ ^~~~~\n/tmp/tmpzcjkgzmu.swift:16:35: error: value of type 'Double' has no member 'value'\n        if x.value + y.value == z.value {\n                                ~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n        return x + y == z\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpgjv4hh6c.swift:15:10: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n       ~ ^~~~~~~~~~\n/tmp/tmpgjv4hh6c.swift:15:28: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                         ~ ^~~~~~~~~~\n/tmp/tmpgjv4hh6c.swift:15:46: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                                           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z && x.is_integer() && y.is_integer() && z.is_integer()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmp4iftmwov.swift:15:28: error: value of type 'Double' has no member 'is_integer'\n    return x == y + z && x.is_integer() && y.is_integer() && z.is_integer()\n                         ~ ^~~~~~~~~~\n/tmp/tmp4iftmwov.swift:15:46: error: value of type 'Double' has no member 'is_integer'\n    return x == y + z && x.is_integer() && y.is_integer() && z.is_integer()\n                                           ~ ^~~~~~~~~~\n/tmp/tmp4iftmwov.swift:15:64: error: value of type 'Double' has no member 'is_integer'\n    return x == y + z && x.is_integer() && y.is_integer() && z.is_integer()\n                                                             ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n        if x + y == z || y + z == x || z + x == y {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpov7edjvs.swift:15:10: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n       ~ ^~~~~~~~~~\n/tmp/tmpov7edjvs.swift:15:28: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                         ~ ^~~~~~~~~~\n/tmp/tmpov7edjvs.swift:15:46: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                                           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpdqtu14tm.swift:15:26: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                         ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:39: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                      ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:52: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                                   ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpdqtu14tm.swift:15:26: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                         ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:39: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                      ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:52: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                                   ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x.is_integer() && y.is_integer() && z.is_integer()) {\n        if (x + y == z) {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmp8yed7eif.swift:15:11: error: value of type 'Double' has no member 'is_integer'\n    if (x.is_integer() && y.is_integer() && z.is_integer()) {\n        ~ ^~~~~~~~~~\n/tmp/tmp8yed7eif.swift:15:29: error: value of type 'Double' has no member 'is_integer'\n    if (x.is_integer() && y.is_integer() && z.is_integer()) {\n                          ~ ^~~~~~~~~~\n/tmp/tmp8yed7eif.swift:15:47: error: value of type 'Double' has no member 'is_integer'\n    if (x.is_integer() && y.is_integer() && z.is_integer()) {\n                                            ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n        if x + y == z {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmp0regez2k.swift:15:10: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n       ~ ^~~~~~~~~~\n/tmp/tmp0regez2k.swift:15:28: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                         ~ ^~~~~~~~~~\n/tmp/tmp0regez2k.swift:15:46: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                                           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpdqtu14tm.swift:15:26: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                         ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:39: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                      ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:52: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                                   ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n        if x + y == z {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmp0regez2k.swift:15:10: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n       ~ ^~~~~~~~~~\n/tmp/tmp0regez2k.swift:15:28: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                         ~ ^~~~~~~~~~\n/tmp/tmp0regez2k.swift:15:46: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                                           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z && x.is_integer() && y.is_integer() && z.is_integer()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpfbez12xd.swift:15:28: error: value of type 'Double' has no member 'is_integer'\n    return x + y == z && x.is_integer() && y.is_integer() && z.is_integer()\n                         ~ ^~~~~~~~~~\n/tmp/tmpfbez12xd.swift:15:46: error: value of type 'Double' has no member 'is_integer'\n    return x + y == z && x.is_integer() && y.is_integer() && z.is_integer()\n                                           ~ ^~~~~~~~~~\n/tmp/tmpfbez12xd.swift:15:64: error: value of type 'Double' has no member 'is_integer'\n    return x + y == z && x.is_integer() && y.is_integer() && z.is_integer()\n                                                             ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpdqtu14tm.swift:15:26: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                         ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:39: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                      ^~~~~~\n/tmp/tmpdqtu14tm.swift:15:52: error: cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                                                   ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n        if x + y == z || y + z == x || z + x == y {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "/tmp/tmpov7edjvs.swift:15:10: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n       ~ ^~~~~~~~~~\n/tmp/tmpov7edjvs.swift:15:28: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                         ~ ^~~~~~~~~~\n/tmp/tmpov7edjvs.swift:15:46: error: value of type 'Double' has no member 'is_integer'\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n                                           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpe840_clr/tmpe840_clr.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7cc8c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7cc5bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7cc5bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7cc5ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe840_clr                        0x000055702b1131c4 <unavailable> + 4548\n5    libc.so.6                          0x00002ad7ccab0460 __libc_start_main + 245\n6    tmpe840_clr                        0x000055702b112e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z || y + z == x || z + x == y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "tmpwvnpx8zp/tmpwvnpx8zp.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd6c549c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd6c240b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd6c240988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd6c23f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvnpx8zp                        0x0000564dfeac62d6 <unavailable> + 4822\n5    libc.so.6                          0x00002afd6c735460 __libc_start_main + 245\n6    tmpwvnpx8zp                        0x0000564dfeac5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}