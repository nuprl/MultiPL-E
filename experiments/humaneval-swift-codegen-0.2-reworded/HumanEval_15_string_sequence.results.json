{
  "name": "HumanEval_15_string_sequence",
  "language": "swift",
  "prompt": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp89khp2gp.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp89khp2gp.swift:14:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpkwdde9pz.swift:11:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpkwdde9pz.swift:11:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpfl9qbn_j.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"string_sequence: n must be >= 0\")\n                ^~~~~\n/tmp/tmpfl9qbn_j.swift:14:9: error: cannot find 'fmt' in scope\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n               ^~~\n/tmp/tmpfl9qbn_j.swift:14:49: error: missing argument label 'n:' in call\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n                                                       ^\n                                                       n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpd7f8sxo9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpd7f8sxo9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpd7f8sxo9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn strings.Repeat(\" \", n) + strings.Repeat(\"0\", n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpxra98y91.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"n must be >= 0\")\n                ^~~~~\n/tmp/tmpxra98y91.swift:14:9: error: cannot find 'strings' in scope\n        return strings.Repeat(\" \", n) + strings.Repeat(\"0\", n)\n               ^~~~~~~\n/tmp/tmpxra98y91.swift:14:34: error: cannot find 'strings' in scope\n        return strings.Repeat(\" \", n) + strings.Repeat(\"0\", n)\n                                        ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpg6pr9lt9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpg6pr9lt9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpg6pr9lt9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    } else {\n        return string_sequence(n - 1) + \" \" + str(n)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpq7ckl44k.swift:11:47: error: cannot find 'str' in scope\n        return string_sequence(n - 1) + \" \" + str(n)\n                                              ^~~\n/tmp/tmpq7ckl44k.swift:11:32: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + str(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpd7f8sxo9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpd7f8sxo9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpd7f8sxo9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpk_mpn9dw.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpk_mpn9dw.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpk_mpn9dw.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpwrrfishr.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpwrrfishr.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpwrrfishr.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp5a9xwn6e.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp5a9xwn6e.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmp5a9xwn6e.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpjy4k295y.swift:14:24: error: expected ',' separator\n        return strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")\n                              ^\n                              ,\n/tmp/tmpjy4k295y.swift:14:46: error: consecutive statements on a line must be separated by ';'\n        return strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")\n                                                    ^\n                                                    ;\n/tmp/tmpjy4k295y.swift:14:46: error: expected expression\n        return strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")\n                                                    ^\n/tmp/tmpjy4k295y.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"n must be >= 0\")\n                ^~~~~\n/tmp/tmpjy4k295y.swift:14:9: error: cannot find 'strings' in scope\n        return strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")\n               ^~~~~~~\n/tmp/tmpjy4k295y.swift:14:24: error: cannot find 'string' in scope\n        return strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")\n                              ^~~~~~\n/tmp/tmpjy4k295y.swift:14:31: error: cannot find 'strconv' in scope\n        return strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")\n                                     ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpll5b0rxe.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpll5b0rxe.swift:14:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp89khp2gp.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp89khp2gp.swift:14:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return to_string(n) + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpflz2y0p7.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpflz2y0p7.swift:14:12: error: cannot find 'to_string' in scope\n    return to_string(n) + string_sequence(n - 1)\n           ^~~~~~~~~\n/tmp/tmpflz2y0p7.swift:14:43: error: missing argument label 'n:' in call\n    return to_string(n) + string_sequence(n - 1)\n                                          ^\n                                          n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpg48omkxq.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n must be >= 0\")\n        ^~~~~\n/tmp/tmpg48omkxq.swift:14:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp5a9xwn6e.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp5a9xwn6e.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmp5a9xwn6e.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n <= 0 {\n\t\treturn \"\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpwo_oinx5.swift:11:40: error: cannot find 'str' in scope\n        return string_sequence(n - 1) + \" \" + str(n)\n                                              ^~~\n/tmp/tmpwo_oinx5.swift:11:25: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + str(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"n must be non-negative\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpazno5n_p.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"n must be non-negative\")\n                ^~~~~\n/tmp/tmpazno5n_p.swift:14:40: error: cannot find 'string' in scope\n        return string_sequence(n - 1) + \" \" + string(n)\n                                              ^~~~~~\n/tmp/tmpazno5n_p.swift:14:25: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + string(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpu4e1box8.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpu4e1box8.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpotsq9c67.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpotsq9c67.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpotsq9c67.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpkwdde9pz.swift:11:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp5a9xwn6e.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp5a9xwn6e.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmp5a9xwn6e.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpd7f8sxo9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpd7f8sxo9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpd7f8sxo9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpd7f8sxo9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpd7f8sxo9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpd7f8sxo9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + n.toString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpsg8n1tgy.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + n.toString()\n                           ^\n                           n: \n/tmp/tmpsg8n1tgy.swift:11:45: error: value of type 'Int' has no member 'toString'\n    return string_sequence(n - 1) + \" \" + n.toString()\n                                          ~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpu4e1box8.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpu4e1box8.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpd7f8sxo9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpd7f8sxo9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpd7f8sxo9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpotsq9c67.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpotsq9c67.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpotsq9c67.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpg6pr9lt9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpg6pr9lt9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpg6pr9lt9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"n must be non-negative\")\n\t}\n\treturn strings.Repeat(\" \", int(n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpreuwauh7.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"n must be non-negative\")\n                ^~~~~\n/tmp/tmpreuwauh7.swift:11:9: error: cannot find 'strings' in scope\n        return strings.Repeat(\" \", int(n))\n               ^~~~~~~\n/tmp/tmpreuwauh7.swift:11:29: error: cannot find 'int' in scope\n        return strings.Repeat(\" \", int(n))\n                                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n <= 0 {\n        return \"\"\n    }\n    return to_string(n) + \" \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpryyuy3b9.swift:11:12: error: cannot find 'to_string' in scope\n    return to_string(n) + \" \" + string_sequence(n - 1)\n           ^~~~~~~~~\n/tmp/tmpryyuy3b9.swift:11:49: error: missing argument label 'n:' in call\n    return to_string(n) + \" \" + string_sequence(n - 1)\n                                                ^\n                                                n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpycaviin8.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n must be non-negative\")\n        ^~~~~\n/tmp/tmpycaviin8.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpycaviin8.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp5a9xwn6e.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp5a9xwn6e.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmp5a9xwn6e.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpotsq9c67.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpotsq9c67.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpotsq9c67.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpiqcl774_.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpiqcl774_.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpiqcl774_.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpu4e1box8.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpu4e1box8.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpg6pr9lt9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpg6pr9lt9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpg6pr9lt9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpu4e1box8.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpu4e1box8.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    } else {\n        return string_sequence(n - 1) + \" \" + string(n)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpfftfq9i0.swift:11:47: error: cannot find 'string' in scope\n        return string_sequence(n - 1) + \" \" + string(n)\n                                              ^~~~~~\n/tmp/tmpfftfq9i0.swift:11:32: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + string(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    return String.fromCharCode(...[0, ...range(n)])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpo4v2bqzl.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpo4v2bqzl.swift:11:42: error: cannot find 'range' in scope\n    return String.fromCharCode(...[0, ...range(n)])\n                                         ^~~~~\n/tmp/tmpo4v2bqzl.swift:11:19: error: type 'String' has no member 'fromCharCode'\n    return String.fromCharCode(...[0, ...range(n)])\n           ~~~~~~ ^~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpp6jdvsl0.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"n must be >= 0\")\n                ^~~~~\n/tmp/tmpp6jdvsl0.swift:14:9: error: cannot find 'fmt' in scope\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n               ^~~\n/tmp/tmpp6jdvsl0.swift:14:49: error: missing argument label 'n:' in call\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n                                                       ^\n                                                       n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\treturn strings.Repeat(\" \", int(n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpgwwlf8cm.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"string_sequence: n must be >= 0\")\n                ^~~~~\n/tmp/tmpgwwlf8cm.swift:11:9: error: cannot find 'strings' in scope\n        return strings.Repeat(\" \", int(n))\n               ^~~~~~~\n/tmp/tmpgwwlf8cm.swift:11:29: error: cannot find 'int' in scope\n        return strings.Repeat(\" \", int(n))\n                                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + Int(n).to_string()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpfa9fo4vf.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpfa9fo4vf.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + Int(n).to_string()\n                           ^\n                           n: \n/tmp/tmpfa9fo4vf.swift:14:50: error: value of type 'Int' has no member 'to_string'\n    return string_sequence(n - 1) + \" \" + Int(n).to_string()\n                                          ~~~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\treturn strings.Repeat(\" \", int(n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpgwwlf8cm.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"string_sequence: n must be >= 0\")\n                ^~~~~\n/tmp/tmpgwwlf8cm.swift:11:9: error: cannot find 'strings' in scope\n        return strings.Repeat(\" \", int(n))\n               ^~~~~~~\n/tmp/tmpgwwlf8cm.swift:11:29: error: cannot find 'int' in scope\n        return strings.Repeat(\" \", int(n))\n                                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp5a9xwn6e.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp5a9xwn6e.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmp5a9xwn6e.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp89khp2gp.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp89khp2gp.swift:14:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp89khp2gp.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp89khp2gp.swift:14:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpkwdde9pz.swift:11:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\treturn \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "tmpjm6zcyhq/tmpjm6zcyhq.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba9b04abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba9b01a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba9b01a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba9b01a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjm6zcyhq                        0x000055b4863be2e2 <unavailable> + 4834\n5    libc.so.6                          0x00002ba9b0697460 __libc_start_main + 245\n6    tmpjm6zcyhq                        0x000055b4863bdf49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpd7f8sxo9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpd7f8sxo9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpd7f8sxo9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpkwdde9pz.swift:11:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpk_mpn9dw.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpk_mpn9dw.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpk_mpn9dw.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpk_mpn9dw.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpk_mpn9dw.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpk_mpn9dw.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return to_string(n) + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpecpetjdn.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpecpetjdn.swift:14:12: error: cannot find 'to_string' in scope\n    return to_string(n) + string_sequence(n - 1)\n           ^~~~~~~~~\n/tmp/tmpecpetjdn.swift:14:43: error: missing argument label 'n:' in call\n    return to_string(n) + string_sequence(n - 1)\n                                          ^\n                                          n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return \" \".join(str(i) for i in range(n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptjeufxcp.swift:14:28: error: expected ',' separator\n    return \" \".join(str(i) for i in range(n))\n                           ^\n                          ,\n/tmp/tmptjeufxcp.swift:14:28: error: expected expression in list of expressions\n    return \" \".join(str(i) for i in range(n))\n                           ^\n/tmp/tmptjeufxcp.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n must be >= 0\")\n        ^~~~~\n/tmp/tmptjeufxcp.swift:14:21: error: cannot find 'str' in scope\n    return \" \".join(str(i) for i in range(n))\n                    ^~~\n/tmp/tmptjeufxcp.swift:14:25: error: cannot find 'i' in scope\n    return \" \".join(str(i) for i in range(n))\n                        ^\n/tmp/tmptjeufxcp.swift:14:16: error: value of type 'String' has no member 'join'\n    return \" \".join(str(i) for i in range(n))\n           ~~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n <= 0 {\n\t\treturn \"\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpwo_oinx5.swift:11:40: error: cannot find 'str' in scope\n        return string_sequence(n - 1) + \" \" + str(n)\n                                              ^~~\n/tmp/tmpwo_oinx5.swift:11:25: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + str(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpp6jdvsl0.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"n must be >= 0\")\n                ^~~~~\n/tmp/tmpp6jdvsl0.swift:14:9: error: cannot find 'fmt' in scope\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n               ^~~\n/tmp/tmpp6jdvsl0.swift:14:49: error: missing argument label 'n:' in call\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n                                                       ^\n                                                       n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    } else {\n        return string_sequence(n - 1) + \" \" + string(n)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpfftfq9i0.swift:11:47: error: cannot find 'string' in scope\n        return string_sequence(n - 1) + \" \" + string(n)\n                                              ^~~~~~\n/tmp/tmpfftfq9i0.swift:11:32: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + string(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp5a9xwn6e.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp5a9xwn6e.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmp5a9xwn6e.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpt0c_4103.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"n must be >= 0\")\n                ^~~~~\n/tmp/tmpt0c_4103.swift:14:40: error: cannot find 'string' in scope\n        return string_sequence(n - 1) + \" \" + string(n)\n                                              ^~~~~~\n/tmp/tmpt0c_4103.swift:14:25: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + string(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\treturn strings.Repeat(\" \", int(n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp8hph6mbb.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"n must be >= 0\")\n                ^~~~~\n/tmp/tmp8hph6mbb.swift:11:9: error: cannot find 'strings' in scope\n        return strings.Repeat(\" \", int(n))\n               ^~~~~~~\n/tmp/tmp8hph6mbb.swift:11:29: error: cannot find 'int' in scope\n        return strings.Repeat(\" \", int(n))\n                                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpgi4w6380.swift:14:24: error: expected ',' separator\n        return strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")\n                              ^\n                              ,\n/tmp/tmpgi4w6380.swift:14:46: error: consecutive statements on a line must be separated by ';'\n        return strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")\n                                                    ^\n                                                    ;\n/tmp/tmpgi4w6380.swift:14:46: error: expected expression\n        return strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")\n                                                    ^\n/tmp/tmpgi4w6380.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"string_sequence: n must be >= 0\")\n                ^~~~~\n/tmp/tmpgi4w6380.swift:14:9: error: cannot find 'strings' in scope\n        return strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")\n               ^~~~~~~\n/tmp/tmpgi4w6380.swift:14:24: error: cannot find 'string' in scope\n        return strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")\n                              ^~~~~~\n/tmp/tmpgi4w6380.swift:14:31: error: cannot find 'strconv' in scope\n        return strings.Join([]string{strconv.Itoa(n), string_sequence(n - 1)}, \" \")\n                                     ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp5a9xwn6e.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp5a9xwn6e.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmp5a9xwn6e.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\treturn \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "tmpjm6zcyhq/tmpjm6zcyhq.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba9b04abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba9b01a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba9b01a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba9b01a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjm6zcyhq                        0x000055b4863be2e2 <unavailable> + 4834\n5    libc.so.6                          0x00002ba9b0697460 __libc_start_main + 245\n6    tmpjm6zcyhq                        0x000055b4863bdf49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpzaqi5_n7.swift:11:40: error: cannot find 'str' in scope\n        return string_sequence(n - 1) + \" \" + str(n)\n                                              ^~~\n/tmp/tmpzaqi5_n7.swift:11:25: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + str(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpzaqi5_n7.swift:11:40: error: cannot find 'str' in scope\n        return string_sequence(n - 1) + \" \" + str(n)\n                                              ^~~\n/tmp/tmpzaqi5_n7.swift:11:25: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + str(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpll5b0rxe.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpll5b0rxe.swift:14:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpd7f8sxo9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpd7f8sxo9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpd7f8sxo9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpg6pr9lt9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpg6pr9lt9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpg6pr9lt9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp89khp2gp.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp89khp2gp.swift:14:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpf03pzlqi.swift:11:9: error: cannot find 'fmt' in scope\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n               ^~~\n/tmp/tmpf03pzlqi.swift:11:49: error: missing argument label 'n:' in call\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n                                                       ^\n                                                       n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpkwdde9pz.swift:11:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp5a9xwn6e.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp5a9xwn6e.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmp5a9xwn6e.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp5a9xwn6e.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp5a9xwn6e.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmp5a9xwn6e.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn strings.Join([]string{fmt.Sprint(n), string_sequence(n - 1)}, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmprd90335h.swift:14:24: error: expected ',' separator\n        return strings.Join([]string{fmt.Sprint(n), string_sequence(n - 1)}, \" \")\n                              ^\n                              ,\n/tmp/tmprd90335h.swift:14:44: error: consecutive statements on a line must be separated by ';'\n        return strings.Join([]string{fmt.Sprint(n), string_sequence(n - 1)}, \" \")\n                                                  ^\n                                                  ;\n/tmp/tmprd90335h.swift:14:44: error: expected expression\n        return strings.Join([]string{fmt.Sprint(n), string_sequence(n - 1)}, \" \")\n                                                  ^\n/tmp/tmprd90335h.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"n must be >= 0\")\n                ^~~~~\n/tmp/tmprd90335h.swift:14:9: error: cannot find 'strings' in scope\n        return strings.Join([]string{fmt.Sprint(n), string_sequence(n - 1)}, \" \")\n               ^~~~~~~\n/tmp/tmprd90335h.swift:14:24: error: cannot find 'string' in scope\n        return strings.Join([]string{fmt.Sprint(n), string_sequence(n - 1)}, \" \")\n                              ^~~~~~\n/tmp/tmprd90335h.swift:14:31: error: cannot find 'fmt' in scope\n        return strings.Join([]string{fmt.Sprint(n), string_sequence(n - 1)}, \" \")\n                                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpotsq9c67.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpotsq9c67.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpotsq9c67.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return to_string(n) + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnny4jkrc.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n must be >= 0\")\n        ^~~~~\n/tmp/tmpnny4jkrc.swift:14:12: error: cannot find 'to_string' in scope\n    return to_string(n) + string_sequence(n - 1)\n           ^~~~~~~~~\n/tmp/tmpnny4jkrc.swift:14:43: error: missing argument label 'n:' in call\n    return to_string(n) + string_sequence(n - 1)\n                                          ^\n                                          n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpn23prl69.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n must be >= 0\")\n        ^~~~~\n/tmp/tmpn23prl69.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpn23prl69.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpu4e1box8.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpu4e1box8.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"string_sequence: n < 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpe20665xx.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"string_sequence: n < 0\")\n                ^~~~~\n/tmp/tmpe20665xx.swift:14:40: error: cannot find 'string' in scope\n        return string_sequence(n - 1) + \" \" + string(n)\n                                              ^~~~~~\n/tmp/tmpe20665xx.swift:14:25: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + string(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\treturn strings.Join([]string{strconv.Itoa(n), \" \", string_sequence(n - 1)}, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptyq3ngym.swift:11:24: error: expected ',' separator\n        return strings.Join([]string{strconv.Itoa(n), \" \", string_sequence(n - 1)}, \"\")\n                              ^\n                              ,\n/tmp/tmptyq3ngym.swift:11:46: error: consecutive statements on a line must be separated by ';'\n        return strings.Join([]string{strconv.Itoa(n), \" \", string_sequence(n - 1)}, \"\")\n                                                    ^\n                                                    ;\n/tmp/tmptyq3ngym.swift:11:46: error: expected expression\n        return strings.Join([]string{strconv.Itoa(n), \" \", string_sequence(n - 1)}, \"\")\n                                                    ^\n/tmp/tmptyq3ngym.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"string_sequence: n must be >= 0\")\n                ^~~~~\n/tmp/tmptyq3ngym.swift:11:9: error: cannot find 'strings' in scope\n        return strings.Join([]string{strconv.Itoa(n), \" \", string_sequence(n - 1)}, \"\")\n               ^~~~~~~\n/tmp/tmptyq3ngym.swift:11:24: error: cannot find 'string' in scope\n        return strings.Join([]string{strconv.Itoa(n), \" \", string_sequence(n - 1)}, \"\")\n                              ^~~~~~\n/tmp/tmptyq3ngym.swift:11:31: error: cannot find 'strconv' in scope\n        return strings.Join([]string{strconv.Itoa(n), \" \", string_sequence(n - 1)}, \"\")\n                                     ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn fmt.Sprintf(\"%d\", 0) + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpvh78ojh2.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"n must be >= 0\")\n                ^~~~~\n/tmp/tmpvh78ojh2.swift:14:9: error: cannot find 'fmt' in scope\n        return fmt.Sprintf(\"%d\", 0) + string_sequence(n - 1)\n               ^~~\n/tmp/tmpvh78ojh2.swift:14:48: error: missing argument label 'n:' in call\n        return fmt.Sprintf(\"%d\", 0) + string_sequence(n - 1)\n                                                      ^\n                                                      n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"n must be non-negative\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + strconv.Itoa(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpjzlj3ib1.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"n must be non-negative\")\n                ^~~~~\n/tmp/tmpjzlj3ib1.swift:14:40: error: cannot find 'strconv' in scope\n        return string_sequence(n - 1) + \" \" + strconv.Itoa(n)\n                                              ^~~~~~~\n/tmp/tmpjzlj3ib1.swift:14:25: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + strconv.Itoa(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return to_string(n) + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpflz2y0p7.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpflz2y0p7.swift:14:12: error: cannot find 'to_string' in scope\n    return to_string(n) + string_sequence(n - 1)\n           ^~~~~~~~~\n/tmp/tmpflz2y0p7.swift:14:43: error: missing argument label 'n:' in call\n    return to_string(n) + string_sequence(n - 1)\n                                          ^\n                                          n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp89khp2gp.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp89khp2gp.swift:14:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpu4e1box8.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpu4e1box8.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpfvfqdb_n.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpfvfqdb_n.swift:14:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpzaqi5_n7.swift:11:40: error: cannot find 'str' in scope\n        return string_sequence(n - 1) + \" \" + str(n)\n                                              ^~~\n/tmp/tmpzaqi5_n7.swift:11:25: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + str(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be non-negative\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn strings.Repeat(\" \", n) + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpyyqw0qes.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"string_sequence: n must be non-negative\")\n                ^~~~~\n/tmp/tmpyyqw0qes.swift:14:9: error: cannot find 'strings' in scope\n        return strings.Repeat(\" \", n) + string_sequence(n - 1)\n               ^~~~~~~\n/tmp/tmpyyqw0qes.swift:14:50: error: missing argument label 'n:' in call\n        return strings.Repeat(\" \", n) + string_sequence(n - 1)\n                                                        ^\n                                                        n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + Int(n).to_string()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpfa9fo4vf.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpfa9fo4vf.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + Int(n).to_string()\n                           ^\n                           n: \n/tmp/tmpfa9fo4vf.swift:14:50: error: value of type 'Int' has no member 'to_string'\n    return string_sequence(n - 1) + \" \" + Int(n).to_string()\n                                          ~~~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpg6pr9lt9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpg6pr9lt9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpg6pr9lt9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n <= 0 {\n        return \"\"\n    }\n    return to_string(n) + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmps3u6y8jn.swift:11:12: error: cannot find 'to_string' in scope\n    return to_string(n) + string_sequence(n - 1)\n           ^~~~~~~~~\n/tmp/tmps3u6y8jn.swift:11:43: error: missing argument label 'n:' in call\n    return to_string(n) + string_sequence(n - 1)\n                                          ^\n                                          n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpd7f8sxo9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpd7f8sxo9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpd7f8sxo9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n <= 0 {\n        return \"\"\n    }\n    return to_string(n) + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmps3u6y8jn.swift:11:12: error: cannot find 'to_string' in scope\n    return to_string(n) + string_sequence(n - 1)\n           ^~~~~~~~~\n/tmp/tmps3u6y8jn.swift:11:43: error: missing argument label 'n:' in call\n    return to_string(n) + string_sequence(n - 1)\n                                          ^\n                                          n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpt0c_4103.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"n must be >= 0\")\n                ^~~~~\n/tmp/tmpt0c_4103.swift:14:40: error: cannot find 'string' in scope\n        return string_sequence(n - 1) + \" \" + string(n)\n                                              ^~~~~~\n/tmp/tmpt0c_4103.swift:14:25: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + string(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpotsq9c67.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpotsq9c67.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpotsq9c67.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp89khp2gp.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmp89khp2gp.swift:14:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp9dgd8mwj.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"n must be >= 0\")\n                ^~~~~\n/tmp/tmp9dgd8mwj.swift:14:40: error: cannot find 'str' in scope\n        return string_sequence(n - 1) + \" \" + str(n)\n                                              ^~~\n/tmp/tmp9dgd8mwj.swift:14:25: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + str(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpkwdde9pz.swift:11:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    return strings.Join([]string{fmt.Sprint(n)}, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpe8ojkgq3.swift:11:27: error: expected ',' separator\n    return strings.Join([]string{fmt.Sprint(n)}, \" \")\n                          ^\n                          ,\n/tmp/tmpe8ojkgq3.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpe8ojkgq3.swift:11:12: error: cannot find 'strings' in scope\n    return strings.Join([]string{fmt.Sprint(n)}, \" \")\n           ^~~~~~~\n/tmp/tmpe8ojkgq3.swift:11:27: error: cannot find 'string' in scope\n    return strings.Join([]string{fmt.Sprint(n)}, \" \")\n                          ^~~~~~\n/tmp/tmpe8ojkgq3.swift:11:34: error: cannot find 'fmt' in scope\n    return strings.Join([]string{fmt.Sprint(n)}, \" \")\n                                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpk_mpn9dw.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpk_mpn9dw.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpk_mpn9dw.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + n.to_string()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpvt7ua340.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + n.to_string()\n                           ^\n                           n: \n/tmp/tmpvt7ua340.swift:11:45: error: value of type 'Int' has no member 'to_string'\n    return string_sequence(n - 1) + \" \" + n.to_string()\n                                          ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpfl9qbn_j.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"string_sequence: n must be >= 0\")\n                ^~~~~\n/tmp/tmpfl9qbn_j.swift:14:9: error: cannot find 'fmt' in scope\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n               ^~~\n/tmp/tmpfl9qbn_j.swift:14:49: error: missing argument label 'n:' in call\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n                                                       ^\n                                                       n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\treturn strings.Repeat(\" \", n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpjlvrj6g8.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"n must be >= 0\")\n                ^~~~~\n/tmp/tmpjlvrj6g8.swift:11:9: error: cannot find 'strings' in scope\n        return strings.Repeat(\" \", n)\n               ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpg6pr9lt9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpg6pr9lt9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpg6pr9lt9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpp6jdvsl0.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"n must be >= 0\")\n                ^~~~~\n/tmp/tmpp6jdvsl0.swift:14:9: error: cannot find 'fmt' in scope\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n               ^~~\n/tmp/tmpp6jdvsl0.swift:14:49: error: missing argument label 'n:' in call\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n                                                       ^\n                                                       n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    return strings.Join(strings.Repeat(\" \", int(n)), \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpgzzqlsxj.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpgzzqlsxj.swift:11:12: error: cannot find 'strings' in scope\n    return strings.Join(strings.Repeat(\" \", int(n)), \"\")\n           ^~~~~~~\n/tmp/tmpgzzqlsxj.swift:11:25: error: cannot find 'strings' in scope\n    return strings.Join(strings.Repeat(\" \", int(n)), \"\")\n                        ^~~~~~~\n/tmp/tmpgzzqlsxj.swift:11:45: error: cannot find 'int' in scope\n    return strings.Join(strings.Repeat(\" \", int(n)), \"\")\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpzaqi5_n7.swift:11:40: error: cannot find 'str' in scope\n        return string_sequence(n - 1) + \" \" + str(n)\n                                              ^~~\n/tmp/tmpzaqi5_n7.swift:11:25: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + str(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpg6pr9lt9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpg6pr9lt9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpg6pr9lt9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpu4e1box8.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpu4e1box8.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpg6pr9lt9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpg6pr9lt9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpg6pr9lt9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"string_sequence: n < 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp7fttklz8.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"string_sequence: n < 0\")\n                ^~~~~\n/tmp/tmp7fttklz8.swift:14:9: error: cannot find 'fmt' in scope\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n               ^~~\n/tmp/tmp7fttklz8.swift:14:49: error: missing argument label 'n:' in call\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n                                                       ^\n                                                       n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + n.toString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpsg8n1tgy.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + n.toString()\n                           ^\n                           n: \n/tmp/tmpsg8n1tgy.swift:11:45: error: value of type 'Int' has no member 'toString'\n    return string_sequence(n - 1) + \" \" + n.toString()\n                                          ~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpkwdde9pz.swift:11:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpoo_en83o.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n must be non-negative\")\n        ^~~~~\n/tmp/tmpoo_en83o.swift:14:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpg48omkxq.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n must be >= 0\")\n        ^~~~~\n/tmp/tmpg48omkxq.swift:14:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpzaqi5_n7.swift:11:40: error: cannot find 'str' in scope\n        return string_sequence(n - 1) + \" \" + str(n)\n                                              ^~~\n/tmp/tmpzaqi5_n7.swift:11:25: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + str(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpotsq9c67.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpotsq9c67.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpotsq9c67.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be non-negative\")\n\t}\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\treturn fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpylzgui_0.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"string_sequence: n must be non-negative\")\n                ^~~~~\n/tmp/tmpylzgui_0.swift:14:9: error: cannot find 'fmt' in scope\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n               ^~~\n/tmp/tmpylzgui_0.swift:14:49: error: missing argument label 'n:' in call\n        return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n                                                       ^\n                                                       n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpkwdde9pz.swift:11:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpll5b0rxe.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpll5b0rxe.swift:14:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpk_mpn9dw.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpk_mpn9dw.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpk_mpn9dw.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpu4e1box8.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpu4e1box8.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpjzqjrtzz.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpjzqjrtzz.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpjzqjrtzz.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpg6pr9lt9.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpg6pr9lt9.swift:14:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpg6pr9lt9.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    return strings.Join(strings.Repeat(\" \", int(n)), \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpgzzqlsxj.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpgzzqlsxj.swift:11:12: error: cannot find 'strings' in scope\n    return strings.Join(strings.Repeat(\" \", int(n)), \"\")\n           ^~~~~~~\n/tmp/tmpgzzqlsxj.swift:11:25: error: cannot find 'strings' in scope\n    return strings.Join(strings.Repeat(\" \", int(n)), \"\")\n                        ^~~~~~~\n/tmp/tmpgzzqlsxj.swift:11:45: error: cannot find 'int' in scope\n    return strings.Join(strings.Repeat(\" \", int(n)), \"\")\n                                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpk_mpn9dw.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpk_mpn9dw.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpk_mpn9dw.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpk_mpn9dw.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be non-negative\")\n        ^~~~~\n/tmp/tmpk_mpn9dw.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpk_mpn9dw.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmp4wqsn72n.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"string_sequence: n must be >= 0\")\n                ^~~~~\n/tmp/tmp4wqsn72n.swift:14:40: error: cannot find 'string' in scope\n        return string_sequence(n - 1) + \" \" + string(n)\n                                              ^~~~~~\n/tmp/tmp4wqsn72n.swift:14:25: error: missing argument label 'n:' in call\n        return string_sequence(n - 1) + \" \" + string(n)\n                               ^\n                               n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpotsq9c67.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"n must be >= 0\")\n        ^~~~~\n/tmp/tmpotsq9c67.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpotsq9c67.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\tif n < 0 {\n\t\tpanic(\"string_sequence: n must be >= 0\")\n\t}\n\tif n == 0 {\n\t\treturn \"0\"\n\t}\n\treturn strings.Join(strings.Fields(fmt.Sprint(n)), \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpenprtplq.swift:9:3: error: cannot find 'panic' in scope\n                panic(\"string_sequence: n must be >= 0\")\n                ^~~~~\n/tmp/tmpenprtplq.swift:14:9: error: cannot find 'strings' in scope\n        return strings.Join(strings.Fields(fmt.Sprint(n)), \" \")\n               ^~~~~~~\n/tmp/tmpenprtplq.swift:14:22: error: cannot find 'strings' in scope\n        return strings.Join(strings.Fields(fmt.Sprint(n)), \" \")\n                            ^~~~~~~\n/tmp/tmpenprtplq.swift:14:37: error: cannot find 'fmt' in scope\n        return strings.Join(strings.Fields(fmt.Sprint(n)), \" \")\n                                           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpkwdde9pz.swift:11:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n\treturn \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "tmpjm6zcyhq/tmpjm6zcyhq.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba9b04abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba9b01a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba9b01a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba9b01a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjm6zcyhq                        0x000055b4863be2e2 <unavailable> + 4834\n5    libc.so.6                          0x00002ba9b0697460 __libc_start_main + 245\n6    tmpjm6zcyhq                        0x000055b4863bdf49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmptgp0s1n6.swift:11:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmptgp0s1n6.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return \"0 \" + string_sequence(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpkwdde9pz.swift:11:35: error: missing argument label 'n:' in call\n    return \"0 \" + string_sequence(n - 1)\n                                  ^\n                                  n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n < 0 {\n        panic(\"string_sequence: n < 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + string(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpz7h2b11l.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"string_sequence: n < 0\")\n        ^~~~~\n/tmp/tmpz7h2b11l.swift:14:43: error: cannot find 'string' in scope\n    return string_sequence(n - 1) + \" \" + string(n)\n                                          ^~~~~~\n/tmp/tmpz7h2b11l.swift:14:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + string(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpnz8398ws.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpnz8398ws.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n <= 0 {\n        return \"\"\n    }\n    return string_sequence(n - 1) + \" \" + str(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")",
      "timestamp": 1664292636,
      "stdout": "",
      "stderr": "/tmp/tmpu4e1box8.swift:11:43: error: cannot find 'str' in scope\n    return string_sequence(n - 1) + \" \" + str(n)\n                                          ^~~\n/tmp/tmpu4e1box8.swift:11:28: error: missing argument label 'n:' in call\n    return string_sequence(n - 1) + \" \" + str(n)\n                           ^\n                           n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}