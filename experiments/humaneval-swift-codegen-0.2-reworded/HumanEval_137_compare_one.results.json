{
  "name": "HumanEval_137_compare_one",
  "language": "swift",
  "prompt": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp1ezwrjut.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp1ezwrjut.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmp1ezwrjut.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp1ezwrjut.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp1ezwrjut.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpusjbbfkb/tmpusjbbfkb.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ada976e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ada973e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ada973e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ada973df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpusjbbfkb                        0x00005578d75ad052 <unavailable> + 8274\n5    libc.so.6                          0x00002ada978d5460 __libc_start_main + 245\n6    tmpusjbbfkb                        0x00005578d75ac499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp1ezwrjut.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp1ezwrjut.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmp1ezwrjut.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp1ezwrjut.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp1ezwrjut.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a == intValue(Int) {\n        if b == intValue(Int) {\n            return nil\n        }\n        return b\n    }\n    if a == doubleValue(Double) {\n        if b == doubleValue(Double) {\n            return nil\n        }\n        return b\n    }\n    if a == stringValue(String) {\n        if b == stringValue(String) {\n            return nil\n        }\n        return b\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpl3c4e1ld.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpl3c4e1ld.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpl3c4e1ld.swift:31:13: error: cannot find 'intValue' in scope\n    if a == intValue(Int) {\n            ^~~~~~~~\n/tmp/tmpl3c4e1ld.swift:32:17: error: cannot find 'intValue' in scope\n        if b == intValue(Int) {\n                ^~~~~~~~\n/tmp/tmpl3c4e1ld.swift:37:13: error: cannot find 'doubleValue' in scope\n    if a == doubleValue(Double) {\n            ^~~~~~~~~~~\n/tmp/tmpl3c4e1ld.swift:38:17: error: cannot find 'doubleValue' in scope\n        if b == doubleValue(Double) {\n                ^~~~~~~~~~~\n/tmp/tmpl3c4e1ld.swift:43:13: error: cannot find 'stringValue' in scope\n    if a == stringValue(String) {\n            ^~~~~~~~~~~\n/tmp/tmpl3c4e1ld.swift:44:17: error: cannot find 'stringValue' in scope\n        if b == stringValue(String) {\n                ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    }\n                    return nil\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    if a.stringValue(String) > b.intValue(Int) {\n                        return stringValue(String)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.stringValue(String) > b.doubleValue(Double) {\n                        return stringValue(String)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.stringValue(String) > b.stringValue(String) {\n                        return stringValue(String)\n                    }\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp44axf8uf.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp44axf8uf.swift:41:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:59:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp44axf8uf.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:35:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:26:40: note: binary operator '>' cannot be synthesized for enums with associated values\n                    if a.intValue(Int) > b.intValue(Int) {\n                                       ^\n/tmp/tmp44axf8uf.swift:26:35: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n                    if a.intValue(Int) > b.intValue(Int) {\n                                  ^\n/tmp/tmp44axf8uf.swift:26:53: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n                    if a.intValue(Int) > b.intValue(Int) {\n                                                    ^\n/tmp/tmp44axf8uf.swift:27:32: error: cannot find 'intValue' in scope\n                        return intValue(Int)\n                               ^~~~~~~~\n/tmp/tmp44axf8uf.swift:31:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~\n/tmp/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil || b == nil {\n        return nil\n    }\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp2uwv00pi.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil || b == nil {\n       ~ ^  ~~~\n/tmp/tmp2uwv00pi.swift:22:22: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil || b == nil {\n                   ~ ^  ~~~\n/tmp/tmp2uwv00pi.swift:29:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp2uwv00pi.swift:38:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp2uwv00pi.swift:47:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp2uwv00pi.swift:31:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp2uwv00pi.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp2uwv00pi.swift:35:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp2uwv00pi.swift:34:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp2uwv00pi.swift:36:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp2uwv00pi.swift:40:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp2uwv00pi.swift:42:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp2uwv00pi.swift:44:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp2uwv00pi.swift:41:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a == Int {\n        if b == Int {\n            return nil\n        }\n        return b\n    }\n    if b == Int {\n        return a\n    }\n    if a == Double {\n        if b == Double {\n            return nil\n        }\n        return b\n    }\n    if b == Double {\n        return a\n    }\n    if a == String {\n        if b == String {\n            return nil\n        }\n        return b\n    }\n    if b == String {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpis1is9sv.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpis1is9sv.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpis1is9sv.swift:31:10: error: binary operator '==' cannot be applied to operands of type 'Value' and 'Int.Type'\n    if a == Int {\n       ~ ^  ~~~\n/tmp/tmpis1is9sv.swift:32:14: error: binary operator '==' cannot be applied to operands of type 'Value' and 'Int.Type'\n        if b == Int {\n           ~ ^  ~~~\n/tmp/tmpis1is9sv.swift:37:10: error: binary operator '==' cannot be applied to operands of type 'Value' and 'Int.Type'\n    if b == Int {\n       ~ ^  ~~~\n/tmp/tmpis1is9sv.swift:40:10: error: binary operator '==' cannot be applied to operands of type 'Value' and 'Double.Type'\n    if a == Double {\n       ~ ^  ~~~~~~\n/tmp/tmpis1is9sv.swift:41:14: error: binary operator '==' cannot be applied to operands of type 'Value' and 'Double.Type'\n        if b == Double {\n           ~ ^  ~~~~~~\n/tmp/tmpis1is9sv.swift:46:10: error: binary operator '==' cannot be applied to operands of type 'Value' and 'Double.Type'\n    if b == Double {\n       ~ ^  ~~~~~~\n/tmp/tmpis1is9sv.swift:49:10: error: binary operator '==' cannot be applied to operands of type 'Value' and 'String.Type'\n    if a == String {\n       ~ ^  ~~~~~~\n/tmp/tmpis1is9sv.swift:50:14: error: binary operator '==' cannot be applied to operands of type 'Value' and 'String.Type'\n        if b == String {\n           ~ ^  ~~~~~~\n/tmp/tmpis1is9sv.swift:55:10: error: binary operator '==' cannot be applied to operands of type 'Value' and 'String.Type'\n    if b == String {\n       ~ ^  ~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case .intValue(Int):\n            switch b {\n                case .intValue(Int):\n                    return nil\n                case .doubleValue(Double):\n                    return .doubleValue(Double)\n                case .stringValue(String):\n                    return .stringValue(String)\n            }\n        case .doubleValue(Double):\n            switch b {\n                case .intValue(Int):\n                    return .intValue(Int)\n                case .doubleValue(Double):\n                    return nil\n                case .stringValue(String):\n                    return .stringValue(String)\n            }\n        case .stringValue(String):\n            switch b {\n                case .intValue(Int):\n                    return .intValue(Int)\n                case .doubleValue(Double):\n                    return .doubleValue(Double)\n                case .stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmphvd_qikw.swift:26:24: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n        case .intValue(Int):\n                       ^~~\n/tmp/tmphvd_qikw.swift:35:27: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n        case .doubleValue(Double):\n                          ^~~~~~\n/tmp/tmphvd_qikw.swift:44:27: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n        case .stringValue(String):\n                          ^\n/tmp/tmphvd_qikw.swift:44:27: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n        case .stringValue(String):\n                          ^\n/tmp/tmphvd_qikw.swift:28:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(Int):\n                               ^~~\n/tmp/tmphvd_qikw.swift:30:35: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n                case .doubleValue(Double):\n                                  ^~~~~~\n/tmp/tmphvd_qikw.swift:32:35: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n                case .stringValue(String):\n                                  ^\n/tmp/tmphvd_qikw.swift:32:35: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n                case .stringValue(String):\n                                  ^\n/tmp/tmphvd_qikw.swift:31:41: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n                    return .doubleValue(Double)\n                                        ^\n/tmp/tmphvd_qikw.swift:33:41: error: cannot convert value of type 'String.Type' to expected argument type 'String'\n                    return .stringValue(String)\n                                        ^\n/tmp/tmphvd_qikw.swift:37:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == intValue(Int) {\n        if b == intValue(Int) {\n            return intValue(Int)\n        }\n        return doubleValue(Double)\n    }\n    if a == doubleValue(Double) {\n        if b == doubleValue(Double) {\n            return doubleValue(Double)\n        }\n        return stringValue(String)\n    }\n    if a == stringValue(String) {\n        if b == stringValue(String) {\n            return stringValue(String)\n        }\n        return intValue(Int)\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpr0ov4afy.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpr0ov4afy.swift:28:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpr0ov4afy.swift:31:13: error: cannot find 'intValue' in scope\n    if a == intValue(Int) {\n            ^~~~~~~~\n/tmp/tmpr0ov4afy.swift:32:17: error: cannot find 'intValue' in scope\n        if b == intValue(Int) {\n                ^~~~~~~~\n/tmp/tmpr0ov4afy.swift:33:20: error: cannot find 'intValue' in scope\n            return intValue(Int)\n                   ^~~~~~~~\n/tmp/tmpr0ov4afy.swift:35:16: error: cannot find 'doubleValue' in scope\n        return doubleValue(Double)\n               ^~~~~~~~~~~\n/tmp/tmpr0ov4afy.swift:37:13: error: cannot find 'doubleValue' in scope\n    if a == doubleValue(Double) {\n            ^~~~~~~~~~~\n/tmp/tmpr0ov4afy.swift:38:17: error: cannot find 'doubleValue' in scope\n        if b == doubleValue(Double) {\n                ^~~~~~~~~~~\n/tmp/tmpr0ov4afy.swift:39:20: error: cannot find 'doubleValue' in scope\n            return doubleValue(Double)\n                   ^~~~~~~~~~~\n/tmp/tmpr0ov4afy.swift:41:16: error: cannot find 'stringValue' in scope\n        return stringValue(String)\n               ^~~~~~~~~~~\n/tmp/tmpr0ov4afy.swift:43:13: error: cannot find 'stringValue' in scope\n    if a == stringValue(String) {\n            ^~~~~~~~~~~\n/tmp/tmpr0ov4afy.swift:44:17: error: cannot find 'stringValue' in scope\n        if b == stringValue(String) {\n                ^~~~~~~~~~~\n/tmp/tmpr0ov4afy.swift:45:20: error: cannot find 'stringValue' in scope\n            return stringValue(String)\n                   ^~~~~~~~~~~\n/tmp/tmpr0ov4afy.swift:47:16: error: cannot find 'intValue' in scope\n        return intValue(Int)\n               ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case .intValue(Int):\n            switch b {\n                case .intValue(Int):\n                    return nil\n                case .doubleValue(Double):\n                    return .doubleValue(Double)\n                case .stringValue(String):\n                    return .stringValue(String)\n            }\n        case .doubleValue(Double):\n            switch b {\n                case .intValue(Int):\n                    return .intValue(Int)\n                case .doubleValue(Double):\n                    return nil\n                case .stringValue(String):\n                    return .stringValue(String)\n            }\n        case .stringValue(String):\n            switch b {\n                case .intValue(Int):\n                    return .intValue(Int)\n                case .doubleValue(Double):\n                    return .doubleValue(Double)\n                case .stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmphvd_qikw.swift:26:24: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n        case .intValue(Int):\n                       ^~~\n/tmp/tmphvd_qikw.swift:35:27: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n        case .doubleValue(Double):\n                          ^~~~~~\n/tmp/tmphvd_qikw.swift:44:27: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n        case .stringValue(String):\n                          ^\n/tmp/tmphvd_qikw.swift:44:27: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n        case .stringValue(String):\n                          ^\n/tmp/tmphvd_qikw.swift:28:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(Int):\n                               ^~~\n/tmp/tmphvd_qikw.swift:30:35: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n                case .doubleValue(Double):\n                                  ^~~~~~\n/tmp/tmphvd_qikw.swift:32:35: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n                case .stringValue(String):\n                                  ^\n/tmp/tmphvd_qikw.swift:32:35: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n                case .stringValue(String):\n                                  ^\n/tmp/tmphvd_qikw.swift:31:41: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n                    return .doubleValue(Double)\n                                        ^\n/tmp/tmphvd_qikw.swift:33:41: error: cannot convert value of type 'String.Type' to expected argument type 'String'\n                    return .stringValue(String)\n                                        ^\n/tmp/tmphvd_qikw.swift:37:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a == b {\n                        return nil\n                    } else if a > b {\n                        return intValue(Int)\n                    } else {\n                        return intValue(Int)\n                    }\n                case doubleValue(Double):\n                    if a > b {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a > b {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a > b {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a > b {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a > b {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    if a > b {\n                        return stringValue(String)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a > b {\n                        return stringValue(String)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a > b {\n                        return stringValue(String)\n                    } else {\n                        return nil\n                    }\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpjg6s5ze7.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmpjg6s5ze7.swift:46:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmpjg6s5ze7.swift:67:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmpjg6s5ze7.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmpjg6s5ze7.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmpjg6s5ze7.swift:39:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmpjg6s5ze7.swift:28:33: error: binary operator '>' cannot be applied to two 'Value' operands\n                    } else if a > b {\n                              ~ ^ ~\n/tmp/tmpjg6s5ze7.swift:28:33: note: binary operator '>' cannot be synthesized for enums with associated values\n                    } else if a > b {\n                                ^\n/tmp/tmpjg6s5ze7.swift:29:32: error: cannot find 'intValue' in scope\n                        return intValue(Int)\n                               ^~~~~~~~\n/tmp/tmpjg6s5ze7.swift:31:32: error: cannot find 'intValue' in scope\n                        return intValue(Int)\n                               ^~~~~~~~\n/tmp/tmpjg6s5ze7.swift:34:26: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a > b {\n                       ~ ^ ~\n/tmp/tmpjg6s5ze7.swift:34:26: note: binary operator '>' cannot be synthesized for enums with associated values\n                    if a > b {\n                         ^\n/tmp/tmpjg6s5ze7.swift:35:32: error: cannot find 'intValue' in scope\n                        return intValue(Int)\n                               ^~~~~~~~\n/tmp/tmpjg6s5ze7.swift:40:26: error: binary operator '>' cannot be applied to two 'Value' op",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case .intValue(Int):\n            switch b {\n                case .intValue(Int):\n                    return nil\n                case .doubleValue(Double):\n                    return .doubleValue(Double)\n                case .stringValue(String):\n                    return .stringValue(String)\n            }\n        case .doubleValue(Double):\n            switch b {\n                case .intValue(Int):\n                    return .intValue(Int)\n                case .doubleValue(Double):\n                    return nil\n                case .stringValue(String):\n                    return .stringValue(String)\n            }\n        case .stringValue(String):\n            switch b {\n                case .intValue(Int):\n                    return .intValue(Int)\n                case .doubleValue(Double):\n                    return .doubleValue(Double)\n                case .stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmphvd_qikw.swift:26:24: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n        case .intValue(Int):\n                       ^~~\n/tmp/tmphvd_qikw.swift:35:27: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n        case .doubleValue(Double):\n                          ^~~~~~\n/tmp/tmphvd_qikw.swift:44:27: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n        case .stringValue(String):\n                          ^\n/tmp/tmphvd_qikw.swift:44:27: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n        case .stringValue(String):\n                          ^\n/tmp/tmphvd_qikw.swift:28:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(Int):\n                               ^~~\n/tmp/tmphvd_qikw.swift:30:35: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n                case .doubleValue(Double):\n                                  ^~~~~~\n/tmp/tmphvd_qikw.swift:32:35: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n                case .stringValue(String):\n                                  ^\n/tmp/tmphvd_qikw.swift:32:35: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n                case .stringValue(String):\n                                  ^\n/tmp/tmphvd_qikw.swift:31:41: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n                    return .doubleValue(Double)\n                                        ^\n/tmp/tmphvd_qikw.swift:33:41: error: cannot convert value of type 'String.Type' to expected argument type 'String'\n                    return .stringValue(String)\n                                        ^\n/tmp/tmphvd_qikw.swift:37:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return compare_one(a: .intValue(1), b: .intValue(2))\n                case doubleValue(Double):\n                    return compare_one(a: .intValue(1), b: .doubleValue(2.5))\n                case stringValue(String):\n                    return compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return compare_one(a: .doubleValue(2.5), b: .intValue(1))\n                case doubleValue(Double):\n                    return compare_one(a: .doubleValue(2.5), b: .doubleValue(2.5))\n                case stringValue(String):\n                    return compare_one(a: .doubleValue(2.5), b: .stringValue(\"2,3\"))\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return compare_one(a: .stringValue(\"2,3\"), b: .intValue(1))\n                case doubleValue(Double):\n                    return compare_one(a: .stringValue(\"2,3\"), b: .doubleValue(2.5))\n                case stringValue(String):\n                    return compare_one(a: .stringValue(\"2,3\"), b: .stringValue(\"2,3\"))\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp6utzwq0x.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmp6utzwq0x.swift:28:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmp6utzwq0x.swift:32:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp6utzwq0x.swift:41:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp6utzwq0x.swift:50:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp6utzwq0x.swift:34:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp6utzwq0x.swift:36:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp6utzwq0x.swift:38:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp6utzwq0x.swift:43:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp6utzwq0x.swift:45:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp6utzwq0x.swift:47:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp6utzwq0x.swift:52:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp6utzwq0x.swift:54:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp6utzwq0x.swift:56:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    }\n                    return nil\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    if a.stringValue(String) > b.intValue(Int) {\n                        return stringValue(String)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.stringValue(String) > b.doubleValue(Double) {\n                        return stringValue(String)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.stringValue(String) > b.stringValue(String) {\n                        return stringValue(String)\n                    }\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp44axf8uf.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp44axf8uf.swift:41:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:59:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp44axf8uf.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:35:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:26:40: note: binary operator '>' cannot be synthesized for enums with associated values\n                    if a.intValue(Int) > b.intValue(Int) {\n                                       ^\n/tmp/tmp44axf8uf.swift:26:35: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n                    if a.intValue(Int) > b.intValue(Int) {\n                                  ^\n/tmp/tmp44axf8uf.swift:26:53: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n                    if a.intValue(Int) > b.intValue(Int) {\n                                                    ^\n/tmp/tmp44axf8uf.swift:27:32: error: cannot find 'intValue' in scope\n                        return intValue(Int)\n                               ^~~~~~~~\n/tmp/tmp44axf8uf.swift:31:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~\n/tmp/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp9323hqdx.swift:26:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp9323hqdx.swift:35:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:44:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:28:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:32:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:31:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:33:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:37:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:39:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:38:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:42:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:46:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:48:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpusjbbfkb/tmpusjbbfkb.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ada976e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ada973e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ada973e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ada973df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpusjbbfkb                        0x00005578d75ad052 <unavailable> + 8274\n5    libc.so.6                          0x00002ada978d5460 __libc_start_main + 245\n6    tmpusjbbfkb                        0x00005578d75ac499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == nil || b == nil {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpjn50_r2s.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil || b == nil {\n       ~ ^  ~~~\n/tmp/tmpjn50_r2s.swift:25:22: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil || b == nil {\n                   ~ ^  ~~~\n/tmp/tmpjn50_r2s.swift:29:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmpjn50_r2s.swift:38:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmpjn50_r2s.swift:47:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmpjn50_r2s.swift:31:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmpjn50_r2s.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmpjn50_r2s.swift:35:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmpjn50_r2s.swift:34:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmpjn50_r2s.swift:36:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmpjn50_r2s.swift:40:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmpjn50_r2s.swift:42:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmpjn50_r2s.swift:44:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmpjn50_r2s.swift:41:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a == Int {\n        if b == Int {\n            return compare_one(a: .intValue(a), b: .intValue(b))\n        }\n        if b == Double {\n            return compare_one(a: .intValue(a), b: .doubleValue(b))\n        }\n        if b == String {\n            return compare_one(a: .intValue(a), b: .stringValue(b))\n        }\n    }\n    if a == Double {\n        if b == Int {\n            return compare_one(a: .doubleValue(a), b: .intValue(b))\n        }\n        if b == Double {\n            return compare_one(a: .doubleValue(a), b: .doubleValue(b))\n        }\n        if b == String {\n            return compare_one(a: .doubleValue(a), b: .stringValue(b))\n        }\n    }\n    if a == String {\n        if b == Int {\n            return compare_one(a: .stringValue(a), b: .intValue(b))\n        }\n        if b == Double {\n            return compare_one(a: .stringValue(a), b: .doubleValue(b))\n        }\n        if b == String {\n            return compare_one(a: .stringValue(a), b: .stringValue(b))\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp8lua46go.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmp8lua46go.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmp8lua46go.swift:31:10: error: binary operator '==' cannot be applied to operands of type 'Value' and 'Int.Type'\n    if a == Int {\n       ~ ^  ~~~\n/tmp/tmp8lua46go.swift:32:14: error: binary operator '==' cannot be applied to operands of type 'Value' and 'Int.Type'\n        if b == Int {\n           ~ ^  ~~~\n/tmp/tmp8lua46go.swift:33:45: error: cannot convert value of type 'Value' to expected argument type 'Int'\n            return compare_one(a: .intValue(a), b: .intValue(b))\n                                            ^\n/tmp/tmp8lua46go.swift:33:62: error: cannot convert value of type 'Value' to expected argument type 'Int'\n            return compare_one(a: .intValue(a), b: .intValue(b))\n                                                             ^\n/tmp/tmp8lua46go.swift:35:14: error: binary operator '==' cannot be applied to operands of type 'Value' and 'Double.Type'\n        if b == Double {\n           ~ ^  ~~~~~~\n/tmp/tmp8lua46go.swift:36:45: error: cannot convert value of type 'Value' to expected argument type 'Int'\n            return compare_one(a: .intValue(a), b: .doubleValue(b))\n                                            ^\n/tmp/tmp8lua46go.swift:36:65: error: cannot convert value of type 'Value' to expected argument type 'Double'\n            return compare_one(a: .intValue(a), b: .doubleValue(b))\n                                                                ^\n/tmp/tmp8lua46go.swift:38:14: error: binary operator '==' cannot be applied to operands of type 'Value' and 'String.Type'\n        if b == String {\n           ~ ^  ~~~~~~\n/tmp/tmp8lua46go.swift:39:45: error: cannot convert value of type 'Value' to expected argument type 'Int'\n            return compare_one(a: .intValue(a), b: .stringValue(b))\n          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a.intValue(Int) != b.intValue(Int) {\n        return a\n    }\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n        return a\n    }\n    if a.stringValue(String) != b.stringValue(String) {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpxkfuvznw.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpxkfuvznw.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpxkfuvznw.swift:31:19: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n    if a.intValue(Int) != b.intValue(Int) {\n                  ^\n/tmp/tmpxkfuvznw.swift:31:8: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue(Int) != b.intValue(Int) {\n       ^\n       Value\n/tmp/tmpxkfuvznw.swift:31:38: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n    if a.intValue(Int) != b.intValue(Int) {\n                                     ^\n/tmp/tmpxkfuvznw.swift:31:27: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue(Int) != b.intValue(Int) {\n                          ^\n                          Value\n/tmp/tmpxkfuvznw.swift:34:22: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                     ^\n/tmp/tmpxkfuvznw.swift:34:8: error: enum case 'doubleValue' cannot be used as an instance member\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n       ^\n       Value\n/tmp/tmpxkfuvznw.swift:34:47: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                                              ^\n/tmp/tmpxkfuvznw.swift:34:33: error: enum case 'doubleValue' cannot be used as an instance member\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                                ^\n                                Value\n/tmp/tmpxkfuvznw.swift:37:22: error: cannot convert value of type 'String.Type' to expected argument type 'String'\n    if a.stringValue(String) != b.stringValue(String) {\n                     ^\n/tmp/tmpxkfuvznw.swi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case .intValue(Int):\n            switch b {\n                case .intValue(Int):\n                    return nil\n                case .doubleValue(Double):\n                    return .doubleValue(Double)\n                case .stringValue(String):\n                    return .stringValue(String)\n            }\n        case .doubleValue(Double):\n            switch b {\n                case .intValue(Int):\n                    return .intValue(Int)\n                case .doubleValue(Double):\n                    return nil\n                case .stringValue(String):\n                    return .stringValue(String)\n            }\n        case .stringValue(String):\n            switch b {\n                case .intValue(Int):\n                    return .intValue(Int)\n                case .doubleValue(Double):\n                    return .doubleValue(Double)\n                case .stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmphvd_qikw.swift:26:24: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n        case .intValue(Int):\n                       ^~~\n/tmp/tmphvd_qikw.swift:35:27: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n        case .doubleValue(Double):\n                          ^~~~~~\n/tmp/tmphvd_qikw.swift:44:27: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n        case .stringValue(String):\n                          ^\n/tmp/tmphvd_qikw.swift:44:27: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n        case .stringValue(String):\n                          ^\n/tmp/tmphvd_qikw.swift:28:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(Int):\n                               ^~~\n/tmp/tmphvd_qikw.swift:30:35: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n                case .doubleValue(Double):\n                                  ^~~~~~\n/tmp/tmphvd_qikw.swift:32:35: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n                case .stringValue(String):\n                                  ^\n/tmp/tmphvd_qikw.swift:32:35: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n                case .stringValue(String):\n                                  ^\n/tmp/tmphvd_qikw.swift:31:41: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n                    return .doubleValue(Double)\n                                        ^\n/tmp/tmphvd_qikw.swift:33:41: error: cannot convert value of type 'String.Type' to expected argument type 'String'\n                    return .stringValue(String)\n                                        ^\n/tmp/tmphvd_qikw.swift:37:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil || b == nil {\n        return nil\n    }\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpirm767vx/tmpirm767vx.swift:70: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b447bcafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b447b9a6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b447b9a6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b447b9a57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpirm767vx                        0x00005644367a3052 <unavailable> + 8274\n5    libc.so.6                          0x00002b447be9b460 __libc_start_main + 245\n6    tmpirm767vx                        0x00005644367a2499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpnehovn_c.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpnehovn_c.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpnehovn_c.swift:32:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmpnehovn_c.swift:41:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmpnehovn_c.swift:50:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmpnehovn_c.swift:34:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmpnehovn_c.swift:36:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmpnehovn_c.swift:38:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmpnehovn_c.swift:37:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmpnehovn_c.swift:39:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmpnehovn_c.swift:43:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmpnehovn_c.swift:45:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmpnehovn_c.swift:47:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmpnehovn_c.swift:44:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmpnehovn_c.swift:48:28: error: ca",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == intValue(Int) {\n        if b == intValue(Int) {\n            return compare_int(intValue(a), intValue(b))\n        } else if b == doubleValue(Double) {\n            return compare_int(intValue(a), doubleValue(b))\n        } else if b == stringValue(String) {\n            return compare_int(intValue(a), stringValue(b))\n        }\n    } else if a == doubleValue(Double) {\n        if b == intValue(Int) {\n            return compare_double(doubleValue(a), intValue(b))\n        } else if b == doubleValue(Double) {\n            return compare_double(doubleValue(a), doubleValue(b))\n        } else if b == stringValue(String) {\n            return compare_double(doubleValue(a), stringValue(b))\n        }\n    } else if a == stringValue(String) {\n        if b == intValue(Int) {\n            return compare_string(stringValue(a), intValue(b))\n        } else if b == doubleValue(Double) {\n            return compare_string(stringValue(a), doubleValue(b))\n        } else if b == stringValue(String) {\n            return compare_string(stringValue(a), stringValue(b))\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpqs98yt00.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpqs98yt00.swift:28:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpqs98yt00.swift:31:13: error: cannot find 'intValue' in scope\n    if a == intValue(Int) {\n            ^~~~~~~~\n/tmp/tmpqs98yt00.swift:32:17: error: cannot find 'intValue' in scope\n        if b == intValue(Int) {\n                ^~~~~~~~\n/tmp/tmpqs98yt00.swift:33:20: error: cannot find 'compare_int' in scope\n            return compare_int(intValue(a), intValue(b))\n                   ^~~~~~~~~~~\n/tmp/tmpqs98yt00.swift:33:32: error: cannot find 'intValue' in scope\n            return compare_int(intValue(a), intValue(b))\n                               ^~~~~~~~\n/tmp/tmpqs98yt00.swift:33:45: error: cannot find 'intValue' in scope\n            return compare_int(intValue(a), intValue(b))\n                                            ^~~~~~~~\n/tmp/tmpqs98yt00.swift:34:24: error: cannot find 'doubleValue' in scope\n        } else if b == doubleValue(Double) {\n                       ^~~~~~~~~~~\n/tmp/tmpqs98yt00.swift:35:20: error: cannot find 'compare_int' in scope\n            return compare_int(intValue(a), doubleValue(b))\n                   ^~~~~~~~~~~\n/tmp/tmpqs98yt00.swift:35:32: error: cannot find 'intValue' in scope\n            return compare_int(intValue(a), doubleValue(b))\n                               ^~~~~~~~\n/tmp/tmpqs98yt00.swift:35:45: error: cannot find 'doubleValue' in scope\n            return compare_int(intValue(a), doubleValue(b))\n                                            ^~~~~~~~~~~\n/tmp/tmpqs98yt00.swift:36:24: error: cannot find 'stringValue' in scope\n        } else if b == stringValue(String) {\n                       ^~~~~~~~~~~\n/tmp/tmpqs98yt00.swift:37:20: error: cannot find 'compare_int' in scope\n            return compare_int(intValue(a), stringValue(b))\n                   ^~~~~~~~~~~\n/tmp/tmpqs98yt00",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    }\n                    return nil\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    if a.stringValue(String) > b.intValue(Int) {\n                        return stringValue(String)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.stringValue(String) > b.doubleValue(Double) {\n                        return stringValue(String)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.stringValue(String) > b.stringValue(String) {\n                        return stringValue(String)\n                    }\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp44axf8uf.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp44axf8uf.swift:41:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:59:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp44axf8uf.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:35:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:26:40: note: binary operator '>' cannot be synthesized for enums with associated values\n                    if a.intValue(Int) > b.intValue(Int) {\n                                       ^\n/tmp/tmp44axf8uf.swift:26:35: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n                    if a.intValue(Int) > b.intValue(Int) {\n                                  ^\n/tmp/tmp44axf8uf.swift:26:53: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n                    if a.intValue(Int) > b.intValue(Int) {\n                                                    ^\n/tmp/tmp44axf8uf.swift:27:32: error: cannot find 'intValue' in scope\n                        return intValue(Int)\n                               ^~~~~~~~\n/tmp/tmp44axf8uf.swift:31:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~\n/tmp/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == intValue(Int) {\n        if b == intValue(Int) {\n            return compare_int(intValue(a), intValue(b))\n        }\n        if b == doubleValue(Double) {\n            return compare_int(intValue(a), doubleValue(b))\n        }\n        if b == stringValue(String) {\n            return compare_int(intValue(a), stringValue(b))\n        }\n    }\n    if a == doubleValue(Double) {\n        if b == intValue(Int) {\n            return compare_double(doubleValue(a), intValue(b))\n        }\n        if b == doubleValue(Double) {\n            return compare_double(doubleValue(a), doubleValue(b))\n        }\n        if b == stringValue(String) {\n            return compare_double(doubleValue(a), stringValue(b))\n        }\n    }\n    if a == stringValue(String) {\n        if b == intValue(Int) {\n            return compare_string(stringValue(a), intValue(b))\n        }\n        if b == doubleValue(Double) {\n            return compare_string(stringValue(a), doubleValue(b))\n        }\n        if b == stringValue(String) {\n            return compare_string(stringValue(a), stringValue(b))\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpagnz9kfk.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpagnz9kfk.swift:28:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpagnz9kfk.swift:31:13: error: cannot find 'intValue' in scope\n    if a == intValue(Int) {\n            ^~~~~~~~\n/tmp/tmpagnz9kfk.swift:32:17: error: cannot find 'intValue' in scope\n        if b == intValue(Int) {\n                ^~~~~~~~\n/tmp/tmpagnz9kfk.swift:33:20: error: cannot find 'compare_int' in scope\n            return compare_int(intValue(a), intValue(b))\n                   ^~~~~~~~~~~\n/tmp/tmpagnz9kfk.swift:33:32: error: cannot find 'intValue' in scope\n            return compare_int(intValue(a), intValue(b))\n                               ^~~~~~~~\n/tmp/tmpagnz9kfk.swift:33:45: error: cannot find 'intValue' in scope\n            return compare_int(intValue(a), intValue(b))\n                                            ^~~~~~~~\n/tmp/tmpagnz9kfk.swift:35:17: error: cannot find 'doubleValue' in scope\n        if b == doubleValue(Double) {\n                ^~~~~~~~~~~\n/tmp/tmpagnz9kfk.swift:36:20: error: cannot find 'compare_int' in scope\n            return compare_int(intValue(a), doubleValue(b))\n                   ^~~~~~~~~~~\n/tmp/tmpagnz9kfk.swift:36:32: error: cannot find 'intValue' in scope\n            return compare_int(intValue(a), doubleValue(b))\n                               ^~~~~~~~\n/tmp/tmpagnz9kfk.swift:36:45: error: cannot find 'doubleValue' in scope\n            return compare_int(intValue(a), doubleValue(b))\n                                            ^~~~~~~~~~~\n/tmp/tmpagnz9kfk.swift:38:17: error: cannot find 'stringValue' in scope\n        if b == stringValue(String) {\n                ^~~~~~~~~~~\n/tmp/tmpagnz9kfk.swift:39:20: error: cannot find 'compare_int' in scope\n            return compare_int(intValue(a), stringValue(b))\n                   ^~~~~~~~~~~\n/tmp/tmpagnz9kfk.swift:39:32: error: cannot ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil || b == nil {\n        return nil\n    }\n    switch a := a.(type) {\n    case intValue:\n        switch b := b.(type) {\n        case intValue:\n            if a > b {\n                return intValue(1)\n            } else if a < b {\n                return intValue(-1)\n            } else {\n                return nil\n            }\n        case doubleValue:\n            if a > b {\n                return doubleValue(1)\n            } else if a < b {\n                return doubleValue(-1)\n            } else {\n                return nil\n            }\n        case stringValue:\n            if a > b {\n                return stringValue(1)\n            } else if a < b {\n                return stringValue(-1)\n            } else {\n                return nil\n            }\n        }\n    case doubleValue:\n        switch b := b.(type) {\n        case intValue:\n            if a > b {\n                return doubleValue(1)\n            } else if a < b {\n                return doubleValue(-1)\n            } else {\n                return nil\n            }\n        case doubleValue:\n            if a > b {\n                return doubleValue(1)\n            } else if a < b {\n                return doubleValue(-1)\n            } else {\n                return nil\n            }\n        case stringValue:\n            if a > b {\n                return stringValue(1)\n            } else if a < b {\n                return stringValue(-1)\n            } else {\n                return nil\n            }\n        }\n    case stringValue:\n        switch b := b.(type) {\n        case intValue:\n            if a > b {\n                return stringValue(1)\n            } else if a < b {\n                return stringValue(-1)\n            } else {\n                return nil\n            }\n        case doubleValue:\n            if a > b {\n                return stringValue(1)\n            } else if a < b {\n                return stringValue(-1)\n            } else {\n                return nil\n            }\n        case stringValue:\n            if a > b {\n                return stringValue(1)\n            } else if a < b {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmph7gurmwq.swift:25:14: error: expected '{' after 'switch' subject expression\n    switch a := a.(type) {\n             ^\n/tmp/tmph7gurmwq.swift:25:13: error: consecutive statements on a line must be separated by ';'\n    switch a := a.(type) {\n            ^\n            ;\n/tmp/tmph7gurmwq.swift:25:14: error: expected expression\n    switch a := a.(type) {\n             ^\n/tmp/tmph7gurmwq.swift:125:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmph7gurmwq.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmph7gurmwq.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil || b == nil {\n       ~ ^  ~~~\n/tmp/tmph7gurmwq.swift:22:22: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil || b == nil {\n                   ~ ^  ~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return compare_one(a: .intValue(1), b: .intValue(2))\n                case doubleValue(Double):\n                    return compare_one(a: .intValue(1), b: .doubleValue(2.5))\n                case stringValue(String):\n                    return compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return compare_one(a: .doubleValue(2.5), b: .intValue(1))\n                case doubleValue(Double):\n                    return compare_one(a: .doubleValue(2.5), b: .doubleValue(2.5))\n                case stringValue(String):\n                    return compare_one(a: .doubleValue(2.5), b: .stringValue(\"2,3\"))\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return compare_one(a: .stringValue(\"2,3\"), b: .intValue(1))\n                case doubleValue(Double):\n                    return compare_one(a: .stringValue(\"2,3\"), b: .doubleValue(2.5))\n                case stringValue(String):\n                    return compare_one(a: .stringValue(\"2,3\"), b: .stringValue(\"2,3\"))\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmptyhzdi92.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmptyhzdi92.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmptyhzdi92.swift:32:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmptyhzdi92.swift:41:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmptyhzdi92.swift:50:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmptyhzdi92.swift:34:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmptyhzdi92.swift:36:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmptyhzdi92.swift:38:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmptyhzdi92.swift:43:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmptyhzdi92.swift:45:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmptyhzdi92.swift:47:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmptyhzdi92.swift:52:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmptyhzdi92.swift:54:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmptyhzdi92.swift:56:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp1ezwrjut.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp1ezwrjut.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmp1ezwrjut.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp1ezwrjut.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp1ezwrjut.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp1ezwrjut.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp1ezwrjut.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmp1ezwrjut.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp1ezwrjut.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp1ezwrjut.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp1ezwrjut.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp1ezwrjut.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmp1ezwrjut.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp1ezwrjut.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp1ezwrjut.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp9323hqdx.swift:26:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp9323hqdx.swift:35:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:44:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:28:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:32:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:31:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:33:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:37:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:39:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:38:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:42:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:46:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:48:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return compare_int_int(a, b)\n                case doubleValue(Double):\n                    return compare_int_double(a, b)\n                case stringValue(String):\n                    return compare_int_string(a, b)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return compare_double_int(a, b)\n                case doubleValue(Double):\n                    return compare_double_double(a, b)\n                case stringValue(String):\n                    return compare_double_string(a, b)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return compare_string_int(a, b)\n                case doubleValue(Double):\n                    return compare_string_double(a, b)\n                case stringValue(String):\n                    return compare_string_string(a, b)\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmph7tvf8dk.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmph7tvf8dk.swift:32:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmph7tvf8dk.swift:41:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmph7tvf8dk.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmph7tvf8dk.swift:27:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmph7tvf8dk.swift:29:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmph7tvf8dk.swift:26:28: error: cannot find 'compare_int_int' in scope\n                    return compare_int_int(a, b)\n                           ^~~~~~~~~~~~~~~\n/tmp/tmph7tvf8dk.swift:28:28: error: cannot find 'compare_int_double' in scope\n                    return compare_int_double(a, b)\n                           ^~~~~~~~~~~~~~~~~~\n/tmp/tmph7tvf8dk.swift:30:28: error: cannot find 'compare_int_string' in scope\n                    return compare_int_string(a, b)\n                           ^~~~~~~~~~~~~~~~~~\n/tmp/tmph7tvf8dk.swift:34:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmph7tvf8dk.swift:36:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmph7tvf8dk.swift:38:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmph7tvf8dk.swift:35:28: error: cannot find 'compare_double_int' in scope\n                    return compare_double_int(a, b)\n                           ^~~~~~~~~~~~~~~~~~\n/tmp/tmph7tvf8dk.swift:37:28: error: cannot find 'compare_double_double' in scope\n                    return c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp9323hqdx.swift:26:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp9323hqdx.swift:35:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:44:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:28:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:32:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:31:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:33:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:37:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:39:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:38:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:42:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:46:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:48:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp1ezwrjut.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp1ezwrjut.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmp1ezwrjut.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp1ezwrjut.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp1ezwrjut.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp1ezwrjut.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp1ezwrjut.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmp1ezwrjut.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp1ezwrjut.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp1ezwrjut.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil || b == nil {\n        return nil\n    }\n    switch a := a.(type) {\n        case intValue(Int):\n            switch b := b.(type) {\n                case intValue(Int):\n                    if a.value < b.value {\n                        return intValue(Int)\n                    }\n                    if a.value > b.value {\n                        return intValue(Int)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.value < b.value {\n                        return intValue(Int)\n                    }\n                    if a.value > b.value {\n                        return intValue(Int)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.value < b.value {\n                        return intValue(Int)\n                    }\n                    if a.value > b.value {\n                        return intValue(Int)\n                    }\n                    return nil\n            }\n        case doubleValue(Double):\n            switch b := b.(type) {\n                case intValue(Int):\n                    if a.value < b.value {\n                        return doubleValue(Double)\n                    }\n                    if a.value > b.value {\n                        return doubleValue(Double)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.value < b.value {\n                        return doubleValue(Double)\n                    }\n                    if a.value > b.value {\n                        return doubleValue(Double)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.value < b.value {\n                        return doubleValue(Double)\n                    }\n                    if a.value > b.value {\n                        return doubleValue(Double)\n                    }\n                    return nil\n            }\n        case stringValue(String):\n            switch b := b.(type) {\n                case intValue(Int):\n                    if a.value < b.value {\n                        return stringValue(String)\n                    }\n                    if a.value > b.value {\n                        return stringValue(String)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.value < b.value {\n                        return stringValue(String)\n                    }\n                    if\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp8_vjj4oj.swift:25:14: error: expected '{' after 'switch' subject expression\n    switch a := a.(type) {\n             ^\n/tmp/tmp8_vjj4oj.swift:25:13: error: consecutive statements on a line must be separated by ';'\n    switch a := a.(type) {\n            ^\n            ;\n/tmp/tmp8_vjj4oj.swift:25:14: error: expected expression\n    switch a := a.(type) {\n             ^\n/tmp/tmp8_vjj4oj.swift:117:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp8_vjj4oj.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp8_vjj4oj.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil || b == nil {\n       ~ ^  ~~~\n/tmp/tmp8_vjj4oj.swift:22:22: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil || b == nil {\n                   ~ ^  ~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return compare_two(a: .intValue(1), b: .intValue(2))\n                case doubleValue(Double):\n                    return compare_two(a: .intValue(1), b: .doubleValue(2.5))\n                case stringValue(String):\n                    return compare_two(a: .intValue(1), b: .stringValue(\"2,3\"))\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return compare_two(a: .doubleValue(1), b: .intValue(2))\n                case doubleValue(Double):\n                    return compare_two(a: .doubleValue(1), b: .doubleValue(2.5))\n                case stringValue(String):\n                    return compare_two(a: .doubleValue(1), b: .stringValue(\"2,3\"))\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return compare_two(a: .stringValue(\"1\"), b: .intValue(2))\n                case doubleValue(Double):\n                    return compare_two(a: .stringValue(\"1\"), b: .doubleValue(2.5))\n                case stringValue(String):\n                    return compare_two(a: .stringValue(\"1\"), b: .stringValue(\"2,3\"))\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmptvj_3y1_.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmptvj_3y1_.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmptvj_3y1_.swift:32:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmptvj_3y1_.swift:41:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmptvj_3y1_.swift:50:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmptvj_3y1_.swift:34:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmptvj_3y1_.swift:36:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmptvj_3y1_.swift:38:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmptvj_3y1_.swift:35:28: error: cannot find 'compare_two' in scope\n                    return compare_two(a: .intValue(1), b: .intValue(2))\n                           ^~~~~~~~~~~\n/tmp/tmptvj_3y1_.swift:35:44: error: cannot infer contextual base in reference to member 'intValue'\n                    return compare_two(a: .intValue(1), b: .intValue(2))\n                                          ~^~~~~~~~\n/tmp/tmptvj_3y1_.swift:35:61: error: cannot infer contextual base in reference to member 'intValue'\n                    return compare_two(a: .intValue(1), b: .intValue(2))\n                                                           ~^~~~~~~~\n/tmp/tmptvj_3y1_.swift:37:28: error: cannot find 'compare_two' in scope\n                    return compare_two(a: .intValue(1), b: .doubleValue(2.5))\n                           ^~~~~~~~~~~\n/tmp/tmptvj_3y1_.swift:37:44: error: cannot infer contextual base in reference to member 'intValue'\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp1ezwrjut.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp1ezwrjut.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmp1ezwrjut.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp1ezwrjut.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp1ezwrjut.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == intValue(Int) {\n        if b == intValue(Int) {\n            return nil\n        }\n        return b\n    }\n    if a == doubleValue(Double) {\n        if b == doubleValue(Double) {\n            return nil\n        }\n        return b\n    }\n    if a == stringValue(String) {\n        if b == stringValue(String) {\n            return nil\n        }\n        return b\n    }\n    panic(\"compare_one: invalid value type\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpkitj23hj.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpkitj23hj.swift:28:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpkitj23hj.swift:31:13: error: cannot find 'intValue' in scope\n    if a == intValue(Int) {\n            ^~~~~~~~\n/tmp/tmpkitj23hj.swift:32:17: error: cannot find 'intValue' in scope\n        if b == intValue(Int) {\n                ^~~~~~~~\n/tmp/tmpkitj23hj.swift:37:13: error: cannot find 'doubleValue' in scope\n    if a == doubleValue(Double) {\n            ^~~~~~~~~~~\n/tmp/tmpkitj23hj.swift:38:17: error: cannot find 'doubleValue' in scope\n        if b == doubleValue(Double) {\n                ^~~~~~~~~~~\n/tmp/tmpkitj23hj.swift:43:13: error: cannot find 'stringValue' in scope\n    if a == stringValue(String) {\n            ^~~~~~~~~~~\n/tmp/tmpkitj23hj.swift:44:17: error: cannot find 'stringValue' in scope\n        if b == stringValue(String) {\n                ^~~~~~~~~~~\n/tmp/tmpkitj23hj.swift:49:5: error: cannot find 'panic' in scope\n    panic(\"compare_one: invalid value type\")\n    ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a.intValue() > b.intValue() {\n        return a\n    }\n    if a.intValue() < b.intValue() {\n        return b\n    }\n    if a.doubleValue() > b.doubleValue() {\n        return a\n    }\n    if a.doubleValue() < b.doubleValue() {\n        return b\n    }\n    if a.stringValue() > b.stringValue() {\n        return a\n    }\n    if a.stringValue() < b.stringValue() {\n        return b\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpavknu8jo.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpavknu8jo.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpavknu8jo.swift:31:19: error: missing argument for parameter #1 in call\n    if a.intValue() > b.intValue() {\n                  ^\n                  <#Int#>\n/tmp/tmpavknu8jo.swift:3:10: note: 'intValue' declared here\n    case intValue(Int)\n         ^\n/tmp/tmpavknu8jo.swift:31:8: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue() > b.intValue() {\n       ^\n       Value\n/tmp/tmpavknu8jo.swift:31:21: error: referencing operator function '>' on 'Comparable' requires that 'Value' conform to 'Comparable'\n    if a.intValue() > b.intValue() {\n                    ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol Comparable : Equatable {\n                ^\n/tmp/tmpavknu8jo.swift:31:21: note: binary operator '>' cannot be synthesized for enums with associated values\n    if a.intValue() > b.intValue() {\n                    ^\n/tmp/tmpavknu8jo.swift:31:23: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue() > b.intValue() {\n                      ^\n                      Value\n/tmp/tmpavknu8jo.swift:31:34: error: missing argument for parameter #1 in call\n    if a.intValue() > b.intValue() {\n                                 ^\n                                 <#Int#>\n/tmp/tmpavknu8jo.swift:3:10: note: 'intValue' declared here\n    case intValue(Int)\n         ^\n/tmp/tmpavknu8jo.swift:34:8: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue() < b.intValue() {\n       ^\n       Value\n/tmp/tmpavknu8jo.swift:34:19: error: missing argument for parameter #1 in call\n    if a.intValue() < b.intValue() {\n                  ^\n                  <#Int#>\n/tmp/tmpavknu8jo.swift:3:10: note: 'intValue' declared here\n    case intValue(Int)\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a == intValue(Int) {\n        if b == intValue(Int) {\n            return compare_one(a: .intValue(1), b: .intValue(2))\n        }\n        return b\n    }\n    if a == doubleValue(Double) {\n        if b == doubleValue(Double) {\n            return compare_one(a: .doubleValue(1.0), b: .doubleValue(2.5))\n        }\n        return b\n    }\n    if a == stringValue(String) {\n        if b == stringValue(String) {\n            return compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2,3\"))\n        }\n        return b\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpugtczx72.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpugtczx72.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpugtczx72.swift:31:13: error: cannot find 'intValue' in scope\n    if a == intValue(Int) {\n            ^~~~~~~~\n/tmp/tmpugtczx72.swift:32:17: error: cannot find 'intValue' in scope\n        if b == intValue(Int) {\n                ^~~~~~~~\n/tmp/tmpugtczx72.swift:37:13: error: cannot find 'doubleValue' in scope\n    if a == doubleValue(Double) {\n            ^~~~~~~~~~~\n/tmp/tmpugtczx72.swift:38:17: error: cannot find 'doubleValue' in scope\n        if b == doubleValue(Double) {\n                ^~~~~~~~~~~\n/tmp/tmpugtczx72.swift:43:13: error: cannot find 'stringValue' in scope\n    if a == stringValue(String) {\n            ^~~~~~~~~~~\n/tmp/tmpugtczx72.swift:44:17: error: cannot find 'stringValue' in scope\n        if b == stringValue(String) {\n                ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == intValue(Int) {\n        if b == intValue(Int) {\n            return compare_one(a: .intValue(a), b: .intValue(b))\n        }\n        return b\n    }\n    if a == doubleValue(Double) {\n        if b == doubleValue(Double) {\n            return compare_one(a: .doubleValue(a), b: .doubleValue(b))\n        }\n        return b\n    }\n    if a == stringValue(String) {\n        if b == stringValue(String) {\n            return compare_one(a: .stringValue(a), b: .stringValue(b))\n        }\n        return b\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpijrw5qgu.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpijrw5qgu.swift:28:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpijrw5qgu.swift:31:13: error: cannot find 'intValue' in scope\n    if a == intValue(Int) {\n            ^~~~~~~~\n/tmp/tmpijrw5qgu.swift:32:17: error: cannot find 'intValue' in scope\n        if b == intValue(Int) {\n                ^~~~~~~~\n/tmp/tmpijrw5qgu.swift:33:45: error: cannot convert value of type 'Value' to expected argument type 'Int'\n            return compare_one(a: .intValue(a), b: .intValue(b))\n                                            ^\n/tmp/tmpijrw5qgu.swift:33:62: error: cannot convert value of type 'Value' to expected argument type 'Int'\n            return compare_one(a: .intValue(a), b: .intValue(b))\n                                                             ^\n/tmp/tmpijrw5qgu.swift:37:13: error: cannot find 'doubleValue' in scope\n    if a == doubleValue(Double) {\n            ^~~~~~~~~~~\n/tmp/tmpijrw5qgu.swift:38:17: error: cannot find 'doubleValue' in scope\n        if b == doubleValue(Double) {\n                ^~~~~~~~~~~\n/tmp/tmpijrw5qgu.swift:39:48: error: cannot convert value of type 'Value' to expected argument type 'Double'\n            return compare_one(a: .doubleValue(a), b: .doubleValue(b))\n                                               ^\n/tmp/tmpijrw5qgu.swift:39:68: error: cannot convert value of type 'Value' to expected argument type 'Double'\n            return compare_one(a: .doubleValue(a), b: .doubleValue(b))\n                                                                   ^\n/tmp/tmpijrw5qgu.swift:43:13: error: cannot find 'stringValue' in scope\n    if a == stringValue(String) {\n            ^~~~~~~~~~~\n/tmp/tmpijrw5qgu.swift:44:17: error: cannot find 'stringValue' in scope\n        if b == stringValue(String) {\n                ^~~~~~~~~~~\n/tmp/tmpijrw5qgu.swift:45:48: error: cannot",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a == intValue(Int) {\n        if b == intValue(Int) {\n            return compare_int(a, b)\n        } else if b == doubleValue(Double) {\n            return compare_int(a, b)\n        } else if b == stringValue(String) {\n            return compare_int(a, b)\n        }\n    } else if a == doubleValue(Double) {\n        if b == intValue(Int) {\n            return compare_double(a, b)\n        } else if b == doubleValue(Double) {\n            return compare_double(a, b)\n        } else if b == stringValue(String) {\n            return compare_double(a, b)\n        }\n    } else if a == stringValue(String) {\n        if b == intValue(Int) {\n            return compare_string(a, b)\n        } else if b == doubleValue(Double) {\n            return compare_string(a, b)\n        } else if b == stringValue(String) {\n            return compare_string(a, b)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpx2aesezj.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpx2aesezj.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpx2aesezj.swift:31:13: error: cannot find 'intValue' in scope\n    if a == intValue(Int) {\n            ^~~~~~~~\n/tmp/tmpx2aesezj.swift:32:17: error: cannot find 'intValue' in scope\n        if b == intValue(Int) {\n                ^~~~~~~~\n/tmp/tmpx2aesezj.swift:33:20: error: cannot find 'compare_int' in scope\n            return compare_int(a, b)\n                   ^~~~~~~~~~~\n/tmp/tmpx2aesezj.swift:34:24: error: cannot find 'doubleValue' in scope\n        } else if b == doubleValue(Double) {\n                       ^~~~~~~~~~~\n/tmp/tmpx2aesezj.swift:35:20: error: cannot find 'compare_int' in scope\n            return compare_int(a, b)\n                   ^~~~~~~~~~~\n/tmp/tmpx2aesezj.swift:36:24: error: cannot find 'stringValue' in scope\n        } else if b == stringValue(String) {\n                       ^~~~~~~~~~~\n/tmp/tmpx2aesezj.swift:37:20: error: cannot find 'compare_int' in scope\n            return compare_int(a, b)\n                   ^~~~~~~~~~~\n/tmp/tmpx2aesezj.swift:39:20: error: cannot find 'doubleValue' in scope\n    } else if a == doubleValue(Double) {\n                   ^~~~~~~~~~~\n/tmp/tmpx2aesezj.swift:40:17: error: cannot find 'intValue' in scope\n        if b == intValue(Int) {\n                ^~~~~~~~\n/tmp/tmpx2aesezj.swift:41:20: error: cannot find 'compare_double' in scope\n            return compare_double(a, b)\n                   ^~~~~~~~~~~~~~\n/tmp/tmpx2aesezj.swift:42:24: error: cannot find 'doubleValue' in scope\n        } else if b == doubleValue(Double) {\n                       ^~~~~~~~~~~\n/tmp/tmpx2aesezj.swift:43:20: error: cannot find 'compare_double' in scope\n            return compare_double(a, b)\n                   ^~~~~~~~~~~~~~\n/tmp/tmpx2aesezj.swift:44:24: error: cannot find 'stringValue' i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp9323hqdx.swift:26:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp9323hqdx.swift:35:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:44:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:28:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:32:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:31:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:33:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:37:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:39:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:38:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:42:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:46:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:48:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case .intValue(Int):\n            switch b {\n                case .intValue(Int):\n                    return nil\n                case .doubleValue(Double):\n                    return .doubleValue(Double)\n                case .stringValue(String):\n                    return .stringValue(String)\n            }\n        case .doubleValue(Double):\n            switch b {\n                case .intValue(Int):\n                    return .intValue(Int)\n                case .doubleValue(Double):\n                    return nil\n                case .stringValue(String):\n                    return .stringValue(String)\n            }\n        case .stringValue(String):\n            switch b {\n                case .intValue(Int):\n                    return .intValue(Int)\n                case .doubleValue(Double):\n                    return .doubleValue(Double)\n                case .stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmphvd_qikw.swift:26:24: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n        case .intValue(Int):\n                       ^~~\n/tmp/tmphvd_qikw.swift:35:27: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n        case .doubleValue(Double):\n                          ^~~~~~\n/tmp/tmphvd_qikw.swift:44:27: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n        case .stringValue(String):\n                          ^\n/tmp/tmphvd_qikw.swift:44:27: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n        case .stringValue(String):\n                          ^\n/tmp/tmphvd_qikw.swift:28:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(Int):\n                               ^~~\n/tmp/tmphvd_qikw.swift:30:35: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n                case .doubleValue(Double):\n                                  ^~~~~~\n/tmp/tmphvd_qikw.swift:32:35: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n                case .stringValue(String):\n                                  ^\n/tmp/tmphvd_qikw.swift:32:35: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n                case .stringValue(String):\n                                  ^\n/tmp/tmphvd_qikw.swift:31:41: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n                    return .doubleValue(Double)\n                                        ^\n/tmp/tmphvd_qikw.swift:33:41: error: cannot convert value of type 'String.Type' to expected argument type 'String'\n                    return .stringValue(String)\n                                        ^\n/tmp/tmphvd_qikw.swift:37:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    }\n                    return nil\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    if a.stringValue(String) > b.intValue(Int) {\n                        return stringValue(String)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.stringValue(String) > b.doubleValue(Double) {\n                        return stringValue(String)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.stringValue(String) > b.stringValue(String) {\n                        return stringValue(String)\n                    }\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp44axf8uf.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp44axf8uf.swift:41:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:59:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp44axf8uf.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:35:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:26:40: note: binary operator '>' cannot be synthesized for enums with associated values\n                    if a.intValue(Int) > b.intValue(Int) {\n                                       ^\n/tmp/tmp44axf8uf.swift:26:35: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n                    if a.intValue(Int) > b.intValue(Int) {\n                                  ^\n/tmp/tmp44axf8uf.swift:26:53: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n                    if a.intValue(Int) > b.intValue(Int) {\n                                                    ^\n/tmp/tmp44axf8uf.swift:27:32: error: cannot find 'intValue' in scope\n                        return intValue(Int)\n                               ^~~~~~~~\n/tmp/tmp44axf8uf.swift:31:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~\n/tmp/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil || b == nil {\n        return nil\n    }\n    switch a := a.(type) {\n    case intValue(Int):\n        switch b := b.(type) {\n        case intValue(Int):\n            if a.value < b.value {\n                return intValue(Int(1))\n            } else if a.value > b.value {\n                return intValue(Int(-1))\n            } else {\n                return nil\n            }\n        case doubleValue(Double):\n            if a.value < b.value {\n                return intValue(Int(1))\n            } else if a.value > b.value {\n                return intValue(Int(-1))\n            } else {\n                return nil\n            }\n        case stringValue(String):\n            if a.value < b.value {\n                return intValue(Int(1))\n            } else if a.value > b.value {\n                return intValue(Int(-1))\n            } else {\n                return nil\n            }\n        }\n    case doubleValue(Double):\n        switch b := b.(type) {\n        case intValue(Int):\n            if a.value < b.value {\n                return intValue(Int(1))\n            } else if a.value > b.value {\n                return intValue(Int(-1))\n            } else {\n                return nil\n            }\n        case doubleValue(Double):\n            if a.value < b.value {\n                return intValue(Int(1))\n            } else if a.value > b.value {\n                return intValue(Int(-1))\n            } else {\n                return nil\n            }\n        case stringValue(String):\n            if a.value < b.value {\n                return intValue(Int(1))\n            } else if a.value > b.value {\n                return intValue(Int(-1))\n            } else {\n                return nil\n            }\n        }\n    case stringValue(String):\n        switch b := b.(type) {\n        case intValue(Int):\n            if a.value < b.value {\n                return intValue(Int(1))\n            } else if a.value > b.value\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpei9qmlm4.swift:25:14: error: expected '{' after 'switch' subject expression\n    switch a := a.(type) {\n             ^\n/tmp/tmpei9qmlm4.swift:25:13: error: consecutive statements on a line must be separated by ';'\n    switch a := a.(type) {\n            ^\n            ;\n/tmp/tmpei9qmlm4.swift:25:14: error: expected expression\n    switch a := a.(type) {\n             ^\n/tmp/tmpei9qmlm4.swift:108:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmpei9qmlm4.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmpei9qmlm4.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil || b == nil {\n       ~ ^  ~~~\n/tmp/tmpei9qmlm4.swift:22:22: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil || b == nil {\n                   ~ ^  ~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return compare_one(a: .intValue(Int), b: .intValue(Int))\n                case doubleValue(Double):\n                    return compare_one(a: .intValue(Int), b: .doubleValue(Double))\n                case stringValue(String):\n                    return compare_one(a: .intValue(Int), b: .stringValue(String))\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return compare_one(a: .doubleValue(Double), b: .intValue(Int))\n                case doubleValue(Double):\n                    return compare_one(a: .doubleValue(Double), b: .doubleValue(Double))\n                case stringValue(String):\n                    return compare_one(a: .doubleValue(Double), b: .stringValue(String))\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return compare_one(a: .stringValue(String), b: .intValue(Int))\n                case doubleValue(Double):\n                    return compare_one(a: .stringValue(String), b: .doubleValue(Double))\n                case stringValue(String):\n                    return compare_one(a: .stringValue(String), b: .stringValue(String))\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpx6q6ty1y.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpx6q6ty1y.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpx6q6ty1y.swift:32:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmpx6q6ty1y.swift:41:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmpx6q6ty1y.swift:50:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmpx6q6ty1y.swift:34:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmpx6q6ty1y.swift:36:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmpx6q6ty1y.swift:38:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmpx6q6ty1y.swift:35:53: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n                    return compare_one(a: .intValue(Int), b: .intValue(Int))\n                                                    ^\n/tmp/tmpx6q6ty1y.swift:35:72: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n                    return compare_one(a: .intValue(Int), b: .intValue(Int))\n                                                                       ^\n/tmp/tmpx6q6ty1y.swift:37:53: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n                    return compare_one(a: .intValue(Int), b: .doubleValue(Double))\n                                                    ^\n/tmp/tmpx6q6ty1y.swift:37:75: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n                    return compare_one(a: .intValue(Int), b: .doubleValue(Double))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp7ypa5qr8.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:32:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:41:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:27:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:29:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:28:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:30:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:34:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:36:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:38:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:35:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:39:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:43:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:45:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp1ezwrjut.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp1ezwrjut.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmp1ezwrjut.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp1ezwrjut.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp1ezwrjut.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a.intValue(Int) != b.intValue(Int) {\n        return a\n    }\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n        return a\n    }\n    if a.stringValue(String) != b.stringValue(String) {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpxkfuvznw.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpxkfuvznw.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpxkfuvznw.swift:31:19: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n    if a.intValue(Int) != b.intValue(Int) {\n                  ^\n/tmp/tmpxkfuvznw.swift:31:8: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue(Int) != b.intValue(Int) {\n       ^\n       Value\n/tmp/tmpxkfuvznw.swift:31:38: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n    if a.intValue(Int) != b.intValue(Int) {\n                                     ^\n/tmp/tmpxkfuvznw.swift:31:27: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue(Int) != b.intValue(Int) {\n                          ^\n                          Value\n/tmp/tmpxkfuvznw.swift:34:22: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                     ^\n/tmp/tmpxkfuvznw.swift:34:8: error: enum case 'doubleValue' cannot be used as an instance member\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n       ^\n       Value\n/tmp/tmpxkfuvznw.swift:34:47: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                                              ^\n/tmp/tmpxkfuvznw.swift:34:33: error: enum case 'doubleValue' cannot be used as an instance member\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                                ^\n                                Value\n/tmp/tmpxkfuvznw.swift:37:22: error: cannot convert value of type 'String.Type' to expected argument type 'String'\n    if a.stringValue(String) != b.stringValue(String) {\n                     ^\n/tmp/tmpxkfuvznw.swi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a.intValue(Int) != b.intValue(Int) {\n        return a\n    }\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n        return a\n    }\n    if a.stringValue(String) != b.stringValue(String) {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpxkfuvznw.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpxkfuvznw.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpxkfuvznw.swift:31:19: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n    if a.intValue(Int) != b.intValue(Int) {\n                  ^\n/tmp/tmpxkfuvznw.swift:31:8: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue(Int) != b.intValue(Int) {\n       ^\n       Value\n/tmp/tmpxkfuvznw.swift:31:38: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n    if a.intValue(Int) != b.intValue(Int) {\n                                     ^\n/tmp/tmpxkfuvznw.swift:31:27: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue(Int) != b.intValue(Int) {\n                          ^\n                          Value\n/tmp/tmpxkfuvznw.swift:34:22: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                     ^\n/tmp/tmpxkfuvznw.swift:34:8: error: enum case 'doubleValue' cannot be used as an instance member\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n       ^\n       Value\n/tmp/tmpxkfuvznw.swift:34:47: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                                              ^\n/tmp/tmpxkfuvznw.swift:34:33: error: enum case 'doubleValue' cannot be used as an instance member\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                                ^\n                                Value\n/tmp/tmpxkfuvznw.swift:37:22: error: cannot convert value of type 'String.Type' to expected argument type 'String'\n    if a.stringValue(String) != b.stringValue(String) {\n                     ^\n/tmp/tmpxkfuvznw.swi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp7ypa5qr8.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:32:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:41:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:27:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:29:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:28:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:30:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:34:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:36:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:38:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:35:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:39:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:43:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:45:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp9323hqdx.swift:26:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp9323hqdx.swift:35:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:44:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:28:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:32:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:31:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:33:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:37:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:39:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:38:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:42:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:46:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:48:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == intValue(Int) {\n        if b == intValue(Int) {\n            return compare_one(a: .intValue(a), b: .intValue(b))\n        }\n        return b\n    }\n    if a == doubleValue(Double) {\n        if b == doubleValue(Double) {\n            return compare_one(a: .doubleValue(a), b: .doubleValue(b))\n        }\n        return b\n    }\n    if a == stringValue(String) {\n        if b == stringValue(String) {\n            return compare_one(a: .stringValue(a), b: .stringValue(b))\n        }\n        return b\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpijrw5qgu.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpijrw5qgu.swift:28:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpijrw5qgu.swift:31:13: error: cannot find 'intValue' in scope\n    if a == intValue(Int) {\n            ^~~~~~~~\n/tmp/tmpijrw5qgu.swift:32:17: error: cannot find 'intValue' in scope\n        if b == intValue(Int) {\n                ^~~~~~~~\n/tmp/tmpijrw5qgu.swift:33:45: error: cannot convert value of type 'Value' to expected argument type 'Int'\n            return compare_one(a: .intValue(a), b: .intValue(b))\n                                            ^\n/tmp/tmpijrw5qgu.swift:33:62: error: cannot convert value of type 'Value' to expected argument type 'Int'\n            return compare_one(a: .intValue(a), b: .intValue(b))\n                                                             ^\n/tmp/tmpijrw5qgu.swift:37:13: error: cannot find 'doubleValue' in scope\n    if a == doubleValue(Double) {\n            ^~~~~~~~~~~\n/tmp/tmpijrw5qgu.swift:38:17: error: cannot find 'doubleValue' in scope\n        if b == doubleValue(Double) {\n                ^~~~~~~~~~~\n/tmp/tmpijrw5qgu.swift:39:48: error: cannot convert value of type 'Value' to expected argument type 'Double'\n            return compare_one(a: .doubleValue(a), b: .doubleValue(b))\n                                               ^\n/tmp/tmpijrw5qgu.swift:39:68: error: cannot convert value of type 'Value' to expected argument type 'Double'\n            return compare_one(a: .doubleValue(a), b: .doubleValue(b))\n                                                                   ^\n/tmp/tmpijrw5qgu.swift:43:13: error: cannot find 'stringValue' in scope\n    if a == stringValue(String) {\n            ^~~~~~~~~~~\n/tmp/tmpijrw5qgu.swift:44:17: error: cannot find 'stringValue' in scope\n        if b == stringValue(String) {\n                ^~~~~~~~~~~\n/tmp/tmpijrw5qgu.swift:45:48: error: cannot",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp9323hqdx.swift:26:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp9323hqdx.swift:35:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:44:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:28:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:32:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:31:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:33:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:37:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:39:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:38:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:42:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:46:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:48:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case .intValue(Int):\n            switch b {\n                case .intValue(Int):\n                    return nil\n                case .doubleValue(Double):\n                    return .doubleValue(Double)\n                case .stringValue(String):\n                    return .stringValue(String)\n            }\n        case .doubleValue(Double):\n            switch b {\n                case .intValue(Int):\n                    return .intValue(Int)\n                case .doubleValue(Double):\n                    return nil\n                case .stringValue(String):\n                    return .stringValue(String)\n            }\n        case .stringValue(String):\n            switch b {\n                case .intValue(Int):\n                    return .intValue(Int)\n                case .doubleValue(Double):\n                    return .doubleValue(Double)\n                case .stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmphvd_qikw.swift:26:24: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n        case .intValue(Int):\n                       ^~~\n/tmp/tmphvd_qikw.swift:35:27: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n        case .doubleValue(Double):\n                          ^~~~~~\n/tmp/tmphvd_qikw.swift:44:27: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n        case .stringValue(String):\n                          ^\n/tmp/tmphvd_qikw.swift:44:27: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n        case .stringValue(String):\n                          ^\n/tmp/tmphvd_qikw.swift:28:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(Int):\n                               ^~~\n/tmp/tmphvd_qikw.swift:30:35: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n                case .doubleValue(Double):\n                                  ^~~~~~\n/tmp/tmphvd_qikw.swift:32:35: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n                case .stringValue(String):\n                                  ^\n/tmp/tmphvd_qikw.swift:32:35: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n                case .stringValue(String):\n                                  ^\n/tmp/tmphvd_qikw.swift:31:41: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n                    return .doubleValue(Double)\n                                        ^\n/tmp/tmphvd_qikw.swift:33:41: error: cannot convert value of type 'String.Type' to expected argument type 'String'\n                    return .stringValue(String)\n                                        ^\n/tmp/tmphvd_qikw.swift:37:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp7ypa5qr8.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:32:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:41:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:27:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:29:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:28:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:30:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:34:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:36:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:38:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:35:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:39:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:43:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:45:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a.intValue(Int) != b.intValue(Int) {\n        return a\n    }\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n        return a\n    }\n    if a.stringValue(String) != b.stringValue(String) {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpxkfuvznw.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpxkfuvznw.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpxkfuvznw.swift:31:19: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n    if a.intValue(Int) != b.intValue(Int) {\n                  ^\n/tmp/tmpxkfuvznw.swift:31:8: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue(Int) != b.intValue(Int) {\n       ^\n       Value\n/tmp/tmpxkfuvznw.swift:31:38: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n    if a.intValue(Int) != b.intValue(Int) {\n                                     ^\n/tmp/tmpxkfuvznw.swift:31:27: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue(Int) != b.intValue(Int) {\n                          ^\n                          Value\n/tmp/tmpxkfuvznw.swift:34:22: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                     ^\n/tmp/tmpxkfuvznw.swift:34:8: error: enum case 'doubleValue' cannot be used as an instance member\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n       ^\n       Value\n/tmp/tmpxkfuvznw.swift:34:47: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                                              ^\n/tmp/tmpxkfuvznw.swift:34:33: error: enum case 'doubleValue' cannot be used as an instance member\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                                ^\n                                Value\n/tmp/tmpxkfuvznw.swift:37:22: error: cannot convert value of type 'String.Type' to expected argument type 'String'\n    if a.stringValue(String) != b.stringValue(String) {\n                     ^\n/tmp/tmpxkfuvznw.swi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a.intValue() > b.intValue() {\n        return a\n    }\n    if a.intValue() < b.intValue() {\n        return b\n    }\n    if a.doubleValue() > b.doubleValue() {\n        return a\n    }\n    if a.doubleValue() < b.doubleValue() {\n        return b\n    }\n    if a.stringValue() > b.stringValue() {\n        return a\n    }\n    if a.stringValue() < b.stringValue() {\n        return b\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpavknu8jo.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpavknu8jo.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpavknu8jo.swift:31:19: error: missing argument for parameter #1 in call\n    if a.intValue() > b.intValue() {\n                  ^\n                  <#Int#>\n/tmp/tmpavknu8jo.swift:3:10: note: 'intValue' declared here\n    case intValue(Int)\n         ^\n/tmp/tmpavknu8jo.swift:31:8: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue() > b.intValue() {\n       ^\n       Value\n/tmp/tmpavknu8jo.swift:31:21: error: referencing operator function '>' on 'Comparable' requires that 'Value' conform to 'Comparable'\n    if a.intValue() > b.intValue() {\n                    ^\nSwift.Comparable:1:17: note: where 'Self' = 'Value'\npublic protocol Comparable : Equatable {\n                ^\n/tmp/tmpavknu8jo.swift:31:21: note: binary operator '>' cannot be synthesized for enums with associated values\n    if a.intValue() > b.intValue() {\n                    ^\n/tmp/tmpavknu8jo.swift:31:23: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue() > b.intValue() {\n                      ^\n                      Value\n/tmp/tmpavknu8jo.swift:31:34: error: missing argument for parameter #1 in call\n    if a.intValue() > b.intValue() {\n                                 ^\n                                 <#Int#>\n/tmp/tmpavknu8jo.swift:3:10: note: 'intValue' declared here\n    case intValue(Int)\n         ^\n/tmp/tmpavknu8jo.swift:34:8: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue() < b.intValue() {\n       ^\n       Value\n/tmp/tmpavknu8jo.swift:34:19: error: missing argument for parameter #1 in call\n    if a.intValue() < b.intValue() {\n                  ^\n                  <#Int#>\n/tmp/tmpavknu8jo.swift:3:10: note: 'intValue' declared here\n    case intValue(Int)\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case .intValue(Int):\n            switch b {\n                case .intValue(Int):\n                    return nil\n                case .doubleValue(Double):\n                    return .doubleValue(Double)\n                case .stringValue(String):\n                    return .stringValue(String)\n            }\n        case .doubleValue(Double):\n            switch b {\n                case .intValue(Int):\n                    return .intValue(Int)\n                case .doubleValue(Double):\n                    return nil\n                case .stringValue(String):\n                    return .stringValue(String)\n            }\n        case .stringValue(String):\n            switch b {\n                case .intValue(Int):\n                    return .intValue(Int)\n                case .doubleValue(Double):\n                    return .doubleValue(Double)\n                case .stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmphvd_qikw.swift:26:24: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n        case .intValue(Int):\n                       ^~~\n/tmp/tmphvd_qikw.swift:35:27: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n        case .doubleValue(Double):\n                          ^~~~~~\n/tmp/tmphvd_qikw.swift:44:27: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n        case .stringValue(String):\n                          ^\n/tmp/tmphvd_qikw.swift:44:27: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n        case .stringValue(String):\n                          ^\n/tmp/tmphvd_qikw.swift:28:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(Int):\n                               ^~~\n/tmp/tmphvd_qikw.swift:30:35: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n                case .doubleValue(Double):\n                                  ^~~~~~\n/tmp/tmphvd_qikw.swift:32:35: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n                case .stringValue(String):\n                                  ^\n/tmp/tmphvd_qikw.swift:32:35: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n                case .stringValue(String):\n                                  ^\n/tmp/tmphvd_qikw.swift:31:41: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n                    return .doubleValue(Double)\n                                        ^\n/tmp/tmphvd_qikw.swift:33:41: error: cannot convert value of type 'String.Type' to expected argument type 'String'\n                    return .stringValue(String)\n                                        ^\n/tmp/tmphvd_qikw.swift:37:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == intValue(Int) {\n        if b == intValue(Int) {\n            return compare_int(a, b)\n        }\n        return b\n    }\n    if a == doubleValue(Double) {\n        if b == doubleValue(Double) {\n            return compare_double(a, b)\n        }\n        return b\n    }\n    if a == stringValue(String) {\n        if b == stringValue(String) {\n            return compare_string(a, b)\n        }\n        return b\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpgxv02dkm.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpgxv02dkm.swift:28:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpgxv02dkm.swift:31:13: error: cannot find 'intValue' in scope\n    if a == intValue(Int) {\n            ^~~~~~~~\n/tmp/tmpgxv02dkm.swift:32:17: error: cannot find 'intValue' in scope\n        if b == intValue(Int) {\n                ^~~~~~~~\n/tmp/tmpgxv02dkm.swift:33:20: error: cannot find 'compare_int' in scope\n            return compare_int(a, b)\n                   ^~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:37:13: error: cannot find 'doubleValue' in scope\n    if a == doubleValue(Double) {\n            ^~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:38:17: error: cannot find 'doubleValue' in scope\n        if b == doubleValue(Double) {\n                ^~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:39:20: error: cannot find 'compare_double' in scope\n            return compare_double(a, b)\n                   ^~~~~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:43:13: error: cannot find 'stringValue' in scope\n    if a == stringValue(String) {\n            ^~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:44:17: error: cannot find 'stringValue' in scope\n        if b == stringValue(String) {\n                ^~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:45:20: error: cannot find 'compare_string' in scope\n            return compare_string(a, b)\n                   ^~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return .doubleValue(2.5)\n    }\n    if a == .doubleValue(2.5) {\n        return .stringValue(\"2,3\")\n    }\n    if a == .stringValue(\"2,3\") {\n        return .stringValue(\"6\")\n    }\n    if a == .stringValue(\"5,1\") {\n        return .stringValue(\"6\")\n    }\n    if a == .stringValue(\"1\") {\n        return nil\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "tmpobmx0dpx/tmpobmx0dpx.swift:56: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8dc392cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8dc3623b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8dc3623988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8dc36227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpobmx0dpx                        0x0000562c370cba56 <unavailable> + 6742\n5    libc.so.6                          0x00002b8dc3b18460 __libc_start_main + 245\n6    tmpobmx0dpx                        0x0000562c370cb499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == intValue(Int) {\n        if b == intValue(Int) {\n            return compare_int(a, b)\n        }\n        return b\n    }\n    if a == doubleValue(Double) {\n        if b == doubleValue(Double) {\n            return compare_double(a, b)\n        }\n        return b\n    }\n    if a == stringValue(String) {\n        if b == stringValue(String) {\n            return compare_string(a, b)\n        }\n        return b\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpgxv02dkm.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpgxv02dkm.swift:28:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpgxv02dkm.swift:31:13: error: cannot find 'intValue' in scope\n    if a == intValue(Int) {\n            ^~~~~~~~\n/tmp/tmpgxv02dkm.swift:32:17: error: cannot find 'intValue' in scope\n        if b == intValue(Int) {\n                ^~~~~~~~\n/tmp/tmpgxv02dkm.swift:33:20: error: cannot find 'compare_int' in scope\n            return compare_int(a, b)\n                   ^~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:37:13: error: cannot find 'doubleValue' in scope\n    if a == doubleValue(Double) {\n            ^~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:38:17: error: cannot find 'doubleValue' in scope\n        if b == doubleValue(Double) {\n                ^~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:39:20: error: cannot find 'compare_double' in scope\n            return compare_double(a, b)\n                   ^~~~~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:43:13: error: cannot find 'stringValue' in scope\n    if a == stringValue(String) {\n            ^~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:44:17: error: cannot find 'stringValue' in scope\n        if b == stringValue(String) {\n                ^~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:45:20: error: cannot find 'compare_string' in scope\n            return compare_string(a, b)\n                   ^~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp9323hqdx.swift:26:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp9323hqdx.swift:35:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:44:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:28:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:32:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:31:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:33:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:37:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:39:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:38:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:42:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:46:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:48:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp1ezwrjut.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp1ezwrjut.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmp1ezwrjut.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp1ezwrjut.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp1ezwrjut.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    }\n                    return nil\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    if a.stringValue(String) > b.intValue(Int) {\n                        return stringValue(String)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.stringValue(String) > b.doubleValue(Double) {\n                        return stringValue(String)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.stringValue(String) > b.stringValue(String) {\n                        return stringValue(String)\n                    }\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp44axf8uf.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp44axf8uf.swift:41:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:59:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp44axf8uf.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:35:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:26:40: note: binary operator '>' cannot be synthesized for enums with associated values\n                    if a.intValue(Int) > b.intValue(Int) {\n                                       ^\n/tmp/tmp44axf8uf.swift:26:35: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n                    if a.intValue(Int) > b.intValue(Int) {\n                                  ^\n/tmp/tmp44axf8uf.swift:26:53: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n                    if a.intValue(Int) > b.intValue(Int) {\n                                                    ^\n/tmp/tmp44axf8uf.swift:27:32: error: cannot find 'intValue' in scope\n                        return intValue(Int)\n                               ^~~~~~~~\n/tmp/tmp44axf8uf.swift:31:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~\n/tmp/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp1ezwrjut.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp1ezwrjut.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmp1ezwrjut.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp1ezwrjut.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp1ezwrjut.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == intValue(Int) {\n        if b == intValue(Int) {\n            return compare_one(intValue(Int).intValue(a), intValue(Int).intValue(b))\n        }\n        return b\n    }\n    if a == doubleValue(Double) {\n        if b == doubleValue(Double) {\n            return compare_one(doubleValue(Double).doubleValue(a), doubleValue(Double).doubleValue(b))\n        }\n        return b\n    }\n    if a == stringValue(String) {\n        if b == stringValue(String) {\n            return compare_one(stringValue(String).stringValue(a), stringValue(String).stringValue(b))\n        }\n        return b\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpyhkqzytm.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpyhkqzytm.swift:28:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpyhkqzytm.swift:31:13: error: cannot find 'intValue' in scope\n    if a == intValue(Int) {\n            ^~~~~~~~\n/tmp/tmpyhkqzytm.swift:32:17: error: cannot find 'intValue' in scope\n        if b == intValue(Int) {\n                ^~~~~~~~\n/tmp/tmpyhkqzytm.swift:33:32: error: cannot find 'intValue' in scope\n            return compare_one(intValue(Int).intValue(a), intValue(Int).intValue(b))\n                               ^~~~~~~~\n/tmp/tmpyhkqzytm.swift:33:59: error: cannot find 'intValue' in scope\n            return compare_one(intValue(Int).intValue(a), intValue(Int).intValue(b))\n                                                          ^~~~~~~~\n/tmp/tmpyhkqzytm.swift:33:31: error: missing argument labels 'a:b:' in call\n            return compare_one(intValue(Int).intValue(a), intValue(Int).intValue(b))\n                              ^\n                               a:                         b: \n/tmp/tmpyhkqzytm.swift:37:13: error: cannot find 'doubleValue' in scope\n    if a == doubleValue(Double) {\n            ^~~~~~~~~~~\n/tmp/tmpyhkqzytm.swift:38:17: error: cannot find 'doubleValue' in scope\n        if b == doubleValue(Double) {\n                ^~~~~~~~~~~\n/tmp/tmpyhkqzytm.swift:39:32: error: cannot find 'doubleValue' in scope\n            return compare_one(doubleValue(Double).doubleValue(a), doubleValue(Double).doubleValue(b))\n                               ^~~~~~~~~~~\n/tmp/tmpyhkqzytm.swift:39:68: error: cannot find 'doubleValue' in scope\n            return compare_one(doubleValue(Double).doubleValue(a), doubleValue(Double).doubleValue(b))\n                                                                   ^~~~~~~~~~~\n/tmp/tmpyhkqzytm.swift:39:31: error: missing argument labels 'a:b:' in call\n            return com",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return stringValue(String)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return stringValue(String)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return stringValue(String)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return stringValue(String)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpvqyc8lc3.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmpvqyc8lc3.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmpvqyc8lc3.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmpvqyc8lc3.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmpvqyc8lc3.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmpvqyc8lc3.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmpvqyc8lc3.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmpvqyc8lc3.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmpvqyc8lc3.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmpvqyc8lc3.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmpvqyc8lc3.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmpvqyc8lc3.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmpvqyc8lc3.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmpvqyc8lc3.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmpvqyc8lc3.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp1ezwrjut.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp1ezwrjut.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmp1ezwrjut.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp1ezwrjut.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp1ezwrjut.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case .intValue(Int):\n            switch b {\n                case .intValue(Int):\n                    if a == b {\n                        return nil\n                    } else if a > b {\n                        return a\n                    } else {\n                        return b\n                    }\n                case .doubleValue(Double):\n                    if a > b {\n                        return a\n                    } else {\n                        return b\n                    }\n                case .stringValue(String):\n                    if a > b {\n                        return a\n                    } else {\n                        return b\n                    }\n            }\n        case .doubleValue(Double):\n            switch b {\n                case .intValue(Int):\n                    if a > b {\n                        return a\n                    } else {\n                        return b\n                    }\n                case .doubleValue(Double):\n                    if a > b {\n                        return a\n                    } else {\n                        return b\n                    }\n                case .stringValue(String):\n                    if a > b {\n                        return a\n                    } else {\n                        return b\n                    }\n            }\n        case .stringValue(String):\n            switch b {\n                case .intValue(Int):\n                    if a > b {\n                        return a\n                    } else {\n                        return b\n                    }\n                case .doubleValue(Double):\n                    if a > b {\n                        return a\n                    } else {\n                        return b\n                    }\n                case .stringValue(String):\n                    if a > b {\n                        return a\n                    } else {\n                        return b\n                    }\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpsponv4ka.swift:23:24: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n        case .intValue(Int):\n                       ^~~\n/tmp/tmpsponv4ka.swift:46:27: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n        case .doubleValue(Double):\n                          ^~~~~~\n/tmp/tmpsponv4ka.swift:67:27: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n        case .stringValue(String):\n                          ^\n/tmp/tmpsponv4ka.swift:67:27: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n        case .stringValue(String):\n                          ^\n/tmp/tmpsponv4ka.swift:25:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(Int):\n                               ^~~\n/tmp/tmpsponv4ka.swift:33:35: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n                case .doubleValue(Double):\n                                  ^~~~~~\n/tmp/tmpsponv4ka.swift:39:35: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n                case .stringValue(String):\n                                  ^\n/tmp/tmpsponv4ka.swift:39:35: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n                case .stringValue(String):\n                                  ^\n/tmp/tmpsponv4ka.swift:28:33: error: binary operator '>' cannot be applied to two 'Value' operands\n                    } else if a > b {\n                              ~ ^ ~\n/tmp/tmpsponv4ka.swift:28:33: note: binary operator '>' cannot be synthesized for enums with associated values\n                    } else if a > b {\n                                ^\n/tmp/tmpsponv4ka.swift:34:26: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a > b {\n                       ~ ^ ~\n/tmp/tmpsponv4ka.swift:34:26: note:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a.intValue(Int) != b.intValue(Int) {\n        return a\n    }\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n        return a\n    }\n    if a.stringValue(String) != b.stringValue(String) {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpxkfuvznw.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpxkfuvznw.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpxkfuvznw.swift:31:19: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n    if a.intValue(Int) != b.intValue(Int) {\n                  ^\n/tmp/tmpxkfuvznw.swift:31:8: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue(Int) != b.intValue(Int) {\n       ^\n       Value\n/tmp/tmpxkfuvznw.swift:31:38: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n    if a.intValue(Int) != b.intValue(Int) {\n                                     ^\n/tmp/tmpxkfuvznw.swift:31:27: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue(Int) != b.intValue(Int) {\n                          ^\n                          Value\n/tmp/tmpxkfuvznw.swift:34:22: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                     ^\n/tmp/tmpxkfuvznw.swift:34:8: error: enum case 'doubleValue' cannot be used as an instance member\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n       ^\n       Value\n/tmp/tmpxkfuvznw.swift:34:47: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                                              ^\n/tmp/tmpxkfuvznw.swift:34:33: error: enum case 'doubleValue' cannot be used as an instance member\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                                ^\n                                Value\n/tmp/tmpxkfuvznw.swift:37:22: error: cannot convert value of type 'String.Type' to expected argument type 'String'\n    if a.stringValue(String) != b.stringValue(String) {\n                     ^\n/tmp/tmpxkfuvznw.swi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "tmpmvlxaosa/tmpmvlxaosa.swift:79: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b66500cdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b664fdc4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b664fdc4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b664fdc37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmvlxaosa                        0x000056245941d052 <unavailable> + 8274\n5    libc.so.6                          0x00002b66502b9460 __libc_start_main + 245\n6    tmpmvlxaosa                        0x000056245941c499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil || b == nil {\n        return nil\n    }\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "tmp6nk2exi4/tmp6nk2exi4.swift:76: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0719346c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b071903db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b071903d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b071903c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6nk2exi4                        0x000055d979b12052 <unavailable> + 8274\n5    libc.so.6                          0x00002b0719532460 __libc_start_main + 245\n6    tmp6nk2exi4                        0x000055d979b11499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case .intValue(Int):\n            switch b {\n                case .intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return Int(1)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return Int(-1)\n                    } else {\n                        return nil\n                    }\n                case .doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return Int(1)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return Int(-1)\n                    } else {\n                        return nil\n                    }\n                case .stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return Int(1)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return Int(-1)\n                    } else {\n                        return nil\n                    }\n            }\n        case .doubleValue(Double):\n            switch b {\n                case .intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return Double(1)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return Double(-1)\n                    } else {\n                        return nil\n                    }\n                case .doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return Double(1)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return Double(-1)\n                    } else {\n                        return nil\n                    }\n                case .stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return Double(1)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return Double(-1)\n                    } else {\n                        return nil\n                    }\n            }\n        case .stringValue(String):\n            switch b {\n                case .intValue(Int):\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp31urr48w.swift:79:17: error: 'case' label in a 'switch' must have at least one executable statement\n                case .intValue(Int):\n                ^~~~~~~~~~~~~~~~~~~~\n                                     break\n/tmp/tmp31urr48w.swift:103:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp31urr48w.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp31urr48w.swift:103:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp31urr48w.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp31urr48w.swift:23:24: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n        case .intValue(Int):\n                       ^~~\n/tmp/tmp31urr48w.swift:50:27: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n        case .doubleValue(Double):\n                          ^~~~~~\n/tmp/tmp31urr48w.swift:77:27: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n        case .stringValue(String):\n                          ^\n/tmp/tmp31urr48w.swift:77:27: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n        case .stringValue(String):\n                          ^\n/tmp/tmp31urr48w.swift:25:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(Int):\n                               ^~~\n/tmp/tmp31urr48w.swift:33:35: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n                case .doubleValue(Double):\n                                  ^~~~~~\n/tmp/tmp31urr48w.swift:41:35: error: expression pat",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp7ypa5qr8.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:32:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:41:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:27:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:29:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:28:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:30:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:34:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:36:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:38:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:35:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:39:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp7ypa5qr8.swift:43:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp7ypa5qr8.swift:45:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp1ezwrjut.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp1ezwrjut.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmp1ezwrjut.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp1ezwrjut.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp1ezwrjut.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp9323hqdx.swift:26:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp9323hqdx.swift:35:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:44:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:28:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:32:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:31:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:33:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:37:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:39:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:38:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:42:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:46:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:48:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp9323hqdx.swift:26:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp9323hqdx.swift:35:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:44:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:28:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:32:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:31:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:33:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:37:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:39:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:38:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:42:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:46:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:48:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    \n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp6p0t06p5.swift:27:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp6p0t06p5.swift:36:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:45:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:29:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp6p0t06p5.swift:31:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:33:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:32:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:34:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:38:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp6p0t06p5.swift:40:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:42:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:39:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:43:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:47:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp6p0t06p5.swift:49:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil || b == nil {\n        return nil\n    }\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return compare_one(a: .intValue(1), b: .intValue(2))\n                case doubleValue(Double):\n                    return compare_one(a: .intValue(1), b: .doubleValue(2.5))\n                case stringValue(String):\n                    return compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return compare_one(a: .doubleValue(2.5), b: .intValue(1))\n                case doubleValue(Double):\n                    return compare_one(a: .doubleValue(2.5), b: .doubleValue(2.5))\n                case stringValue(String):\n                    return compare_one(a: .doubleValue(2.5), b: .stringValue(\"2,3\"))\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return compare_one(a: .stringValue(\"2,3\"), b: .intValue(1))\n                case doubleValue(Double):\n                    return compare_one(a: .stringValue(\"2,3\"), b: .doubleValue(2.5))\n                case stringValue(String):\n                    return compare_one(a: .stringValue(\"2,3\"), b: .stringValue(\"2,3\"))\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp6d472c3p.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil || b == nil {\n       ~ ^  ~~~\n/tmp/tmp6d472c3p.swift:22:22: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil || b == nil {\n                   ~ ^  ~~~\n/tmp/tmp6d472c3p.swift:29:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp6d472c3p.swift:38:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp6d472c3p.swift:47:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp6d472c3p.swift:31:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp6d472c3p.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp6d472c3p.swift:35:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp6d472c3p.swift:40:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp6d472c3p.swift:42:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp6d472c3p.swift:44:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp6d472c3p.swift:49:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp6d472c3p.swift:51:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp6d472c3p.swift:53:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    \n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp6p0t06p5.swift:27:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp6p0t06p5.swift:36:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:45:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:29:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp6p0t06p5.swift:31:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:33:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:32:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:34:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:38:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp6p0t06p5.swift:40:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:42:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:39:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:43:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp6p0t06p5.swift:47:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp6p0t06p5.swift:49:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case .intValue(Int):\n            switch b {\n                case .intValue(Int):\n                    if a == b {\n                        return nil\n                    } else if a > b {\n                        return .intValue(Int)\n                    } else {\n                        return .intValue(Int)\n                    }\n                case .doubleValue(Double):\n                    if a == b {\n                        return nil\n                    } else if a > b {\n                        return .doubleValue(Double)\n                    } else {\n                        return .doubleValue(Double)\n                    }\n                case .stringValue(String):\n                    if a == b {\n                        return nil\n                    } else if a > b {\n                        return .stringValue(String)\n                    } else {\n                        return .stringValue(String)\n                    }\n            }\n        case .doubleValue(Double):\n            switch b {\n                case .intValue(Int):\n                    if a == b {\n                        return nil\n                    } else if a > b {\n                        return .doubleValue(Double)\n                    } else {\n                        return .doubleValue(Double)\n                    }\n                case .doubleValue(Double):\n                    if a == b {\n                        return nil\n                    } else if a > b {\n                        return .doubleValue(Double)\n                    } else {\n                        return .doubleValue(Double)\n                    }\n                case .stringValue(String):\n                    if a == b {\n                        return nil\n                    } else if a > b {\n                        return .stringValue(String)\n                    } else {\n                        return .stringValue(String)\n                    }\n            }\n        case .stringValue(String):\n            switch b {\n                case .intValue(Int):\n                    if a == b {\n                        return nil\n                    } else if a > b {\n                        return .stringValue(String)\n                    } else {\n                        return .stringValue(String)\n                    }\n                case .doubleValue(Double):\n                    if a == b {\n                        return nil\n                    } else if a > b {\n                        return .stringValue(String)\n                    } else {\n                        return .stringValue(String)\n                    }\n                case .stringValue(String):\n                    if a == b {\n                        return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmpg8087cll.swift:120:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmpg8087cll.swift:78:22: note: to match this opening '{'\n            switch b {\n                     ^\n/tmp/tmpg8087cll.swift:120:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmpg8087cll.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmpg8087cll.swift:120:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmpg8087cll.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmpg8087cll.swift:23:24: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n        case .intValue(Int):\n                       ^~~\n/tmp/tmpg8087cll.swift:50:27: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n        case .doubleValue(Double):\n                          ^~~~~~\n/tmp/tmpg8087cll.swift:77:27: error: expression pattern of type 'String.Type' cannot match values of type 'String'\n        case .stringValue(String):\n                          ^\n/tmp/tmpg8087cll.swift:77:27: note: overloads for '~=' exist with these partially matching parameter lists: (Substring, String)\n        case .stringValue(String):\n                          ^\n/tmp/tmpg8087cll.swift:25:32: error: expression pattern of type 'Int.Type' cannot match values of type 'Int'\n                case .intValue(Int):\n                               ^~~\n/tmp/tmpg8087cll.swift:33:35: error: expression pattern of type 'Double.Type' cannot match values of type 'Double'\n                case .doubleValue(Doubl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp1ezwrjut.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp1ezwrjut.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmp1ezwrjut.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp1ezwrjut.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp1ezwrjut.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == intValue(Int) {\n        if b == intValue(Int) {\n            return compare_int(a, b)\n        }\n        return b\n    }\n    if a == doubleValue(Double) {\n        if b == doubleValue(Double) {\n            return compare_double(a, b)\n        }\n        return b\n    }\n    if a == stringValue(String) {\n        if b == stringValue(String) {\n            return compare_string(a, b)\n        }\n        return b\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpgxv02dkm.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpgxv02dkm.swift:28:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpgxv02dkm.swift:31:13: error: cannot find 'intValue' in scope\n    if a == intValue(Int) {\n            ^~~~~~~~\n/tmp/tmpgxv02dkm.swift:32:17: error: cannot find 'intValue' in scope\n        if b == intValue(Int) {\n                ^~~~~~~~\n/tmp/tmpgxv02dkm.swift:33:20: error: cannot find 'compare_int' in scope\n            return compare_int(a, b)\n                   ^~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:37:13: error: cannot find 'doubleValue' in scope\n    if a == doubleValue(Double) {\n            ^~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:38:17: error: cannot find 'doubleValue' in scope\n        if b == doubleValue(Double) {\n                ^~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:39:20: error: cannot find 'compare_double' in scope\n            return compare_double(a, b)\n                   ^~~~~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:43:13: error: cannot find 'stringValue' in scope\n    if a == stringValue(String) {\n            ^~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:44:17: error: cannot find 'stringValue' in scope\n        if b == stringValue(String) {\n                ^~~~~~~~~~~\n/tmp/tmpgxv02dkm.swift:45:20: error: cannot find 'compare_string' in scope\n            return compare_string(a, b)\n                   ^~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    return nil\n                case doubleValue(Double):\n                    return doubleValue(Double)\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    return doubleValue(Double)\n                case doubleValue(Double):\n                    return nil\n                case stringValue(String):\n                    return stringValue(String)\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    return stringValue(String)\n                case doubleValue(Double):\n                    return stringValue(String)\n                case stringValue(String):\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp9323hqdx.swift:26:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp9323hqdx.swift:35:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:44:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:28:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:32:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:31:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:33:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:37:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:39:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:38:28: error: cannot find 'doubleValue' in scope\n                    return doubleValue(Double)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:42:28: error: cannot find 'stringValue' in scope\n                    return stringValue(String)\n                           ^~~~~~~~~~~\n/tmp/tmp9323hqdx.swift:46:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp9323hqdx.swift:48:22: error: canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    if a == .stringValue(\"1\") {\n        return b\n    }\n    if b == .stringValue(\"1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmp5fqjiqup/tmp5fqjiqup.swift:73: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee5a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee570eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeee570e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeee570d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5fqjiqup                        0x00005563a88c7052 <unavailable> + 8274\n5    libc.so.6                          0x00002aeee5c03460 __libc_start_main + 245\n6    tmp5fqjiqup                        0x00005563a88c6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.intValue(Int) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.doubleValue(Double) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    } else if a.intValue(Int) < b.stringValue(String) {\n                        return intValue(Int)\n                    } else {\n                        return nil\n                    }\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.intValue(Int) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else if a.doubleValue(Double) < b.stringValue(String) {\n                        return doubleValue(Double)\n                    } else {\n                        return nil\n                    }\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp1ezwrjut.swift:80:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp1ezwrjut.swift:79:30: note: to match this opening '('\n                case intValue(Int\n                             ^\n/tmp/tmp1ezwrjut.swift:79:34: error: expected ':' after 'case'\n                case intValue(Int\n                                 ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of 'switch' statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:22:14: note: to match this opening '{'\n    switch a {\n             ^\n/tmp/tmp1ezwrjut.swift:102:66: error: expected '}' at end of brace statement\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)\n                                                                 ^\n/tmp/tmp1ezwrjut.swift:21:48: note: to match this opening '{'\nfunc compare_one(a: Value, b: Value) -> Value? {\n                                               ^\n/tmp/tmp1ezwrjut.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:50:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:77:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp1ezwrjut.swift:33:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:41:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp1ezwrjut.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp1ezwrjut.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a == Int {\n        if b == Int {\n            return nil\n        } else if b == Double {\n            return Int\n        } else if b == String {\n            return Int\n        }\n    } else if a == Double {\n        if b == Int {\n            return Double\n        } else if b == Double {\n            return nil\n        } else if b == String {\n            return Double\n        }\n    } else if a == String {\n        if b == Int {\n            return String\n        } else if b == Double {\n            return String\n        } else if b == String {\n            return nil\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmphnb3hpkk.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmphnb3hpkk.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmphnb3hpkk.swift:31:10: error: binary operator '==' cannot be applied to operands of type 'Value' and 'Int.Type'\n    if a == Int {\n       ~ ^  ~~~\n/tmp/tmphnb3hpkk.swift:32:14: error: binary operator '==' cannot be applied to operands of type 'Value' and 'Int.Type'\n        if b == Int {\n           ~ ^  ~~~\n/tmp/tmphnb3hpkk.swift:34:21: error: binary operator '==' cannot be applied to operands of type 'Value' and 'Double.Type'\n        } else if b == Double {\n                  ~ ^  ~~~~~~\n/tmp/tmphnb3hpkk.swift:35:20: error: cannot convert return expression of type 'Int.Type' to return type 'Value?'\n            return Int\n                   ^~~\n/tmp/tmphnb3hpkk.swift:36:21: error: binary operator '==' cannot be applied to operands of type 'Value' and 'String.Type'\n        } else if b == String {\n                  ~ ^  ~~~~~~\n/tmp/tmphnb3hpkk.swift:37:20: error: cannot convert return expression of type 'Int.Type' to return type 'Value?'\n            return Int\n                   ^~~\n/tmp/tmphnb3hpkk.swift:39:17: error: binary operator '==' cannot be applied to operands of type 'Value' and 'Double.Type'\n    } else if a == Double {\n              ~ ^  ~~~~~~\n/tmp/tmphnb3hpkk.swift:40:14: error: binary operator '==' cannot be applied to operands of type 'Value' and 'Int.Type'\n        if b == Int {\n           ~ ^  ~~~\n/tmp/tmphnb3hpkk.swift:41:20: error: cannot convert return expression of type 'Double.Type' to return type 'Value?'\n            return Double\n                   ^~~~~~\n/tmp/tmphnb3hpkk.swift:42:21: error: binary operator '==' cannot be applied to operands of type 'Value' and 'Double.Type'\n        } else if b == Double {\n                  ~ ^  ~~~~~~\n/tmp/tmphnb3hpkk.swift:44:21: error: binary operator '==' canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch a {\n        case intValue(Int):\n            switch b {\n                case intValue(Int):\n                    if a.intValue(Int) > b.intValue(Int) {\n                        return intValue(Int)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                        return intValue(Int)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.intValue(Int) > b.stringValue(String) {\n                        return intValue(Int)\n                    }\n                    return nil\n            }\n        case doubleValue(Double):\n            switch b {\n                case intValue(Int):\n                    if a.doubleValue(Double) > b.intValue(Int) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.doubleValue(Double) > b.doubleValue(Double) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.doubleValue(Double) > b.stringValue(String) {\n                        return doubleValue(Double)\n                    }\n                    return nil\n            }\n        case stringValue(String):\n            switch b {\n                case intValue(Int):\n                    if a.stringValue(String) > b.intValue(Int) {\n                        return stringValue(String)\n                    }\n                    return nil\n                case doubleValue(Double):\n                    if a.stringValue(String) > b.doubleValue(Double) {\n                        return stringValue(String)\n                    }\n                    return nil\n                case stringValue(String):\n                    if a.stringValue(String) > b.stringValue(String) {\n                        return stringValue(String)\n                    }\n                    return nil\n            }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp44axf8uf.swift:23:14: error: cannot find 'intValue' in scope\n        case intValue(Int):\n             ^~~~~~~~\n/tmp/tmp44axf8uf.swift:41:14: error: cannot find 'doubleValue' in scope\n        case doubleValue(Double):\n             ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:59:14: error: cannot find 'stringValue' in scope\n        case stringValue(String):\n             ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:25:22: error: cannot find 'intValue' in scope\n                case intValue(Int):\n                     ^~~~~~~~\n/tmp/tmp44axf8uf.swift:30:22: error: cannot find 'doubleValue' in scope\n                case doubleValue(Double):\n                     ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:35:22: error: cannot find 'stringValue' in scope\n                case stringValue(String):\n                     ^~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:26:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.intValue(Int) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp44axf8uf.swift:26:40: note: binary operator '>' cannot be synthesized for enums with associated values\n                    if a.intValue(Int) > b.intValue(Int) {\n                                       ^\n/tmp/tmp44axf8uf.swift:26:35: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n                    if a.intValue(Int) > b.intValue(Int) {\n                                  ^\n/tmp/tmp44axf8uf.swift:26:53: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n                    if a.intValue(Int) > b.intValue(Int) {\n                                                    ^\n/tmp/tmp44axf8uf.swift:27:32: error: cannot find 'intValue' in scope\n                        return intValue(Int)\n                               ^~~~~~~~\n/tmp/tmp44axf8uf.swift:31:40: error: binary operator '>' cannot be applied to two 'Value' operands\n                    if a.intValue(Int) > b.doubleValue(Double) {\n                       ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~\n/tmp/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a.intValue(Int) != b.intValue(Int) {\n        return a\n    }\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n        return a\n    }\n    if a.stringValue(String) != b.stringValue(String) {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpxkfuvznw.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpxkfuvznw.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpxkfuvznw.swift:31:19: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n    if a.intValue(Int) != b.intValue(Int) {\n                  ^\n/tmp/tmpxkfuvznw.swift:31:8: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue(Int) != b.intValue(Int) {\n       ^\n       Value\n/tmp/tmpxkfuvznw.swift:31:38: error: cannot convert value of type 'Int.Type' to expected argument type 'Int'\n    if a.intValue(Int) != b.intValue(Int) {\n                                     ^\n/tmp/tmpxkfuvznw.swift:31:27: error: enum case 'intValue' cannot be used as an instance member\n    if a.intValue(Int) != b.intValue(Int) {\n                          ^\n                          Value\n/tmp/tmpxkfuvznw.swift:34:22: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                     ^\n/tmp/tmpxkfuvznw.swift:34:8: error: enum case 'doubleValue' cannot be used as an instance member\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n       ^\n       Value\n/tmp/tmpxkfuvznw.swift:34:47: error: cannot convert value of type 'Double.Type' to expected argument type 'Double'\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                                              ^\n/tmp/tmpxkfuvznw.swift:34:33: error: enum case 'doubleValue' cannot be used as an instance member\n    if a.doubleValue(Double) != b.doubleValue(Double) {\n                                ^\n                                Value\n/tmp/tmpxkfuvznw.swift:37:22: error: cannot convert value of type 'String.Type' to expected argument type 'String'\n    if a.stringValue(String) != b.stringValue(String) {\n                     ^\n/tmp/tmpxkfuvznw.swi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == nil {\n        return b\n    }\n    if b == nil {\n        return a\n    }\n    if a == b {\n        return nil\n    }\n    if a == intValue(Int) {\n        if b == intValue(Int) {\n            return compare_one(a: .intValue(a), b: .intValue(b))\n        }\n        return b\n    }\n    if a == doubleValue(Double) {\n        if b == doubleValue(Double) {\n            return compare_one(a: .doubleValue(a), b: .doubleValue(b))\n        }\n        return b\n    }\n    if a == stringValue(String) {\n        if b == stringValue(String) {\n            return compare_one(a: .stringValue(a), b: .stringValue(b))\n        }\n        return b\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmpxoyx8ude.swift:22:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if a == nil {\n       ~ ^  ~~~\n/tmp/tmpxoyx8ude.swift:25:10: warning: comparing non-optional value of type 'Value' to 'nil' always returns false\n    if b == nil {\n       ~ ^  ~~~\n/tmp/tmpxoyx8ude.swift:31:13: error: cannot find 'intValue' in scope\n    if a == intValue(Int) {\n            ^~~~~~~~\n/tmp/tmpxoyx8ude.swift:32:17: error: cannot find 'intValue' in scope\n        if b == intValue(Int) {\n                ^~~~~~~~\n/tmp/tmpxoyx8ude.swift:33:45: error: cannot convert value of type 'Value' to expected argument type 'Int'\n            return compare_one(a: .intValue(a), b: .intValue(b))\n                                            ^\n/tmp/tmpxoyx8ude.swift:33:62: error: cannot convert value of type 'Value' to expected argument type 'Int'\n            return compare_one(a: .intValue(a), b: .intValue(b))\n                                                             ^\n/tmp/tmpxoyx8ude.swift:37:13: error: cannot find 'doubleValue' in scope\n    if a == doubleValue(Double) {\n            ^~~~~~~~~~~\n/tmp/tmpxoyx8ude.swift:38:17: error: cannot find 'doubleValue' in scope\n        if b == doubleValue(Double) {\n                ^~~~~~~~~~~\n/tmp/tmpxoyx8ude.swift:39:48: error: cannot convert value of type 'Value' to expected argument type 'Double'\n            return compare_one(a: .doubleValue(a), b: .doubleValue(b))\n                                               ^\n/tmp/tmpxoyx8ude.swift:39:68: error: cannot convert value of type 'Value' to expected argument type 'Double'\n            return compare_one(a: .doubleValue(a), b: .doubleValue(b))\n                                                                   ^\n/tmp/tmpxoyx8ude.swift:43:13: error: cannot find 'stringValue' in scope\n    if a == stringValue(String) {\n            ^~~~~~~~~~~\n/tmp/tmpxoyx8ude.swift:44:17: error: cannot find 'stringValue' in scope\n        if b == stringValue(String) {\n                ^~~~~~~~~~~\n/tmp/tmpxoyx8ude.swift:45:48: error: cannot",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return b\n    }\n    if b == .intValue(1) {\n        return a\n    }\n    if a == .doubleValue(2.5) {\n        return b\n    }\n    if b == .doubleValue(2.5) {\n        return a\n    }\n    if a == .stringValue(\"2,3\") {\n        return b\n    }\n    if b == .stringValue(\"2,3\") {\n        return a\n    }\n    if a == .stringValue(\"5,1\") {\n        return b\n    }\n    if b == .stringValue(\"5,1\") {\n        return a\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpfba8ywhz/tmpfba8ywhz.swift:67: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f936ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f9065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f9065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f90647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfba8ywhz                        0x000056390581b052 <unavailable> + 8274\n5    libc.so.6                          0x00002b46f955a460 __libc_start_main + 245\n6    tmpfba8ywhz                        0x000056390581a499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return nil\n    }\n    if a == .intValue(1) {\n        return .doubleValue(2.5)\n    }\n    if a == .doubleValue(2.5) {\n        return .stringValue(\"2,3\")\n    }\n    if a == .stringValue(\"2,3\") {\n        return .stringValue(\"6\")\n    }\n    if a == .stringValue(\"5,1\") {\n        return .stringValue(\"6\")\n    }\n    if a == .stringValue(\"1\") {\n        return nil\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "tmpobmx0dpx/tmpobmx0dpx.swift:56: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8dc392cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8dc3623b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8dc3623988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8dc36227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpobmx0dpx                        0x0000562c370cba56 <unavailable> + 6742\n5    libc.so.6                          0x00002b8dc3b18460 __libc_start_main + 245\n6    tmpobmx0dpx                        0x0000562c370cb499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp4_70pg6o.swift:23:1: error: missing return in global function expected to return 'Value?'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}