{
  "name": "HumanEval_111_histogram",
  "language": "swift",
  "prompt": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.toLowerCase() {\n        if len(result) == 0 {\n            result = [letter : 1]\n        } else {\n            if result[letter] > max {\n                max = result[letter]\n                max_letter = letter\n            } else if result[letter] == max {\n                result[letter] += 1\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp9a_6cl1e.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n/tmp/tmp9a_6cl1e.swift:20:24: error: value of type 'String' has no member 'toLowerCase'\n    for letter in test.toLowerCase() {\n                  ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmph_afs6pc.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:17:21: error: expected member name or constructor call after type name\n    var histogram = [String : Int]\n                    ^\n/tmp/tmph_afs6pc.swift:17:34: note: add arguments after the type to construct a value of the type\n    var histogram = [String : Int]\n                                 ^\n                                  ()\n/tmp/tmph_afs6pc.swift:17:34: note: use '.self' to reference the type object\n    var histogram = [String : Int]\n                                 ^\n                                  .self\n/tmp/tmph_afs6pc.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return histogram\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  var dict: [String : Int] = []\n  var max: Int = 0\n  var max_letter: String = \"\"\n  for letter in test.toLowerCase() {\n    if dict.contains(letter) {\n      dict[letter] += 1\n    } else {\n      dict[letter] = 1\n    }\n    if dict[letter] > max {\n      max = dict[letter]\n      max_letter = letter\n    }\n  }\n  return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpemnuazdx.swift:17:30: error: use [:] to get an empty dictionary literal\n  var dict: [String : Int] = []\n                             ^\n                              :\n/tmp/tmpemnuazdx.swift:20:22: error: value of type 'String' has no member 'toLowerCase'\n  for letter in test.toLowerCase() {\n                ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // Your histogram function here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpe61onmbg.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test.split(\" \") {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpoetscqax.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test.split(\" \") {\n         ^\n/tmp/tmpoetscqax.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test.split(\" \") {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram.append(letter, 1)\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp_9n_evqa.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp_9n_evqa.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp_9n_evqa.swift:17:37: error: use [:] to get an empty dictionary literal\n    var histogram: [String : Int] = []\n                                    ^\n                                     :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var count = 0\n    var max = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n        } else if count == max {\n            count += 1\n        } else {\n            count = 1\n        }\n        if count > max {\n            max = count\n            result = [letter : count]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp622idf6l.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp622idf6l.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp622idf6l.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmp622idf6l.swift:34:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmp622idf6l.swift:34:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmp622idf6l.swift:34:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if _, ok := histogram[letter]; !ok {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpvp4ma3nm.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpvp4ma3nm.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpvp4ma3nm.swift:19:18: error: expected '{' after 'if' condition\n        if _, ok := histogram[letter]; !ok {\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict = {}\n    var max = 0\n    var max_key = \"\"\n    for _, letter := range test {\n        if _, ok := dict[letter]; ok {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n            max_key = letter\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpbsfwkoky.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpbsfwkoky.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpbsfwkoky.swift:21:18: error: expected '{' after 'if' condition\n        if _, ok := dict[letter]; ok {\n                 ^\n/tmp/tmpbsfwkoky.swift:31:12: error: cannot convert return expression of type '() -> ()' to return type '[String : Int]'\n    return dict\n           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram = append(histogram, [letter : 1])\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp5z87zgtp.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp5z87zgtp.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp5z87zgtp.swift:17:37: error: use [:] to get an empty dictionary literal\n    var histogram: [String : Int] = []\n                                    ^\n                                     :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for i := 0; i < len(test); i++ {\n        if test[i] == test[i + 1] {\n            count += 1\n            if count > max {\n                max = count\n                result = [test[i] : count]\n            }\n        } else {\n            count = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp8zuvn_t4.swift:20:12: error: expected type\n    for i := 0; i < len(test); i++ {\n           ^\n            <#type#>\n/tmp/tmp8zuvn_t4.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmp8zuvn_t4.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmp8zuvn_t4.swift:19:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpiibl9p8m.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.toLowerCase() {\n        var count: Int = 0\n        for _, v in result {\n            if v == letter {\n                count += 1\n            }\n        }\n        if count > max {\n            max = count\n            max_letter = letter\n        }\n        if count == max {\n            result.append(letter)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpzd85q3zr.swift:22:14: error: expected 'in' after for-each pattern\n        for _, v in result {\n             ^\n/tmp/tmpzd85q3zr.swift:22:14: error: expected Sequence expression for for-each loop\n        for _, v in result {\n             ^\n/tmp/tmpzd85q3zr.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n/tmp/tmpzd85q3zr.swift:20:24: error: value of type 'String' has no member 'toLowerCase'\n    for letter in test.toLowerCase() {\n                  ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = [:]\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpk4_8gxw8.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpk4_8gxw8.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram.append(letter, 1)\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp_9n_evqa.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp_9n_evqa.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp_9n_evqa.swift:17:37: error: use [:] to get an empty dictionary literal\n    var histogram: [String : Int] = []\n                                    ^\n                                     :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n        } else if count == max {\n            count += 1\n        } else {\n            count = 1\n        }\n        if count > max {\n            max = count\n            result = [letter : count]\n        } else if count == max {\n            result = [letter : count]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp2b0xkc61.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp2b0xkc61.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp2b0xkc61.swift:19:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var max: Int = 0\n    for i: Int = 0; i < len(test); i++ {\n        if test[i] == ' ' {\n            continue\n        }\n        if len(result) == 0 {\n            result = [test[i] : 1]\n        } else {\n            if result[test[i]] > max {\n                max = result[test[i]]\n                result = [test[i] : max]\n            } else if result[test[i]] == max {\n                result.append(test[i])\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmprxpdzulc.swift:19:16: error: expected 'in' after for-each pattern\n    for i: Int = 0; i < len(test); i++ {\n               ^\n/tmp/tmprxpdzulc.swift:19:16: error: expected Sequence expression for for-each loop\n    for i: Int = 0; i < len(test); i++ {\n               ^\n/tmp/tmprxpdzulc.swift:20:23: error: single-quoted string literal found, use '\"'\n        if test[i] == ' ' {\n                      ^~~\n                      \" \"\n/tmp/tmprxpdzulc.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  // Your histogram function here\n  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp2fth57vp.swift:18:10: error: use [:] to get an empty dictionary literal\n  return []\n         ^\n          :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var count = 0\n    var max = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result = [letter : count]\n        } else if result[letter] == 0 {\n            result[letter] = count\n            count = 1\n        } else {\n            count += 1\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp142afbza.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp142afbza.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp142afbza.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmp142afbza.swift:34:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmp142afbza.swift:34:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmp142afbza.swift:34:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String : Int]\n    var letters = test.split(\" \")\n    for _, letter := range letters {\n        if result[letter] == 0 {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp8nya0j9h.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range letters {\n         ^\n/tmp/tmp8nya0j9h.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range letters {\n         ^\n/tmp/tmp8nya0j9h.swift:17:18: error: expected member name or constructor call after type name\n    var result = [String : Int]\n                 ^\n/tmp/tmp8nya0j9h.swift:17:31: note: add arguments after the type to construct a value of the type\n    var result = [String : Int]\n                              ^\n                               ()\n/tmp/tmp8nya0j9h.swift:17:31: note: use '.self' to reference the type object\n    var result = [String : Int]\n                              ^\n                               .self\n/tmp/tmp8nya0j9h.swift:18:24: error: no exact matches in call to instance method 'split'\n    var letters = test.split(\" \")\n                       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp8nya0j9h.swift:26:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.toLowerCase() {\n        if len(result) == 0 {\n            result = [letter : 1]\n        } else {\n            if result[letter] > max {\n                max = result[letter]\n                max_letter = letter\n            }\n            result[letter] += 1\n        }\n    }\n    if len(result) == 0 {\n        result = [max_letter : max]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp33cj9yni.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n/tmp/tmp33cj9yni.swift:20:24: error: value of type 'String' has no member 'toLowerCase'\n    for letter in test.toLowerCase() {\n                  ~~~~ ^~~~~~~~~~~\n/tmp/tmp33cj9yni.swift:31:8: error: cannot find 'len' in scope\n    if len(result) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  // Your histogram function here\n  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp2fth57vp.swift:18:10: error: use [:] to get an empty dictionary literal\n  return []\n         ^\n          :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String : Int]\n    var dict = {}\n    for _, letter := range test {\n        if _, ok := dict[letter]; !ok {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n    }\n    for key, value := range dict {\n        result[key] = value\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpnknrruoh.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpnknrruoh.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpnknrruoh.swift:20:18: error: expected '{' after 'if' condition\n        if _, ok := dict[letter]; !ok {\n                 ^\n/tmp/tmpnknrruoh.swift:26:12: error: expected 'in' after for-each pattern\n    for key, value := range dict {\n           ^\n/tmp/tmpnknrruoh.swift:26:12: error: expected Sequence expression for for-each loop\n    for key, value := range dict {\n           ^\n/tmp/tmpnknrruoh.swift:17:18: error: expected member name or constructor call after type name\n    var result = [String : Int]\n                 ^\n/tmp/tmpnknrruoh.swift:17:31: note: add arguments after the type to construct a value of the type\n    var result = [String : Int]\n                              ^\n                               ()\n/tmp/tmpnknrruoh.swift:17:31: note: use '.self' to reference the type object\n    var result = [String : Int]\n                              ^\n                               .self\n/tmp/tmpnknrruoh.swift:29:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = []\n    for _, letter := range test.toLower() {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram = append(histogram, [letter: 1])\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpysouoqtx.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test.toLower() {\n         ^\n/tmp/tmpysouoqtx.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test.toLower() {\n         ^\n/tmp/tmpysouoqtx.swift:17:37: error: use [:] to get an empty dictionary literal\n    var histogram: [String : Int] = []\n                                    ^\n                                     :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  var histogram: [String : Int] = []\n  for _, letter := range test {\n    if histogram.contains(letter) {\n      histogram[letter] += 1\n    } else {\n      histogram.append(letter, 1)\n    }\n  }\n  return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp9gdoiq4j.swift:18:8: error: expected 'in' after for-each pattern\n  for _, letter := range test {\n       ^\n/tmp/tmp9gdoiq4j.swift:18:8: error: expected Sequence expression for for-each loop\n  for _, letter := range test {\n       ^\n/tmp/tmp9gdoiq4j.swift:17:35: error: use [:] to get an empty dictionary literal\n  var histogram: [String : Int] = []\n                                  ^\n                                   :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var count = 0\n    var max = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n        } else if count == 1 {\n            count = 2\n            max = 2\n        } else if count == 2 {\n            count = 3\n            max = 3\n        } else if count == 3 {\n            count = 4\n            max = 4\n        } else if count == 4 {\n            count = 5\n            max = 5\n        } else if count == 5 {\n            count = 6\n            max = 6\n        } else if count == 6 {\n            count = 7\n            max = 7\n        } else if count == 7 {\n            count = 8\n            max = 8\n        } else if count == 8 {\n            count = 9\n            max = 9\n        } else if count == 9 {\n            count = 10\n            max = 10\n        } else if count == 10 {\n            count = 11\n            max = 11\n        } else if count == 11 {\n            count = 12\n            max = 12\n        } else if count == 12 {\n            count = 13\n            max = 13\n        } else if count == 13 {\n            count = 14\n            max = 14\n        } else if count == 14 {\n            count = 15\n            max = 15\n        } else if count == 15 {\n            count = 16\n            max = 16\n        } else if count == 16 {\n            count = 17\n            max = 17\n        } else if count == 17 {\n            count = 18\n            max = 18\n        } else if count == 18 {\n            count = 19\n            max = 19\n        } else if count == 19 {\n            count = 20\n            max = 20\n        } else if count == 20 {\n            count = 21\n            max = 21\n        } else if count == 21 {\n            count = 22\n            max = 22\n        } else if count == 22 {\n            count = 23\n            max = 23\n        } else if count == 23 {\n            count = 24\n            max = 24\n        } else if count == 24 {\n            count = 25\n            max = 25\n        } else if count == 25 {\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpr681pwkm.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpr681pwkm.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpr681pwkm.swift:120:42: error: expected '}' at end of brace statement\nassert(histogram(test: \"a\") == [\"a\" : 1])\n                                         ^\n/tmp/tmpr681pwkm.swift:20:33: note: to match this opening '{'\n    for _, letter := range test {\n                                ^\n/tmp/tmpr681pwkm.swift:120:42: error: expected '}' at end of brace statement\nassert(histogram(test: \"a\") == [\"a\" : 1])\n                                         ^\n/tmp/tmpr681pwkm.swift:16:48: note: to match this opening '{'\nfunc histogram(test: String) -> [String : Int] {\n                                               ^\n/tmp/tmpr681pwkm.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for i := 0; i < len(test); i++ {\n        if test[i] == test[i+1] {\n            count += 1\n            if count > max {\n                max = count\n                result = [test[i] : count]\n            }\n        } else {\n            count = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpa3yg6i7n.swift:20:12: error: expected type\n    for i := 0; i < len(test); i++ {\n           ^\n            <#type#>\n/tmp/tmpa3yg6i7n.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpa3yg6i7n.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpa3yg6i7n.swift:19:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result = append(result, [letter : count])\n        } else if count == 1 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 2 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 3 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 4 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 5 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 6 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 7 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 8 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 9 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 10 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 11 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 12 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 13 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 14 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 15 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 16 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 17 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 18 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 19 {\n            count = 1\n            result[\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpq198q0oc.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpq198q0oc.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpq198q0oc.swift:81:1: error: expected expression in list of expressions\n}\n^\n/tmp/tmpq198q0oc.swift:103:42: error: expected '}' at end of brace statement\nassert(histogram(test: \"a\") == [\"a\" : 1])\n                                         ^\n/tmp/tmpq198q0oc.swift:20:33: note: to match this opening '{'\n    for _, letter := range test {\n                                ^\n/tmp/tmpq198q0oc.swift:103:42: error: expected '}' at end of brace statement\nassert(histogram(test: \"a\") == [\"a\" : 1])\n                                         ^\n/tmp/tmpq198q0oc.swift:16:48: note: to match this opening '{'\nfunc histogram(test: String) -> [String : Int] {\n                                               ^\n/tmp/tmpq198q0oc.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram = append(histogram, [letter : 1])\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp5z87zgtp.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp5z87zgtp.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp5z87zgtp.swift:17:37: error: use [:] to get an empty dictionary literal\n    var histogram: [String : Int] = []\n                                    ^\n                                     :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmph_afs6pc.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:17:21: error: expected member name or constructor call after type name\n    var histogram = [String : Int]\n                    ^\n/tmp/tmph_afs6pc.swift:17:34: note: add arguments after the type to construct a value of the type\n    var histogram = [String : Int]\n                                 ^\n                                  ()\n/tmp/tmph_afs6pc.swift:17:34: note: use '.self' to reference the type object\n    var histogram = [String : Int]\n                                 ^\n                                  .self\n/tmp/tmph_afs6pc.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return histogram\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if _, ok := histogram[letter]; !ok {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpvp4ma3nm.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpvp4ma3nm.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpvp4ma3nm.swift:19:18: error: expected '{' after 'if' condition\n        if _, ok := histogram[letter]; !ok {\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    for _, letter: String in test.split(\" \") {\n        if count == 0 {\n            count = 1\n            result.append(letter)\n        } else if count == 1 {\n            count = 2\n            result.append(letter)\n        } else if count > max {\n            max = count\n            result.append(letter)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpnv464ko1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter: String in test.split(\" \") {\n         ^\n/tmp/tmpnv464ko1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter: String in test.split(\" \") {\n         ^\n/tmp/tmpnv464ko1.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // Your histogram function here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpe61onmbg.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String : Int]\n    var count = 0\n    var max = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result[letter] = 1\n        } else if count == 1 {\n            count = 2\n            result[letter] = 2\n        } else if count > max {\n            max = count\n            result[letter] = count\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp53tlj85h.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp53tlj85h.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp53tlj85h.swift:17:18: error: expected member name or constructor call after type name\n    var result = [String : Int]\n                 ^\n/tmp/tmp53tlj85h.swift:17:31: note: add arguments after the type to construct a value of the type\n    var result = [String : Int]\n                              ^\n                               ()\n/tmp/tmp53tlj85h.swift:17:31: note: use '.self' to reference the type object\n    var result = [String : Int]\n                              ^\n                               .self\n/tmp/tmp53tlj85h.swift:32:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpiibl9p8m.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = [:]\n    var count: Int = 0\n    for _, letter := range test {\n        if dict[letter] == 0 {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n        count += 1\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpt45r9vg3.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpt45r9vg3.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // Your histogram function here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpe61onmbg.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  // TODO: implement your function\n  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp6fi69mpf.swift:18:10: error: use [:] to get an empty dictionary literal\n  return []\n         ^\n          :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test.split(\" \") {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpoetscqax.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test.split(\" \") {\n         ^\n/tmp/tmpoetscqax.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test.split(\" \") {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmph_afs6pc.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:17:21: error: expected member name or constructor call after type name\n    var histogram = [String : Int]\n                    ^\n/tmp/tmph_afs6pc.swift:17:34: note: add arguments after the type to construct a value of the type\n    var histogram = [String : Int]\n                                 ^\n                                  ()\n/tmp/tmph_afs6pc.swift:17:34: note: use '.self' to reference the type object\n    var histogram = [String : Int]\n                                 ^\n                                  .self\n/tmp/tmph_afs6pc.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return histogram\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n            max_letter = letter\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpfjrkenmg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpfjrkenmg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpfjrkenmg.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  var histogram: [String : Int] = []\n  var max: Int = 0\n  for _, letter := range test {\n    if histogram.contains(letter) {\n      histogram[letter] += 1\n    } else {\n      histogram[letter] = 1\n    }\n    if histogram[letter] > max {\n      max = histogram[letter]\n    }\n  }\n  return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpxkxt13np.swift:19:8: error: expected 'in' after for-each pattern\n  for _, letter := range test {\n       ^\n/tmp/tmpxkxt13np.swift:19:8: error: expected Sequence expression for for-each loop\n  for _, letter := range test {\n       ^\n/tmp/tmpxkxt13np.swift:17:35: error: use [:] to get an empty dictionary literal\n  var histogram: [String : Int] = []\n                                  ^\n                                   :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // Your histogram function here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpe61onmbg.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if _, ok := histogram[letter]; !ok {\n            histogram = append(histogram, [letter : Int])\n        }\n        histogram[letter] += 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp7xug8k_w.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp7xug8k_w.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp7xug8k_w.swift:19:18: error: expected '{' after 'if' condition\n        if _, ok := histogram[letter]; !ok {\n                 ^\n/tmp/tmp7xug8k_w.swift:17:37: error: use [:] to get an empty dictionary literal\n    var histogram: [String : Int] = []\n                                    ^\n                                     :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.toLowerCase() {\n        if len(result) == 0 || result[0][0] != letter {\n            result = [letter : 1]\n        } else if result[0][1] < 1 {\n            result[0][1] += 1\n        }\n        if result[0][1] > max {\n            max = result[0][1]\n            max_letter = result[0][0]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpgpl1t654.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n/tmp/tmpgpl1t654.swift:20:24: error: value of type 'String' has no member 'toLowerCase'\n    for letter in test.toLowerCase() {\n                  ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  var result = [:]\n  var count = 0\n  var max = 0\n  var max_letter = \"\"\n  for _, letter := range test {\n    if count == 0 {\n      count = 1\n      max = 1\n      max_letter = letter\n    } else if count == 1 {\n      if letter == max_letter {\n        count += 1\n      } else {\n        count = 1\n        max = 1\n        max_letter = letter\n      }\n    } else {\n      if letter == max_letter {\n        count += 1\n      } else {\n        count = 1\n        max = 1\n        max_letter = letter\n      }\n    }\n  }\n  for _, letter := range test {\n    if letter == max_letter {\n      result = append(result, [letter : count])\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp0u5o9kfa.swift:21:8: error: expected 'in' after for-each pattern\n  for _, letter := range test {\n       ^\n/tmp/tmp0u5o9kfa.swift:21:8: error: expected Sequence expression for for-each loop\n  for _, letter := range test {\n       ^\n/tmp/tmp0u5o9kfa.swift:44:8: error: expected 'in' after for-each pattern\n  for _, letter := range test {\n       ^\n/tmp/tmp0u5o9kfa.swift:44:8: error: expected Sequence expression for for-each loop\n  for _, letter := range test {\n       ^\n/tmp/tmp0u5o9kfa.swift:17:16: error: empty collection literal requires an explicit type\n  var result = [:]\n               ^~~\n/tmp/tmp0u5o9kfa.swift:49:10: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n  return result\n         ^\n/tmp/tmp0u5o9kfa.swift:49:10: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n  return result\n         ^\n/tmp/tmp0u5o9kfa.swift:49:10: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n  return result\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram = append(histogram, [letter : 1])\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp5z87zgtp.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp5z87zgtp.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp5z87zgtp.swift:17:37: error: use [:] to get an empty dictionary literal\n    var histogram: [String : Int] = []\n                                    ^\n                                     :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n            result = append(result, [letter : count])\n        } else if count == max {\n            count += 1\n            result[len(result) - 1][letter] = count\n        } else if count > max {\n            count = 1\n            max = 1\n            result = append(result, [letter : count])\n        } else {\n            count += 1\n            result[len(result) - 1][letter] = count\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpf9yfz_jl.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpf9yfz_jl.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpf9yfz_jl.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.toLowerCase() {\n        if len(result) == 0 || result[0][0] != letter {\n            result = [letter : 1]\n        } else if result[0][1] < 1 {\n            result[0][1] += 1\n        }\n        if result[0][1] > max {\n            max = result[0][1]\n            max_letter = result[0][0]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpgpl1t654.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n/tmp/tmpgpl1t654.swift:20:24: error: value of type 'String' has no member 'toLowerCase'\n    for letter in test.toLowerCase() {\n                  ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.split(\" \"):\n        if len(result) == 0 or result[len(result) - 1][0] != letter:\n            result.append([letter, 1])\n        else:\n            result[len(result) - 1][1] += 1\n        if result[len(result) - 1][1] > max:\n            max = result[len(result) - 1][1]\n            max_letter = result[len(result) - 1][0]\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp6bms9z8q.swift:20:34: error: expected '{' to start the body of for-each loop\n    for letter in test.split(\" \"):\n                                 ^\n/tmp/tmp6bms9z8q.swift:21:29: error: expected '{' after 'if' condition\n        if len(result) == 0 or result[len(result) - 1][0] != letter:\n                            ^\n/tmp/tmp6bms9z8q.swift:25:44: error: expected '{' after 'if' condition\n        if result[len(result) - 1][1] > max:\n                                           ^\n/tmp/tmp6bms9z8q.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n/tmp/tmp6bms9z8q.swift:20:24: error: no exact matches in call to instance method 'split'\n    for letter in test.split(\" \"):\n                       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp6bms9z8q.swift:21:12: error: cannot find 'len' in scope\n        if len(result) == 0 or result[len(result) - 1][0] != letter:\n           ^~~\n/tmp/tmp6bms9z8q.swift:25:19: error: cannot find 'len' in scope\n        if result[len(result) - 1][1] > max:\n                  ^~~\n/tmp/tmp6bms9z8q.swift:25:39: error: type 'Dictionary<String, Int>.Element' (aka '(key: String, value: Int)') cannot conform to 'BinaryInteger'\n        if result[len(result) - 1][1] > max:\n                                      ^\n/tmp/tmp6bms9z8q.swift:25:39: note: only concrete types such as structs, enums and classes can conform to protoc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var max = 0\n    for _, letter := range test {\n        if _, ok := result[letter]; !ok {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n        if result[letter] > max {\n            max = result[letter]\n        }\n    }\n    for _, v := range result {\n        if v == max {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp6h6o_1mo.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp6h6o_1mo.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp6h6o_1mo.swift:20:18: error: expected '{' after 'if' condition\n        if _, ok := result[letter]; !ok {\n                 ^\n/tmp/tmp6h6o_1mo.swift:29:10: error: expected 'in' after for-each pattern\n    for _, v := range result {\n         ^\n/tmp/tmp6h6o_1mo.swift:29:10: error: expected Sequence expression for for-each loop\n    for _, v := range result {\n         ^\n/tmp/tmp6h6o_1mo.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmp6h6o_1mo.swift:34:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmp6h6o_1mo.swift:34:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmp6h6o_1mo.swift:34:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, char := range test {\n        if _, ok := histogram[char]; !ok {\n            histogram[char] = 1\n        } else {\n            histogram[char] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpxf9qqemc.swift:18:10: error: expected 'in' after for-each pattern\n    for _, char := range test {\n         ^\n/tmp/tmpxf9qqemc.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, char := range test {\n         ^\n/tmp/tmpxf9qqemc.swift:19:18: error: expected '{' after 'if' condition\n        if _, ok := histogram[char]; !ok {\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpiibl9p8m.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var count = 0\n    for _, c := range test {\n        if _, ok := result[c]; ok {\n            count += 1\n        } else {\n            result[c] = count\n            count = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmphhrl6sj3.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range test {\n         ^\n/tmp/tmphhrl6sj3.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range test {\n         ^\n/tmp/tmphhrl6sj3.swift:20:18: error: expected '{' after 'if' condition\n        if _, ok := result[c]; ok {\n                 ^\n/tmp/tmphhrl6sj3.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmphhrl6sj3.swift:27:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmphhrl6sj3.swift:27:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmphhrl6sj3.swift:27:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if _, ok := dict[letter]; !ok {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpukvth5e9.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpukvth5e9.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpukvth5e9.swift:20:18: error: expected '{' after 'if' condition\n        if _, ok := dict[letter]; !ok {\n                 ^\n/tmp/tmpukvth5e9.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram = append(histogram, [letter : 1])\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp5z87zgtp.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp5z87zgtp.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp5z87zgtp.swift:17:37: error: use [:] to get an empty dictionary literal\n    var histogram: [String : Int] = []\n                                    ^\n                                     :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpiibl9p8m.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if _, ok := histogram[letter]; !ok {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpvp4ma3nm.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpvp4ma3nm.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpvp4ma3nm.swift:19:18: error: expected '{' after 'if' condition\n        if _, ok := histogram[letter]; !ok {\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var max = 0\n    var max_letter = \"\"\n    for _, letter := range test {\n        if _, ok := result[letter]; !ok {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n        if result[letter] > max {\n            max = result[letter]\n            max_letter = letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpfpab4dx9.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpfpab4dx9.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpfpab4dx9.swift:21:18: error: expected '{' after 'if' condition\n        if _, ok := result[letter]; !ok {\n                 ^\n/tmp/tmpfpab4dx9.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmpfpab4dx9.swift:31:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmpfpab4dx9.swift:31:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmpfpab4dx9.swift:31:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    for _, letter: String in test.split(\" \") {\n        if count == 0 {\n            count = 1\n            result.append(letter)\n        } else if count == 1 {\n            count = 2\n            result.append(letter)\n        } else if count > max {\n            count = 2\n            result.append(letter)\n        } else {\n            count = count + 1\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpkwlsrpmi.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter: String in test.split(\" \") {\n         ^\n/tmp/tmpkwlsrpmi.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter: String in test.split(\" \") {\n         ^\n/tmp/tmpkwlsrpmi.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if _, ok := histogram[letter]; !ok {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpvp4ma3nm.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpvp4ma3nm.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpvp4ma3nm.swift:19:18: error: expected '{' after 'if' condition\n        if _, ok := histogram[letter]; !ok {\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  var dict: [String : Int] = []\n  var max: Int = 0\n  var max_letter: String = \"\"\n  for letter in test.split(\" \"):\n    if len(dict) == 0 or dict[letter] > max:\n      dict[letter] = 1\n    else:\n      dict[letter] += 1\n    if dict[letter] > max:\n      max = dict[letter]\n      max_letter = letter\n  return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp5_eitmlz.swift:20:32: error: expected '{' to start the body of for-each loop\n  for letter in test.split(\" \"):\n                               ^\n/tmp/tmp5_eitmlz.swift:21:23: error: expected '{' after 'if' condition\n    if len(dict) == 0 or dict[letter] > max:\n                      ^\n/tmp/tmp5_eitmlz.swift:25:26: error: expected '{' after 'if' condition\n    if dict[letter] > max:\n                         ^\n/tmp/tmp5_eitmlz.swift:17:30: error: use [:] to get an empty dictionary literal\n  var dict: [String : Int] = []\n                             ^\n                              :\n/tmp/tmp5_eitmlz.swift:20:22: error: no exact matches in call to instance method 'split'\n  for letter in test.split(\" \"):\n                     ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp5_eitmlz.swift:21:8: error: cannot find 'len' in scope\n    if len(dict) == 0 or dict[letter] > max:\n       ^~~\n/tmp/tmp5_eitmlz.swift:25:13: error: cannot find 'letter' in scope\n    if dict[letter] > max:\n            ^~~~~~\n/tmp/tmp5_eitmlz.swift:25:21: error: binary operator '>' cannot be applied to operands of type '(key: String, value: Int)' and 'Int'\n    if dict[letter] > max:\n       ~~~~~~~~~~~~ ^ ~~~\n/tmp/tmp5_eitmlz.swift:25:21: note: overloads for '>' exist with these partially matching parameter lists: (Int, Int)\n    if dict[letter] > max:\n                    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpiibl9p8m.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram.append(letter, 1)\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp_9n_evqa.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp_9n_evqa.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp_9n_evqa.swift:17:37: error: use [:] to get an empty dictionary literal\n    var histogram: [String : Int] = []\n                                    ^\n                                     :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var count: Int = 0\n    for _, letter := range test {\n        if count == 0 {\n            result = append(result, letter)\n            count = 1\n        } else if letter == result[0] {\n            count += 1\n        } else {\n            result = append(result, letter)\n            count = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpcaz3lkry.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpcaz3lkry.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpcaz3lkry.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var count: Int = 0\n    for _, letter: String = <caret> test {\n        if count == 0 {\n            result = [letter : 1]\n        } else if result[letter] == 0 {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n        count += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp774pn5u0.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter: String = <caret> test {\n         ^\n/tmp/tmp774pn5u0.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter: String = <caret> test {\n         ^\n/tmp/tmp774pn5u0.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for i: Int = 0; i < len(test); i++ {\n        if dict.contains(test[i]) {\n            dict[test[i]] += 1\n        } else {\n            dict[test[i]] = 1\n        }\n        if dict[test[i]] > max {\n            max = dict[test[i]]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpa4sm2f27.swift:19:16: error: expected 'in' after for-each pattern\n    for i: Int = 0; i < len(test); i++ {\n               ^\n/tmp/tmpa4sm2f27.swift:19:16: error: expected Sequence expression for for-each loop\n    for i: Int = 0; i < len(test); i++ {\n               ^\n/tmp/tmpa4sm2f27.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmph_afs6pc.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:17:21: error: expected member name or constructor call after type name\n    var histogram = [String : Int]\n                    ^\n/tmp/tmph_afs6pc.swift:17:34: note: add arguments after the type to construct a value of the type\n    var histogram = [String : Int]\n                                 ^\n                                  ()\n/tmp/tmph_afs6pc.swift:17:34: note: use '.self' to reference the type object\n    var histogram = [String : Int]\n                                 ^\n                                  .self\n/tmp/tmph_afs6pc.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return histogram\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict = {}\n    for _, letter := range test {\n        if _, ok := dict[letter]; !ok {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp4uo82_2d.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp4uo82_2d.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp4uo82_2d.swift:19:18: error: expected '{' after 'if' condition\n        if _, ok := dict[letter]; !ok {\n                 ^\n/tmp/tmp4uo82_2d.swift:25:12: error: cannot convert return expression of type '() -> ()' to return type '[String : Int]'\n    return dict\n           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // Your histogram function here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpe61onmbg.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  // your code here\n  return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpmccaxgc8.swift:18:10: error: 'nil' is incompatible with return type '[String : Int]'\n  return nil\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  // TODO: Implement this function\n  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpds1q03wi.swift:18:10: error: use [:] to get an empty dictionary literal\n  return []\n         ^\n          :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, char := range test {\n        if histogram[char] == 0 {\n            histogram[char] = 1\n        } else {\n            histogram[char] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpm1hpplqh.swift:18:10: error: expected 'in' after for-each pattern\n    for _, char := range test {\n         ^\n/tmp/tmpm1hpplqh.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, char := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if _, ok := histogram[letter]; !ok {\n            histogram = append(histogram, [letter : Int]{0, 1})\n        } else {\n            histogram[letter] = histogram[letter] + 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpd4767583.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpd4767583.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpd4767583.swift:19:18: error: expected '{' after 'if' condition\n        if _, ok := histogram[letter]; !ok {\n                 ^\n/tmp/tmpd4767583.swift:20:57: error: expected ',' separator\n            histogram = append(histogram, [letter : Int]{0, 1})\n                                                        ^\n                                                        ,\n/tmp/tmpd4767583.swift:20:59: error: consecutive statements on a line must be separated by ';'\n            histogram = append(histogram, [letter : Int]{0, 1})\n                                                          ^\n                                                          ;\n/tmp/tmpd4767583.swift:20:59: error: expected expression\n            histogram = append(histogram, [letter : Int]{0, 1})\n                                                          ^\n/tmp/tmpd4767583.swift:17:37: error: use [:] to get an empty dictionary literal\n    var histogram: [String : Int] = []\n                                    ^\n                                     :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for i := 0; i < len(test); i++ {\n        if test[i] == \" \" {\n            continue\n        }\n        if dict.contains(test[i]) {\n            dict[test[i]] += 1\n        } else {\n            dict[test[i]] = 1\n        }\n        if dict[test[i]] > max {\n            max = dict[test[i]]\n            max_letter = test[i]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpw361k9id.swift:20:12: error: expected type\n    for i := 0; i < len(test); i++ {\n           ^\n            <#type#>\n/tmp/tmpw361k9id.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpw361k9id.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpw361k9id.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var current: String = \"\"\n    var count: Int = 0\n    for _, letter := range test {\n        if letter == current {\n            count += 1\n        } else {\n            if count > 0 {\n                result = append(result, current)\n                count = 1\n            }\n            current = letter\n        }\n    }\n    if count > 0 {\n        result = append(result, current)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpbz__jzdr.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpbz__jzdr.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpbz__jzdr.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n/tmp/tmpbz__jzdr.swift:32:18: error: cannot find 'append' in scope\n        result = append(result, current)\n                 ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpiibl9p8m.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var max = 0\n    var max_letter = \"\"\n    for i := 0; i < len(test); i++ {\n        if test[i] == max_letter {\n            result[test[i]] += 1\n        } else {\n            if result[test[i]] > max {\n                max = result[test[i]]\n                max_letter = test[i]\n            }\n            result[test[i]] = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpkzeykwe8.swift:20:12: error: expected type\n    for i := 0; i < len(test); i++ {\n           ^\n            <#type#>\n/tmp/tmpkzeykwe8.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpkzeykwe8.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpkzeykwe8.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmpkzeykwe8.swift:31:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmpkzeykwe8.swift:31:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmpkzeykwe8.swift:31:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var dict = {}\n    for _, letter := range test {\n        if _, ok := dict[letter]; !ok {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n    }\n    for key, value := range dict {\n        result = append(result, [key, value])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpb0cwvu4b.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpb0cwvu4b.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpb0cwvu4b.swift:20:18: error: expected '{' after 'if' condition\n        if _, ok := dict[letter]; !ok {\n                 ^\n/tmp/tmpb0cwvu4b.swift:26:12: error: expected 'in' after for-each pattern\n    for key, value := range dict {\n           ^\n/tmp/tmpb0cwvu4b.swift:26:12: error: expected Sequence expression for for-each loop\n    for key, value := range dict {\n           ^\n/tmp/tmpb0cwvu4b.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmpb0cwvu4b.swift:29:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmpb0cwvu4b.swift:29:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmpb0cwvu4b.swift:29:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var count = 0\n    var max = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n        } else if count == 1 {\n            count = 0\n        } else {\n            count += 1\n        }\n        if count > max {\n            max = count\n            result = [letter : count]\n        } else if count == max {\n            result = [letter : count]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpbrxvdgdq.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpbrxvdgdq.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpbrxvdgdq.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmpbrxvdgdq.swift:36:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmpbrxvdgdq.swift:36:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmpbrxvdgdq.swift:36:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpiibl9p8m.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for i := 0; i < len(test); i++ {\n        if test[i] == test[i + 1] {\n            count += 1\n        } else {\n            if count > max {\n                max = count\n                result = [test[i] : count]\n            }\n            count = 1\n        }\n    }\n    if count > max {\n        max = count\n        result = [test[i] : count]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpki8jewxy.swift:20:12: error: expected type\n    for i := 0; i < len(test); i++ {\n           ^\n            <#type#>\n/tmp/tmpki8jewxy.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpki8jewxy.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpki8jewxy.swift:19:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n/tmp/tmpki8jewxy.swift:33:24: error: cannot find 'i' in scope\n        result = [test[i] : count]\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    for i: Int = 0; i < len(test); i++ {\n        if test[i] == test[i+1] {\n            count += 1\n            if count > max {\n                max = count\n                result = []\n            }\n        } else {\n            count = 0\n        }\n        if count > 0 {\n            result.append(test[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpukuaayc6.swift:20:16: error: expected 'in' after for-each pattern\n    for i: Int = 0; i < len(test); i++ {\n               ^\n/tmp/tmpukuaayc6.swift:20:16: error: expected Sequence expression for for-each loop\n    for i: Int = 0; i < len(test); i++ {\n               ^\n/tmp/tmpukuaayc6.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var count = 0\n    var max = 0\n    var result = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result = append(result, letter)\n        } else if count == 1 {\n            count++\n            if count > max {\n                max = count\n                result = append(result, letter)\n            }\n        } else {\n            count--\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpim6utrrd.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpim6utrrd.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpim6utrrd.swift:19:18: error: empty collection literal requires an explicit type\n    var result = []\n                 ^~\n/tmp/tmpim6utrrd.swift:34:12: error: cannot convert return expression of type '[Any]' to return type '[String : Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // Your histogram function here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpe61onmbg.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    for i := 0; i < len(test); i++ {\n        if count == 0 {\n            count = 1\n            result = append(result, test[i])\n        } else if test[i] == result[0] {\n            count += 1\n        } else if count > max {\n            max = count\n            result = append(result, test[i])\n        } else {\n            count = 1\n            result = append(result, test[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpfhnw7c1x.swift:20:12: error: expected type\n    for i := 0; i < len(test); i++ {\n           ^\n            <#type#>\n/tmp/tmpfhnw7c1x.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpfhnw7c1x.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpfhnw7c1x.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.toLowerCase() {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n            max_letter = letter\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpo9nwg8bo.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n/tmp/tmpo9nwg8bo.swift:20:24: error: value of type 'String' has no member 'toLowerCase'\n    for letter in test.toLowerCase() {\n                  ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for i := 0; i < len(test); i++ {\n        if test[i] == test[i + 1] {\n            count += 1\n            if count > max {\n                max = count\n                result = [test[i] : count]\n            }\n        } else {\n            count = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp8zuvn_t4.swift:20:12: error: expected type\n    for i := 0; i < len(test); i++ {\n           ^\n            <#type#>\n/tmp/tmp8zuvn_t4.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmp8zuvn_t4.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmp8zuvn_t4.swift:19:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram.append(letter, 1)\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp_9n_evqa.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp_9n_evqa.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp_9n_evqa.swift:17:37: error: use [:] to get an empty dictionary literal\n    var histogram: [String : Int] = []\n                                    ^\n                                     :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for i := 0; i < len(test); i++ {\n        if test[i] == test[i + 1] {\n            count += 1\n        } else {\n            if count > max {\n                max = count\n                result = [test[i] : count]\n            }\n            count = 1\n        }\n    }\n    if count > max {\n        max = count\n        result = [test[i] : count]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpki8jewxy.swift:20:12: error: expected type\n    for i := 0; i < len(test); i++ {\n           ^\n            <#type#>\n/tmp/tmpki8jewxy.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpki8jewxy.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpki8jewxy.swift:19:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n/tmp/tmpki8jewxy.swift:33:24: error: cannot find 'i' in scope\n        result = [test[i] : count]\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // Your histogram function here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpe61onmbg.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for i := 0; i < len(test); i++ {\n        if dict.Contains(test[i]) {\n            dict[test[i]] += 1\n        } else {\n            dict[test[i]] = 1\n        }\n        if dict[test[i]] > max {\n            max = dict[test[i]]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmped6ts0ms.swift:19:12: error: expected type\n    for i := 0; i < len(test); i++ {\n           ^\n            <#type#>\n/tmp/tmped6ts0ms.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmped6ts0ms.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmped6ts0ms.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n            max_letter = letter\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpfjrkenmg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpfjrkenmg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpfjrkenmg.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var max = 0\n    var max_letter = \"\"\n    for _, letter := range test {\n        if len(result) == 0 || result[len(result) - 1][0] != letter {\n            result = append(result, [letter : 1])\n        } else {\n            result[len(result) - 1][1] += 1\n        }\n        if result[len(result) - 1][1] > max {\n            max = result[len(result) - 1][1]\n            max_letter = result[len(result) - 1][0]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpyym7kjcb.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpyym7kjcb.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpyym7kjcb.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmpyym7kjcb.swift:31:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmpyym7kjcb.swift:31:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmpyym7kjcb.swift:31:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var max = 0\n    var max_letter = \"\"\n    for i := 0; i < len(test); i++ {\n        if test[i] == max_letter {\n            result[test[i]] += 1\n        } else {\n            if result[test[i]] > max {\n                max = result[test[i]]\n                max_letter = test[i]\n            }\n            result[test[i]] = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpkzeykwe8.swift:20:12: error: expected type\n    for i := 0; i < len(test); i++ {\n           ^\n            <#type#>\n/tmp/tmpkzeykwe8.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpkzeykwe8.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpkzeykwe8.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmpkzeykwe8.swift:31:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmpkzeykwe8.swift:31:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmpkzeykwe8.swift:31:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmph_afs6pc.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:17:21: error: expected member name or constructor call after type name\n    var histogram = [String : Int]\n                    ^\n/tmp/tmph_afs6pc.swift:17:34: note: add arguments after the type to construct a value of the type\n    var histogram = [String : Int]\n                                 ^\n                                  ()\n/tmp/tmph_afs6pc.swift:17:34: note: use '.self' to reference the type object\n    var histogram = [String : Int]\n                                 ^\n                                  .self\n/tmp/tmph_afs6pc.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return histogram\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // Your histogram function here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpe61onmbg.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // TODO: Implement this function\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp4rzom06e.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmph_afs6pc.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:17:21: error: expected member name or constructor call after type name\n    var histogram = [String : Int]\n                    ^\n/tmp/tmph_afs6pc.swift:17:34: note: add arguments after the type to construct a value of the type\n    var histogram = [String : Int]\n                                 ^\n                                  ()\n/tmp/tmph_afs6pc.swift:17:34: note: use '.self' to reference the type object\n    var histogram = [String : Int]\n                                 ^\n                                  .self\n/tmp/tmph_afs6pc.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return histogram\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  var dict: [String : Int] = []\n  var max: Int = 0\n  var max_letter: String = \"\"\n  for letter in test.toLowerCase() {\n    if dict.contains(letter) {\n      dict[letter] += 1\n    } else {\n      dict[letter] = 1\n    }\n    if dict[letter] > max {\n      max = dict[letter]\n      max_letter = letter\n    }\n  }\n  return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpemnuazdx.swift:17:30: error: use [:] to get an empty dictionary literal\n  var dict: [String : Int] = []\n                             ^\n                              :\n/tmp/tmpemnuazdx.swift:20:22: error: value of type 'String' has no member 'toLowerCase'\n  for letter in test.toLowerCase() {\n                ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpiibl9p8m.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = {}\n    var max: Int = 0\n    for i: Int = 0; i < len(test); i++ {\n        if test[i] in dict {\n            dict[test[i]] += 1\n        } else {\n            dict[test[i]] = 1\n        }\n        if dict[test[i]] > max {\n            max = dict[test[i]]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpj25ybpgr.swift:19:16: error: expected 'in' after for-each pattern\n    for i: Int = 0; i < len(test); i++ {\n               ^\n/tmp/tmpj25ybpgr.swift:19:16: error: expected Sequence expression for for-each loop\n    for i: Int = 0; i < len(test); i++ {\n               ^\n/tmp/tmpj25ybpgr.swift:20:20: error: expected '{' after 'if' condition\n        if test[i] in dict {\n                   ^\n/tmp/tmpj25ybpgr.swift:17:32: error: cannot convert value of type '() -> ()' to specified type '[String : Int]'\n    var dict: [String : Int] = {}\n                               ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var count: Int = 0\n    for _, letter := range test {\n        if _, ok := dict[letter]; ok {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > count {\n            count = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp8hkn4nhg.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp8hkn4nhg.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp8hkn4nhg.swift:20:18: error: expected '{' after 'if' condition\n        if _, ok := dict[letter]; ok {\n                 ^\n/tmp/tmp8hkn4nhg.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for i: Int = 0; i < len(test); i++ {\n        if test[i] == \" \" {\n            continue\n        }\n        if dict.contains(test[i]) {\n            dict[test[i]] += 1\n        } else {\n            dict[test[i]] = 1\n        }\n        if dict[test[i]] > max {\n            max = dict[test[i]]\n            max_letter = test[i]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpcc6s_oa1.swift:20:16: error: expected 'in' after for-each pattern\n    for i: Int = 0; i < len(test); i++ {\n               ^\n/tmp/tmpcc6s_oa1.swift:20:16: error: expected Sequence expression for for-each loop\n    for i: Int = 0; i < len(test); i++ {\n               ^\n/tmp/tmpcc6s_oa1.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String : Int]\n    var letters = test.split(\" \")\n    for _, letter := range letters {\n        if result[letter] == 0 {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp8nya0j9h.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range letters {\n         ^\n/tmp/tmp8nya0j9h.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range letters {\n         ^\n/tmp/tmp8nya0j9h.swift:17:18: error: expected member name or constructor call after type name\n    var result = [String : Int]\n                 ^\n/tmp/tmp8nya0j9h.swift:17:31: note: add arguments after the type to construct a value of the type\n    var result = [String : Int]\n                              ^\n                               ()\n/tmp/tmp8nya0j9h.swift:17:31: note: use '.self' to reference the type object\n    var result = [String : Int]\n                              ^\n                               .self\n/tmp/tmp8nya0j9h.swift:18:24: error: no exact matches in call to instance method 'split'\n    var letters = test.split(\" \")\n                       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp8nya0j9h.swift:26:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // Your histogram function here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpe61onmbg.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var current = \"\"\n    var count = 0\n    for _, letter := range test {\n        if letter == current {\n            count += 1\n        } else {\n            if count > 0 {\n                result = append(result, current)\n                result = append(result, count)\n            }\n            current = letter\n            count = 1\n        }\n    }\n    if count > 0 {\n        result = append(result, current)\n        result = append(result, count)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp3ci59gvp.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp3ci59gvp.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp3ci59gvp.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmp3ci59gvp.swift:33:18: error: cannot find 'append' in scope\n        result = append(result, current)\n                 ^~~~~~\n/tmp/tmp3ci59gvp.swift:34:18: error: cannot find 'append' in scope\n        result = append(result, count)\n                 ^~~~~~\n/tmp/tmp3ci59gvp.swift:36:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmp3ci59gvp.swift:36:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmp3ci59gvp.swift:36:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n        } else if count == max {\n            result = append(result, letter)\n            count = count + 1\n        } else if count > max {\n            max = count\n            result = []\n            result = append(result, letter)\n            count = 1\n        } else {\n            count = count + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpu366v2h7.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpu366v2h7.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpu366v2h7.swift:19:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var count = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result = [letter : count]\n        } else if result[letter] == 0 {\n            count += 1\n            result[letter] = count\n        } else {\n            count -= 1\n            result[letter] = count\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmprq85l9fa.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmprq85l9fa.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmprq85l9fa.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmprq85l9fa.swift:31:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmprq85l9fa.swift:31:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmprq85l9fa.swift:31:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [:] as [String : Int]\n    var count = 0\n    var max = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            dict[letter] = 1\n        } else if dict[letter] == 0 {\n            count = 1\n            dict[letter] = 1\n        } else {\n            count += 1\n            dict[letter] += 1\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpzoyayqli.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpzoyayqli.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_key: String = \"\"\n    for key, value in String(test).split(\" \").to_dict().items() {\n        if value > max {\n            max = value\n            max_key = key\n        }\n        if value == max {\n            dict[key] = dict[key] + 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpeqikc15f.swift:20:12: error: expected 'in' after for-each pattern\n    for key, value in String(test).split(\" \").to_dict().items() {\n           ^\n/tmp/tmpeqikc15f.swift:20:12: error: expected Sequence expression for for-each loop\n    for key, value in String(test).split(\" \").to_dict().items() {\n           ^\n/tmp/tmpeqikc15f.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram[letter] = 1\n        }\n        if histogram[letter] > max {\n            max = histogram[letter]\n            max_letter = letter\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpy3n_b2f5.swift:17:37: error: use [:] to get an empty dictionary literal\n    var histogram: [String : Int] = []\n                                    ^\n                                     :\n/tmp/tmpy3n_b2f5.swift:21:31: error: missing argument label 'where:' in call\n        if histogram.contains(letter) {\n                              ^\n                              where: \n/tmp/tmpy3n_b2f5.swift:21:31: error: cannot convert value of type 'Character' to expected argument type '(Dictionary<String, Int>.Element) throws -> Bool' (aka '((key: String, value: Int)) throws -> Bool')\n        if histogram.contains(letter) {\n                              ^\n/tmp/tmpy3n_b2f5.swift:22:23: error: cannot convert value of type 'Character' to expected argument type 'String'\n            histogram[letter] += 1\n                      ^\n/tmp/tmpy3n_b2f5.swift:22:22: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            histogram[letter] += 1\n                     ^\n/tmp/tmpy3n_b2f5.swift:22:22: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            histogram[letter] += 1\n                     ^\n                             !\n/tmp/tmpy3n_b2f5.swift:24:23: error: cannot convert value of type 'Character' to expected argument type 'String'\n            histogram[letter] = 1\n                      ^\n/tmp/tmpy3n_b2f5.swift:26:21: error: no exact matches in call to subscript \n        if histogram[letter] > max {\n                    ^\n/tmp/tmpy3n_b2f5.swift:26:21: note: found candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value: Int)'\n        if histogram[letter] > max {\n                    ^\n/tmp/tmpy3n_b2f5.swift:26:21: note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n        if histogram[letter] > max {\n                    ^\n/tmp/tmpy3n_b2f5.swift:26:30: error: binary operator '>' cannot be applied to operands of type '(key: String, value: Int)' and 'Int'\n        if histogram[letter] > max {\n           ~",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // Your histogram function here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpe61onmbg.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmph_afs6pc.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:17:21: error: expected member name or constructor call after type name\n    var histogram = [String : Int]\n                    ^\n/tmp/tmph_afs6pc.swift:17:34: note: add arguments after the type to construct a value of the type\n    var histogram = [String : Int]\n                                 ^\n                                  ()\n/tmp/tmph_afs6pc.swift:17:34: note: use '.self' to reference the type object\n    var histogram = [String : Int]\n                                 ^\n                                  .self\n/tmp/tmph_afs6pc.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return histogram\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var res = [String : Int]\n    for _, c := range test {\n        if _, ok := res[c]; ok {\n            res[c] += 1\n        } else {\n            res[c] = 1\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp2zywdbb8.swift:18:10: error: expected 'in' after for-each pattern\n    for _, c := range test {\n         ^\n/tmp/tmp2zywdbb8.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, c := range test {\n         ^\n/tmp/tmp2zywdbb8.swift:19:18: error: expected '{' after 'if' condition\n        if _, ok := res[c]; ok {\n                 ^\n/tmp/tmp2zywdbb8.swift:17:15: error: expected member name or constructor call after type name\n    var res = [String : Int]\n              ^\n/tmp/tmp2zywdbb8.swift:17:28: note: add arguments after the type to construct a value of the type\n    var res = [String : Int]\n                           ^\n                            ()\n/tmp/tmp2zywdbb8.swift:17:28: note: use '.self' to reference the type object\n    var res = [String : Int]\n                           ^\n                            .self\n/tmp/tmp2zywdbb8.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return res\n           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpiibl9p8m.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmph_afs6pc.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:17:21: error: expected member name or constructor call after type name\n    var histogram = [String : Int]\n                    ^\n/tmp/tmph_afs6pc.swift:17:34: note: add arguments after the type to construct a value of the type\n    var histogram = [String : Int]\n                                 ^\n                                  ()\n/tmp/tmph_afs6pc.swift:17:34: note: use '.self' to reference the type object\n    var histogram = [String : Int]\n                                 ^\n                                  .self\n/tmp/tmph_afs6pc.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return histogram\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var max = 0\n    var max_letter = \"\"\n    for _, letter := range test {\n        if len(result) == 0 || result[0][0] != letter {\n            result = [letter : 1]\n        } else if result[0][1] < 1 {\n            result[0][1] += 1\n        } else {\n            result = [letter : result[0][1] + 1]\n        }\n        if result[0][1] > max {\n            max = result[0][1]\n            max_letter = letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpj1l256g3.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpj1l256g3.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpj1l256g3.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmpj1l256g3.swift:33:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmpj1l256g3.swift:33:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmpj1l256g3.swift:33:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpiibl9p8m.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    var letters = test.split(\" \")\n    for _, letter := range letters {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpl7pq25p5.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range letters {\n         ^\n/tmp/tmpl7pq25p5.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range letters {\n         ^\n/tmp/tmpl7pq25p5.swift:18:24: error: no exact matches in call to instance method 'split'\n    var letters = test.split(\" \")\n                       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.toLowerCase() {\n        if len(result) == 0 {\n            result = [letter : 1]\n        } else {\n            if result[letter] > max {\n                max = result[letter]\n                max_letter = letter\n            }\n            result[letter] += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp_jx3qgg4.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n/tmp/tmp_jx3qgg4.swift:20:24: error: value of type 'String' has no member 'toLowerCase'\n    for letter in test.toLowerCase() {\n                  ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for i: Int = 0; i < len(test); i++ {\n        if test[i] == \" \" {\n            continue\n        }\n        if dict.contains(test[i]) {\n            dict[test[i]] += 1\n        } else {\n            dict[test[i]] = 1\n        }\n        if dict[test[i]] > max {\n            max = dict[test[i]]\n            max_letter = test[i]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpcc6s_oa1.swift:20:16: error: expected 'in' after for-each pattern\n    for i: Int = 0; i < len(test); i++ {\n               ^\n/tmp/tmpcc6s_oa1.swift:20:16: error: expected Sequence expression for for-each loop\n    for i: Int = 0; i < len(test); i++ {\n               ^\n/tmp/tmpcc6s_oa1.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // Your histogram function here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpe61onmbg.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]\n    for _, letter := range test.toLower() {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpq_aj3ecy.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test.toLower() {\n         ^\n/tmp/tmpq_aj3ecy.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test.toLower() {\n         ^\n/tmp/tmpq_aj3ecy.swift:17:21: error: expected member name or constructor call after type name\n    var histogram = [String : Int]\n                    ^\n/tmp/tmpq_aj3ecy.swift:17:34: note: add arguments after the type to construct a value of the type\n    var histogram = [String : Int]\n                                 ^\n                                  ()\n/tmp/tmpq_aj3ecy.swift:17:34: note: use '.self' to reference the type object\n    var histogram = [String : Int]\n                                 ^\n                                  .self\n/tmp/tmpq_aj3ecy.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return histogram\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // Your histogram function here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpe61onmbg.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  var histogram = [String : Int]()\n  for _, letter := range test {\n    if _, ok := histogram[letter]; !ok {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmph8a3ke98.swift:18:8: error: expected 'in' after for-each pattern\n  for _, letter := range test {\n       ^\n/tmp/tmph8a3ke98.swift:18:8: error: expected Sequence expression for for-each loop\n  for _, letter := range test {\n       ^\n/tmp/tmph8a3ke98.swift:19:14: error: expected '{' after 'if' condition\n    if _, ok := histogram[letter]; !ok {\n             ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if _, ok := dict[letter]; !ok {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpukvth5e9.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpukvth5e9.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpukvth5e9.swift:20:18: error: expected '{' after 'if' condition\n        if _, ok := dict[letter]; !ok {\n                 ^\n/tmp/tmpukvth5e9.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  var histogram = [String : Int]()\n  for _, letter := range test {\n    if histogram[letter] == 0 {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp8ouju94c.swift:18:8: error: expected 'in' after for-each pattern\n  for _, letter := range test {\n       ^\n/tmp/tmp8ouju94c.swift:18:8: error: expected Sequence expression for for-each loop\n  for _, letter := range test {\n       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var count = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result = [letter : count]\n        } else if result[letter] == 0 {\n            result[letter] = count\n        } else {\n            result[letter] += count\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp7dw3gb5z.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp7dw3gb5z.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp7dw3gb5z.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmp7dw3gb5z.swift:29:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmp7dw3gb5z.swift:29:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmp7dw3gb5z.swift:29:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmph_afs6pc.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:17:21: error: expected member name or constructor call after type name\n    var histogram = [String : Int]\n                    ^\n/tmp/tmph_afs6pc.swift:17:34: note: add arguments after the type to construct a value of the type\n    var histogram = [String : Int]\n                                 ^\n                                  ()\n/tmp/tmph_afs6pc.swift:17:34: note: use '.self' to reference the type object\n    var histogram = [String : Int]\n                                 ^\n                                  .self\n/tmp/tmph_afs6pc.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return histogram\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpiibl9p8m.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmph_afs6pc.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:17:21: error: expected member name or constructor call after type name\n    var histogram = [String : Int]\n                    ^\n/tmp/tmph_afs6pc.swift:17:34: note: add arguments after the type to construct a value of the type\n    var histogram = [String : Int]\n                                 ^\n                                  ()\n/tmp/tmph_afs6pc.swift:17:34: note: use '.self' to reference the type object\n    var histogram = [String : Int]\n                                 ^\n                                  .self\n/tmp/tmph_afs6pc.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return histogram\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // Your histogram function here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpe61onmbg.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n        } else if count == max {\n            result = append(result, letter)\n            count = count + 1\n        } else if count > max {\n            max = count\n            result = []\n            result = append(result, letter)\n            count = 1\n        } else {\n            count = count + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpu366v2h7.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpu366v2h7.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpu366v2h7.swift:19:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = {}\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for _, letter := range test {\n        if _, ok := dict[letter]; !ok {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n            max_letter = letter\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpvu8hh9m2.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpvu8hh9m2.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpvu8hh9m2.swift:21:18: error: expected '{' after 'if' condition\n        if _, ok := dict[letter]; !ok {\n                 ^\n/tmp/tmpvu8hh9m2.swift:17:32: error: cannot convert value of type '() -> ()' to specified type '[String : Int]'\n    var dict: [String : Int] = {}\n                               ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String : Int]\n    for _, letter := range test {\n        if dict[letter] == 0 {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpd_s2wlrs.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpd_s2wlrs.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpd_s2wlrs.swift:17:16: error: expected member name or constructor call after type name\n    var dict = [String : Int]\n               ^\n/tmp/tmpd_s2wlrs.swift:17:29: note: add arguments after the type to construct a value of the type\n    var dict = [String : Int]\n                            ^\n                             ()\n/tmp/tmpd_s2wlrs.swift:17:29: note: use '.self' to reference the type object\n    var dict = [String : Int]\n                            ^\n                             .self\n/tmp/tmpd_s2wlrs.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return dict\n           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String : Int]\n    var count = 0\n    for _, letter := range test {\n        if count == 0 {\n            result[letter] = 1\n        } else if result[letter] == 0 {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n        count++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp8n8ory80.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp8n8ory80.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp8n8ory80.swift:17:18: error: expected member name or constructor call after type name\n    var result = [String : Int]\n                 ^\n/tmp/tmp8n8ory80.swift:17:31: note: add arguments after the type to construct a value of the type\n    var result = [String : Int]\n                              ^\n                               ()\n/tmp/tmp8n8ory80.swift:17:31: note: use '.self' to reference the type object\n    var result = [String : Int]\n                              ^\n                               .self\n/tmp/tmp8n8ory80.swift:29:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // your code here\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpjk8nl6na.swift:18:12: error: 'nil' is incompatible with return type '[String : Int]'\n    return nil\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result = append(result, letter)\n        } else if count == 1 {\n            count = 0\n        } else {\n            count += 1\n        }\n        if count > max {\n            max = count\n            result = append(result, letter)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmprtwdmr32.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmprtwdmr32.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmprtwdmr32.swift:19:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmph_afs6pc.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:17:21: error: expected member name or constructor call after type name\n    var histogram = [String : Int]\n                    ^\n/tmp/tmph_afs6pc.swift:17:34: note: add arguments after the type to construct a value of the type\n    var histogram = [String : Int]\n                                 ^\n                                  ()\n/tmp/tmph_afs6pc.swift:17:34: note: use '.self' to reference the type object\n    var histogram = [String : Int]\n                                 ^\n                                  .self\n/tmp/tmph_afs6pc.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return histogram\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmph_afs6pc.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:17:21: error: expected member name or constructor call after type name\n    var histogram = [String : Int]\n                    ^\n/tmp/tmph_afs6pc.swift:17:34: note: add arguments after the type to construct a value of the type\n    var histogram = [String : Int]\n                                 ^\n                                  ()\n/tmp/tmph_afs6pc.swift:17:34: note: use '.self' to reference the type object\n    var histogram = [String : Int]\n                                 ^\n                                  .self\n/tmp/tmph_afs6pc.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return histogram\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict = {}\n    var max = 0\n    for _, char := range test {\n        if _, ok := dict[char]; !ok {\n            dict[char] = 1\n        } else {\n            dict[char] += 1\n        }\n        if dict[char] > max {\n            max = dict[char]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpoem73ju0.swift:19:10: error: expected 'in' after for-each pattern\n    for _, char := range test {\n         ^\n/tmp/tmpoem73ju0.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, char := range test {\n         ^\n/tmp/tmpoem73ju0.swift:20:18: error: expected '{' after 'if' condition\n        if _, ok := dict[char]; !ok {\n                 ^\n/tmp/tmpoem73ju0.swift:29:12: error: cannot convert return expression of type '() -> ()' to return type '[String : Int]'\n    return dict\n           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var count: Int = 0\n    for _, letter := range test {\n        if _, ok := result[letter]; !ok {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n        count += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmppv1vhoe2.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmppv1vhoe2.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmppv1vhoe2.swift:20:18: error: expected '{' after 'if' condition\n        if _, ok := result[letter]; !ok {\n                 ^\n/tmp/tmppv1vhoe2.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  var result = [:]\n  var max = 0\n  var max_letter = \"\"\n  for _, letter := range test {\n    if _, ok := result[letter]; ok {\n      result[letter] += 1\n    } else {\n      result[letter] = 1\n    }\n    if result[letter] > max {\n      max = result[letter]\n      max_letter = letter\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp4yyb1jj6.swift:20:8: error: expected 'in' after for-each pattern\n  for _, letter := range test {\n       ^\n/tmp/tmp4yyb1jj6.swift:20:8: error: expected Sequence expression for for-each loop\n  for _, letter := range test {\n       ^\n/tmp/tmp4yyb1jj6.swift:21:14: error: expected '{' after 'if' condition\n    if _, ok := result[letter]; ok {\n             ^\n/tmp/tmp4yyb1jj6.swift:17:16: error: empty collection literal requires an explicit type\n  var result = [:]\n               ^~~\n/tmp/tmp4yyb1jj6.swift:31:10: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n  return result\n         ^\n/tmp/tmp4yyb1jj6.swift:31:10: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n  return result\n         ^\n/tmp/tmp4yyb1jj6.swift:31:10: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n  return result\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n            max_letter = letter\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpfjrkenmg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpfjrkenmg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpfjrkenmg.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // TODO: Implement this function\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp4rzom06e.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n            result = append(result, [letter : count])\n        } else if count < max {\n            count = 1\n            max = 1\n            result = append(result, [letter : count])\n        } else if count == max {\n            count += 1\n            max = count\n            result = append(result, [letter : count])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp6gw_afo6.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp6gw_afo6.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp6gw_afo6.swift:19:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var max: Int = 0\n    for _, letter: String in test.split(\" \") {\n        if len(result) == 0 {\n            result = [letter : 1]\n        } else {\n            if result[letter] > max {\n                result = [letter : 1]\n            } else if result[letter] == max {\n                result[letter] += 1\n            }\n        }\n        if result[letter] > max {\n            max = result[letter]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpjx7zpi5p.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter: String in test.split(\" \") {\n         ^\n/tmp/tmpjx7zpi5p.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter: String in test.split(\" \") {\n         ^\n/tmp/tmpjx7zpi5p.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n            result = append(result, [letter : count])\n        } else if count < max {\n            count += 1\n            result[0][letter] = count\n        } else if count > max {\n            count = 1\n            max = 1\n            result = append(result, [letter : count])\n        } else {\n            count += 1\n            result[0][letter] = count\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpzmw_wlo2.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpzmw_wlo2.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpzmw_wlo2.swift:19:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmph_afs6pc.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:17:21: error: expected member name or constructor call after type name\n    var histogram = [String : Int]\n                    ^\n/tmp/tmph_afs6pc.swift:17:34: note: add arguments after the type to construct a value of the type\n    var histogram = [String : Int]\n                                 ^\n                                  ()\n/tmp/tmph_afs6pc.swift:17:34: note: use '.self' to reference the type object\n    var histogram = [String : Int]\n                                 ^\n                                  .self\n/tmp/tmph_afs6pc.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return histogram\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram[letter] = 1\n        }\n        if histogram[letter] > max {\n            max = histogram[letter]\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpntyv775p.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpntyv775p.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpntyv775p.swift:17:37: error: use [:] to get an empty dictionary literal\n    var histogram: [String : Int] = []\n                                    ^\n                                     :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String : Int]\n    var current = \"\"\n    var count = 0\n    for _, letter := range test {\n        if letter == current {\n            count += 1\n        } else {\n            if count > 0 {\n                result[current] = count\n                count = 0\n            }\n            current = letter\n        }\n    }\n    if count > 0 {\n        result[current] = count\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpvsrttnqv.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpvsrttnqv.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpvsrttnqv.swift:17:18: error: expected member name or constructor call after type name\n    var result = [String : Int]\n                 ^\n/tmp/tmpvsrttnqv.swift:17:31: note: add arguments after the type to construct a value of the type\n    var result = [String : Int]\n                              ^\n                               ()\n/tmp/tmpvsrttnqv.swift:17:31: note: use '.self' to reference the type object\n    var result = [String : Int]\n                              ^\n                               .self\n/tmp/tmpvsrttnqv.swift:32:9: error: instance member 'subscript' cannot be used on type '[String : Int]'\n        result[current] = count\n        ^~~~~~\n/tmp/tmpvsrttnqv.swift:34:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  // Your histogram function here\n  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp2fth57vp.swift:18:10: error: use [:] to get an empty dictionary literal\n  return []\n         ^\n          :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n        } else if count == max {\n            count += 1\n        } else {\n            count = 1\n        }\n        if count > max {\n            max = count\n            result = [letter : count]\n        } else if count == max {\n            result = [letter : count]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp2b0xkc61.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp2b0xkc61.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp2b0xkc61.swift:19:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram = append(histogram, [letter : 1])\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp5z87zgtp.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp5z87zgtp.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp5z87zgtp.swift:17:37: error: use [:] to get an empty dictionary literal\n    var histogram: [String : Int] = []\n                                    ^\n                                     :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  var dict: [String : Int] = []\n  var max: Int = 0\n  var max_key: String = \"\"\n  for i: Int = 0; i < len(test); i++ {\n    if test[i] == \" \" {\n      continue\n    }\n    if dict.contains(test[i]) {\n      dict[test[i]] += 1\n    } else {\n      dict[test[i]] = 1\n    }\n    if dict[test[i]] > max {\n      max = dict[test[i]]\n      max_key = test[i]\n    }\n  }\n  return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpcp868y12.swift:20:14: error: expected 'in' after for-each pattern\n  for i: Int = 0; i < len(test); i++ {\n             ^\n/tmp/tmpcp868y12.swift:20:14: error: expected Sequence expression for for-each loop\n  for i: Int = 0; i < len(test); i++ {\n             ^\n/tmp/tmpcp868y12.swift:17:30: error: use [:] to get an empty dictionary literal\n  var dict: [String : Int] = []\n                             ^\n                              :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var count = 0\n    for _, letter := range test {\n        if _, ok := result[letter]; ok {\n            result[letter] += 1\n        } else {\n            result[letter] = 1\n        }\n        count += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpo37mewuz.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpo37mewuz.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpo37mewuz.swift:20:18: error: expected '{' after 'if' condition\n        if _, ok := result[letter]; ok {\n                 ^\n/tmp/tmpo37mewuz.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmpo37mewuz.swift:27:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmpo37mewuz.swift:27:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmpo37mewuz.swift:27:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for i := 0; i < len(test); i++ {\n        if test[i] == test[i+1] {\n            count += 1\n            if count > max {\n                max = count\n                result = [test[i] : count]\n            }\n        } else {\n            count = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpa3yg6i7n.swift:20:12: error: expected type\n    for i := 0; i < len(test); i++ {\n           ^\n            <#type#>\n/tmp/tmpa3yg6i7n.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpa3yg6i7n.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpa3yg6i7n.swift:19:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var current = \"\"\n    var count = 0\n    for _, letter := range test {\n        if letter == current {\n            count += 1\n        } else {\n            if count > 0 {\n                result = append(result, [String: Int]([letter: Int] {\n                    return [letter: Int](count)\n                }))\n            }\n            current = letter\n            count = 1\n        }\n    }\n    if count > 0 {\n        result = append(result, [String: Int]([letter: Int] {\n            return [letter: Int](count)\n        }))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpcn1zq2qm.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpcn1zq2qm.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpcn1zq2qm.swift:25:69: error: expected ',' separator\n                result = append(result, [String: Int]([letter: Int] {\n                                                                    ^\n                                                                   ,\n/tmp/tmpcn1zq2qm.swift:34:61: error: expected ',' separator\n        result = append(result, [String: Int]([letter: Int] {\n                                                            ^\n                                                           ,\n/tmp/tmpcn1zq2qm.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmpcn1zq2qm.swift:34:18: error: cannot find 'append' in scope\n        result = append(result, [String: Int]([letter: Int] {\n                 ^~~~~~\n/tmp/tmpcn1zq2qm.swift:34:48: error: cannot find 'letter' in scope\n        result = append(result, [String: Int]([letter: Int] {\n                                               ^~~~~~\n/tmp/tmpcn1zq2qm.swift:35:21: error: cannot find 'letter' in scope\n            return [letter: Int](count)\n                    ^~~~~~\n/tmp/tmpcn1zq2qm.swift:38:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmpcn1zq2qm.swift:38:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmpcn1zq2qm.swift:38:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  var result = [:]\n  var max = 0\n  var max_letter = \"\"\n  for _, letter := range test {\n    if _, ok := result[letter]; ok {\n      result[letter] += 1\n    } else {\n      result[letter] = 1\n    }\n    if result[letter] > max {\n      max = result[letter]\n      max_letter = letter\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp4yyb1jj6.swift:20:8: error: expected 'in' after for-each pattern\n  for _, letter := range test {\n       ^\n/tmp/tmp4yyb1jj6.swift:20:8: error: expected Sequence expression for for-each loop\n  for _, letter := range test {\n       ^\n/tmp/tmp4yyb1jj6.swift:21:14: error: expected '{' after 'if' condition\n    if _, ok := result[letter]; ok {\n             ^\n/tmp/tmp4yyb1jj6.swift:17:16: error: empty collection literal requires an explicit type\n  var result = [:]\n               ^~~\n/tmp/tmp4yyb1jj6.swift:31:10: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n  return result\n         ^\n/tmp/tmp4yyb1jj6.swift:31:10: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n  return result\n         ^\n/tmp/tmp4yyb1jj6.swift:31:10: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n  return result\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  var histogram: [String : Int] = []\n  var current: String = \"\"\n  var count: Int = 0\n  for _, letter := range test {\n    if letter == current {\n      count += 1\n    } else {\n      if count > 0 {\n        histogram = append(histogram, [current, count])\n      }\n      current = letter\n      count = 1\n    }\n  }\n  if count > 0 {\n    histogram = append(histogram, [current, count])\n  }\n  return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp_c9zj_du.swift:20:8: error: expected 'in' after for-each pattern\n  for _, letter := range test {\n       ^\n/tmp/tmp_c9zj_du.swift:20:8: error: expected Sequence expression for for-each loop\n  for _, letter := range test {\n       ^\n/tmp/tmp_c9zj_du.swift:17:35: error: use [:] to get an empty dictionary literal\n  var histogram: [String : Int] = []\n                                  ^\n                                   :\n/tmp/tmp_c9zj_du.swift:32:17: error: cannot find 'append' in scope\n    histogram = append(histogram, [current, count])\n                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  var histogram: [String : Int] = [:]\n  var current: String = \"\"\n  var count: Int = 0\n  for _, letter := range test {\n    if letter == current {\n      count += 1\n    } else {\n      if count > 0 {\n        histogram = append(histogram, [current, count])\n      }\n      current = letter\n      count = 1\n    }\n  }\n  if count > 0 {\n    histogram = append(histogram, [current, count])\n  }\n  return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpz62pm1u6.swift:20:8: error: expected 'in' after for-each pattern\n  for _, letter := range test {\n       ^\n/tmp/tmpz62pm1u6.swift:20:8: error: expected Sequence expression for for-each loop\n  for _, letter := range test {\n       ^\n/tmp/tmpz62pm1u6.swift:32:17: error: cannot find 'append' in scope\n    histogram = append(histogram, [current, count])\n                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [:]\n    var count = 0\n    var max = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n            result = [letter : count]\n        } else if count == 1 {\n            count = 1\n            if result[letter] > max {\n                max = result[letter]\n                result = [letter : count]\n            }\n        } else {\n            count = count + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp2c1rqemi.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp2c1rqemi.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp2c1rqemi.swift:17:18: error: empty collection literal requires an explicit type\n    var result = [:]\n                 ^~~\n/tmp/tmp2c1rqemi.swift:35:12: error: cannot convert return expression of type '[AnyHashable : Any]' to return type '[String : Int]'\n    return result\n           ^\n/tmp/tmp2c1rqemi.swift:35:12: note: arguments to generic parameter 'Key' ('AnyHashable' and 'String') are expected to be equal\n    return result\n           ^\n/tmp/tmp2c1rqemi.swift:35:12: note: arguments to generic parameter 'Value' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var count: Int = 0\n    for _, letter: String in test.split(\" \") {\n        if count == 0 {\n            result = append(result, [letter, 1])\n        } else if result[0][0] == letter {\n            result[0][1] += 1\n        } else {\n            result = append(result, [letter, 1])\n        }\n        count += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpobn4uk7i.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter: String in test.split(\" \") {\n         ^\n/tmp/tmpobn4uk7i.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter: String in test.split(\" \") {\n         ^\n/tmp/tmpobn4uk7i.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result = append(result, letter)\n        } else if count == 1 {\n            count = 2\n            result = append(result, letter)\n        } else if count > max {\n            count = count + 1\n            result = append(result, letter)\n        } else if count == max {\n            result = append(result, letter)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpbkq8glu8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpbkq8glu8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpbkq8glu8.swift:17:34: error: use [:] to get an empty dictionary literal\n    var result: [String : Int] = []\n                                 ^\n                                  :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict = {}\n    for _, letter := range test {\n        if _, ok := dict[letter]; !ok {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp4uo82_2d.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp4uo82_2d.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp4uo82_2d.swift:19:18: error: expected '{' after 'if' condition\n        if _, ok := dict[letter]; !ok {\n                 ^\n/tmp/tmp4uo82_2d.swift:25:12: error: cannot convert return expression of type '() -> ()' to return type '[String : Int]'\n    return dict\n           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  var histogram = [String : Int]\n  for _, letter := range test {\n    if histogram[letter] == 0 {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp7p_bzlh9.swift:18:8: error: expected 'in' after for-each pattern\n  for _, letter := range test {\n       ^\n/tmp/tmp7p_bzlh9.swift:18:8: error: expected Sequence expression for for-each loop\n  for _, letter := range test {\n       ^\n/tmp/tmp7p_bzlh9.swift:17:19: error: expected member name or constructor call after type name\n  var histogram = [String : Int]\n                  ^\n/tmp/tmp7p_bzlh9.swift:17:32: note: add arguments after the type to construct a value of the type\n  var histogram = [String : Int]\n                               ^\n                                ()\n/tmp/tmp7p_bzlh9.swift:17:32: note: use '.self' to reference the type object\n  var histogram = [String : Int]\n                               ^\n                                .self\n/tmp/tmp7p_bzlh9.swift:25:10: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n  return histogram\n         ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String : Int]\n    var letters = test.split(\" \")\n    for _, letter := range letters {\n        if result[letter] == 0 {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmp8nya0j9h.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range letters {\n         ^\n/tmp/tmp8nya0j9h.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range letters {\n         ^\n/tmp/tmp8nya0j9h.swift:17:18: error: expected member name or constructor call after type name\n    var result = [String : Int]\n                 ^\n/tmp/tmp8nya0j9h.swift:17:31: note: add arguments after the type to construct a value of the type\n    var result = [String : Int]\n                              ^\n                               ()\n/tmp/tmp8nya0j9h.swift:17:31: note: use '.self' to reference the type object\n    var result = [String : Int]\n                              ^\n                               .self\n/tmp/tmp8nya0j9h.swift:18:24: error: no exact matches in call to instance method 'split'\n    var letters = test.split(\" \")\n                       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp8nya0j9h.swift:26:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n  var dict: [String : Int] = []\n  var max: Int = 0\n  for _, letter := range test {\n    if dict.contains(letter) {\n      dict[letter] += 1\n    } else {\n      dict[letter] = 1\n    }\n    if dict[letter] > max {\n      max = dict[letter]\n    }\n  }\n  return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpplmofush.swift:19:8: error: expected 'in' after for-each pattern\n  for _, letter := range test {\n       ^\n/tmp/tmpplmofush.swift:19:8: error: expected Sequence expression for for-each loop\n  for _, letter := range test {\n       ^\n/tmp/tmpplmofush.swift:17:30: error: use [:] to get an empty dictionary literal\n  var dict: [String : Int] = []\n                             ^\n                              :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpi5ro1cvj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpi5ro1cvj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // Your histogram function here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpe61onmbg.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpiibl9p8m.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String : Int]\n    var count = 0\n    for _, letter := range test {\n        if _, ok := result[letter]; ok {\n            result[letter] += 1\n        } else {\n            result[letter] = 1\n        }\n        count += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp5si4bpsh.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmp5si4bpsh.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmp5si4bpsh.swift:20:18: error: expected '{' after 'if' condition\n        if _, ok := result[letter]; ok {\n                 ^\n/tmp/tmp5si4bpsh.swift:17:18: error: expected member name or constructor call after type name\n    var result = [String : Int]\n                 ^\n/tmp/tmp5si4bpsh.swift:17:31: note: add arguments after the type to construct a value of the type\n    var result = [String : Int]\n                              ^\n                               ()\n/tmp/tmp5si4bpsh.swift:17:31: note: use '.self' to reference the type object\n    var result = [String : Int]\n                              ^\n                               .self\n/tmp/tmp5si4bpsh.swift:27:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmpiibl9p8m.swift:19:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmpiibl9p8m.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "/tmp/tmph_afs6pc.swift:18:10: error: expected 'in' after for-each pattern\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, letter := range test {\n         ^\n/tmp/tmph_afs6pc.swift:17:21: error: expected member name or constructor call after type name\n    var histogram = [String : Int]\n                    ^\n/tmp/tmph_afs6pc.swift:17:34: note: add arguments after the type to construct a value of the type\n    var histogram = [String : Int]\n                                 ^\n                                  ()\n/tmp/tmph_afs6pc.swift:17:34: note: use '.self' to reference the type object\n    var histogram = [String : Int]\n                                 ^\n                                  .self\n/tmp/tmph_afs6pc.swift:25:12: error: cannot convert return expression of type '[String : Int].Type' to return type '[String : Int]'\n    return histogram\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    var max_key: String\n    for i := 0; i < len(test); i++ {\n        if count == 0 {\n            dict = append(dict, test[i])\n            count = 1\n        } else if test[i] == max_key {\n            count += 1\n        } else if count > max {\n            max = count\n            max_key = test[i]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpteu0qnm3.swift:21:12: error: expected type\n    for i := 0; i < len(test); i++ {\n           ^\n            <#type#>\n/tmp/tmpteu0qnm3.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpteu0qnm3.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpteu0qnm3.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // TODO: Implement this function\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp4rzom06e.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_key: String = \"\"\n    for i: Int = 0; i < len(test); i++ {\n        if dict.contains(test[i]) {\n            dict[test[i]] += 1\n        } else {\n            dict[test[i]] = 1\n        }\n        if dict[test[i]] > max {\n            max = dict[test[i]]\n            max_key = test[i]\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpb6r3bdat.swift:20:16: error: expected 'in' after for-each pattern\n    for i: Int = 0; i < len(test); i++ {\n               ^\n/tmp/tmpb6r3bdat.swift:20:16: error: expected Sequence expression for for-each loop\n    for i: Int = 0; i < len(test); i++ {\n               ^\n/tmp/tmpb6r3bdat.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    // TODO: Implement this function\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmp4rzom06e.swift:18:12: error: use [:] to get an empty dictionary literal\n    return []\n           ^\n            :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for i := 0; i < len(test); i++ {\n        if test[i] == max_letter {\n            dict[test[i]] += 1\n        } else {\n            if dict[test[i]] > max {\n                max = dict[test[i]]\n                max_letter = test[i]\n            }\n            dict[test[i]] = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "/tmp/tmpwo8ylvnz.swift:20:12: error: expected type\n    for i := 0; i < len(test); i++ {\n           ^\n            <#type#>\n/tmp/tmpwo8ylvnz.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpwo8ylvnz.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(test); i++ {\n           ^\n/tmp/tmpwo8ylvnz.swift:17:32: error: use [:] to get an empty dictionary literal\n    var dict: [String : Int] = []\n                               ^\n                                :\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}