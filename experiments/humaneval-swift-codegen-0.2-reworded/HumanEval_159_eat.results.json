{
  "name": "HumanEval_159_eat",
  "language": "swift",
  "prompt": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if remaining == 0 {\n        return [number, 0]\n    }\n    return [number, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpecwk3009/tmpecwk3009.swift:54: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79cdcabc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b79cd9a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b79cd9a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b79cd9a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpecwk3009                        0x0000556ff056f384 <unavailable> + 4996\n5    libc.so.6                          0x00002b79cde97460 __libc_start_main + 245\n6    tmpecwk3009                        0x0000556ff056efc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining - number]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpm_3wpgt3/tmpm_3wpgt3.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aade97dbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aade94d2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aade94d2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aade94d17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm_3wpgt3                        0x0000556d656ea384 <unavailable> + 4996\n5    libc.so.6                          0x00002aade99c7460 __libc_start_main + 245\n6    tmpm_3wpgt3                        0x0000556d656e9fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, 0]\n    } else if number == need {\n        return [number, remaining]\n    } else {\n        return [number, number - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpvzc739dy/tmpvzc739dy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5f4ec4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5f4e945b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5f4e945988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5f4e9447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvzc739dy                        0x000055ac65e6a384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5f4ee3a460 __libc_start_main + 245\n6    tmpvzc739dy                        0x000055ac65e69fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [number, need - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpy5w3ojph/tmpy5w3ojph.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af15c1adc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af15bea4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af15bea4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af15bea37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy5w3ojph                        0x0000561a10a09384 <unavailable> + 4996\n5    libc.so.6                          0x00002af15c399460 __libc_start_main + 245\n6    tmpy5w3ojph                        0x0000561a10a08fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, 0]\n    }\n    if number > need {\n        return [number - need, remaining]\n    }\n    return [number, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpm9n8kmlc/tmpm9n8kmlc.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2488a22c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2488719b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2488719988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b24887187b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm9n8kmlc                        0x0000558895bab384 <unavailable> + 4996\n5    libc.so.6                          0x00002b2488c0e460 __libc_start_main + 245\n6    tmpm9n8kmlc                        0x0000558895baafc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    return [number + need, remaining - need]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpxljus3gr/tmpxljus3gr.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32831c7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3282ebeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3282ebe988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3282ebd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxljus3gr                        0x0000558c70d6c658 <unavailable> + 5720\n5    libc.so.6                          0x00002b32833b3460 __libc_start_main + 245\n6    tmpxljus3gr                        0x0000558c70d6bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else if number > 0 {\n        return [number, remaining - number]\n    } else {\n        return [0, remaining]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp93d9vq0x/tmp93d9vq0x.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b53d4a85c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b53d477cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b53d477c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b53d477b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp93d9vq0x                        0x000055fb03a3b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b53d4c71460 __libc_start_main + 245\n6    tmp93d9vq0x                        0x000055fb03a3afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    return [number, need - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp5krxpm5g/tmp5krxpm5g.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b23c764ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b23c7345b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b23c7345988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23c73447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5krxpm5g                        0x000055bcb947a384 <unavailable> + 4996\n5    libc.so.6                          0x00002b23c783a460 __libc_start_main + 245\n6    tmp5krxpm5g                        0x000055bcb9479fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, remaining]\n    } else if number == need {\n        return [number, 0]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp8k286kg9/tmp8k286kg9.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0c55242c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0c54f39b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0c54f39988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0c54f387b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8k286kg9                        0x000056473dc48384 <unavailable> + 4996\n5    libc.so.6                          0x00002b0c5542e460 __libc_start_main + 245\n6    tmp8k286kg9                        0x000056473dc47fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else if number > 0 {\n        return [number, remaining - number]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpr5nycgid/tmpr5nycgid.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8c2f495c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8c2f18cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8c2f18c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8c2f18b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr5nycgid                        0x0000562373c7f384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8c2f681460 __libc_start_main + 245\n6    tmpr5nycgid                        0x0000562373c7efc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    return [number + need, remaining - need]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpxljus3gr/tmpxljus3gr.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32831c7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3282ebeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3282ebe988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3282ebd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxljus3gr                        0x0000558c70d6c658 <unavailable> + 5720\n5    libc.so.6                          0x00002b32833b3460 __libc_start_main + 245\n6    tmpxljus3gr                        0x0000558c70d6bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpf4m0eu35/tmpf4m0eu35.swift:52: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab97052ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab970225b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab970225988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9702247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf4m0eu35                        0x0000563f4a96d384 <unavailable> + 4996\n5    libc.so.6                          0x00002ab97071a460 __libc_start_main + 245\n6    tmpf4m0eu35                        0x0000563f4a96cfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpmsmk2r7m/tmpmsmk2r7m.swift:52: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aadb8e74c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aadb8b6bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aadb8b6b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aadb8b6a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmsmk2r7m                        0x0000555804835384 <unavailable> + 4996\n5    libc.so.6                          0x00002aadb9060460 __libc_start_main + 245\n6    tmpmsmk2r7m                        0x0000555804834fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    return [number + need, remaining - need]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpxljus3gr/tmpxljus3gr.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32831c7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3282ebeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3282ebe988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3282ebd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxljus3gr                        0x0000558c70d6c658 <unavailable> + 5720\n5    libc.so.6                          0x00002b32833b3460 __libc_start_main + 245\n6    tmpxljus3gr                        0x0000558c70d6bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, 0]\n    } else if number > need {\n        return [number - need, remaining]\n    } else {\n        return [number, remaining]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpulaa_kax/tmpulaa_kax.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b05b7d70c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b05b7a67b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b05b7a67988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b05b7a667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpulaa_kax                        0x000055a844f87384 <unavailable> + 4996\n5    libc.so.6                          0x00002b05b7f5c460 __libc_start_main + 245\n6    tmpulaa_kax                        0x000055a844f86fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, 0]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp_r7zcxbc/tmp_r7zcxbc.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b66d3477c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b66d316eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b66d316e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b66d316d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_r7zcxbc                        0x000055fafa08b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b66d3663460 __libc_start_main + 245\n6    tmp_r7zcxbc                        0x000055fafa08afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "/tmp/tmpjzdduxwu.swift:30:1: error: missing return in global function expected to return '[Int]'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else if number > 0 {\n        return [number, remaining - number]\n    } else {\n        return [0, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpk5xnkmrj/tmpk5xnkmrj.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6bfa79fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6bfa496b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6bfa496988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6bfa4957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk5xnkmrj                        0x0000563621282384 <unavailable> + 4996\n5    libc.so.6                          0x00002b6bfa98b460 __libc_start_main + 245\n6    tmpk5xnkmrj                        0x0000563621281fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number > need {\n        return [number, 0]\n    }\n    if number == need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpmh1rteed/tmpmh1rteed.swift:54: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0d795a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0d7929bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0d7929b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0d7929a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmh1rteed                        0x000055e87d326384 <unavailable> + 4996\n5    libc.so.6                          0x00002b0d79790460 __libc_start_main + 245\n6    tmpmh1rteed                        0x000055e87d325fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "/tmp/tmpjzdduxwu.swift:30:1: error: missing return in global function expected to return '[Int]'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    if number < need {\n        return [number, remaining]\n    }\n    if number == need {\n        return [number, 0]\n    }\n    if number > need {\n        return [number - need, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmposikbcon/tmposikbcon.swift:55: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aca0fc9cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aca0f993b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aca0f993988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aca0f9927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposikbcon                        0x00005562beb00384 <unavailable> + 4996\n5    libc.so.6                          0x00002aca0fe88460 __libc_start_main + 245\n6    tmposikbcon                        0x00005562beafffc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, 0]\n    }\n    if number >= need {\n        return [number - need, remaining - need]\n    }\n    return [number, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp23scagip/tmp23scagip.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7f1c64ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7f1c341b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7f1c341988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7f1c3407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp23scagip                        0x0000561771843384 <unavailable> + 4996\n5    libc.so.6                          0x00002b7f1c836460 __libc_start_main + 245\n6    tmp23scagip                        0x0000561771842fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    return [number, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmprkftet4m/tmprkftet4m.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6da218cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6da1e83b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6da1e83988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6da1e827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkftet4m                        0x000055aade280384 <unavailable> + 4996\n5    libc.so.6                          0x00002b6da2378460 __libc_start_main + 245\n6    tmprkftet4m                        0x000055aade27ffc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "/tmp/tmpjzdduxwu.swift:30:1: error: missing return in global function expected to return '[Int]'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining - number]\n    }\n    if number < need and remaining > 0 {\n        return [number, remaining]\n    }\n    if number < need and remaining == 0 {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "/tmp/tmpddhprq_s.swift:32:22: error: expected '{' after 'if' condition\n    if number < need and remaining > 0 {\n                     ^\n/tmp/tmpddhprq_s.swift:35:22: error: expected '{' after 'if' condition\n    if number < need and remaining == 0 {\n                     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number > 0 {\n        if number >= need {\n            return [number, remaining - number]\n        } else {\n            return [number, remaining]\n        }\n    } else {\n        return [0, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpn964zvnh/tmpn964zvnh.swift:53: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af92877bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af928472b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af928472988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9284717b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn964zvnh                        0x000056149c675384 <unavailable> + 4996\n5    libc.so.6                          0x00002af928967460 __libc_start_main + 245\n6    tmpn964zvnh                        0x000056149c674fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number > 0 {\n        if number >= need {\n            return [number, remaining - need]\n        } else {\n            return [number, remaining]\n        }\n    } else {\n        return [0, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6yvr89vz/tmp6yvr89vz.swift:53: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6471a71c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6471768b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6471768988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b64717677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6yvr89vz                        0x0000556b64d00384 <unavailable> + 4996\n5    libc.so.6                          0x00002b6471c5d460 __libc_start_main + 245\n6    tmp6yvr89vz                        0x0000556b64cfffc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "/tmp/tmpjzdduxwu.swift:30:1: error: missing return in global function expected to return '[Int]'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpf4m0eu35/tmpf4m0eu35.swift:52: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab97052ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab970225b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab970225988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9702247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf4m0eu35                        0x0000563f4a96d384 <unavailable> + 4996\n5    libc.so.6                          0x00002ab97071a460 __libc_start_main + 245\n6    tmpf4m0eu35                        0x0000563f4a96cfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining - need]\n    } else {\n        return [number, remaining]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpmfpnc75_/tmpmfpnc75_.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac98fa41c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac98f738b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac98f738988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac98f7377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmfpnc75_                        0x0000562ad4793384 <unavailable> + 4996\n5    libc.so.6                          0x00002ac98fc2d460 __libc_start_main + 245\n6    tmpmfpnc75_                        0x0000562ad4792fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number > need {\n        return [number, remaining]\n    }\n    if number == need {\n        return [number, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp7yy1xe9x/tmp7yy1xe9x.swift:54: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b43e5ea2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b43e5b99b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b43e5b99988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b43e5b987b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7yy1xe9x                        0x00005597f2776384 <unavailable> + 4996\n5    libc.so.6                          0x00002b43e608e460 __libc_start_main + 245\n6    tmp7yy1xe9x                        0x00005597f2775fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp9sgznar2/tmp9sgznar2.swift:54: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b72b9431c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b72b9128b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b72b9128988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b72b91277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9sgznar2                        0x0000557c3f6f4384 <unavailable> + 4996\n5    libc.so.6                          0x00002b72b961d460 __libc_start_main + 245\n6    tmp9sgznar2                        0x0000557c3f6f3fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number > 0 {\n        if number >= need {\n            return [number, remaining - number]\n        } else {\n            return [number, 0]\n        }\n    } else {\n        return [0, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp8x68b0kd/tmp8x68b0kd.swift:53: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3b80e10c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3b80b07b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3b80b07988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3b80b067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8x68b0kd                        0x00005617d7472384 <unavailable> + 4996\n5    libc.so.6                          0x00002b3b80ffc460 __libc_start_main + 245\n6    tmp8x68b0kd                        0x00005617d7471fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    return [number + need, remaining - need]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpxljus3gr/tmpxljus3gr.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32831c7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3282ebeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3282ebe988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3282ebd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxljus3gr                        0x0000558c70d6c658 <unavailable> + 5720\n5    libc.so.6                          0x00002b32833b3460 __libc_start_main + 245\n6    tmpxljus3gr                        0x0000558c70d6bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    return [number, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmprkftet4m/tmprkftet4m.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6da218cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6da1e83b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6da1e83988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6da1e827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkftet4m                        0x000055aade280384 <unavailable> + 4996\n5    libc.so.6                          0x00002b6da2378460 __libc_start_main + 245\n6    tmprkftet4m                        0x000055aade27ffc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    if number >= need {\n        return [number, remaining]\n    }\n    return [number, remaining - need]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpu751wxen/tmpu751wxen.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba1ff077c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba1fed6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba1fed6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba1fed6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu751wxen                        0x0000559b90e18384 <unavailable> + 4996\n5    libc.so.6                          0x00002ba1ff263460 __libc_start_main + 245\n6    tmpu751wxen                        0x0000559b90e17fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "/tmp/tmpjzdduxwu.swift:30:1: error: missing return in global function expected to return '[Int]'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    return [number, need - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp5krxpm5g/tmp5krxpm5g.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b23c764ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b23c7345b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b23c7345988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23c73447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5krxpm5g                        0x000055bcb947a384 <unavailable> + 4996\n5    libc.so.6                          0x00002b23c783a460 __libc_start_main + 245\n6    tmp5krxpm5g                        0x000055bcb9479fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, 0]\n    } else if number > need {\n        return [number - need, remaining]\n    } else {\n        return [number, remaining]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpulaa_kax/tmpulaa_kax.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b05b7d70c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b05b7a67b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b05b7a67988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b05b7a667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpulaa_kax                        0x000055a844f87384 <unavailable> + 4996\n5    libc.so.6                          0x00002b05b7f5c460 __libc_start_main + 245\n6    tmpulaa_kax                        0x000055a844f86fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, 0]\n    } else if number == need {\n        return [number, remaining]\n    } else {\n        return [number, number - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpvzc739dy/tmpvzc739dy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5f4ec4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5f4e945b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5f4e945988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5f4e9447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvzc739dy                        0x000055ac65e6a384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5f4ee3a460 __libc_start_main + 245\n6    tmpvzc739dy                        0x000055ac65e69fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining - need]\n    } else {\n        return [number, remaining]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpmfpnc75_/tmpmfpnc75_.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac98fa41c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac98f738b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac98f738988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac98f7377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmfpnc75_                        0x0000562ad4793384 <unavailable> + 4996\n5    libc.so.6                          0x00002ac98fc2d460 __libc_start_main + 245\n6    tmpmfpnc75_                        0x0000562ad4792fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "/tmp/tmpjzdduxwu.swift:30:1: error: missing return in global function expected to return '[Int]'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpf4m0eu35/tmpf4m0eu35.swift:52: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab97052ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab970225b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab970225988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9702247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf4m0eu35                        0x0000563f4a96d384 <unavailable> + 4996\n5    libc.so.6                          0x00002ab97071a460 __libc_start_main + 245\n6    tmpf4m0eu35                        0x0000563f4a96cfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp2cxc7ha3/tmp2cxc7ha3.swift:54: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3b8d087c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3b8cd7eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3b8cd7e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3b8cd7d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2cxc7ha3                        0x0000556e87440384 <unavailable> + 4996\n5    libc.so.6                          0x00002b3b8d273460 __libc_start_main + 245\n6    tmp2cxc7ha3                        0x0000556e8743ffc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [number, need - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpy5w3ojph/tmpy5w3ojph.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af15c1adc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af15bea4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af15bea4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af15bea37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy5w3ojph                        0x0000561a10a09384 <unavailable> + 4996\n5    libc.so.6                          0x00002af15c399460 __libc_start_main + 245\n6    tmpy5w3ojph                        0x0000561a10a08fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    return [number, need - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp5krxpm5g/tmp5krxpm5g.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b23c764ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b23c7345b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b23c7345988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23c73447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5krxpm5g                        0x000055bcb947a384 <unavailable> + 4996\n5    libc.so.6                          0x00002b23c783a460 __libc_start_main + 245\n6    tmp5krxpm5g                        0x000055bcb9479fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    return [number, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmprkftet4m/tmprkftet4m.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6da218cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6da1e83b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6da1e83988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6da1e827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkftet4m                        0x000055aade280384 <unavailable> + 4996\n5    libc.so.6                          0x00002b6da2378460 __libc_start_main + 245\n6    tmprkftet4m                        0x000055aade27ffc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, 0]\n    } else if number > need {\n        return [number - need, remaining]\n    } else {\n        return [number, remaining]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpulaa_kax/tmpulaa_kax.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b05b7d70c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b05b7a67b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b05b7a67988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b05b7a667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpulaa_kax                        0x000055a844f87384 <unavailable> + 4996\n5    libc.so.6                          0x00002b05b7f5c460 __libc_start_main + 245\n6    tmpulaa_kax                        0x000055a844f86fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    var result [2]Int\n    if number < need {\n        result[0] = number\n        result[1] = remaining\n    } else {\n        result[0] = need\n        result[1] = remaining - number\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "/tmp/tmpnpescon1.swift:30:15: error: consecutive statements on a line must be separated by ';'\n    var result [2]Int\n              ^\n              ;\n/tmp/tmpnpescon1.swift:30:19: error: consecutive statements on a line must be separated by ';'\n    var result [2]Int\n                  ^\n                  ;\n/tmp/tmpnpescon1.swift:30:9: error: type annotation missing in pattern\n    var result [2]Int\n        ^\n/tmp/tmpnpescon1.swift:30:16: warning: expression of type '[Int]' is unused\n    var result [2]Int\n               ^~~\n/tmp/tmpnpescon1.swift:30:19: error: expected member name or constructor call after type name\n    var result [2]Int\n                  ^\n/tmp/tmpnpescon1.swift:30:19: note: add arguments after the type to construct a value of the type\n    var result [2]Int\n                  ^\n                     ()\n/tmp/tmpnpescon1.swift:30:19: note: use '.self' to reference the type object\n    var result [2]Int\n                  ^\n                     .self\n/tmp/tmpnpescon1.swift:30:19: warning: expression of type 'Int.Type' is unused\n    var result [2]Int\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number < 0 {\n        return [0, 0]\n    }\n    if need < 0 {\n        return [0, 0]\n    }\n    if remaining < 0 {\n        return [0, 0]\n    }\n    if number < need {\n        return [number, remaining]\n    }\n    if number == need {\n        return [number, remaining - number]\n    }\n    if number > need {\n        return [number - need, remaining]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "/tmp/tmpy4e_w6oe.swift:53:1: error: missing return in global function expected to return '[Int]'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp9sgznar2/tmp9sgznar2.swift:54: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b72b9431c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b72b9128b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b72b9128988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b72b91277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9sgznar2                        0x0000557c3f6f4384 <unavailable> + 4996\n5    libc.so.6                          0x00002b72b961d460 __libc_start_main + 245\n6    tmp9sgznar2                        0x0000557c3f6f3fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, 0]\n    }\n    if number == need {\n        return [number, remaining]\n    }\n    if number > need {\n        return [number - need, remaining - need]\n    }\n    return [number, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmphw8kcir8/tmphw8kcir8.swift:54: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afce5f9ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afce5c91b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afce5c91988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afce5c907b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphw8kcir8                        0x000055d2636c5384 <unavailable> + 4996\n5    libc.so.6                          0x00002afce6186460 __libc_start_main + 245\n6    tmphw8kcir8                        0x000055d2636c4fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need and remaining >= need - number {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "/tmp/tmpek9us_3z.swift:32:22: error: expected '{' after 'if' condition\n    if number < need and remaining >= need - number {\n                     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, remaining]\n    } else {\n        return [number - need, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp0f8bgdla/tmp0f8bgdla.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b21287d8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b21284cfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b21284cf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b21284ce7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0f8bgdla                        0x000056394b754384 <unavailable> + 4996\n5    libc.so.6                          0x00002b21289c4460 __libc_start_main + 245\n6    tmp0f8bgdla                        0x000056394b753fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, 0]\n    } else if number > need {\n        return [number - need, remaining]\n    } else {\n        return [number, remaining]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpulaa_kax/tmpulaa_kax.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b05b7d70c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b05b7a67b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b05b7a67988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b05b7a667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpulaa_kax                        0x000055a844f87384 <unavailable> + 4996\n5    libc.so.6                          0x00002b05b7f5c460 __libc_start_main + 245\n6    tmpulaa_kax                        0x000055a844f86fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "/tmp/tmpjzdduxwu.swift:30:1: error: missing return in global function expected to return '[Int]'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp9sgznar2/tmp9sgznar2.swift:54: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b72b9431c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b72b9128b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b72b9128988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b72b91277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9sgznar2                        0x0000557c3f6f4384 <unavailable> + 4996\n5    libc.so.6                          0x00002b72b961d460 __libc_start_main + 245\n6    tmp9sgznar2                        0x0000557c3f6f3fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    return [number, remaining - need]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpksatssmz/tmpksatssmz.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b971747dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9717174b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9717174988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b97171737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpksatssmz                        0x0000564ba5190384 <unavailable> + 4996\n5    libc.so.6                          0x00002b9717669460 __libc_start_main + 245\n6    tmpksatssmz                        0x0000564ba518ffc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, remaining]\n    }\n    if number == need {\n        return [number, 0]\n    }\n    if number > need {\n        return [number - need, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "/tmp/tmp_twwwgjv.swift:38:1: error: missing return in global function expected to return '[Int]'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    return [number, need - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpyizjyxwv/tmpyizjyxwv.swift:52: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4b20280c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4b1ff77b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4b1ff77988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4b1ff767b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyizjyxwv                        0x000055722b1a4384 <unavailable> + 4996\n5    libc.so.6                          0x00002b4b2046c460 __libc_start_main + 245\n6    tmpyizjyxwv                        0x000055722b1a3fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpegq8o7aq/tmpegq8o7aq.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00402f2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b003ffe9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b003ffe9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b003ffe87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpegq8o7aq                        0x0000556f9a6d3384 <unavailable> + 4996\n5    libc.so.6                          0x00002b00404de460 __libc_start_main + 245\n6    tmpegq8o7aq                        0x0000556f9a6d2fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, 0]\n    } else if number > need {\n        return [number - need, remaining]\n    } else {\n        return [number, remaining]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpulaa_kax/tmpulaa_kax.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b05b7d70c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b05b7a67b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b05b7a67988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b05b7a667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpulaa_kax                        0x000055a844f87384 <unavailable> + 4996\n5    libc.so.6                          0x00002b05b7f5c460 __libc_start_main + 245\n6    tmpulaa_kax                        0x000055a844f86fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    return [number + need, remaining - need]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpxljus3gr/tmpxljus3gr.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32831c7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3282ebeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3282ebe988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3282ebd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxljus3gr                        0x0000558c70d6c658 <unavailable> + 5720\n5    libc.so.6                          0x00002b32833b3460 __libc_start_main + 245\n6    tmpxljus3gr                        0x0000558c70d6bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need and remaining > 0 {\n        return [number + remaining, remaining - number]\n    }\n    return [number, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "/tmp/tmph06eqs3h.swift:32:22: error: expected '{' after 'if' condition\n    if number < need and remaining > 0 {\n                     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpegq8o7aq/tmpegq8o7aq.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00402f2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b003ffe9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b003ffe9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b003ffe87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpegq8o7aq                        0x0000556f9a6d3384 <unavailable> + 4996\n5    libc.so.6                          0x00002b00404de460 __libc_start_main + 245\n6    tmpegq8o7aq                        0x0000556f9a6d2fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, 0]\n    }\n    if number < need and remaining > 0 {\n        return [number + remaining, remaining]\n    }\n    return [number, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "/tmp/tmpb5njfrhr.swift:32:22: error: expected '{' after 'if' condition\n    if number < need and remaining > 0 {\n                     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "/tmp/tmpjzdduxwu.swift:30:1: error: missing return in global function expected to return '[Int]'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    return [number, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmprkftet4m/tmprkftet4m.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6da218cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6da1e83b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6da1e83988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6da1e827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkftet4m                        0x000055aade280384 <unavailable> + 4996\n5    libc.so.6                          0x00002b6da2378460 __libc_start_main + 245\n6    tmprkftet4m                        0x000055aade27ffc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number > 0 {\n        if number >= need {\n            return [number, remaining - need]\n        } else {\n            return [number, remaining]\n        }\n    } else {\n        return [0, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6yvr89vz/tmp6yvr89vz.swift:53: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6471a71c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6471768b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6471768988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b64717677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6yvr89vz                        0x0000556b64d00384 <unavailable> + 4996\n5    libc.so.6                          0x00002b6471c5d460 __libc_start_main + 245\n6    tmp6yvr89vz                        0x0000556b64cfffc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    return [number, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmprkftet4m/tmprkftet4m.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6da218cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6da1e83b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6da1e83988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6da1e827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkftet4m                        0x000055aade280384 <unavailable> + 4996\n5    libc.so.6                          0x00002b6da2378460 __libc_start_main + 245\n6    tmprkftet4m                        0x000055aade27ffc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number > need {\n        return [number, 0]\n    }\n    if number == need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number + need, remaining - number]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpn_iqj1qq/tmpn_iqj1qq.swift:54: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9351f4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9351c46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9351c46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9351c457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn_iqj1qq                        0x00005622921b8384 <unavailable> + 4996\n5    libc.so.6                          0x00002b935213b460 __libc_start_main + 245\n6    tmpn_iqj1qq                        0x00005622921b7fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [number, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmprdyuc_yy/tmprdyuc_yy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac42fe1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac42cd8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac42cd8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac42cd77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprdyuc_yy                        0x0000559c79772384 <unavailable> + 4996\n5    libc.so.6                          0x00002aac431cd460 __libc_start_main + 245\n6    tmprdyuc_yy                        0x0000559c79771fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining - number]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpm_3wpgt3/tmpm_3wpgt3.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aade97dbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aade94d2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aade94d2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aade94d17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm_3wpgt3                        0x0000556d656ea384 <unavailable> + 4996\n5    libc.so.6                          0x00002aade99c7460 __libc_start_main + 245\n6    tmpm_3wpgt3                        0x0000556d656e9fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpegq8o7aq/tmpegq8o7aq.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00402f2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b003ffe9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b003ffe9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b003ffe87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpegq8o7aq                        0x0000556f9a6d3384 <unavailable> + 4996\n5    libc.so.6                          0x00002b00404de460 __libc_start_main + 245\n6    tmpegq8o7aq                        0x0000556f9a6d2fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, remaining]\n    }\n    if number > need {\n        return [number - need, remaining - need]\n    }\n    return [number, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpt4j8gm6q/tmpt4j8gm6q.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2d08646c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2d0833db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2d0833d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2d0833c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt4j8gm6q                        0x000055de09c18384 <unavailable> + 4996\n5    libc.so.6                          0x00002b2d08832460 __libc_start_main + 245\n6    tmpt4j8gm6q                        0x000055de09c17fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    return [number, need - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp5krxpm5g/tmp5krxpm5g.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b23c764ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b23c7345b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b23c7345988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23c73447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5krxpm5g                        0x000055bcb947a384 <unavailable> + 4996\n5    libc.so.6                          0x00002b23c783a460 __libc_start_main + 245\n6    tmp5krxpm5g                        0x000055bcb9479fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "tmp65niops3/tmp65niops3.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af1e6ea5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af1e6b9cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af1e6b9c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af1e6b9b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp65niops3                        0x0000561b2bbc0384 <unavailable> + 4996\n5    libc.so.6                          0x00002af1e7091460 __libc_start_main + 245\n6    tmp65niops3                        0x0000561b2bbbffc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number > need {\n        return [number, 0]\n    }\n    if number == need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number + need, remaining - number]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpn_iqj1qq/tmpn_iqj1qq.swift:54: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9351f4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9351c46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9351c46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9351c457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn_iqj1qq                        0x00005622921b8384 <unavailable> + 4996\n5    libc.so.6                          0x00002b935213b460 __libc_start_main + 245\n6    tmpn_iqj1qq                        0x00005622921b7fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp9sgznar2/tmp9sgznar2.swift:54: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b72b9431c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b72b9128b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b72b9128988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b72b91277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9sgznar2                        0x0000557c3f6f4384 <unavailable> + 4996\n5    libc.so.6                          0x00002b72b961d460 __libc_start_main + 245\n6    tmp9sgznar2                        0x0000557c3f6f3fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number > 0 {\n        if number >= need {\n            return [number, remaining - need]\n        } else {\n            return [number, 0]\n        }\n    } else {\n        return [0, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "tmpbjf34xmd/tmpbjf34xmd.swift:53: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad709ba6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad70989db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad70989d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad70989c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbjf34xmd                        0x000055d0bacca384 <unavailable> + 4996\n5    libc.so.6                          0x00002ad709d92460 __libc_start_main + 245\n6    tmpbjf34xmd                        0x000055d0bacc9fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining - need]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "tmpb7no4ndl/tmpb7no4ndl.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1e9b17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1e980eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1e980e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1e980d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb7no4ndl                        0x0000560de5dba384 <unavailable> + 4996\n5    libc.so.6                          0x00002ab1e9d03460 __libc_start_main + 245\n6    tmpb7no4ndl                        0x0000560de5db9fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp9sgznar2/tmp9sgznar2.swift:54: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b72b9431c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b72b9128b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b72b9128988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b72b91277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9sgznar2                        0x0000557c3f6f4384 <unavailable> + 4996\n5    libc.so.6                          0x00002b72b961d460 __libc_start_main + 245\n6    tmp9sgznar2                        0x0000557c3f6f3fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining - number]\n    }\n    if number > 0 {\n        return [number, remaining]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "tmpxdqr1f3x/tmpxdqr1f3x.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1cef510c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1cef207b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1cef207988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1cef2067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxdqr1f3x                        0x000055f60a8a3384 <unavailable> + 4996\n5    libc.so.6                          0x00002b1cef6fc460 __libc_start_main + 245\n6    tmpxdqr1f3x                        0x000055f60a8a2fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "tmp3p6_y308/tmp3p6_y308.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c5f118c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c5ee0fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c5ee0f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c5ee0e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3p6_y308                        0x0000559b405e5384 <unavailable> + 4996\n5    libc.so.6                          0x00002b9c5f304460 __libc_start_main + 245\n6    tmp3p6_y308                        0x0000559b405e4fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, remaining - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "tmp1vhr7uqp/tmp1vhr7uqp.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2c865c7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2c862beb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2c862be988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2c862bd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1vhr7uqp                        0x0000556fad7b7384 <unavailable> + 4996\n5    libc.so.6                          0x00002b2c867b3460 __libc_start_main + 245\n6    tmp1vhr7uqp                        0x0000556fad7b6fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining - number]\n    }\n    return [number, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "tmp9pi9gyjx/tmp9pi9gyjx.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d16b54c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d1684bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d1684b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d1684a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9pi9gyjx                        0x0000555fd86e4384 <unavailable> + 4996\n5    libc.so.6                          0x00002b4d16d40460 __libc_start_main + 245\n6    tmp9pi9gyjx                        0x0000555fd86e3fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp9sgznar2/tmp9sgznar2.swift:54: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b72b9431c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b72b9128b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b72b9128988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b72b91277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9sgznar2                        0x0000557c3f6f4384 <unavailable> + 4996\n5    libc.so.6                          0x00002b72b961d460 __libc_start_main + 245\n6    tmp9sgznar2                        0x0000557c3f6f3fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpegq8o7aq/tmpegq8o7aq.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00402f2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b003ffe9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b003ffe9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b003ffe87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpegq8o7aq                        0x0000556f9a6d3384 <unavailable> + 4996\n5    libc.so.6                          0x00002b00404de460 __libc_start_main + 245\n6    tmpegq8o7aq                        0x0000556f9a6d2fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp9sgznar2/tmp9sgznar2.swift:54: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b72b9431c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b72b9128b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b72b9128988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b72b91277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9sgznar2                        0x0000557c3f6f4384 <unavailable> + 4996\n5    libc.so.6                          0x00002b72b961d460 __libc_start_main + 245\n6    tmp9sgznar2                        0x0000557c3f6f3fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    return [number + need, remaining - need]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpxljus3gr/tmpxljus3gr.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32831c7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3282ebeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3282ebe988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3282ebd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxljus3gr                        0x0000558c70d6c658 <unavailable> + 5720\n5    libc.so.6                          0x00002b32833b3460 __libc_start_main + 245\n6    tmpxljus3gr                        0x0000558c70d6bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, 0]\n    } else if number > need {\n        return [number - need, remaining]\n    } else {\n        return [number, remaining]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpulaa_kax/tmpulaa_kax.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b05b7d70c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b05b7a67b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b05b7a67988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b05b7a667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpulaa_kax                        0x000055a844f87384 <unavailable> + 4996\n5    libc.so.6                          0x00002b05b7f5c460 __libc_start_main + 245\n6    tmpulaa_kax                        0x000055a844f86fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, remaining]\n    } else {\n        return [number + need, remaining - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "tmp5e6r3u3m/tmp5e6r3u3m.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a29773c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a2946ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a2946a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a294697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5e6r3u3m                        0x0000564c3ddff384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a2995f460 __libc_start_main + 245\n6    tmp5e6r3u3m                        0x0000564c3ddfefc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number > 0 {\n        if number >= need {\n            return [number, remaining - number]\n        } else {\n            return [number, remaining]\n        }\n    } else {\n        return [0, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpn964zvnh/tmpn964zvnh.swift:53: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af92877bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af928472b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af928472988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9284717b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn964zvnh                        0x000056149c675384 <unavailable> + 4996\n5    libc.so.6                          0x00002af928967460 __libc_start_main + 245\n6    tmpn964zvnh                        0x000056149c674fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "/tmp/tmpjzdduxwu.swift:30:1: error: missing return in global function expected to return '[Int]'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else if number > 0 {\n        return [number, remaining - number]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpr5nycgid/tmpr5nycgid.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8c2f495c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8c2f18cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8c2f18c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8c2f18b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr5nycgid                        0x0000562373c7f384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8c2f681460 __libc_start_main + 245\n6    tmpr5nycgid                        0x0000562373c7efc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "tmp3p6_y308/tmp3p6_y308.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c5f118c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c5ee0fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c5ee0f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c5ee0e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3p6_y308                        0x0000559b405e5384 <unavailable> + 4996\n5    libc.so.6                          0x00002b9c5f304460 __libc_start_main + 245\n6    tmp3p6_y308                        0x0000559b405e4fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpegq8o7aq/tmpegq8o7aq.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00402f2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b003ffe9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b003ffe9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b003ffe87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpegq8o7aq                        0x0000556f9a6d3384 <unavailable> + 4996\n5    libc.so.6                          0x00002b00404de460 __libc_start_main + 245\n6    tmpegq8o7aq                        0x0000556f9a6d2fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "tmpphsl_kxg/tmpphsl_kxg.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab6487d4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6484cbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6484cb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6484ca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpphsl_kxg                        0x0000564b06ca4384 <unavailable> + 4996\n5    libc.so.6                          0x00002ab6489c0460 __libc_start_main + 245\n6    tmpphsl_kxg                        0x0000564b06ca3fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining - need]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "tmpb7no4ndl/tmpb7no4ndl.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1e9b17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1e980eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1e980e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1e980d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb7no4ndl                        0x0000560de5dba384 <unavailable> + 4996\n5    libc.so.6                          0x00002ab1e9d03460 __libc_start_main + 245\n6    tmpb7no4ndl                        0x0000560de5db9fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, 0]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp_r7zcxbc/tmp_r7zcxbc.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b66d3477c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b66d316eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b66d316e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b66d316d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_r7zcxbc                        0x000055fafa08b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b66d3663460 __libc_start_main + 245\n6    tmp_r7zcxbc                        0x000055fafa08afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp6up3q9sg/tmp6up3q9sg.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf63fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf63cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf63cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf63cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6up3q9sg                        0x00005623c195e384 <unavailable> + 4996\n5    libc.so.6                          0x00002abf641b5460 __libc_start_main + 245\n6    tmp6up3q9sg                        0x00005623c195dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpzokh9yiy/tmpzokh9yiy.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e09558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e0924fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e0924f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e0924e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzokh9yiy                        0x000055b5fe031384 <unavailable> + 4996\n5    libc.so.6                          0x00002b5e09744460 __libc_start_main + 245\n6    tmpzokh9yiy                        0x000055b5fe030fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need and remaining >= need - number {\n        return [number + remaining, 0]\n    }\n    return [number, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "/tmp/tmp26eazjnq.swift:32:22: error: expected '{' after 'if' condition\n    if number < need and remaining >= need - number {\n                     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    var result [2]Int\n    result[0] = number + need\n    result[1] = remaining - need\n    if result[1] < 0 {\n        result[1] = 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "/tmp/tmp19ss2fk7.swift:30:15: error: consecutive statements on a line must be separated by ';'\n    var result [2]Int\n              ^\n              ;\n/tmp/tmp19ss2fk7.swift:30:19: error: consecutive statements on a line must be separated by ';'\n    var result [2]Int\n                  ^\n                  ;\n/tmp/tmp19ss2fk7.swift:30:9: error: type annotation missing in pattern\n    var result [2]Int\n        ^\n/tmp/tmp19ss2fk7.swift:30:16: warning: expression of type '[Int]' is unused\n    var result [2]Int\n               ^~~\n/tmp/tmp19ss2fk7.swift:30:19: error: expected member name or constructor call after type name\n    var result [2]Int\n                  ^\n/tmp/tmp19ss2fk7.swift:30:19: note: add arguments after the type to construct a value of the type\n    var result [2]Int\n                  ^\n                     ()\n/tmp/tmp19ss2fk7.swift:30:19: note: use '.self' to reference the type object\n    var result [2]Int\n                  ^\n                     .self\n/tmp/tmp19ss2fk7.swift:30:19: warning: expression of type 'Int.Type' is unused\n    var result [2]Int\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmp3xgusb0m/tmp3xgusb0m.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a886cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a883c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a883c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a883c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3xgusb0m                        0x000055ed3c74b384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8a888b6460 __libc_start_main + 245\n6    tmp3xgusb0m                        0x000055ed3c74afc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    // Write your code here\n    if number >= need {\n        return [number, remaining]\n    }\n    if number >= remaining {\n        return [number, 0]\n    }\n    return [number, remaining - number]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "tmp799fa6bg/tmp799fa6bg.swift:52: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba1a616ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba1a5e65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba1a5e65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba1a5e647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp799fa6bg                        0x0000564a03279384 <unavailable> + 4996\n5    libc.so.6                          0x00002ba1a635a460 __libc_start_main + 245\n6    tmp799fa6bg                        0x0000564a03278fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number < need {\n        return [number, 0]\n    } else if number == need {\n        return [number, remaining]\n    } else {\n        return [number - need, remaining - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "tmpmtgm2am8/tmpmtgm2am8.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad2565c2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad2562b9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad2562b9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad2562b87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmtgm2am8                        0x000055f1d1d70384 <unavailable> + 4996\n5    libc.so.6                          0x00002ad2567ae460 __libc_start_main + 245\n6    tmpmtgm2am8                        0x000055f1d1d6ffc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "tmpb5nwapew/tmpb5nwapew.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f74f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f74c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f74c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f74c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5nwapew                        0x000056447225c384 <unavailable> + 4996\n5    libc.so.6                          0x00002b8f7515a460 __libc_start_main + 245\n6    tmpb5nwapew                        0x000056447225bfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}