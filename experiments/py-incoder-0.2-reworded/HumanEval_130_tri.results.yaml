name: HumanEval_130_tri
language: py
results:
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1,\
    \ 3]\n    else:\n        mid = n // 2\n        left = tri(mid)\n        right\
    \ = tri(mid - 1) + tri(mid - 2) + tri(mid + 1) + tri(mid + 2)\n        return\
    \ left + right\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk89du73j.py\"\
    , line 48, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk89du73j.py\"\
    , line 46, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk89du73j.py\"\
    , line 34, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk89du73j.py\"\
    , line 30, in tri\n    right = tri(mid - 1) + tri(mid - 2) + tri(mid + 1) + tri(mid\
    \ + 2)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk89du73j.py\"\
    , line 29, in tri\n    left = tri(mid)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk89du73j.py\"\
    , line 29, in tri\n    left = tri(mid)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk89du73j.py\"\
    , line 29, in tri\n    left = tri(mid)\n  [Previous line repeated 992 more times]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk89du73j.py\", line\
    \ 21, in tri\n    if n == 0:\nRecursionError: maximum recursion depth exceeded\
    \ in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpzg47db.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpzg47db.py\"\
    , line 43, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpzg47db.py\"\
    , line 31, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpzg47db.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\
    \ + tri(n + 2) + tri(n + 3)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpzg47db.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpzg47db.py\", line 28, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n +\
    \ 2) + tri(n + 3)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpzg47db.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpzg47db.py\", line 28, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n +\
    \ 2) + tri(n + 3)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpzg47db.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpzg47db.py\", line 28, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n +\
    \ 2) + tri(n + 3)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpzg47db.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpzg47db.py\", line 28, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n +\
    \ 2) + tri(n + 3)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpzg47db.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpzg47db.py\", line 28,"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [0, 0, 0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return\
    \ [1, 3]\n    else:\n        tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \      tri_2 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        tri_3 = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n        return [tri_1, tri_2, tri_3]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hkz9w9g.py\"\
    , line 48, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hkz9w9g.py\"\
    , line 46, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hkz9w9g.py\"\
    , line 34, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hkz9w9g.py\"\
    , line 28, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hkz9w9g.py\", line 28, in\
    \ tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hkz9w9g.py\"\
    , line 28, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  [Previous\
    \ line repeated 993 more times]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hkz9w9g.py\"\
    , line 21, in tri\n    if n == 0:\nRecursionError: maximum recursion depth exceeded\
    \ in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    elif n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n -\
    \ 1)]\n    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n + 1) + tri(n + 2)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfmgzi6w.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfmgzi6w.py\"\
    , line 41, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfmgzi6w.py\"\
    , line 29, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfmgzi6w.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n + 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfmgzi6w.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfmgzi6w.py\", line 24, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfmgzi6w.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n + 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfmgzi6w.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfmgzi6w.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n +\
    \ 1) + tri(n + 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfmgzi6w.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfmgzi6w.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n +\
    \ 1) + tri(n + 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfmgzi6w.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfmgzi6w.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n +\
    \ 1) + tri(n + 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfmgzi6"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [1,3]\n    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n      \
    \  return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuiuu9mk2.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuiuu9mk2.py\"\
    , line 43, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuiuu9mk2.py\"\
    , line 31, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuiuu9mk2.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuiuu9mk2.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuiuu9mk2.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuiuu9mk2.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuiuu9mk2.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuiuu9mk2.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuiuu9mk2.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuiuu9mk2.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuiuu9mk2.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuiuu9mk2.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuiuu9mk2.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [1,3]\n    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n      \
    \  return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7ri0mwb.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7ri0mwb.py\"\
    , line 43, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7ri0mwb.py\"\
    , line 31, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7ri0mwb.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7ri0mwb.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7ri0mwb.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7ri0mwb.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7ri0mwb.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7ri0mwb.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7ri0mwb.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7ri0mwb.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7ri0mwb.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7ri0mwb.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7ri0mwb.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n\
    \    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 3)]\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm89dyy2e.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm89dyy2e.py\"\
    , line 41, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm89dyy2e.py\"\
    , line 29, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm89dyy2e.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n -\
    \ 2) + tri(n - 3)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm89dyy2e.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm89dyy2e.py\", line 24, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm89dyy2e.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n -\
    \ 2) + tri(n - 3)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm89dyy2e.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm89dyy2e.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n -\
    \ 3)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm89dyy2e.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm89dyy2e.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n -\
    \ 3)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm89dyy2e.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm89dyy2e.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n -\
    \ 3)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm89dyy2e.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) +"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswhhkkcc.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswhhkkcc.py\"\
    , line 41, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswhhkkcc.py\"\
    , line 29, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswhhkkcc.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswhhkkcc.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswhhkkcc.py\", line 24, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswhhkkcc.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswhhkkcc.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswhhkkcc.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswhhkkcc.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswhhkkcc.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswhhkkcc.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswhhkkcc.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n)]\n  File \"/var/folders/2"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [1,3]\n    if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return\
    \ [tri(n-1) + tri(n-2), tri(n-1)]\n    else:\n        return [tri(n-1) + tri(n-2),\
    \ tri(n-1) + tri(n-1)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpstf16lzh.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpstf16lzh.py\"\
    , line 43, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpstf16lzh.py\"\
    , line 31, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return\
    \ [3, 3]\n    else:\n        tri_sum = 0\n        for i in range(1, n+1):\n  \
    \          tri_sum += tri(i - 1) + tri(i - 2) + tri(i + 1) \n        return tri_sum\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplw5_nh_c.py\"\
    , line 48, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplw5_nh_c.py\"\
    , line 46, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplw5_nh_c.py\"\
    , line 34, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplw5_nh_c.py\"\
    , line 30, in tri\n    tri_sum += tri(i - 1) + tri(i - 2) + tri(i + 1) \nTypeError:\
    \ can only concatenate list (not \"int\") to list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [1,3]\n    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n      \
    \  return tri(n-1) + tri(n-2)\n    else:\n        return tri(n-1) + tri(n-2) +\
    \ tri(n+1)\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 43, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 31, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 28, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 26, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 28, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 26, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 28, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 26, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 28, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 26, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 28, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 26, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 28, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 26, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nwlj59n.py\"\
    , line 28, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n       \
    \ return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n   \
    \ else:\n        return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71f_ys54.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71f_ys54.py\"\
    , line 43, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71f_ys54.py\"\
    , line 31, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71f_ys54.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71f_ys54.py\", line\
    \ 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71f_ys54.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71f_ys54.py\", line\
    \ 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71f_ys54.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71f_ys54.py\", line\
    \ 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71f_ys54.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71f_ys54.py\", line\
    \ 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71f_ys54.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71f_ys54.py\", line\
    \ 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71f_ys54.py\""
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n\
    \    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) +\
    \ tri(n + 1) + tri(n + 2)]\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgrlgx4q.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgrlgx4q.py\"\
    , line 41, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgrlgx4q.py\"\
    , line 29, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgrlgx4q.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n + 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgrlgx4q.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgrlgx4q.py\", line 24, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgrlgx4q.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n + 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgrlgx4q.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgrlgx4q.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n +\
    \ 1) + tri(n + 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgrlgx4q.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgrlgx4q.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n +\
    \ 1) + tri(n + 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgrlgx4q.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgrlgx4q.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n +\
    \ 1) + tri(n + 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgrlgx4"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [1,3]\n    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n      \
    \  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  \
    \  else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9tzu70g.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9tzu70g.py\"\
    , line 43, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9tzu70g.py\"\
    , line 31, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9tzu70g.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9tzu70g.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9tzu70g.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9tzu70g.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9tzu70g.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9tzu70g.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9tzu70g.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9tzu70g.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9tzu70g.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n       \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja2ctmyk.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja2ctmyk.py\"\
    , line 43, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja2ctmyk.py\"\
    , line 31, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja2ctmyk.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja2ctmyk.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja2ctmyk.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja2ctmyk.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja2ctmyk.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja2ctmyk.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja2ctmyk.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja2ctmyk.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja2ctmyk.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja2ctmyk.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja2ctmyk.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \    else:\n        return [tri(n - 1) + tri(n - 2)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqxeabx5.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqxeabx5.py\"\
    , line 41, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqxeabx5.py\"\
    , line 29, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqxeabx5.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqxeabx5.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqxeabx5.py\", line 24, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqxeabx5.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqxeabx5.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqxeabx5.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqxeabx5.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqxeabx5.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqxeabx5.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqxeabx5.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqxeabx5.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqxeabx5.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2)]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n       \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2alirq8.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2alirq8.py\"\
    , line 43, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2alirq8.py\"\
    , line 31, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2alirq8.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\
    \ + tri(n + 2) + tri(n + 3)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2alirq8.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2alirq8.py\", line 28, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n +\
    \ 2) + tri(n + 3)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2alirq8.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2alirq8.py\", line 28, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n +\
    \ 2) + tri(n + 3)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2alirq8.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2alirq8.py\", line 28, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n +\
    \ 2) + tri(n + 3)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2alirq8.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2alirq8.py\", line 28, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n +\
    \ 2) + tri(n + 3)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2alirq8.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2alirq8.py\", line 28,"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [1,3]\n    if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp24atwiuk.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp24atwiuk.py\"\
    , line 43, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp24atwiuk.py\"\
    , line 31, in check\n    assert candidate(3) == [1, 3, 2, 8]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp24atwiuk.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp24atwiuk.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp24atwiuk.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp24atwiuk.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp24atwiuk.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp24atwiuk.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp24atwiuk.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp24atwiuk.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp24atwiuk.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp24atwiuk.py\", line\
    \ 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp24atwiuk.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [1,3]\n    if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n    else:\n\
    \        return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpysk_s7dm.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpysk_s7dm.py\"\
    , line 43, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpysk_s7dm.py\"\
    , line 31, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [1,3]\n    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return\
    \ [1,3,5]\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n\
    \ + 1) + tri(n + 2) + tri(n + 3)\n</cell>\n<cell>\ntri(10)\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwco_vsm6.py\"\
    , line 31\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
