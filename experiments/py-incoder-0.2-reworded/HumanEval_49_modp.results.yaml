name: HumanEval_49_modp
language: py
results:
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    return (((p * p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_uhye7zg.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_uhye7zg.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp_uhye7zg.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ n - (n % p)\n    if p % 2 == 0:\n        return n - 1\n    return n\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5jget0n.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpg5jget0n.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpg5jget0n.py\", line 29, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p - (((p * p) % p) // 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpti5j_95e.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpti5j_95e.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpti5j_95e.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p % p * p % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp06647qsq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp06647qsq.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp06647qsq.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p - 1\n    if n == 3:\n        return p - (p - 1)\n    if n == 4:\n        return\
    \ p - (p - 2)\n    if n == 5:\n        return p - (p - 3)\n    if n == 6:\n  \
    \      return p - (p - 4)\n    if n == 7:\n        return p - (p - 5)\n    if\
    \ n == 8:\n        return p - (p - 6)\n    if n == 9:\n        return p - (p -\
    \ 7)\n    if n == 10:\n        return p - (p - 8)\n    if n == 11:\n        return\
    \ p - (p - 9)\n    if n == 12:\n        return p - (p - 10)\n    if n == 13:\n\
    \        return p - (p - 11)\n    if n == 14:\n        return p - (p - 12)\n \
    \   if n == 15:\n        return p - (p - 13)\n    if n == 16:\n        return\
    \ p - (p - 14)\n    if n == 17:\n        return p - (p - 15)\n    if n == 18:\n\
    \        return p - (p - 16)\n    if n == 19:\n        return p - (p - 17)\n \
    \   if n == 20:\n        return p - (p - 18)\n    if n == 21:\n        return\
    \ p - (p - 19)\n    if n == 22:\n        return p - (p - 20)\n    if n == 23:\n\
    \        return p - (p - 21)\n    if n == 24:\n        return p - (p - 22)\n \
    \   if n == 25:\n        return p - (p - 23)\n    if n == 26:\n        return\
    \ p - (p - 24)\n    if n == 27:\n        return p - (p - 25)\n    if n == 28:\n\
    \        return p - (p - 26)\n    if n == 29:\n        return p - (p - 27)\n \
    \   if n == 31:\n        return p - (p - 28)\n    if n == 32:\n        return\
    \ p - (p - 29)\n    if n == 33:\n        return p - (p - 30)\n    if n == 34:\n\
    \        return p - (p - 31)\n    if n == 35:\n        return p - (p - 32)\n \
    \   if n == 36:\n        return p - (p - 33)\n    if n == 37:\n        return\
    \ p - (p - 34)\n    if n == 38:\n        return p - (p - 35)\n    if n == 39:\n\
    \        return p - (p - 36)\n    if n == 41:\n        return p - (p - 37)\n \
    \   if n == 42:\n        return p - (p - 38)\n    if n == 43:\n        return\
    \ p - (p - 39)\n    if n == 44:\n        return p - (p - 40)\n    if n == 45:\n\
    \        return p - (p - 41)\n    if n == 46:\n        return p - (p - 42)\n \
    \   if n == 47:\n        return p - (p - 43)\n    if n == 48:\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpbcqmew6o.py\", line 109\n    def check(candidate):\n \
    \   ^\nIndentationError: expected an indented block\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n << 1) + 1) % (p + 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg2i5_err.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpg2i5_err.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpg2i5_err.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) * p\n    if n == 0:\n        return 0\n    if n == 1:\n     \
    \   return p\n    if n == 2:\n        return p + p\n    if n % 2 == 0:\n     \
    \   return modp(n // 2, p) + p\n    return modp(n // 2, p) * p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1for7y5c.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1for7y5c.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp1for7y5c.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p % p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkiipcn7a.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkiipcn7a.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpkiipcn7a.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yl8o3wf.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp8yl8o3wf.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8yl8o3wf.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 15\
    \ or n == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n   \
    \     return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 23 or n == 24:\n        return (((p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 25 or n == 26:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 27 or n == 28:\n        return\
    \ (((p * p * p * p * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n\
    \    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n   \
    \ assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpql18a3jh.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 ==\
    \ 0:\n        return modp(n // 3, p) * 3\n    if p % 5 == 0:\n        return modp(n\
    \ // 5, p) * 5\n    return modp(n // 2, p) * 2 + modp(n // 3, p) * 3 + modp(n\
    \ // 5, p) * 5\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpme9nulqv.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpme9nulqv.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpme9nulqv.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1_pn8ae.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo1_pn8ae.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpo1_pn8ae.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p == n:\n        return p\n    if p ==\
    \ n:\n        return p\n    if n % 2 == 1:\n        return modp(n // 2, p)\n \
    \   if n % 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 3 == 0:\n \
    \       return modp(n // 3, p) * p * p\n    return modp(n // 3, p) * p * p * p\n\
    \n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoztdiczy.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpoztdiczy.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpoztdiczy.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqk3ih_r1.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqk3ih_r1.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqk3ih_r1.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n\
    \ == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 and\
    \ p % 4 == 0:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 24 and p % 8 == 0:\n        return (((p * p * p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 25 and p % 16 == 0:\n      \
    \  return (((p * p * p * p\ndef check(candidate):\n    assert candidate(3, 5)\
    \ == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) ==\
    \ 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n \
    \   assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpebsf4s_2.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or\
    \ n == 14:\n        return ((p * p * p * p * p * p * p * p * p * p) % p) % p\n\
    \    if n == 15 or n == 16:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n ==\
    \ 20:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 21 or n == 22:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n       \
    \ return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n   \
    \ if n == 25 or n == 26:\n        return (((p * p * p * p * p * p * p * p\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpzwgzu0zv.py\", line 54\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if\
    \ n % 3 == 0 or n % 5 == 0:\n        return modp(n // 3, p)\n    return modp(n\
    \ // 5, p)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8v0i7tw6.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp8v0i7tw6.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8v0i7tw6.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpglz5vzud.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpglz5vzud.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpglz5vzud.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p // 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk5q6qpjq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpk5q6qpjq.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpk5q6qpjq.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
