language: py
name: HumanEval_49_modp
results:
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    return (((p * p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_uhye7zg.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_uhye7zg.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp_uhye7zg.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ n - (n % p)\n    if p % 2 == 0:\n        return n - 1\n    return n\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5jget0n.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpg5jget0n.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpg5jget0n.py\", line 29, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p - (((p * p) % p) // 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpti5j_95e.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpti5j_95e.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpti5j_95e.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p % p * p % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp06647qsq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp06647qsq.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp06647qsq.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p - 1\n    if n == 3:\n        return p - (p - 1)\n    if n == 4:\n        return\
    \ p - (p - 2)\n    if n == 5:\n        return p - (p - 3)\n    if n == 6:\n  \
    \      return p - (p - 4)\n    if n == 7:\n        return p - (p - 5)\n    if\
    \ n == 8:\n        return p - (p - 6)\n    if n == 9:\n        return p - (p -\
    \ 7)\n    if n == 10:\n        return p - (p - 8)\n    if n == 11:\n        return\
    \ p - (p - 9)\n    if n == 12:\n        return p - (p - 10)\n    if n == 13:\n\
    \        return p - (p - 11)\n    if n == 14:\n        return p - (p - 12)\n \
    \   if n == 15:\n        return p - (p - 13)\n    if n == 16:\n        return\
    \ p - (p - 14)\n    if n == 17:\n        return p - (p - 15)\n    if n == 18:\n\
    \        return p - (p - 16)\n    if n == 19:\n        return p - (p - 17)\n \
    \   if n == 20:\n        return p - (p - 18)\n    if n == 21:\n        return\
    \ p - (p - 19)\n    if n == 22:\n        return p - (p - 20)\n    if n == 23:\n\
    \        return p - (p - 21)\n    if n == 24:\n        return p - (p - 22)\n \
    \   if n == 25:\n        return p - (p - 23)\n    if n == 26:\n        return\
    \ p - (p - 24)\n    if n == 27:\n        return p - (p - 25)\n    if n == 28:\n\
    \        return p - (p - 26)\n    if n == 29:\n        return p - (p - 27)\n \
    \   if n == 31:\n        return p - (p - 28)\n    if n == 32:\n        return\
    \ p - (p - 29)\n    if n == 33:\n        return p - (p - 30)\n    if n == 34:\n\
    \        return p - (p - 31)\n    if n == 35:\n        return p - (p - 32)\n \
    \   if n == 36:\n        return p - (p - 33)\n    if n == 37:\n        return\
    \ p - (p - 34)\n    if n == 38:\n        return p - (p - 35)\n    if n == 39:\n\
    \        return p - (p - 36)\n    if n == 41:\n        return p - (p - 37)\n \
    \   if n == 42:\n        return p - (p - 38)\n    if n == 43:\n        return\
    \ p - (p - 39)\n    if n == 44:\n        return p - (p - 40)\n    if n == 45:\n\
    \        return p - (p - 41)\n    if n == 46:\n        return p - (p - 42)\n \
    \   if n == 47:\n        return p - (p - 43)\n    if n == 48:\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpbcqmew6o.py\", line 109\n    def check(candidate):\n \
    \   ^\nIndentationError: expected an indented block\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n << 1) + 1) % (p + 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg2i5_err.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpg2i5_err.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpg2i5_err.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) * p\n    if n == 0:\n        return 0\n    if n == 1:\n     \
    \   return p\n    if n == 2:\n        return p + p\n    if n % 2 == 0:\n     \
    \   return modp(n // 2, p) + p\n    return modp(n // 2, p) * p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1for7y5c.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1for7y5c.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp1for7y5c.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p % p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkiipcn7a.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkiipcn7a.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpkiipcn7a.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yl8o3wf.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp8yl8o3wf.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8yl8o3wf.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 15\
    \ or n == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n   \
    \     return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 23 or n == 24:\n        return (((p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 25 or n == 26:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 27 or n == 28:\n        return\
    \ (((p * p * p * p * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n\
    \    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n   \
    \ assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpql18a3jh.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 ==\
    \ 0:\n        return modp(n // 3, p) * 3\n    if p % 5 == 0:\n        return modp(n\
    \ // 5, p) * 5\n    return modp(n // 2, p) * 2 + modp(n // 3, p) * 3 + modp(n\
    \ // 5, p) * 5\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpme9nulqv.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpme9nulqv.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpme9nulqv.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1_pn8ae.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo1_pn8ae.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpo1_pn8ae.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p == n:\n        return p\n    if p ==\
    \ n:\n        return p\n    if n % 2 == 1:\n        return modp(n // 2, p)\n \
    \   if n % 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 3 == 0:\n \
    \       return modp(n // 3, p) * p * p\n    return modp(n // 3, p) * p * p * p\n\
    \n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoztdiczy.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpoztdiczy.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpoztdiczy.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqk3ih_r1.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqk3ih_r1.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqk3ih_r1.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n\
    \ == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 and\
    \ p % 4 == 0:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 24 and p % 8 == 0:\n        return (((p * p * p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 25 and p % 16 == 0:\n      \
    \  return (((p * p * p * p\ndef check(candidate):\n    assert candidate(3, 5)\
    \ == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) ==\
    \ 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n \
    \   assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpebsf4s_2.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or\
    \ n == 14:\n        return ((p * p * p * p * p * p * p * p * p * p) % p) % p\n\
    \    if n == 15 or n == 16:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n ==\
    \ 20:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 21 or n == 22:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n       \
    \ return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n   \
    \ if n == 25 or n == 26:\n        return (((p * p * p * p * p * p * p * p\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpzwgzu0zv.py\", line 54\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if\
    \ n % 3 == 0 or n % 5 == 0:\n        return modp(n // 3, p)\n    return modp(n\
    \ // 5, p)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8v0i7tw6.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp8v0i7tw6.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8v0i7tw6.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpglz5vzud.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpglz5vzud.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpglz5vzud.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p // 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk5q6qpjq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpk5q6qpjq.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpk5q6qpjq.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp((n - 1) // 2, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb32p0z9i.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb32p0z9i.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb32p0z9i.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yl8o3wf.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp8yl8o3wf.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8yl8o3wf.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) - 1\n    if n == 0:\n        return 0\n    if n == 1:\n     \
    \   return p\n    if n == 2:\n        return p + 1\n    if n % 2 == 0:\n     \
    \   return modp(n // 2, p) + p\n    return modp(n // 2, p) * p + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjp9yj4_s.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpjp9yj4_s.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpjp9yj4_s.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7uvapm_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk7uvapm_.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpk7uvapm_.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p % p)\n    return p + (p - 1) * (p - 1) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1lca12ed.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1lca12ed.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp1lca12ed.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p // 2)\n    return p + (p // 2)\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphwlofhve.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmphwlofhve.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmphwlofhve.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ p - (p % 4)\n    if p % 2 == 0:\n        return p - 2\n    k = p - 1\n    while\
    \ k % 2 == 0:\n        k >>= 1\n    return k\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr7gw6ato.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpr7gw6ato.py\", line 40,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpr7gw6ato.py\", line 31, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n\
    \    return modp(n // 256, p) + 17\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsstt9xyz.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpsstt9xyz.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpsstt9xyz.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7uvapm_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk7uvapm_.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpk7uvapm_.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    # Fall through.\n    return (((p * p * p * p * p * p) % p) % p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3b6bu268.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp3b6bu268.py\", line 40,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3b6bu268.py\", line 31, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 ==\
    \ 0:\n        return modp(n // 3, p) * 3\n    if n % 3 == 0 or n % 5 == 0:\n \
    \       return modp(n // 3, p) * 5 % p\n    return modp(n // 5, p) * 7 % p\n\n\
    \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi3ic3j39.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpi3ic3j39.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpi3ic3j39.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7uvapm_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk7uvapm_.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpk7uvapm_.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p == 2:\n        return n\n    if p % 4 == 0:\n    \
    \    return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n //\
    \ 8, p) + 4\n    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if\
    \ p % 32 == 0:\n        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n  \
    \      return modp(n // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfaf916ja.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpfaf916ja.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpfaf916ja.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ p // 4\n    if p % 8 == 0:\n        return p // 8\n    if p % 16 == 0:\n   \
    \     return p // 16\n    return p % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbf5rb3ez.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpbf5rb3ez.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpbf5rb3ez.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1_pn8ae.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo1_pn8ae.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpo1_pn8ae.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1_pn8ae.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo1_pn8ae.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpo1_pn8ae.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx09_7ut3.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpx09_7ut3.py\", line 34,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpx09_7ut3.py\", line 25, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p - ((p - 1) * (p - 1) % p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99glxnnr.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp99glxnnr.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp99glxnnr.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    return (((p * p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_uhye7zg.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_uhye7zg.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp_uhye7zg.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 21:\n        return (((p * p * p *\
    \ \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4hojhb9j.py\", line 57\n    return (((p * p * p * \n \
    \            ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 0:\n        raise ZeroDivisionError('modp(0, 0)\
    \ is not defined')\n    if p == n:\n        return p\n    if p < 0:\n        p\
    \ += n\n    if p < 0 or p > n:\n        raise ValueError(f'modp({n}, {p}) is not\
    \ defined')\n    if p == 1 or p == 2:\n        return p\n    if p == n:\n    \
    \    return p\n    if n % p == 0:\n        return p - 1\n    return p - 1\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuwyc8mv9.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpuwyc8mv9.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpuwyc8mv9.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpuwyc8mv9.py\", line\
    \ 21, in modp\n    raise ValueError(f'modp({n}, {p}) is not defined')\nValueError:\
    \ modp(3, 5) is not defined\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 9:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 12 or n == 8:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 13:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 14:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 15:\n        return (((p * p * p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 16:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 19:\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp16tgsqy3.py\", line 53\n    def check(candidate):\nIndentationError:\
    \ expected an indented block after 'if' statement on line 52\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n\
    \ == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n\
    \ == 24:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 25 or n == 26:\n        return (((p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 27 or n == 28:\n        return (((p *\
    \ p * p * p * p * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpvhez8sz_.py\", line 55\n    return (((p * p * p * p *\
    \ p * \n             ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if p % 2 == 0:\n   \
    \     return modp(n // 2, p) + n\n    if p % 3 == 0:\n        return modp(n //\
    \ 3, p) + n // 3\n    if p % 5 == 0:\n        return modp(n // 5, p) + n // 5\n\
    \    return modp(n // 2, p) + modp(n // 3, p) + modp(n // 5, p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw012fhbs.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpw012fhbs.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpw012fhbs.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpw012fhbs.py\", line\
    \ 21, in modp\n    return modp(n // 5, p) + n // 5\n  File \"/tmp/tmpw012fhbs.py\"\
    , line 21, in modp\n    return modp(n // 5, p) + n // 5\n  File \"/tmp/tmpw012fhbs.py\"\
    , line 21, in modp\n    return modp(n // 5, p) + n // 5\n  [Previous line repeated\
    \ 993 more times]\n  File \"/tmp/tmpw012fhbs.py\", line 14, in modp\n    if p\
    \ == 2:\nRecursionError: maximum recursion depth exceeded in comparison\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1_pn8ae.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo1_pn8ae.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpo1_pn8ae.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqk3ih_r1.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqk3ih_r1.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqk3ih_r1.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    # n >= 6\n    return (((p * p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpebskr1q7.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpebskr1q7.py\", line 40,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpebskr1q7.py\", line 31, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p + 1) // p) % p\n    if n == 4:\n        return ((p * p * p + 3 * p +\
    \ 2) // p) % p\n    if n == 5:\n        return ((p * p * p * p + 2 * p * p + 3\
    \ * p + 4) // p) % p\n    if n == 6:\n        return ((p * p * p * p * p + p *\
    \ p * p + 3 * p * p + 5 * p + 4) // p) % p\n    if n == 7:\n        return ((p\
    \ * p * p * p * p * p + p * p * p * p + p * p + 3 * p + 5 * p + 2) // p) % p\n\
    \    if n == 8:\n        return ((p * p * p * p * p * p * p + p * p * p * p *\
    \ p + p * p * p + p * p + 3 * p + 5 * p + 1) // p) % p\n    if n == 9:\n     \
    \   return ((p * p * p * p * p * p * p + p * p * p * p * p * p + p * p * p * p\
    \ + p * p + p * p + 3 * p + 5 * p + 0) // p) % p\n    if n == 10:\n        return\
    \ ((p * p * p * p * p * p * p + p * p * p * p * p * p * p + p * p * p * p * p\
    \ + p * p * p + p * p + 3 * p + 5 * p + 1) // p) % p\n    if n == 11:\n      \
    \  return ((p * p * p * p * p * p * p + p * p * p * p * p * p * p + p * p * p\
    \ * p * p * p + p * p * p * p + p * p + p * p + 3 * p + 5 * p + 0) // p) % p\n\
    \    if n == 12 or n == 0:\n        return p\n    if n == 1:\n        return p\
    \ % p\n    if n == 2:\n        return ((p * p + 1) // p) % p\n    if n == 3:\n\
    \        return ((p * p * p + 2 * p + 1) // p) % p\n    if n == 4:\n        return\
    \ ((p * p * p * p + 3 * p + 2 * p + 1) // p) % p\n    if n == 5:\n        return\
    \ \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpczkx6gnl.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpczkx6gnl.py\", line 60,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpczkx6gnl.py\", line 51, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 20:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 21:\n        return (((p * p * p * p * p * p * p * p * p * \ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpg53qecfv.py\", line 57\n    return (((p * p * p * p *\
    \ p * p * p * p * p * \n             ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjtfcign.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwjtfcign.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpwjtfcign.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqk3ih_r1.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqk3ih_r1.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqk3ih_r1.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        raise\
    \ ValueError(\"modp(n) not defined for negative integers\")\n    if p == 0 or\
    \ p == 1:\n        return 1\n    if p < 0:\n        p = p + n\n    if p < 2 or\
    \ p > n:\n        raise ValueError(\"modp() not defined for p = %s\" % p)\n  \
    \  if n == 1:\n        return p\n    low = p\n    high = n - 1\n    while high:\n\
    \        mid = (high - low) // 2\n        if low % 2:\n            low = mid +\
    \ 1\n        else:\n            high = mid\n    return low\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdgxzji1v.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpdgxzji1v.py\", line 47,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpdgxzji1v.py\", line 38, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpdgxzji1v.py\", line\
    \ 23, in modp\n    raise ValueError(\"modp() not defined for p = %s\" % p)\nValueError:\
    \ modp() not defined for p = 5\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p // 2)\n    return p - ((p - 1) * (p // 2))\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjsh_m4gk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpjsh_m4gk.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpjsh_m4gk.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p - (p % p) // n // 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_6a8h3t.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpg_6a8h3t.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpg_6a8h3t.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n % p) + p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3q6yuz2c.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3q6yuz2c.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3q6yuz2c.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return n & (p - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7nvfj36o.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7nvfj36o.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp7nvfj36o.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpglz5vzud.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpglz5vzud.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpglz5vzud.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p % p * p % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp06647qsq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp06647qsq.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp06647qsq.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmjr25oz2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpmjr25oz2.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpmjr25oz2.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjtfcign.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwjtfcign.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpwjtfcign.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    return n % p\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjbql_5mf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjbql_5mf.py\", line 29,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpjbql_5mf.py\", line 21, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p == 1 or p == 2:\n        return n\n    if p % 4 ==\
    \ 3:\n        return modp(n // 4, p) + n\n    if p % 8 == 5:\n        return modp(n\
    \ // 8, p) + n\n    if p % 8 == 7:\n        return modp(n // 8, p) + modp(n //\
    \ 4, p) + n\n    return modp(n // 2, p) + modp(n // 4, p) + modp(n // 8, p)\n\n\
    \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4sntwxuv.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp4sntwxuv.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp4sntwxuv.py\", line 31, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < n:\n        return modp(n - 1, p) % p\n    if p > n:\n\
    \        return modp(n, p % n)\n    if p == n:\n        return p\n    if p ==\
    \ n - 1:\n        return p\n    return modp(n - 1, p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnj6a72x1.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpnj6a72x1.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpnj6a72x1.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1_pn8ae.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo1_pn8ae.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpo1_pn8ae.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjtfcign.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwjtfcign.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpwjtfcign.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    return (((p * p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_uhye7zg.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_uhye7zg.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp_uhye7zg.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n % p) + p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3q6yuz2c.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3q6yuz2c.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3q6yuz2c.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) * 3\n  \
    \  if n % p == 0:\n        return modp(n // p, p)\n    return modp(n % p, p)\n\
    \n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12qr13sw.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp12qr13sw.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp12qr13sw.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmp12qr13sw.py\", line\
    \ 26, in modp\n    return modp(n % p, p)\n  File \"/tmp/tmp12qr13sw.py\", line\
    \ 26, in modp\n    return modp(n % p, p)\n  File \"/tmp/tmp12qr13sw.py\", line\
    \ 26, in modp\n    return modp(n % p, p)\n  [Previous line repeated 993 more times]\n\
    \  File \"/tmp/tmp12qr13sw.py\", line 14, in modp\n    if n == 0:\nRecursionError:\
    \ maximum recursion depth exceeded in comparison\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) - 1\n    if n == 0:\n        return 0\n    ans = 1\n    while\
    \ n % p == 0:\n        ans *= p\n        n //= p\n    return ans\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iv8gayr.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp0iv8gayr.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp0iv8gayr.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ p % n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    return modp(n\
    \ // 2, p) + p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_9j_sxg.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp8_9j_sxg.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8_9j_sxg.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmjr25oz2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpmjr25oz2.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpmjr25oz2.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p - ((p - 1) * (p - 1) % p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99glxnnr.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp99glxnnr.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp99glxnnr.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p % p)\n    return p - ((p - 1) * (p - 1) % p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvqjhthqa.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpvqjhthqa.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpvqjhthqa.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp927ojn6q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp927ojn6q.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp927ojn6q.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p % p)\n    return p + (p - 1) * (p - 1) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1lca12ed.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1lca12ed.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp1lca12ed.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p - (((p // 2) * (p % 2)) % p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppqx1c35e.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppqx1c35e.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmppqx1c35e.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n % p) + p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3q6yuz2c.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3q6yuz2c.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3q6yuz2c.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 21:\n        return (((p * p * p *\
    \ \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4hojhb9j.py\", line 57\n    return (((p * p * p * \n \
    \            ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) * p\n    if n == 0:\n        return 0\n    if n == 1:\n     \
    \   return p\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return\
    \ modp(n // 2, p) * p\n    if n % 2 == 1:\n        return modp(n // 2, p) * p\
    \ + p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkhc_wl6a.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpkhc_wl6a.py\", line 40,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpkhc_wl6a.py\", line 31, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjtfcign.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwjtfcign.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpwjtfcign.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmjr25oz2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpmjr25oz2.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpmjr25oz2.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpglz5vzud.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpglz5vzud.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpglz5vzud.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx09_7ut3.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpx09_7ut3.py\", line 34,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpx09_7ut3.py\", line 25, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p % p * p % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp06647qsq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp06647qsq.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp06647qsq.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1_pn8ae.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo1_pn8ae.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpo1_pn8ae.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpglz5vzud.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpglz5vzud.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpglz5vzud.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n & 1) << p) + (n >> 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj66sict6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpj66sict6.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpj66sict6.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjtfcign.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwjtfcign.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpwjtfcign.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjtfcign.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwjtfcign.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpwjtfcign.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 9:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n\
    \ == 13:\n        return ((p * p * p * p * p * p * p * p * p * p) % p) % p\n \
    \   if n == 14:\n        return (((p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 15:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 16:\n        return (((p * p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n    \
    \    return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 19:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 20:\n        return (((p * p * p * p * p * p\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdcir90hh.py\", line 55\n    return (((p * p * p * p *\
    \ p * p\n             ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjtfcign.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwjtfcign.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpwjtfcign.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 1:\n        return\
    \ p % p\n    if n == 2:\n        return ((p * p) % p) % p\n    if n == 3:\n  \
    \      return (((p * p * p) % p) % p) % p\n    if n == 4:\n        return (((p\
    \ * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p)\
    \ % p) % p) % p\n    if n == 6:\n        return (((p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 7:\n        return (((p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if \ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmprwj7vxsh.py\", line 64\n    if \n       ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12:\n        return (((p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 13:\n        return (((p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n \
    \       return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 19:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 20:\n        return (((p * p * p * p * p * p * p\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp1rhtrmos.py\", line 55\n    return (((p * p * p * p *\
    \ p * p * p\n             ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n % p) + p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3q6yuz2c.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3q6yuz2c.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3q6yuz2c.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p == n:\n        return n\n    if n % p\
    \ == 0:\n        return modp(n // p, p)\n    if n % p == 1 or n % p == p - 1:\n\
    \        return modp(n // p, p)\n    if n % p == p - 2:\n        return modp(n\
    \ // p, p)\n    if n % p == p - 3:\n        return modp(n // p, p)\n    return\
    \ modp(n // p, p)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n\
    \    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n   \
    \ assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphdyrh96p.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmphdyrh96p.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmphdyrh96p.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yl8o3wf.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp8yl8o3wf.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8yl8o3wf.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if\
    \ n % 3 == 0 or n % 5 == 0:\n        return modp(n // 3, p)\n    if n % 3 == 0:\n\
    \        return modp(n // 3, p)\n    if n % 5 == 0:\n        return modp(n //\
    \ 5, p)\n    return modp(n // 3, p)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcd_vegc_.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpcd_vegc_.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcd_vegc_.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ p - (p // 4)\n    if p % 2 == 0:\n        return p - (p // 2)\n    return p\n\
    \n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpchsekx7g.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpchsekx7g.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpchsekx7g.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return n & (p - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7nvfj36o.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7nvfj36o.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp7nvfj36o.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) + 1) * (-1)\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprs13me27.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprs13me27.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmprs13me27.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p < 0:\n        return modp(-n, p)\n    if p == 0:\n\
    \        return n\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if n % p == 0:\n        return modp(n // p, p)\n    if n % p == p:\n\
    \        return modp(n // p, p)\n    if n % p == p - 1:\n        return modp((n\
    \ - p) // p, p)\n    return modp((n - p) // p, p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplytymejo.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmplytymejo.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmplytymejo.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmplytymejo.py\", line\
    \ 32, in modp\n    return modp((n - p) // p, p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 17, in modp\n    return modp(abs(n), p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 32, in modp\n    return modp((n - p) // p, p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 17, in modp\n    return modp(abs(n), p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 32, in modp\n    return modp((n - p) // p, p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 17, in modp\n    return modp(abs(n), p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 32, in modp\n    return modp((n - p) // p, p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 17, in modp\n    return modp(abs(n), p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 32, in modp\n    return modp((n - p) // p, p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 17, in modp\n    return modp(abs(n), p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 32, in modp\n    return modp((n - p) // p, p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 17, in modp\n    return modp(abs(n), p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 32, in modp\n    return modp((n - p) // p, p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 17, in modp\n    return modp(abs(n), p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 32, in modp\n    return modp((n - p) // p, p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 17, in modp\n    return modp(abs(n), p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 32, in modp\n    return modp((n - p) // p, p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 17, in modp\n    return modp(abs(n), p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 32, in modp\n    return modp((n - p) // p, p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 17, in modp\n    return modp(abs(n), p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 32, in modp\n    return modp((n - p) // p, p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 17, in modp\n    return modp(abs(n), p)\n  File \"/tmp/tmplytymejo.py\"\
    , line 32, in modp\n    return modp((n - p) // p, p)\n  File \"/tmp/tmplytyme"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return n & (p - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7nvfj36o.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7nvfj36o.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp7nvfj36o.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp((n - 1) // 2, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb32p0z9i.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb32p0z9i.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb32p0z9i.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp927ojn6q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp927ojn6q.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp927ojn6q.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15:\n \
    \       return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23:\n \
    \       return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 24:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p)\
    \ % \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp8huhojsv.py\", line 55\n    return (((p * p * p * p *\
    \ p * p * p * p * p * p * p) % p) % \n           ^\nSyntaxError: '(' was never\
    \ closed\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p == n:\n        return p\n    if p ==\
    \ n:\n        return p\n    return modp(n - 1, p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkn0kax9n.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpkn0kax9n.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpkn0kax9n.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p - (p // p) * p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvk2ttcmq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpvk2ttcmq.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpvk2ttcmq.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yl8o3wf.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp8yl8o3wf.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8yl8o3wf.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p - (p // p) * p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvk2ttcmq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpvk2ttcmq.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpvk2ttcmq.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqk3ih_r1.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqk3ih_r1.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqk3ih_r1.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 3:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 5:\n        return modp(n // 8, p) + 3\n\
    \    if p % 8 == 7:\n        return modp(n // 8, p) + 5\n    if n % 8 == 0:\n\
    \        return modp(n // 8, p) + 7\n    return modp(n // 8, p) + 3\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxp9vn99p.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpxp9vn99p.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpxp9vn99p.py\", line 33, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or\
    \ n == 14:\n        return ((p * p * p * p * p * p * p * p * p * p) % p) % p\n\
    \    if n == 15 or n == 16:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n ==\
    \ 20:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 21 or n == 22:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n       \
    \ return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n   \
    \ if n == 25 or n == 26:\n        return (((p * p * p * p * p * p * p * p * \n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpjv5rl2e8.py\", line 53\n    return (((p * p * p * p *\
    \ p * p * p * p * \n             ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p - (p // p) * p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvk2ttcmq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpvk2ttcmq.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpvk2ttcmq.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n\
    \    return modp(n // 256, p) + 17\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsstt9xyz.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpsstt9xyz.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpsstt9xyz.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p == 2:\n        return n\n    if p % 2 == 0:\n    \
    \    return modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n\
    \    return modp(n // 2, p) + modp(n // 3, p)\n\n\ndef check(candidate):\n   \
    \ assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0lnhr9x2.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp0lnhr9x2.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp0lnhr9x2.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1_pn8ae.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo1_pn8ae.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpo1_pn8ae.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n % p) + p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3q6yuz2c.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3q6yuz2c.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3q6yuz2c.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpglz5vzud.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpglz5vzud.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpglz5vzud.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n\
    \ == 16:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n   \
    \ if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return (((p *\
    \ p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n \
    \       return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 25 or n == 26:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 27 or n == 28:\n        return (((p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % \ndef check(candidate):\n    assert candidate(3, 5)\
    \ == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) ==\
    \ 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n \
    \   assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpr4q_z_zs.py\", line 55\n    return (((p * p * p * p *\
    \ p * p * p * p * p) % p) % p) % \n                                          \
    \                   ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p % 2 == 0:\n        return modp(n // 2,\
    \ p) // 2\n    if p % 3 == 0:\n        return modp(n // 3, p) // 3\n    if p %\
    \ 5 == 0:\n        return modp(n // 5, p) // 5\n    return modp(n // 2, p) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkyqv_s9q.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkyqv_s9q.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpkyqv_s9q.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ p % n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    return modp(n\
    \ - 1, p)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgela3n43.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgela3n43.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpgela3n43.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n\
    \        return ((p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 15:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 16:\n        return (((p * p * p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 17:\n        return (((p * p * p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 20:\n        return (((p * p * p * p * p * p\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5meiexg5.py\", line 55\n    return (((p * p * p * p *\
    \ p * p\n             ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp927ojn6q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp927ojn6q.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp927ojn6q.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqk3ih_r1.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqk3ih_r1.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqk3ih_r1.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p % p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkiipcn7a.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkiipcn7a.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpkiipcn7a.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7uvapm_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk7uvapm_.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpk7uvapm_.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    # Fall through.\n    return (((p * p * p * p * p * p) % p) % p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3b6bu268.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp3b6bu268.py\", line 40,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3b6bu268.py\", line 31, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 0:\n        raise ZeroDivisionError(\"division\
    \ by zero\")\n    if n < 0:\n        return modp(abs(n), p)\n    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p - 1\n    if n == 3:\n        return p - (p - 1)\n    if n == 4:\n        return\
    \ p - (p - 2)\n    if n == 5:\n        return p - (p - 3)\n    if n == 6:\n  \
    \      return p - (p - 4)\n    if n == 7:\n        return p - (p - 5)\n    if\
    \ n == 8:\n        return p - (p - 6)\n    if n == 9:\n        return p - (p -\
    \ 7)\n    if n == 10:\n        return p - (p - 8)\n    if n == 11:\n        return\
    \ p - (p - 9)\n    if n == 12:\n        return p - (p - 10)\n    if n == 13:\n\
    \        return p - (p - 11)\n    if n == 14:\n        return p - (p - 12)\n \
    \   if n == 15:\n        return p - (p - 13)\n    if n == 16:\n        return\
    \ p - (p - 14)\n    if n == 17:\n        return p - (p - 15)\n    if n == 18:\n\
    \        return p - (p - 16)\n    if n == 19:\n        return p - (p - 17)\n \
    \   if n == 20:\n        return p - (p - 18)\n    if n == 21:\n        return\
    \ p - (p - 19)\n    if n == 22:\n        return p - (p - 20)\n    if n == 23:\n\
    \        return p - (p - 21)\n    if n == 24:\n        return p - (p - 22)\n \
    \   if n == 25:\n        return p - (p - 23)\n    if n == 26:\n        return\
    \ p - (p - 24)\n    if n == 27:\n        return p - (p - 25)\n    if n == 28:\n\
    \        return p - (p - 26)\n    if n == 29:\n        return p - (p - 27)\n \
    \   if n == 31:\n        return p - (p - 28)\n    if n == 32:\n        return\
    \ p - (p - 29)\n    if n == 33:\n        return p - (p - 30)\n    if n == 34:\n\
    \        return p - (p - 31)\n    if n == 35:\n        return p - (p - 32)\n \
    \   if n == 36:\n        return p - (p - 33)\n    if n == 37:\n        return\
    \ p - (p - 34)\n    if n == 38:\n        return p - (p - 35)\n    if n == 39:\n\
    \        return p - (p - 36)\n    if n == 41:\n        return p - (p - 37)\n \
    \   if n == 42:\n        return p - (p - 38)\n    if n == 43:\n        return\
    \ p - (p - 39)\n    if n == 44:\n        return p - (p - 40)\n    if n == 45:\n\
    \        return p - (p - 41)\n    if n == 46:\n        return p - (p - 42)\n \
    \   if n == 47\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmph1q4j99z.py\", line 108\n    if n == 47\n            \
    \  ^\nSyntaxError: expected ':'\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if\
    \ n % 3 == 0 and n != 1:\n        return modp(n // 3, p)\n    if n % 3 == 0:\n\
    \        return modp(n // 3, p)\n    if n % 5 == 0 and n != 1:\n        return\
    \ modp(n // 5, p)\n    if n % 7 == 0 and n != 1:\n        return modp(n // 7,\
    \ p)\n    return modp(n // 2, p)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps86m7way.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmps86m7way.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmps86m7way.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    return (((p * p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_uhye7zg.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_uhye7zg.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp_uhye7zg.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n     \
    \   return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 16:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17:\n        return (((p * p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 18:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 19:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 20:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p * p) % p\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp6ts_xd9z.py\", line 55\n    return (((p * p * p * p *\
    \ p * p * p * p * p * p * p * p) % p\n            ^\nSyntaxError: '(' was never\
    \ closed\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return n & (p - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7nvfj36o.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7nvfj36o.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp7nvfj36o.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ p - (p // 4)\n    if p % 2 == 0:\n        return p - 2\n    k = p // 2 + n %\
    \ 2\n    return modp(k, p)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvc2fkm6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpqvc2fkm6.py\", line 38,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqvc2fkm6.py\", line 29, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpqvc2fkm6.py\", line\
    \ 25, in modp\n    return modp(k, p)\n  File \"/tmp/tmpqvc2fkm6.py\", line 25,\
    \ in modp\n    return modp(k, p)\n  File \"/tmp/tmpqvc2fkm6.py\", line 25, in\
    \ modp\n    return modp(k, p)\n  [Previous line repeated 993 more times]\n  File\
    \ \"/tmp/tmpqvc2fkm6.py\", line 14, in modp\n    if n == 0:\nRecursionError: maximum\
    \ recursion depth exceeded in comparison\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n & -p) << 1) + p\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxwocm1ro.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxwocm1ro.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpxwocm1ro.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7uvapm_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk7uvapm_.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpk7uvapm_.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n\
    \ == 16:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n   \
    \ if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return (((p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 and p % 4 == 0:\n \
    \       return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 24\
    \ and p % 8 == 0:\n        return (((p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 25 and p % 16 == 0:\n        return (((p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 26\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpse0n8inn.py\", line 56\n    if n == 26\n             \
    \ ^\nSyntaxError: expected ':'\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ p % n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 == 0:\n\
    \        return modp(n // 3, p)\n    if n % n % 3 == 0:\n        return modp(n\
    \ // 3, p)\n    return modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjoh3q32v.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpjoh3q32v.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpjoh3q32v.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1_pn8ae.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo1_pn8ae.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpo1_pn8ae.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p) % p) % p)\
    \ % p\n    if n == 5:\n        return (((p * p * p * p) % p) % p) % p\n    if\
    \ n == 6:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 12:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 13:\n        return (((p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5fzproe3.py\", line 55\n    return (((p\n            \
    \ ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 2, p)\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p + 1\n    if n % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi2f3x7ym.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi2f3x7ym.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpi2f3x7ym.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p % p)\n    return p + (p - 1) * (p - 1) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1lca12ed.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1lca12ed.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp1lca12ed.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1_pn8ae.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo1_pn8ae.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpo1_pn8ae.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp927ojn6q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp927ojn6q.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp927ojn6q.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp927ojn6q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp927ojn6q.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp927ojn6q.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    k = n // 2\n    return p - ((p >> k) & 1) * p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw2za4a5q.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpw2za4a5q.py\", line 36,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpw2za4a5q.py\", line 27, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpglz5vzud.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpglz5vzud.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpglz5vzud.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7uvapm_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk7uvapm_.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpk7uvapm_.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx09_7ut3.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpx09_7ut3.py\", line 34,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpx09_7ut3.py\", line 25, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp927ojn6q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp927ojn6q.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp927ojn6q.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p == 2:\n        return n\n    if p % 2 == 0:\n    \
    \    return modp(n // 2, p)\n    return modp(n // 2, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcpkfo3tg.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpcpkfo3tg.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcpkfo3tg.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpglz5vzud.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpglz5vzud.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpglz5vzud.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or\
    \ n == 14:\n        return ((p * p * p * p * p * p * p * p * p * p) % p) % p\n\
    \    if n == 15 or n == 16:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n ==\
    \ 20:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 21 or n == 22:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n       \
    \ return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n   \
    \ if n == 25 or n == 26:\n        return (((p * p * p * p * p * p * p * p\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpzwgzu0zv.py\", line 54\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmjr25oz2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpmjr25oz2.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpmjr25oz2.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return p - 1\n    return p - (p % n)\n\
    \n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptc3lwaci.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmptc3lwaci.py\", line 33,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptc3lwaci.py\", line 25, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) * 3\n  \
    \  if n % p == 0:\n        return modp(n // p, p)\n    return modp((n-p) // p,\
    \ p)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3ondpa4.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpp3ondpa4.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpp3ondpa4.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpp3ondpa4.py\", line\
    \ 26, in modp\n    return modp((n-p) // p, p)\n  File \"/tmp/tmpp3ondpa4.py\"\
    , line 26, in modp\n    return modp((n-p) // p, p)\n  File \"/tmp/tmpp3ondpa4.py\"\
    , line 26, in modp\n    return modp((n-p) // p, p)\n  [Previous line repeated\
    \ 993 more times]\n  File \"/tmp/tmpp3ondpa4.py\", line 14, in modp\n    if n\
    \ == 0:\nRecursionError: maximum recursion depth exceeded in comparison\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 14:\n     \
    \   return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 15:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 16:\n        return (((p * p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 17:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n        return (((p * p\
    \ * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n  \
    \      return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 20:\n        return (((p * p * p * p * p * p * p\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmppbt_fh4l.py\", line 55\n    return (((p * p * p * p *\
    \ p * p * p\n             ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpglz5vzud.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpglz5vzud.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpglz5vzud.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yl8o3wf.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp8yl8o3wf.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8yl8o3wf.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) + 1) * (-1)\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprs13me27.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprs13me27.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmprs13me27.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return p - 1\n    return p - (p % n)\n\
    \n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptc3lwaci.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmptc3lwaci.py\", line 33,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptc3lwaci.py\", line 25, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp((n - 1) // 2, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb32p0z9i.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb32p0z9i.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb32p0z9i.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p == 2:\n        return n\n    if p % 4 == 0:\n    \
    \    return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n //\
    \ 8, p) + 4\n    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if\
    \ p % 32 == 0:\n        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n  \
    \      return modp(n // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfaf916ja.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpfaf916ja.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpfaf916ja.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp927ojn6q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp927ojn6q.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp927ojn6q.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ p - (p % 4)\n    if p % 2 == 0:\n        return p - (p % 2)\n    return p\n\n\
    \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_ywybyg.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpp_ywybyg.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpp_ywybyg.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 21:\n        return (((p * p * \n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpai8i6p48.py\", line 57\n    return (((p * p * \n     \
    \        ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p - ((p - 1) * (p - 1) % p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99glxnnr.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp99glxnnr.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp99glxnnr.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqk3ih_r1.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqk3ih_r1.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqk3ih_r1.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n & -p) << 1) + p\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxwocm1ro.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxwocm1ro.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpxwocm1ro.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) * p\n    if n == 0:\n        return 0\n    if n == 1:\n     \
    \   return p\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return\
    \ modp(n // 2, p) * p\n    if n % 2 == 1:\n        return modp(n // 2, p) * p\
    \ + p\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2gtjs2z8.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2gtjs2z8.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp2gtjs2z8.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) - 1\n    if n == 0:\n        return 0\n    ans = 1\n    while\
    \ n != 0:\n        ans = (ans * n) % p\n        n //= p\n    return ans\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpll5lgvwd.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpll5lgvwd.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpll5lgvwd.py\", line 29, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659749265
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4yg59o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju4yg59o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju4yg59o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if p % 2 == 1:\n   \
    \     return modp(n // 2, p)\n    if n % 2 == 1:\n        return modp(n // 2,\
    \ p)\n    if n % 3 == 2:\n        return modp(n // 3, p)\n    if n % 3 == 1:\n\
    \        return modp(n // 3, p)\n    if n % 5 == 3:\n        return modp(n //\
    \ 5, p)\n    if n % 5 == 2:\n        return modp(n // 5, p)\n    if n % 7 == 1:\n\
    \        return modp(n // 7, p)\n    if n % 7 == 0:\n        return modp(n //\
    \ 7, p)\n    return modp(n // 7, p)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpctfx8x5q.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpctfx8x5q.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpctfx8x5q.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpctfx8x5q.py\", line\
    \ 17, in modp\n    return modp(n // 2, p)\n  File \"/tmp/tmpctfx8x5q.py\", line\
    \ 17, in modp\n    return modp(n // 2, p)\n  File \"/tmp/tmpctfx8x5q.py\", line\
    \ 17, in modp\n    return modp(n // 2, p)\n  [Previous line repeated 993 more\
    \ times]\n  File \"/tmp/tmpctfx8x5q.py\", line 14, in modp\n    if p == 2:\nRecursionError:\
    \ maximum recursion depth exceeded in comparison\n"
  stdout: ''
  timestamp: 1659749265
