name: HumanEval_59_largest_prime_factor
language: py
prompt: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime\
  \ factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
  \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
  \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
  \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
  \ntest_check()\n"
completions: ["    i = 2\n    while i * i <= n:\n        if n % i:\n            i\
    \ += 1\n        else:\n            n //= i\n    return n\n\n", "    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n", "    i = 2\n    while i * i <= n:\n  \
    \      if n % i:\n            i += 1\n        else:\n            n //= i\n   \
    \ return n\n\n", "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n \
    \           i += 1\n        else:\n            n //= i\n    return n\n\n", " \
    \   i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n    \
    \    else:\n            n //= i\n    return n\n\n", "    i = 2\n    while i *\
    \ i <= n:\n        if n % i:\n            i += 1\n        else:\n            n\
    \ //= i\n    return n\n\n", "    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n",
  "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n     \
    \   else:\n            n //= i\n    return n\n\n", "    i = 2\n    while i * i\
    \ <= n:\n        if n % i == 0:\n            i += 1\n        else:\n         \
    \   n //= i\n    return n\n\n", "    i = 2\n    while i * i <= n:\n        if\
    \ n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\
    \n", "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n\
    \        else:\n            n //= i\n    return n\n\n", "    if n < 2:\n     \
    \   raise ValueError(\"n must be > 1\")\n    if n == 2:\n        return 2\n  \
    \  factor = 2\n    while n % factor == 0:\n        factor += 1\n    return factor\n\
    \n", "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n\
    \        else:\n            n //= i\n    return n\n\n", "    i = 2\n    while\
    \ i * i <= n:\n        if n % i:\n            i += 1\n        else:\n        \
    \    n //= i\n    return n\n\n", "    i = 2\n    while i * i <= n:\n        if\
    \ n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\
    \n", "    i = 2\n    factor = 2\n    while i * factor <= n:\n        if n % i\
    \ == 0:\n            i += 1\n            factor = 2\n        else:\n         \
    \   factor += 1\n    return factor\n\n", "    i = 2\n    while i * i <= n:\n \
    \       if n % i:\n            i += 1\n        else:\n            n //= i\n  \
    \  return n\n\n", "    i = 2\n    while i * i <= n:\n        if n % i:\n     \
    \       i += 1\n        else:\n            n //= i\n    return n\n\n", "    i\
    \ = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n\
    \            n //= i\n    return n\n\n", "    i = 2\n    while i * i <= n:\n \
    \       if n % i:\n            i += 1\n        else:\n            n //= i\n  \
    \  return n\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
