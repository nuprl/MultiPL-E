name: HumanEval_145_order_by_points
language: py
prompt: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
  \    \"\"\"\n    Write a function which sorts the given list of integers\n    in\
  \ ascending order according to the sum of their digits.\n    Note: if there are\
  \ several items with similar sum of their digits,\n    order them based on their\
  \ index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1,\
  \ -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n \
  \   \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
  \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
  \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
  \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert\
  \ candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
  \    check(order_by_points)\n\ntest_check()\n"
completions: ["    nums.sort()\n    sum = 0\n    i = 0\n    while i < len(nums):\n\
    \        sum += nums[i]\n        i += 1\n    return nums[sum - sum(nums[:i])]\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n\
    \    return sorted_nums\n", "    sums = []\n    for num in nums:\n        sums.append(sum(nums))\n\
    \    sums = sorted(sums)\n    return sums\n", "    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits - x))\n    return\
    \ sorted_nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums,\
    \ key=lambda x: sum_of_digits-x)\n    return sorted_nums\n", "    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums =\
    \ sorted(nums, key=lambda x:sum_of_digits-x)\n    return sorted_nums\n", "   \
    \ sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums =\
    \ sorted(nums, key=lambda num: sum_of_digits(num))\n    return sorted_nums\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums =\
    \ sorted(nums, key=lambda num: sum_of_digits(num))\n    return sorted_nums\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    pass\n", "    sum_of_digits = sum(nums)\n   \
    \ sorted_nums = sorted(nums, key=lambda x: (sum_of_digits - x))\n    return sorted_nums\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums)\n    sorted_nums.sort(key=lambda\
    \ num: sum_of_digits - num)\n    return sorted_nums\n", "    sum = 0\n    for\
    \ num in nums:\n        sum += num\n    return sorted(nums, key=lambda num: sum\
    \ - num)\n", "    pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums,\
    \ key=lambda x: sum_of_digits-x)\n    return sorted_nums\n", "    nums = sorted(nums,\
    \ key=lambda x:sum(map(int, str(x))))\n    return nums\n", "    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits - x)\n\
    \    return sorted_nums\n", "    nums = sorted(nums, key=lambda x: sum(map(int,\
    \ str(x))))\n    return nums\n", "    pass\n", "    sum = 0\n    points = []\n\
    \    for num in nums:\n        sum += num\n        points.append(num)\n    points.sort(key=lambda\
    \ num: sum - num)\n    return points\n", "    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda num: sum_of_digits(num))\n    return sorted_nums\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    sum_num = 0\n    sum_num2 = 0\n    sum_num3 =\
    \ 0\n    sum_num4 = 0\n    sum_num5 = 0\n    sum_num6 = 0\n    sum_num7 = 0\n\
    \    sum_num8 = 0\n    sum_num9 = 0\n    sum_num10 = 0\n    sum_num11 = 0\n  \
    \  sum_num12 = 0\n    sum_num13 = 0\n    sum_num14 = 0\n    sum_num15 = 0\n  \
    \  sum_num16 = 0\n    sum_num17 = 0\n    sum_num18 = 0\n    sum_num19 = 0\n  \
    \  sum_num20 = 0\n    sum_num21 = 0\n    sum_num22 = 0\n    sum_num23 = 0\n  \
    \  sum_num24 = 0\n    sum_num25 = 0\n    sum_num26 = 0\n    sum_num27 = 0\n  \
    \  sum_num28 = 0\n    sum_num29 = 0\n    sum_num30 = 0\n    sum_num31 = 0\n  \
    \  sum_num32 = 0\n    sum_num33 = 0\n    sum_num34 = 0\n    sum_num35 = 0\n  \
    \  sum_num36 = 0\n    sum_num37 = 0\n    sum_num38 = 0\n    sum_num39 = 0\n  \
    \  sum_num40 = 0\n    sum_num41 = 0\n    sum_num42 = 0\n    sum_num43 = 0\n  \
    \  sum_num44 = 0\n    sum_num45 = 0\n    sum_num46 = 0\n    sum_num47 = 0\n  \
    \  sum_num48 = 0\n    sum_num49 = 0\n    sum_num50 = 0\n    sum_num51 = 0\n  \
    \  sum_num52 = 0\n    sum_num53 = 0\n    sum_num54 = 0\n    sum_num55 = 0\n  \
    \  sum_num56 = 0\n    sum_num57 = 0\n    sum_num58 = 0\n    sum_num59 = 0\n  \
    \  sum_num60 = 0\n    sum_num61 = 0\n    sum_num62 = 0\n    sum_num63 = 0\n  \
    \  sum_num64 = 0\n    sum_num65 = 0\n    sum_num66 = 0\n    sum_num67 = 0\n  \
    \  sum_num68 = 0\n    sum_num69 = 0\n    sum_num70 = 0\n    sum_num71 = 0\n  \
    \  sum_num72 = 0\n    sum_num73 = 0\n    sum_num74 = 0\n    sum_num75 = 0\n  \
    \  sum_num76 = 0\n    sum_num77 = 0\n    sum_num78 = 0\n    sum_num79 = 0\n  \
    \  sum_num80 = 0\n    sum_num81 = 0\n    sum_num82 = 0\n    sum_num83 = 0\n  \
    \  sum_num84 = 0\n    sum_num85 = 0\n    sum_num", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    nums.sort()\n    sum = 0\n    points =\
    \ []\n    for num in nums:\n        sum += num\n        points.append(num)\n \
    \   points.sort(key=lambda x:sum-x)\n    return points\n", "    sum_of_digits\
    \ = []\n    for num in nums:\n        sum_of_digits.append(sum(num))\n    sum_of_digits.sort()\n\
    \    return [x[0] for x in sum_of_digits]\n", "    pass\n", "    pass\n", "  \
    \  pass\n", "    sum_of_digits = []\n    sorted_nums = []\n    for num in nums:\n\
    \        sum_of_digits.append(num % 10)\n        num = num // 10\n    sorted_nums\
    \ = sorted(nums, key=lambda x: sum_of_digits.index(x))\n    return sorted_nums\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n\
    \    return sorted_nums\n", "    sum = 0\n    points = []\n    for num in nums:\n\
    \        sum += num\n        points.append(num)\n    points.sort(key=lambda x:sum-x)\n\
    \    return points\n", "    sum_of_digits = []\n    for num in nums:\n       \
    \ sum_of_digits.append(sum(num))\n    sum_of_digits.sort()\n    return [x[0] for\
    \ x in sum_of_digits]\n", "    pass\n", "    pass\n", "    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n    return\
    \ sorted_nums\n", "    nums.sort()\n    sums = []\n    sum = 0\n    for num in\
    \ nums:\n        sum += num\n        sums.append(sum)\n    return sums\n", " \
    \   sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num:\
    \ sum_of_digits(num))\n    return sorted_nums\n", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    sum_of_digits = []\n    for num in nums:\n\
    \        sum_of_digits.append(sum(num))\n    sum_of_digits = sorted(sum_of_digits)\n\
    \    return sorted(nums, key=lambda num: sum_of_digits.index(sum(num)))\n", " \
    \   sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num:\
    \ sum_of_digits(num))\n    return sorted_nums\n", "    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n    return sorted_nums\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits\
    \ - x)\n    return sorted_nums\n", "    pass\n", "    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x:sum_of_digits-x)\n    return sorted_nums\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
