language: py
name: HumanEval_125_split_words
results:
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppf0zcr2j.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppf0zcr2j.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppf0zcr2j.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split(' ')\n    if len(words) == 1:\n    \
    \    return words[0]\n    elif len(words) == 2:\n        return words\n    else:\n\
    \        words = [word for word in words if word != '']\n        words = [word\
    \ for word in words if word.isalpha()]\n        words = [word for word in words\
    \ if ord(word[0]) % 2 == 1]\n        return words\n\ndef check(candidate):\n \
    \   assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcnas2vo8.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcnas2vo8.py\"\
    , line 38, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcnas2vo8.py\"\
    , line 29, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw6jxsr4h.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw6jxsr4h.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw6jxsr4h.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = list(words)\n        words[0] = words[0].lower()\n        words[-1]\
    \ = words[-1].lower()\n        return words\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_wjlncl1.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_wjlncl1.py\"\
    , line 38, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_wjlncl1.py\"\
    , line 28, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptnokwesp.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptnokwesp.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptnokwesp.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy6jum98h.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy6jum98h.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy6jum98h.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9avevr61.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9avevr61.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9avevr61.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm8o4n0t4.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm8o4n0t4.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm8o4n0t4.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 1:\n       \
    \ return words[0]\n    elif len(words) > 1:\n        return words\n    else:\n\
    \        return len(txt)\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zh5w__v.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zh5w__v.py\"\
    , line 35, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zh5w__v.py\"\
    , line 26, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmzouwba8.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmzouwba8.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmzouwba8.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    else:\n        words = [word for word in words if word !=\
    \ '']\n        if len(words) == 1:\n            return words\n        else:\n\
    \            words = [word for word in words if word != '']\n            words\
    \ = [word for word in words if word.isalpha()]\n            if len(words) <= 1:\n\
    \                return words\n            else:\n                words = [word\
    \ for word in words if word.isalpha()]\n                words = [word for word\
    \ in words if word.islower()]\n                words = [word for word in words\
    \ if ord(word[0]) % 2 != 0]\n                return words\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu0ndd_jc.py\"\
    , line 47, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu0ndd_jc.py\"\
    , line 45, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu0ndd_jc.py\"\
    , line 35, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp234nc2bb.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp234nc2bb.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp234nc2bb.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph677e6tb.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph677e6tb.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph677e6tb.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplnh2d29e.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplnh2d29e.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplnh2d29e.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjlkq4knw.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjlkq4knw.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjlkq4knw.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    else:\n        words = [word for word in words if word !=\
    \ \"\"]\n        words = [word for word in words if word.isalpha()]\n        if\
    \ len(words) == 0:\n            return words\n        else:\n            words\
    \ = [word for word in words if ord(word[0]) % 2 == 1]\n            if len(words)\
    \ == 0:\n                return words\n            else:\n                return\
    \ words\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nziifx6.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nziifx6.py\"\
    , line 42, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nziifx6.py\"\
    , line 32, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_fq2tv9.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_fq2tv9.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_fq2tv9.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy5ygsuyp.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy5ygsuyp.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy5ygsuyp.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != '']\n        words = [word\
    \ for word in words if word != 'and']\n        words = [word for word in words\
    \ if word != 'or']\n        words = [word for word in words if word != 'but']\n\
    \        words = [word for word in words if word != 'the']\n        words = [word\
    \ for word in words if word != 'in']\n        words = [word for word in words\
    \ if word != 'for']\n        words = [word for word in words if word != 'to']\n\
    \        words = [word for word in words if word != 'as']\n        words = [word\
    \ for word in words if word != 'with']\n        words = [word for word in words\
    \ if word != 'for']\n        words = [word for word in words if word != 'to']\n\
    \        words = [word for word in words if word != 'as']\n        words = [word\
    \ for word in words if word != 'with']\n        words = [word for word in words\
    \ if word != 'for']\n        words = [word for word in words if word != 'to']\n\
    \        words = [word for word in words if word != 'as']\n        words = [word\
    \ for word in words if word != 'with']\n        words = [word for word in words\
    \ if word != 'for']\n        words = [word for word in words if word != 'to']\n\
    \        words = [word for word in words if word != 'as']\n        words = [word\
    \ for word in words if word != 'with']\n        words = [word for word in words\
    \ if word != 'for']\n        words = [word for word in words if word != 'to']\n\
    \        words = [word for word in words if word != 'as']\n        words = [word\
    \ for word in words if word != 'with']\n        words = [word for word in words\
    \ if word != 'for']\n        words = [word for word in words if word != 'to']\n\
    \        words = [word for word in words if word != 'as']\n        words = [word\
    \ for word in words if word != 'with']\n        words = [word for word in words\
    \ if word != 'for']\n        words = [word for word in words if word != 'to']\n\
    \        words = [word for word in words if word != 'as']\n        words = [word\
    \ for word in words if word != 'with']\n        words = [word for word in words\
    \ if word != 'for']\n        words = [word for word in words if word != 'to']\n\
    \        words = [word for word in words if word != 'as']\n        words = [word\
    \ for word in words if word \ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf_pqnug4.py\", line 59\n    words = [word for word in\
    \ words if word \n            ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    if len(words) == 1:\n        return words\n    if len(words)\
    \ == 2:\n        return words\n    if len(words) > 2:\n        return words\n\
    \    words = list(words)\n    words[0] = words[0].lower()\n    words[-1] = words[-1].lower()\n\
    \    words[2] = words[2].lower()\n    words[3] = words[3].lower()\n    words[4]\
    \ = words[4].lower()\n    words[5] = words[5].lower()\n    words[6] = words[6].lower()\n\
    \    words[7] = words[7].lower()\n    words[8] = words[8].lower()\n    words[9]\
    \ = words[9].lower()\n    words[10] = words[10].lower()\n    words[11] = words[11].lower()\n\
    \    words[12] = words[12].lower()\n    words[13] = words[13].lower()\n    words[14]\
    \ = words[14].lower()\n    words[15] = words[15].lower()\n    words[16] = words[16].lower()\n\
    \    words[17] = words[17].lower()\n    words[18] = words[18].lower()\n    words[19]\
    \ = words[19].lower()\n    words[20] = words[20].lower()\n    words[21] = words[21].lower()\n\
    \    words[22] = words[22].lower()\n    words[23] = words[23].lower()\n    words[24]\
    \ = words[24].lower()\n    words[25] = words[25].lower()\n    return words\n\n\
    def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjp0v3gaz.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpjp0v3gaz.py\", line 65,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpjp0v3gaz.py\", line\
    \ 56, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != '']\n        return words\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6jfze7x.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpy6jfze7x.py\", line 36,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpy6jfze7x.py\", line\
    \ 27, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = list(words)\n        words[0] = words[0].lower()\n        words[-1]\
    \ = words[-1].lower()\n        words[1::2] = [words[1::2][0].upper(), words[1::2][-1].upper()]\n\
    \        return words\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpquwpgf7u.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpquwpgf7u.py\", line 40,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpquwpgf7u.py\", line\
    \ 30, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpquwpgf7u.py\", line 25, in split_words\n    words[1::2] = [words[1::2][0].upper(),\
    \ words[1::2][-1].upper()]\nValueError: attempt to assign sequence of size 2 to\
    \ extended slice of size 1\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != '']\n        return words\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmbiaultm.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpmbiaultm.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpmbiaultm.py\", line\
    \ 28, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != \"\"]\n        words = [word\
    \ for word in words if word != \",\"]\n        words = [word for word in words\
    \ if ord(word[0]) % 2 != 0]\n        return words\n\ndef check(candidate):\n \
    \   assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyqjw0xgf.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpyqjw0xgf.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpyqjw0xgf.py\", line\
    \ 28, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split(' ')\n    if len(words) == 1:\n    \
    \    return words\n    else:\n        words = [word for word in words if word\
    \ != '']\n        return words\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd88p4qzq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpd88p4qzq.py\", line 34,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpd88p4qzq.py\", line\
    \ 25, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    words = [word for word in words if word != '']\n    if len(words)\
    \ == 1:\n        return words\n    if len(words) == 2:\n        return words\n\
    \    if len(words) > 2:\n        return words\n    return len([word for word in\
    \ words if word.islower()])\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp86tdznl1.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp86tdznl1.py\", line 39,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp86tdznl1.py\", line\
    \ 30, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: 1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    if len(words) == 1:\n        return words\n    if len(words)\
    \ == 2:\n        return words\n    if len(words) > 2:\n        return words\n\
    \    \n    words = list(filter(None, words))\n    \n    words = [word for word\
    \ in words if word != '']\n    \n    if len(words) == 0:\n        return words\n\
    \    if len(words) == 1:\n        return words\n    if len(words) == 2:\n    \
    \    return words\n    if len(words) > 2:\n        return words\n    \n    words\
    \ = list(filter(None, words))\n    \n    words = [word for word in words if word\
    \ != '']\n    \n    if len(words) == 0:\n        return words\n    if len(words)\
    \ == 1:\n        return words\n    if len(words) == 2:\n        return words\n\
    \    if len(words) > 2:\n        return words\n    \n    words = list(filter(None,\
    \ words))\n    \n    words = [word for word in words if word != '']\n    \n  \
    \  if len(words) == 0:\n        return words\n    if len(words) == 1:\n      \
    \  return words\n    if len(words) == 2:\n        return words\n    if len(words)\
    \ > 2:\n        return words\n    \n    words = list(filter(None, words))\n  \
    \  \n    words = [word for word in words if word != '']\n    \n    if len(words)\
    \ == 0:\n        return words\n    if len(words) == 1:\n        return words\n\
    \    if len(words) == 2:\n        return words\n    if len(words) > 2:\n     \
    \   return words\n    \n    words = list(filter(None, words))\n    \n    words\
    \ = [word for word in words if word != '']\n    \n    if len(words) == 0:\n  \
    \      return words\n    if len(words) == 1:\n        return words\n    if len(words)\
    \ == 2:\n        return words\n    if len(words) > 2:\n        return words\n\
    \    \n    words = list(filter(None, words))\n    \n    words = [word for word\
    \ in words if word != '']\n    \n    if len(words) == 0:\n        return words\n\
    \    if len(words) == 1:\n        return words\n    if len(words) == 2:\n    \
    \    return words\n    if len(words) > 2:\n        return words\n    \n    words\
    \ = list(filter(None, words))\n    \n    words = [word for word in words if word\
    \ != '']\n    \n    if len(words) == 0:\n        return words\n    if len(words)\
    \ == 1:\n        return words\n    if len(words) == 2:\n        return words\n\
    \    if len(words) > 2:\n        return words\n    \n    words = list(filter(None,\
    \ words))\n    \n    words = [word for word in words if word != '']\n    \n  \
    \  if len(words) == 0:\n        return words\n    if len(words) == 1:\n      \
    \  return words\n    if len(words) == 2:\n        return words\n    if len(words)\
    \ > 2:\n        return words\n    \n    words = list(filter(None, words))\n  \
    \  \n    words = [word for word in words if word != '']\n    \n    if len(word\n\
    def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_jggq99y.py\", line 134\n    if len(word\n          ^\n\
    SyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != \"\"]\n        words = [word\
    \ for word in words if word.isalpha()]\n        words = [word for word in words\
    \ if ord(word[0]) % 2 == 1]\n        return words\n\ndef check(candidate):\n \
    \   assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvfiub_sv.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpvfiub_sv.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpvfiub_sv.py\", line\
    \ 28, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    if len(words) == 1:\n        return words\n    if len(words)\
    \ == 2:\n        return words\n    if len(words) == 3:\n        return words\n\
    \    if len(words) == 4:\n        return words\n    if len(words) == 5:\n    \
    \    return words\n    if len(words) == 6:\n        return words\n    if len(words)\
    \ == 7:\n        return words\n    if len(words) == 8:\n        return words\n\
    \    if len(words) == 9:\n        return words\n    if len(words) == 10:\n   \
    \     return words\n    if len(words) == 11:\n        return words\n    if len(words)\
    \ == 12:\n        return words\n    if len(words) == 13:\n        return words\n\
    \    if len(words) == 14:\n        return words\n    if len(words) == 15:\n  \
    \      return words\n    if len(words) == 16:\n        return words\n    if len(words)\
    \ == 17:\n        return words\n    if len(words) == 18:\n        return words\n\
    \    if len(words) == 19:\n        return words\n    if len(words) == 20:\n  \
    \      return words\n    if len(words) == 21:\n        return words\n    if len(words)\
    \ == 22:\n        return words\n    if len(words) == 23:\n        return words\n\
    \    if len(words) == 24:\n        return words\n    if len(words) == 25:\n  \
    \      return words\n    if len(words) == 26:\n        return words\n    if len(words)\
    \ == 27:\n        return words\n    if len(words) == 28:\n        return words\n\
    \    if len(words) == 29:\n        return words\n    if len(words) == 30:\n  \
    \      return words\n    if len(words) == 31:\n        return words\n    if len(words)\
    \ == 32:\n        return words\n    if len(words) == 33:\n        return words\n\
    \    if len(words) == 34:\n        return words\n    if len(words) == 35:\n  \
    \      return words\n    if len(words) == 36:\n        return words\n    if len(words)\
    \ == 37:\n        return words\n    if len(words) == 38:\n        return words\n\
    \    if len(words) == 39:\n        return words\n    if len(words) == 40:\n  \
    \      return words\n    if len(words) == 41:\n        return words\n    if len(words)\
    \ == 42:\n        return words\n    if len(words) == 43:\n        return words\n\
    \    if len(words) == 44:\n        return words\n    if len(words) == 45:\n  \
    \      return words\n    if len(words) == 46:\n        return words\n    if len(words)\
    \ == 47:\n        return words\n    if len(words) == 48:\n        return words\n\
    \    if len(words) == 49:\n        return words\n    if len(words) == 50:\n  \
    \      return words\n    if len(words) == 51:\n        return words\n    if len(words)\
    \ == 52:\n        return words\n    if len(words) == 53:\n        return words\n\
    \    if len(words) == 54:\n        return words\n    if len(words) == 55:\n  \
    \      return words\n    if len(words) == 56:\n        return words\n    if len(words)\
    \ == 57:\n        return words\n    if len(words) == 58:\n        return words\n\
    \    if len(words) == 59\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmppkzeu89l.py\", line 135\n    if len(words) == 59\n   \
    \                    ^\nSyntaxError: expected ':'\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: 1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split(' ')\n    if len(words) == 0:\n    \
    \    return words\n    if len(words) == 1:\n        return words\n    if len(words)\
    \ == 2:\n        return words\n    if len(words) == 3:\n        return words\n\
    \    if len(words) == 4:\n        return words\n    if len(words) == 5:\n    \
    \    return words\n    if len(words) == 6:\n        return words\n    if len(words)\
    \ == 7:\n        return words\n    if len(words) == 8:\n        return words\n\
    \    if len(words) == 9:\n        return words\n    if len(words) == 10:\n   \
    \     return words\n    if len(words) == 11:\n        return words\n    if len(words)\
    \ == 12:\n        return words\n    if len(words) == 13:\n        return words\n\
    \    if len(words) == 14:\n        return words\n    if len(words) == 15:\n  \
    \      return words\n    if len(words) == 16:\n        return words\n    if len(words)\
    \ == 17:\n        return words\n    if len(words) == 18:\n        return words\n\
    \    if len(words) == 19:\n        return words\n    if len(words) == 20:\n  \
    \      return words\n    if len(words) == 21:\n        return words\n    if len(words)\
    \ == 22:\n        return words\n    if len(words) == 23:\n        return words\n\
    \    if len(words) == 24:\n        return words\n    if len(words) == 25:\n  \
    \      return words\n    if len(words) == 26:\n        return words\n    if len(words)\
    \ == 27:\n        return words\n    if len(words) == 28:\n        return words\n\
    \    if len(words) == 29:\n        return words\n    if len(words) == 30:\n  \
    \      return words\n    if len(words) == 31:\n        return words\n    if len(words)\
    \ == 32:\n        return words\n    if len(words) == 33:\n        return words\n\
    \    if len(words) == 34:\n        return words\n    if len(words) == 35:\n  \
    \      return words\n    if len(words) == 36:\n        return words\n    if len(words)\
    \ == 37:\n        return words\n    if len(words) == 38:\n        return words\n\
    \    if len(words) == 39:\n        return words\n    if len(words) == 40:\n  \
    \      return words\n    if len(words) == 41:\n        return words\n    if len(words)\
    \ == 42:\n        return words\n    if len(words) == 43:\n        return words\n\
    \    if len(words) == 44:\n        return words\n    if len(words) == 45:\n  \
    \      return words\n    if len(words) == 46:\n        return words\n    if len(words)\
    \ == 47:\n        return words\n    if len(words) == 48:\n        return words\n\
    \    if len(words) == 49:\n        return words\n    if len(words) == 50:\n  \
    \      return words\n    if len(words) == 51:\n        return words\n    if len(words)\
    \ == 52:\n        return words\n    if len(words) == 53:\n        return words\n\
    \    if len(words) == 54:\n        return words\n    if len(words) == 55:\n  \
    \      return words\n    if len(words) == 56:\n        return words\n    if len(words)\
    \ == 57:\n        return words\n    if len(words) == 58:\n        return words\n\
    \    if len(words) == 59\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpxarjfef9.py\", line 135\n    if len(words) == 59\n   \
    \                    ^\nSyntaxError: expected ':'\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    if len(words) == 1:\n        return words\n    if len(words)\
    \ == 2:\n        return words\n    if len(words) == 3:\n        return words\n\
    \    if len(words) == 4:\n        return words\n    if len(words) == 5:\n    \
    \    return words\n    if len(words) == 6:\n        return words\n    if len(words)\
    \ == 7:\n        return words\n    if len(words) == 8:\n        return words\n\
    \    if len(words) == 9:\n        return words\n    if len(words) == 10:\n   \
    \     return words\n    if len(words) == 11:\n        return words\n    if len(words)\
    \ == 12:\n        return words\n    if len(words) == 13:\n        return words\n\
    \    if len(words) == 14:\n        return words\n    if len(words) == 15:\n  \
    \      return words\n    if len(words) == 16:\n        return words\n    if len(words)\
    \ == 17:\n        return words\n    if len(words) == 18:\n        return words\n\
    \    if len(words) == 19:\n        return words\n    if len(words) == 20:\n  \
    \      return words\n    if len(words) == 21:\n        return words\n    if len(words)\
    \ == 22:\n        return words\n    if len(words) == 23:\n        return words\n\
    \    if len(words) == 24:\n        return words\n    if len(words) == 25:\n  \
    \      return words\n    if len(words) == 26:\n        return words\n    if len(words)\
    \ == 27:\n        return words\n    if len(words) == 28:\n        return words\n\
    \    if len(words) == 29:\n        return words\n    if len(words) == 30:\n  \
    \      return words\n    if len(words) == 31:\n        return words\n    if len(words)\
    \ == 32:\n        return words\n    if len(words) == 33:\n        return words\n\
    \    if len(words) == 34:\n        return words\n    if len(words) == 35:\n  \
    \      return words\n    if len(words) == 36:\n        return words\n    if len(words)\
    \ == 37:\n        return words\n    if len(words) == 38:\n        return words\n\
    \    if len(words) == 39:\n        return words\n    if len(words) == 40:\n  \
    \      return words\n    if len(words) == 41:\n        return words\n    if len(words)\
    \ == 42:\n        return words\n    if len(words) == 43:\n        return words\n\
    \    if len(words) == 44:\n        return words\n    if len(words) == 45:\n  \
    \      return words\n    if len(words) == 46:\n        return words\n    if len(words)\
    \ == 47:\n        return words\n    if len(words) == 48:\n        return words\n\
    \    if len(words) == 49:\n        return words\n    if len(words) == 50:\n  \
    \      return words\n    if len(words) == 51:\n        return words\n    if len(words)\
    \ == 52:\n        return words\n    if len(words) == 53:\n        return words\n\
    \    if len(words) == 54:\n        return words\n    if len(words) == 55:\n  \
    \      return words\n    if len(words) == 56:\n        return words\n    if len(words)\
    \ == 57:\n        return words\n    if len(words) == 58:\n        return words\n\
    \    if len(words) == 59\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmppkzeu89l.py\", line 135\n    if len(words) == 59\n   \
    \                    ^\nSyntaxError: expected ':'\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != '']\n        words = [word\
    \ for word in words if word != 'and']\n        words = [word for word in words\
    \ if word != 'or']\n        words = [word for word in words if word != 'but']\n\
    \        words = [word for word in words if word != 'the']\n        words = [word\
    \ for word in words if word != 'in']\n        words = [word for word in words\
    \ if word != 'for']\n        words = [word for word in words if word != 'to']\n\
    \        words = [word for word in words if word != 'on']\n        words = [word\
    \ for word in words if word != 'a']\n        words = [word for word in words if\
    \ word != 'the']\n        words = [word for word in words if word != 'and']\n\
    \        words = [word for word in words if word != 'or']\n        words = [word\
    \ for word in words if word != 'but']\n        words = [word for word in words\
    \ if word != 'the']\n        words = [word for word in words if word != 'in']\n\
    \        words = [word for word in words if word != 'for']\n        words = [word\
    \ for word in words if word != 'to']\n        words = [word for word in words\
    \ if word != 'on']\n        words = [word for word in words if word != 'a']\n\
    \        words = [word for word in words if word != 'the']\n        words = [word\
    \ for word in words if word != 'and']\n        words = [word for word in words\
    \ if word != 'or']\n        words = [word for word in words if word != 'but']\n\
    \        words = [word for word in words if word != 'the']\n        words = [word\
    \ for word in words if word != 'in']\n        words = [word for word in words\
    \ if word != 'for']\n        words = [word for word in words if word != 'to']\n\
    \        words = [word for word in words if word != 'on']\n        words = [word\
    \ for word in words if word != 'a']\n        words = [word for word in words if\
    \ word != 'the']\n        words = [word for word in words if word != 'and']\n\
    \        words = [word for word in words if word != 'or']\n        words = [word\
    \ for word in words if word != 'but']\n        words = [word for word in words\
    \ if word != 'the']\n        words = [word for word in words if word != 'in']\n\
    \        words = [word for word in words if word != 'for']\n        words = [word\
    \ for word in words if word \ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpo77sgjzs.py\", line 59\n    words = [word for word in\
    \ words if word \n            ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: 1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != '']\n        words = [word\
    \ for word in words if word != '']\n        words = [word for word in words if\
    \ word != '']\n        words = [word for word in words if word != '']\n      \
    \  words = [word for word in words if word != '']\n        words = [word for word\
    \ in words if word != '']\n        words = [word for word in words if word !=\
    \ '']\n        words = [word for word in words if word != '']\n        words =\
    \ [word for word in words if word != '']\n        words = [word for word in words\
    \ if word != '']\n        words = [word for word in words if word != '']\n   \
    \     words = [word for word in words if word != '']\n        words = [word for\
    \ word in words if word != '']\n        words = [word for word in words if word\
    \ != '']\n        words = [word for word in words if word != '']\n        words\
    \ = [word for word in words if word != '']\n        words = [word for word in\
    \ words if word != '']\n        words = [word for word in words if word != '']\n\
    \        words = [word for word in words if word != '']\n        words = [word\
    \ for word in words if word != '']\n        words = [word for word in words if\
    \ word != '']\n        words = [word for word in words if word != '']\n      \
    \  words = [word for word in words if word != '']\n        words = [word for word\
    \ in words if word != '']\n        words = [word for word in words if word !=\
    \ '']\n        words = [word for word in words if word != '']\n        words =\
    \ [word for word in words if word != '']\n        words = [word for word in words\
    \ if word != '']\n        words = [word for word in words if word != '']\n   \
    \     words = [word for word in words if word != '']\n        words = [word for\
    \ word in words if word != '']\n        words = [word for word in words if word\
    \ != '']\n        words = [word for word in words if word != '']\n        words\
    \ = [word for word in words if word != '']\n        words = [word for word in\
    \ words if word != '']\n        words = [word for word in words if word != '']\n\
    \        words = [word for word in words if word != '']\n        words = [word\
    \ for word in words if word != '']\n        words = [word for word in words if\
    \ word != '']\n        words = [word for word in words if word != '']\n      \
    \  words = [word for word in words if word \ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpibsk7dp5.py\", line 62\n    words = [word for word in\
    \ words if word \n            ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    words = [w for w in words if len(w) > 0]\n    if len(words)\
    \ == 0:\n        return words\n    words = [w for w in words if w.isalpha()]\n\
    \    if len(words) == 0:\n        return words\n    words = [w for w in words\
    \ if ord(w) % 2 == 1]\n    if len(words) == 0:\n        return words\n    return\
    \ words\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0suuz09h.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp0suuz09h.py\", line 41,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp0suuz09h.py\", line\
    \ 31, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmp0suuz09h.py\", line 25, in split_words\n    words = [w for w\
    \ in words if ord(w) % 2 == 1]\n  File \"/tmp/tmp0suuz09h.py\", line 25, in <listcomp>\n\
    \    words = [w for w in words if ord(w) % 2 == 1]\nTypeError: ord() expected\
    \ a character, but string of length 5 found\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != '']\n        words = [word\
    \ for word in words if word != '']\n        words = [word for word in words if\
    \ word != '']\n        words = [word for word in words if word != '']\n      \
    \  words = [word for word in words if word != '']\n        words = [word for word\
    \ in words if word != '']\n        words = [word for word in words if word !=\
    \ '']\n        words = [word for word in words if word != '']\n        words =\
    \ [word for word in words if word != '']\n        words = [word for word in words\
    \ if word != '']\n        words = [word for word in words if word != '']\n   \
    \     words = [word for word in words if word != '']\n        words = [word for\
    \ word in words if word != '']\n        words = [word for word in words if word\
    \ != '']\n        words = [word for word in words if word != '']\n        words\
    \ = [word for word in words if word != '']\n        words = [word for word in\
    \ words if word != '']\n        words = [word for word in words if word != '']\n\
    \        words = [word for word in words if word != '']\n        words = [word\
    \ for word in words if word != '']\n        words = [word for word in words if\
    \ word != '']\n        words = [word for word in words if word != '']\n      \
    \  words = [word for word in words if word != '']\n        words = [word for word\
    \ in words if word != '']\n        words = [word for word in words if word !=\
    \ '']\n        words = [word for word in words if word != '']\n        words =\
    \ [word for word in words if word != '']\n        words = [word for word in words\
    \ if word != '']\n        words = [word for word in words if word != '']\n   \
    \     words = [word for word in words if word != '']\n        words = [word for\
    \ word in words if word != '']\n        words = [word for word in words if word\
    \ != '']\n        words = [word for word in words if word != '']\n        words\
    \ = [word for word in words if word != '']\n        words = [word for word in\
    \ words if word != '']\n        words = [word for word in words if word != '']\n\
    \        words = [word for word in words if word != '']\n        words = [word\
    \ for word in words if word != '']\n        words = [word for word in words if\
    \ word != '']\n        words = [word for word in words if word != '']\n      \
    \  words = [word for word in words if word \ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpibsk7dp5.py\", line 62\n    words = [word for word in\
    \ words if word \n            ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 1:\n       \
    \ return words\n    if len(words) == 2:\n        return words\n    if len(words)\
    \ > 2:\n        return words\n    return len([x for x in words if x.islower()])\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8npvbdha.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp8npvbdha.py\", line 36,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp8npvbdha.py\", line\
    \ 27, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       return words\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppm0tv6kp.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppm0tv6kp.py\", line 35,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmppm0tv6kp.py\", line\
    \ 26, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    if len(words) == 1:\n        return words\n    \n    words\
    \ = [word for word in words if word != \"\"]\n    \n    words = [word for word\
    \ in words if word.isalpha()]\n    \n    if len(words) == 0:\n        return words\n\
    \    \n    words = [word for word in words if ord(word[0]) % 2 != 0]\n    \n \
    \   if len(words) == 0:\n        return words\n    \n    words = [word for word\
    \ in words if ord(word[0]) % 2 == 0]\n    \n    if len(words) == 0:\n        return\
    \ words\n    \n    return words\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3aoxjlso.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp3aoxjlso.py\", line 52,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp3aoxjlso.py\", line\
    \ 42, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [w for w in words if w != \"\"]\n        words = [w for w in words\
    \ if w.isalpha()]\n        words = [w for w in words if ord(w) % 2 == 1]\n   \
    \     return words\n\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmc2cj3im.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpmc2cj3im.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpmc2cj3im.py\", line\
    \ 28, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpmc2cj3im.py\", line 24, in split_words\n    words = [w for w\
    \ in words if ord(w) % 2 == 1]\n  File \"/tmp/tmpmc2cj3im.py\", line 24, in <listcomp>\n\
    \    words = [w for w in words if ord(w) % 2 == 1]\nTypeError: ord() expected\
    \ a character, but string of length 5 found\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [w for w in words if w != \"\"]\n        words = [w for w in words\
    \ if w.isalpha()]\n        if len(words) == 0:\n            return words\n   \
    \     elif len(words) == 1:\n            return words\n        else:\n       \
    \     words = [w for w in words if ord(w) % 2 == 1]\n            return words\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpunrooa20.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpunrooa20.py\", line 43,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpunrooa20.py\", line\
    \ 33, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != '']\n        return words\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6jfze7x.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpy6jfze7x.py\", line 36,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpy6jfze7x.py\", line\
    \ 27, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != \"\"]\n        words = [word\
    \ for word in words if word.isalpha()]\n        if len(words) == 0:\n        \
    \    return words\n        elif len(words) == 1:\n            return words\n \
    \       else:\n            words = [word for word in words if ord(word[0]) % 2\
    \ == 1]\n            return words\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vury4dj.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp4vury4dj.py\", line 43,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp4vury4dj.py\", line\
    \ 33, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != \"\"]\n        words = [word\
    \ for word in words if word != \",\"]\n        words = [word for word in words\
    \ if ord(word[0]) % 2 == 1]\n        return words\n\ndef check(candidate):\n \
    \   assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvblaz9q_.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpvblaz9q_.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpvblaz9q_.py\", line\
    \ 28, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 1:\n       \
    \ return words\n    else:\n        words = words.split(',')\n        if len(words)\
    \ == 1:\n            return words\n        else:\n            words = [word for\
    \ word in words if word not in ['', '!']]\n            words = [word for word\
    \ in words if word.islower()]\n            words = [word for word in words if\
    \ ord(word[0]) % 2 == 1]\n            return words\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqx2tjsmv.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpqx2tjsmv.py\", line 40,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpqx2tjsmv.py\", line\
    \ 30, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpqx2tjsmv.py\", line 20, in split_words\n    words = words.split(',')\n\
    AttributeError: 'list' object has no attribute 'split'\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: 1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != '']\n        words = [word\
    \ for word in words if word != 'and']\n        words = [word for word in words\
    \ if word != 'or']\n        words = [word for word in words if word != 'but']\n\
    \        words = [word for word in words if word != 'the']\n        words = [word\
    \ for word in words if word != 'in']\n        words = [word for word in words\
    \ if word != 'for']\n        words = [word for word in words if word != 'to']\n\
    \        words = [word for word in words if word != 'on']\n        words = [word\
    \ for word in words if word != 'a']\n        words = [word for word in words if\
    \ word != 'in']\n        words = [word for word in words if word != 'for']\n \
    \       words = [word for word in words if word != 'a']\n        words = [word\
    \ for word in words if word != 'and']\n        words = [word for word in words\
    \ if word != 'or']\n        words = [word for word in words if word != 'but']\n\
    \        words = [word for word in words if word != 'the']\n        words = [word\
    \ for word in words if word != 'in']\n        words = [word for word in words\
    \ if word != 'for']\n        words = [word for word in words if word != 'a']\n\
    \        words = [word for word in words if word != 'and']\n        words = [word\
    \ for word in words if word != 'or']\n        words = [word for word in words\
    \ if word != 'but']\n        words = [word for word in words if word != 'the']\n\
    \        words = [word for word in words if word != 'in']\n        words = [word\
    \ for word in words if word != 'for']\n        words = [word for word in words\
    \ if word != 'a']\n        words = [word for word in words if word != 'and']\n\
    \        words = [word for word in words if word != 'or']\n        words = [word\
    \ for word in words if word != 'but']\n        words = [word for word in words\
    \ if word != 'the']\n        words = [word for word in words if word != 'in']\n\
    \        words = [word for word in words if word != 'for']\n        words = [word\
    \ for word in words if word != 'a']\n        words = [word for word in words if\
    \ word != 'and']\n        words = [word for word in words if word != 'or']\n \
    \       words = [word for word in words if word != 'but']\n        words = [word\
    \ for word in words if word \ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmplu211ykp.py\", line 59\n    words = [word for word in\
    \ words if word \n            ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != \"\"]\n        words = [word\
    \ for word in words if word.isalpha()]\n        if len(words) == 0:\n        \
    \    return words\n        elif len(words) == 1:\n            return words\n \
    \       else:\n            words = [word for word in words if ord(word[0]) % 2\
    \ == 1]\n            return words\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vury4dj.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp4vury4dj.py\", line 43,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp4vury4dj.py\", line\
    \ 33, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [w for w in words if len(w) > 0]\n        words = [w for w in\
    \ words if len(w) > 0]\n        words = [w for w in words if len(w) > 0]\n   \
    \     words = [w for w in words if len(w) > 0]\n        words = [w for w in words\
    \ if len(w) > 0]\n        words = [w for w in words if len(w) > 0]\n        words\
    \ = [w for w in words if len(w) > 0]\n        words = [w for w in words if len(w)\
    \ > 0]\n        words = [w for w in words if len(w) > 0]\n        words = [w for\
    \ w in words if len(w) > 0]\n        words = [w for w in words if len(w) > 0]\n\
    \        words = [w for w in words if len(w) > 0]\n        words = [w for w in\
    \ words if len(w) > 0]\n        words = [w for w in words if len(w) > 0]\n   \
    \     words = [w for w in words if len(w) > 0]\n        words = [w for w in words\
    \ if len(w) > 0]\n        words = [w for w in words if len(w) > 0]\n        words\
    \ = [w for w in words if len(w) > 0]\n        words = [w for w in words if len(w)\
    \ > 0]\n        words = [w for w in words if len(w) > 0]\n        words = [w for\
    \ w in words if len(w) > 0]\n        words = [w for w in words if len(w) > 0]\n\
    \        words = [w for w in words if len(w) > 0]\n        words = [w for w in\
    \ words if len(w) > 0]\n        words = [w for w in words if len(w) > 0]\n   \
    \     words = [w for w in words if len(w) > 0]\n        words = [w for w in words\
    \ if len(w) > 0]\n        words = [w for w in words if len(w) > 0]\n        words\
    \ = [w for w in words if len(w) > 0]\n        words = [w for w in words if len(w)\
    \ > 0]\n        words = [w for w in words if len(w) > 0]\n        words = [w for\
    \ w in words if len(w) > 0]\n        words = [w for w in words if len(w) > 0]\n\
    \        words = [w for w in words if len(w) > 0]\n        words = [w for w in\
    \ words if len(w) > 0]\n        words = [w for w in words if len(w) > 0]\n   \
    \     words = [w for w in words if len(w) > 0]\n        words = [w for w in words\
    \ if \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpoq8tiewr.py\", line 59\n    words = [w for w in words\
    \ if \n            ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = list(words)\n        words[0] = words[0].lower()\n        words[-1]\
    \ = words[-1].lower()\n        words[1::2] = words[1::2].split(',')\n        return\
    \ words\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcbxuwqlq.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpcbxuwqlq.py\", line 39,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpcbxuwqlq.py\", line\
    \ 29, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpcbxuwqlq.py\", line 25, in split_words\n    words[1::2] = words[1::2].split(',')\n\
    AttributeError: 'list' object has no attribute 'split'\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: 1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 1:\n       \
    \ return words\n    if len(words) == 2:\n        return words\n    if len(words)\
    \ == 3:\n        return words\n    if len(words) == 4:\n        return words\n\
    \    if len(words) == 5:\n        return words\n    if len(words) == 6:\n    \
    \    return words\n    if len(words) == 7:\n        return words\n    if len(words)\
    \ == 8:\n        return words\n    if len(words) == 9:\n        return words\n\
    \    if len(words) == 10:\n        return words\n    if len(words) == 11:\n  \
    \      return words\n    if len(words) == 12:\n        return words\n    if len(words)\
    \ == 13:\n        return words\n    if len(words) == 14:\n        return words\n\
    \    if len(words) == 15:\n        return words\n    if len(words) == 16:\n  \
    \      return words\n    if len(words) == 17:\n        return words\n    if len(words)\
    \ == 18:\n        return words\n    if len(words) == 19:\n        return words\n\
    \    if len(words) == 20:\n        return words\n    if len(words) == 21:\n  \
    \      return words\n    if len(words) == 22:\n        return words\n    if len(words)\
    \ == 23:\n        return words\n    if len(words) == 24:\n        return words\n\
    \    if len(words) == 25:\n        return words\n    if len(words) == 26:\n  \
    \      return words\n    if len(words) == 27:\n        return words\n    if len(words)\
    \ == 28:\n        return words\n    if len(words) == 29:\n        return words\n\
    \    if len(words) == 30:\n        return words\n    if len(words) == 31:\n  \
    \      return words\n    if len(words) == 32:\n        return words\n    if len(words)\
    \ == 33:\n        return words\n    if len(words) == 34:\n        return words\n\
    \    if len(words) == 35:\n        return words\n    if len(words) == 36:\n  \
    \      return words\n    if len(words) == 37:\n        return words\n    if len(words)\
    \ == 38:\n        return words\n    if len(words) == 39:\n        return words\n\
    \    if len(words) == 40:\n        return words\n    if len(words) == 41:\n  \
    \      return words\n    if len(words) == 42:\n        return words\n    if len(words)\
    \ == 43:\n        return words\n    if len(words) == 44:\n        return words\n\
    \    if len(words) == 45:\n        return words\n    if len(words) == 46:\n  \
    \      return words\n    if len(words) == 47:\n        return words\n    if len(words)\
    \ == 48:\n        return words\n    if len(words) == 49:\n        return words\n\
    \    if len(words) == 50:\n        return words\n    if len(words) == 51:\n  \
    \      return words\n    if len(words) == 52:\n        return words\n    if len(words)\
    \ == 53:\n        return words\n    if len(words) == 54:\n        return words\n\
    \    if len(words) == 55:\n        return words\n    if len(words) == 56:\n  \
    \      return words\n    if len(words) == 57:\n        return words\n    if len(words)\
    \ == 58:\n        return words\n    if len(words) == 59:\n        return words\n\
    \    if len(word\ndef check(candidate):\n    assert candidate('Hello world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmptygx6gte.py\", line 135\n    if len(word\n          ^\n\
    SyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != \"\"]\n        words = [word\
    \ for word in words if word.isalpha()]\n        if len(words) >= 2:\n        \
    \    return words\n        else:\n            return len([word for word in words\
    \ if ord(word[0]) % 2 != 0])\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpazy8vbty.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpazy8vbty.py\", line 40,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpazy8vbty.py\", line\
    \ 30, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = list(words)\n        words[0] = words[0].lower()\n        words[-1]\
    \ = words[-1].lower()\n        return words\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_wjlncl1.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_wjlncl1.py\"\
    , line 38, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_wjlncl1.py\"\
    , line 28, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    \n    words = [word for word in words if word != '']\n   \
    \ \n    if len(words) == 1:\n        return words\n    \n    words = [word for\
    \ word in words if word != '']\n    \n    if len(words) == 1:\n        return\
    \ words\n    \n    words = [word for word in words if word != '']\n    \n    if\
    \ len(words) == 1:\n        return words\n    \n    words = [word for word in\
    \ words if word != '']\n    \n    if len(words) == 1:\n        return words\n\
    \    \n    words = [word for word in words if word != '']\n    \n    if len(words)\
    \ == 1:\n        return words\n    \n    words = [word for word in words if word\
    \ != '']\n    \n    if len(words) == 1:\n        return words\n    \n    words\
    \ = [word for word in words if word != '']\n    \n    if len(words) == 1:\n  \
    \      return words\n    \n    words = [word for word in words if word != '']\n\
    \    \n    if len(words) == 1:\n        return words\n    \n    words = [word\
    \ for word in words if word != '']\n    \n    if len(words) == 1:\n        return\
    \ words\n    \n    words = [word for word in words if word != '']\n    \n    if\
    \ len(words) == 1:\n        return words\n    \n    words = [word for word in\
    \ words if word != '']\n    \n    if len(words) == 1:\n        return words\n\
    \    \n    words = [word for word in words if word != '']\n    \n    if len(words)\
    \ == 1:\n        return words\n    \n    words = [word for word in words if word\
    \ != '']\n    \n    if len(words) == 1:\n        return words\n    \n    words\
    \ = [word for word in words if word != '']\n    \n    if len(words) == 1:\n  \
    \      return words\n    \n    words = [word for word in words if word != '']\n\
    \    \n    if len(words) == 1:\n        return words\n    \n    words = [word\
    \ for word in words if word != '']\n    \n    if len(words) == 1:\n        return\
    \ words\n    \n    words = [word for word in words if word != '']\n    \n    if\
    \ len(words) == 1:\n        return words\n    \n    words = [word for word in\
    \ words if word != '']\n    \n    if len(words) == 1:\n        return words\n\
    \    \n    words = [word for word in words if word != '']\n    \n    if len(words)\
    \ == 1:\n        return words\n    \n    words = [word for word in words if word\
    \ != '']\n    \n    if len(words) == 1:\n        return words\n    \n    words\
    \ = [word for word in words if word != '']\n    \n    if len(words) == 1:\n  \
    \      return words\n    \n    words = [word for word in words if word != '']\n\
    \    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4hlzyw20.py\", line\
    \ 141, in <module>\n    test_check()\n  File \"/tmp/tmp4hlzyw20.py\", line 139,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp4hlzyw20.py\", line\
    \ 129, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    else:\n        words = [word for word in words if word !=\
    \ '']\n        return words\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi3klyo2q.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpi3klyo2q.py\", line 34,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpi3klyo2q.py\", line\
    \ 25, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != \"\"]\n        words = [word\
    \ for word in words if word.isalpha()]\n        if len(words) == 0:\n        \
    \    return words\n        elif len(words) == 1:\n            return words\n \
    \       else:\n            words = [word for word in words if ord(word[0]) % 2\
    \ == 1]\n            return words\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vury4dj.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp4vury4dj.py\", line 43,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp4vury4dj.py\", line\
    \ 33, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    if len(words) == 1:\n        return words\n    if len(words)\
    \ == 2:\n        return words\n    if len(words) > 2:\n        return words\n\
    \    return len([word for word in words if word.islower()])\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphf5l2su5.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmphf5l2su5.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmphf5l2su5.py\", line\
    \ 29, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != \"\"]\n        words = [word\
    \ for word in words if word.isalpha()]\n        if len(words) == 0:\n        \
    \    return words\n        elif len(words) == 1:\n            return words\n \
    \       else:\n            words = [word for word in words if ord(word[0]) % 2\
    \ != 0]\n            return words\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk86ec_p8.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpk86ec_p8.py\", line 43,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpk86ec_p8.py\", line\
    \ 33, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != '']\n        words = [word\
    \ for word in words if word != '']\n        words = [word for word in words if\
    \ word != '']\n        words = [word for word in words if word != '']\n      \
    \  words = [word for word in words if word != '']\n        words = [word for word\
    \ in words if word != '']\n        words = [word for word in words if word !=\
    \ '']\n        words = [word for word in words if word != '']\n        words =\
    \ [word for word in words if word != '']\n        words = [word for word in words\
    \ if word != '']\n        words = [word for word in words if word != '']\n   \
    \     words = [word for word in words if word != '']\n        words = [word for\
    \ word in words if word != '']\n        words = [word for word in words if word\
    \ != '']\n        words = [word for word in words if word != '']\n        words\
    \ = [word for word in words if word != '']\n        words = [word for word in\
    \ words if word != '']\n        words = [word for word in words if word != '']\n\
    \        words = [word for word in words if word != '']\n        words = [word\
    \ for word in words if word != '']\n        words = [word for word in words if\
    \ word != '']\n        words = [word for word in words if word != '']\n      \
    \  words = [word for word in words if word != '']\n        words = [word for word\
    \ in words if word != '']\n        words = [word for word in words if word !=\
    \ '']\n        words = [word for word in words if word != '']\n        words =\
    \ [word for word in words if word != '']\n        words = [word for word in words\
    \ if word != '']\n        words = [word for word in words if word != '']\n   \
    \     words = [word for word in words if word != '']\n        words = [word for\
    \ word in words if word != '']\n        words = [word for word in words if word\
    \ != '']\n        words = [word for word in words if word != '']\n        words\
    \ = [word for word in words if word != '']\n        words = [word for word in\
    \ words if word != '']\n        words = [word for word in words if word != '']\n\
    \        words = [word for word in words if word != '']\n        words = [word\
    \ for word in words if word != '']\n        words = [word for word in words if\
    \ word != '']\n        words = [word for word in words if word != '']\n      \
    \  words = [word for word in words if word \ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpibsk7dp5.py\", line 62\n    words = [word for word in\
    \ words if word \n            ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = words.split(',')\n        if len(words) == 1:\n            return\
    \ words\n        else:\n            words = [word for word in words if word.islower()]\n\
    \            if len(words) >= 2:\n                return words\n            else:\n\
    \                return len([word for word in words if ord(word[0]) % 2 == 1])\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpum6hok_m.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpum6hok_m.py\", line 43,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpum6hok_m.py\", line\
    \ 33, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpum6hok_m.py\", line 22, in split_words\n    words = words.split(',')\n\
    AttributeError: 'list' object has no attribute 'split'\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split(' ')\n    if len(words) == 1:\n    \
    \    return words\n    elif len(words) == 2:\n        return words\n    else:\n\
    \        words = [word for word in words if word]\n        words = [word for word\
    \ in words if word.isalpha()]\n        if len(words) >= 2:\n            return\
    \ words\n        else:\n            return len([word for word in words if ord(word[0])\
    \ % 2 != 0])\n\ndef check(candidate):\n    assert candidate('Hello world!') ==\
    \ ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_pbes40s.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp_pbes40s.py\", line 40,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp_pbes40s.py\", line\
    \ 31, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != '']\n        words = [word\
    \ for word in words if word != 'and']\n        words = [word for word in words\
    \ if word != 'or']\n        words = [word for word in words if word != 'but']\n\
    \        words = [word for word in words if word != 'the']\n        words = [word\
    \ for word in words if word != 'in']\n        words = [word for word in words\
    \ if word != 'for']\n        words = [word for word in words if word != 'with']\n\
    \        words = [word for word in words if word != 'to']\n        words = [word\
    \ for word in words if word != 'as']\n        words = [word for word in words\
    \ if word != 'in']\n        words = [word for word in words if word != 'for']\n\
    \        words = [word for word in words if word != 'with']\n        words = [word\
    \ for word in words if word != 'to']\n        words = [word for word in words\
    \ if word != 'as']\n        words = [word for word in words if word != 'in']\n\
    \        words = [word for word in words if word != 'for']\n        words = [word\
    \ for word in words if word != 'with']\n        words = [word for word in words\
    \ if word != 'to']\n        words = [word for word in words if word != 'as']\n\
    \        words = [word for word in words if word != 'in']\n        words = [word\
    \ for word in words if word != 'for']\n        words = [word for word in words\
    \ if word != 'with']\n        words = [word for word in words if word != 'to']\n\
    \        words = [word for word in words if word != 'as']\n        words = [word\
    \ for word in words if word != 'in']\n        words = [word for word in words\
    \ if word != 'for']\n        words = [word for word in words if word != 'with']\n\
    \        words = [word for word in words if word != 'to']\n        words = [word\
    \ for word in words if word != 'as']\n        words = [word for word in words\
    \ if word != 'in']\n        words = [word for word in words if word != 'for']\n\
    \        words = [word for word in words if word != 'with']\n        words = [word\
    \ for word in words if word != 'to']\n        words = [word for word in words\
    \ if word != 'as']\n        words = [word for word in words if word != 'in']\n\
    \        words = [word for word in words if word != 'for']\n        words = [word\
    \ for word in words if word \ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpb3ru8p_y.py\", line 59\n    words = [word for word in\
    \ words if word \n            ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 30, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw76dmr_l.py\"\
    , line 21, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n       \
    \ return words\n    elif len(words) == 1:\n        return words\n    else:\n \
    \       words = [word for word in words if word != '']\n        return words\n\
    \ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6jfze7x.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpy6jfze7x.py\", line 36,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpy6jfze7x.py\", line\
    \ 27, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659749233
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
    \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
    \    3\n    \"\"\"\n    return txt.split()\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 31, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 29, in test_check\n    check(split_words)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabj2dlsm.py\"\
    , line 20, in check\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
