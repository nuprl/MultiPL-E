language: py
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if smallest_value is None:\n\
    \        return []\n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748623
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    \n    for i in range(len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            even_values.append(arr[i])\n       \
    \     if smallest_value is None or arr[i] < smallest_value:\n                smallest_value\
    \ = arr[i]\n                smallest_index = i\n    \n    if smallest_value is\
    \ None:\n        return []\n    \n    return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748623
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    \n    for index, value\
    \ in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \            if smallest_value is None or value < smallest_value:\n          \
    \      smallest_value = value\n                smallest_index = index\n    \n\
    \    if smallest_value is None:\n        return []\n    else:\n        return\
    \ [smallest_value, smallest_index]\n</cell>\n<cell>\ndef check(candidate):\n \
    \   assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4zyil8eb.py\", line 53\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if smallest_value is None:\n\
    \        return []\n    else:\n        return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if even_values:\n     \
    \   return even_values.index(smallest_value), smallest_index\n    else:\n    \
    \    return [], None\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydi4ry3b.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpydi4ry3b.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpydi4ry3b.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2)[0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppn3f1vf7.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmppn3f1vf7.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppn3f1vf7.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if even_values:\n     \
    \   return even_values.index(smallest_value), smallest_index\n    else:\n    \
    \    return [], None\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydi4ry3b.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpydi4ry3b.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpydi4ry3b.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2 == 0, reverse=True)[0]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvfxykj5n.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpvfxykj5n.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpvfxykj5n.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2, reverse=True)\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbf5k62ua.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpbf5k62ua.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpbf5k62ua.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2 == 0, reverse=True)\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkqugk_8w.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpkqugk_8w.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkqugk_8w.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2 == 0, reverse=True)\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkqugk_8w.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpkqugk_8w.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkqugk_8w.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_values = []\n    smallest_value_index = []\n    \n    for index, value\
    \ in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \            smallest_values.append(value)\n            smallest_value_index.append(index)\n\
    \    \n    if len(even_values) == 0:\n        return []\n    elif len(even_values)\
    \ == 1:\n        return even_values[0]\n    else:\n        smallest_values.sort()\n\
    \        smallest_value_index.sort()\n        \n        return smallest_values[smallest_value_index[0]]\n\
    \    \n    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxtjy04o.py\", line\
    \ 72, in <module>\n    test_check()\n  File \"/tmp/tmpyxtjy04o.py\", line 70,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpyxtjy04o.py\", line 60, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2 == 0)[0]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph84zrr_2.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmph84zrr_2.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmph84zrr_2.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = 0\n    smallest_index = 0\n    \n    for i in range(len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            even_values.append(arr[i])\n       \
    \     if arr[i] < smallest_value:\n                smallest_value = arr[i]\n \
    \               smallest_index = i\n    \n    if len(even_values) == 0:\n    \
    \    return []\n    \n    if smallest_index == 0:\n        return even_values\n\
    \    else:\n        return even_values[smallest_index]\n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpatyao678.py\", line\
    \ 70, in <module>\n    test_check()\n  File \"/tmp/tmpatyao678.py\", line 68,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpatyao678.py\", line 58, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2 == 0)[0]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph84zrr_2.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmph84zrr_2.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmph84zrr_2.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_values = []\n    smallest_value_index = []\n    for index, value in\
    \ enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \            smallest_values.append(value)\n            smallest_value_index.append(index)\n\
    \    if len(even_values) == 0:\n        return []\n    else:\n        smallest_values.sort()\n\
    \        smallest_value_index.sort()\n        return smallest_values[smallest_value_index[0]]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx8wb8bjt.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpx8wb8bjt.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpx8wb8bjt.py\", line 54, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if smallest_value is None:\n\
    \        return []\n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2)[0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppn3f1vf7.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmppn3f1vf7.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppn3f1vf7.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7t7hua24.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmp7t7hua24.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp7t7hua24.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return []\n\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqoy66_9e.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpqoy66_9e.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpqoy66_9e.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if even_values:\n     \
    \   return even_values.index(smallest_value), smallest_index\n    else:\n    \
    \    return [], None\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydi4ry3b.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpydi4ry3b.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpydi4ry3b.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2, reverse=True)[0]\n\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7is34etz.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp7is34etz.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp7is34etz.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2 == 0)[0]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph84zrr_2.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmph84zrr_2.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmph84zrr_2.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2 == 0, reverse=True)\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkqugk_8w.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpkqugk_8w.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkqugk_8w.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr)\n\
    \    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbju4z4bn.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpbju4z4bn.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpbju4z4bn.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    \n    for index, value\
    \ in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \            if smallest_value is None or value < smallest_value:\n          \
    \      smallest_value = value\n                smallest_index = index\n    \n\
    \    if smallest_value is None:\n        return []\n    \n    return [smallest_value,\
    \ smallest_index]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    \n    for index, value\
    \ in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \            if smallest_value is None or value < smallest_value:\n          \
    \      smallest_value = value\n                smallest_index = index\n    \n\
    \    if even_values:\n        return even_values.index(smallest_value), smallest_index\n\
    \    else:\n        return [], None\n    \ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn4zd37z1.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpn4zd37z1.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpn4zd37z1.py\", line 55, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = 0\n    smallest_index = 0\n    \n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if value < smallest_value:\n                smallest_value = value\n     \
    \           smallest_index = index\n        else:\n            if value < smallest_value:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \    \n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return smallest_index, smallest_index\n \
    \   \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiwdk42pb.py\", line\
    \ 71, in <module>\n    test_check()\n  File \"/tmp/tmpiwdk42pb.py\", line 69,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpiwdk42pb.py\", line 59, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\n  File \"/tmp/tmpiwdk42pb.py\"\
    , line 54, in pluck\n    return even_values.index(smallest_value), smallest_index\n\
    ValueError: 0 is not in list\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if even_values:\n     \
    \   return even_values.index(smallest_value), smallest_index\n    else:\n    \
    \    return [], None\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydi4ry3b.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpydi4ry3b.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpydi4ry3b.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2)[0]\n    \n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp8ldqhljp.py\", line 41\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return []\n\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqoy66_9e.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpqoy66_9e.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpqoy66_9e.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2)[0]\n\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_jzvv91.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpq_jzvv91.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq_jzvv91.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if even_values:\n     \
    \   return even_values.index(smallest_value), smallest_index\n    else:\n    \
    \    return [], None\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydi4ry3b.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpydi4ry3b.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpydi4ry3b.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2 == 0)[0]\n    \ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpakrx6pdn.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpakrx6pdn.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpakrx6pdn.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return []\n\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqoy66_9e.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpqoy66_9e.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpqoy66_9e.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2 == 0)[0]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph84zrr_2.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmph84zrr_2.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmph84zrr_2.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return []\n\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqoy66_9e.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpqoy66_9e.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpqoy66_9e.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return []\n\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqoy66_9e.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpqoy66_9e.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpqoy66_9e.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None:\n                smallest_value = value\n     \
    \           smallest_index = index\n            elif value < smallest_value:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \    if even_values:\n        smallest_value = min(even_values)\n        smallest_index\
    \ = even_values.index(smallest_value)\n    return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0f4t4erv.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmp0f4t4erv.py\", line 66,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0f4t4erv.py\", line 57, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    \n    for index, value\
    \ in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \            if smallest_value is None or value < smallest_value:\n          \
    \      smallest_value = value\n                smallest_index = index\n    \n\
    \    if even_values:\n        return even_values.index(smallest_value), smallest_index\n\
    \    else:\n        return [], None\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmply6r9s04.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmply6r9s04.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmply6r9s04.py\", line 55, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    return even_values, smallest_index\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz5httrd7.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpz5httrd7.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpz5httrd7.py\", line 50, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_values = []\n    smallest_value_index = []\n    \n    for index, value\
    \ in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \            smallest_values.append(value)\n            smallest_value_index.append(index)\n\
    \    \n    if len(even_values) == 0:\n        return smallest_values\n    \n \
    \   smallest_values.sort()\n    smallest_value_index.sort()\n    \n    smallest_value_index\
    \ = [smallest_value_index[i] for i in smallest_value_index]\n    \n    smallest_value_index.sort()\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index.sort()\n    \n    smallest_value_index = [smallest_value_index[i]\
    \ for i in smallest_value_index]\n    \n    smallest_value_index.sort()\n    \n\
    \    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index.sort()\n    \n    smallest_value_index = [smallest_value_index[i]\
    \ for i in smallest_value_index]\n    \n    smallest_value_index.sort()\n    \n\
    \    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index.sort()\n    \n    smallest_value_index = [smallest_value_index[i]\
    \ for i in smallest_value_index]\n    \n    smallest_value_index.sort()\n    \n\
    \    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index.sort()\n    \n    smallest_value_index = [smallest_value_index[i]\
    \ for i in smallest_value_index]\n    \n    smallest_value_index.sort()\n    \n\
    \    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index.sort()\n    \n    smallest_value_index = [smallest_value_index[i]\
    \ for i in smallest_value_index]\n    \n    smallest_value_index.sort()\n    \n\
    \    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index.sort()\n    \n    smallest_value_index = [smallest_value_index[i]\
    \ for i in smallest_value_index]\n    \n    smallest_value_index.sort()\n    \n\
    \    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index.sort()\n    \n    smallest_value_index = [smallest_value_index[i]\
    \ for i in smallest_value_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl_ufl_y8.py\", line\
    \ 125, in <module>\n    test_check()\n  File \"/tmp/tmpl_ufl_y8.py\", line 123,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpl_ufl_y8.py\", line 113, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2 == 0)[0]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph84zrr_2.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmph84zrr_2.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmph84zrr_2.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if even_values:\n     \
    \   return even_values.index(smallest_value), smallest_index\n    else:\n    \
    \    return [], None\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydi4ry3b.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpydi4ry3b.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpydi4ry3b.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2 == 0)[0]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph84zrr_2.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmph84zrr_2.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmph84zrr_2.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if even_values:\n     \
    \   return even_values.index(smallest_value), smallest_index\n    else:\n    \
    \    return [], None\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydi4ry3b.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpydi4ry3b.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpydi4ry3b.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = 0\n    smallest_index = 0\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if value < smallest_value:\n                smallest_value = value\n     \
    \           smallest_index = index\n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return [], 0\n\ndef check(candidate):\n \
    \   assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb8vhf6gn.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpb8vhf6gn.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpb8vhf6gn.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\n  File \"/tmp/tmpb8vhf6gn.py\"\
    , line 48, in pluck\n    return even_values.index(smallest_value), smallest_index\n\
    ValueError: 0 is not in list\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2 == 0)[0]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph84zrr_2.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmph84zrr_2.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmph84zrr_2.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if smallest_value is None:\n\
    \        return []\n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: x % 2)[0]\n\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_jzvv91.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpq_jzvv91.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq_jzvv91.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    \n    for index, value\
    \ in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \            if smallest_value is None or value < smallest_value:\n          \
    \      smallest_value = value\n                smallest_index = index\n    \n\
    \    if smallest_value is None:\n        return []\n    \n    return [smallest_value,\
    \ smallest_index]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748623
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    \n    for index, value\
    \ in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \            if smallest_value is None or value < smallest_value:\n          \
    \      smallest_value = value\n                smallest_index = index\n    \n\
    \    if smallest_value is None:\n        return []\n    else:\n        return\
    \ [smallest_value, smallest_index]\n    \ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7t7hua24.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmp7t7hua24.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp7t7hua24.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return []\n\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqoy66_9e.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpqoy66_9e.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpqoy66_9e.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if smallest_value is None:\n\
    \        return []\n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748623
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    \n    for index, value\
    \ in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \            if smallest_value is None or value < smallest_value:\n          \
    \      smallest_value = value\n                smallest_index = index\n    \n\
    \    if smallest_value is None:\n        return []\n    else:\n        return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if smallest_value is None:\n\
    \        return []\n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    \n    return []\n\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqoy66_9e.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpqoy66_9e.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpqoy66_9e.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if smallest_value is None:\n\
    \        return []\n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if even_values:\n     \
    \   return even_values.index(smallest_value), smallest_index\n    return []\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkga_4g6j.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpkga_4g6j.py\", line 62,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkga_4g6j.py\", line 52, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_values = []\n    smallest_value_index = []\n    for index, value in\
    \ enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \            smallest_values.append(value)\n            smallest_value_index.append(index)\n\
    \    if len(even_values) == 0:\n        return []\n    elif len(even_values) ==\
    \ 1:\n        return even_values[0]\n    else:\n        smallest_values.sort()\n\
    \        smallest_value_index.sort()\n        return smallest_values[smallest_value_index[0]]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpngd10e6g.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmpngd10e6g.py\", line 66,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpngd10e6g.py\", line 56, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # Your code here\n    even_values = []\n  \
    \  smallest_value = None\n    smallest_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    if even_values:\n     \
    \   return even_values.index(smallest_value), smallest_index\n    else:\n    \
    \    return [], None\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydi4ry3b.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpydi4ry3b.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpydi4ry3b.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi60kra.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpaoi60kra.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaoi60kra.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748623
