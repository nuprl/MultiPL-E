name: HumanEval_142_sum_squares
language: py
prompt: "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    \"\
  \"\"\"\n    This function will take a list of integers. For all entries in the list,\
  \ the function shall square the integer entry if its index is a \n    multiple of\
  \ 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple\
  \ of 3. The function will not \n    change the entries in the list whose indexes\
  \ are not a multiple of 3 or 4. The function shall then return the sum of all entries.\
  \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
  \ lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([1,\
  \ 4, 9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1, 1, 1, 1,\
  \ 1, 1, 1, 1, 1]) == 9\n    assert candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1])\
  \ == -3\n    assert candidate([0]) == 0\n    assert candidate([-1, -5, 2, -1, -5])\
  \ == -126\n    assert candidate([-56, -99, 1, 0, -2]) == 3030\n    assert candidate([-1,\
  \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26,\
  \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3,\
  \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
  \ -1448\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n"
completions: ["    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value\n        elif index % 4 == 0:\n            sum += value * value\n \
    \       else:\n            sum += value * value * value\n    \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0 and index % 4 == 0:\n        \
    \    sum += value\n        elif index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            pass\n    \n    return sum\n", "    \n    sum = 0\n  \
    \  \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n   \
    \         sum += value * value\n        elif index % 4 == 0:\n            sum\
    \ += value * value * value\n        else:\n            sum += value\n    \n  \
    \  return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value\n        else:\n            sum += value * value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n \
    \       elif index % 4 == 0:\n            sum += value * value\n        else:\n\
    \            sum += value * value * value\n            \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n</cell>\n<cell>\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\
    </cell>\n<cell>\nsum_squares(lst)\n</cell>\n<cell>\nlst = [-1, -5, 2, -1, -5]\n\
    </cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that will take a list of integers and a number k. The function will remove all\
    \ entries in the list that do not satisfy the condition \n    k % n != 0. The\
    \ function shall then return the new list.\n\nExamples:\n>>> lst = [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]\n>>> k = 3\n>>> lst\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>>\
    \ new_lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>> new_lst\n[1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]\n>>> lst = [-1, -5, 2, -1, -5]\n>>> k = 3\n>>> lst\n[-1, -5, 2, -1,\
    \ -5]\n>>> new_lst = [-1, -5, 2, -1, -5]\n>>> new_lst\n[-1, -5, 2, -1, -5]\n>>>\
    \ lst = [-1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5]\n>>> k = 3\n>>> lst\n[-1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5]\n>>> new_lst = [-1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5]\n>>> new_lst\n[-1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5]\n>>> lst\
    \ = [-1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, ", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]\n \
    \       elif i % 4 == 0:\n            sum += lst[i]\n        else:\n         \
    \   sum += lst[i] * lst[i]\n            \n    return sum\n", "    \n    sum =\
    \ 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n\
    \            sum += value**2\n        elif index % 4 == 0:\n            sum +=\
    \ value**3\n        else:\n            sum += value\n    \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n    \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n \
    \       elif index % 4 == 0:\n            sum += value\n        else:\n      \
    \      sum += value * value\n    \n    return sum\n", "    \n    sum = 0\n   \
    \ \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n    \
    \        sum += value**2\n        elif index % 4 == 0:\n            sum += value**3\n\
    \        else:\n            sum += value\n            \n    return sum\n</cell>\n\
    <cell>", "    \n    sum = 0\n    \n    for index in range(len(lst)):\n       \
    \ if index%3 == 0:\n            sum += lst[index]\n        elif index%4 == 0:\n\
    \            sum += lst[index]\n        else:\n            sum += lst[index]*lst[index]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0 and index % 4 == 0:\n        \
    \    sum += value\n        elif index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            sum += value\n            \n    return sum\n    \nlst\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_squares(lst))\n</cell>\n<text>\n\
    Problem 3\nWrite a function that will take a list of integers and a number as\
    \ input. The function will return the number of times the number appears in the\
    \ list. \nThe function shall not change the list passed as input. \nThe function\
    \ shall not use any for loops. \nThe function shall not use any if statements.\
    \ \nThe function shall not use any while loops. \nThe function shall not use any\
    \ return statements. \nThe function shall not use any lambda expressions. \nThe\
    \ function shall not use any try statements. \nThe function shall not use any\
    \ exception statements. \nThe function shall not use any try except statements.\
    \ \nThe function shall not use any while loops. \nThe function shall not use any\
    \ if statements. \nThe function shall not use any lambda expressions. \nThe function\
    \ shall not use any try statements. \nThe function shall not use any exception\
    \ statements. \nThe function shall not use any try except statements. \nThe function\
    \ shall not use any while loops. \nThe function shall not use any if statements.\
    \ \nThe function shall not use any lambda expressions. \nThe function shall not\
    \ use any try statements. \nThe function shall not use any exception statements.\
    \ \nThe function shall not use any try except statements. \nThe function shall\
    \ not use any while loops. \nThe function shall not use any if statements. \n\
    The function shall not use any lambda expressions. \nThe function shall not use\
    \ any try statements. \nThe function shall not use any exception statements. \n\
    The function shall not use any try except statements. \nThe function shall not\
    \ use any while loops. \nThe function shall not use any if statements. \nThe function\
    \ shall not use any lambda expressions. \nThe function shall not use any try statements.\
    \ \nThe function shall not use any exception statements. \nThe function shall\
    \ not use any try except statements. \nThe function shall not use any while loops.\
    \ \nThe function shall not use any if statements. \nThe function shall not use\
    \ any lambda expressions. \nThe function shall not use any try statements. \n\
    The function shall not use any exception statements. \nThe function shall not\
    \ use any try except statements. ", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n \
    \       elif index % 4 == 0:\n            sum += value\n        else:\n      \
    \      sum += value * value\n    \n    return sum\n", "    \n    sum = 0\n   \
    \ \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n    \
    \        sum += value\n        elif index % 4 == 0:\n            sum += value\
    \ * value\n        else:\n            sum += value * value * value\n    \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value**2\n        elif index % 4 == 0:\n            sum += value**3\n   \
    \     else:\n            sum += value\n            \n    return sum\n", "    \n\
    \    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0 and index % 4 == 0:\n        \
    \    sum += value\n        elif index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            sum += value\n    \n    return sum\n</cell>\n<cell>\n\
    lst = [1, 2, 3, 4]\nsum_squares(lst)\n</cell>\n<cell>\nlst = [-1, -5, 2, -1, -5]\n\
    sum_squares(lst)\n</cell>\n<cell>\nlst = [1, 2, 3, 4, 5]\nsum_squares(lst)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes a list of integers and returns\
    \ a list of all unique permutations of the integers in the list. \nThe function\
    \ shall not change the order of the integers in the list.\n\nExamples:\n>>> lst\
    \ = [1, 2, 3, 4]\n>>> unique_permutations(lst)\n[(1, 2, 3, 4), (1, 3, 2, 4), (1,\
    \ 4, 2, 3), (1, 4, 3, 2), (1, 3, 2, 4), (1, 2, 3, 4)]\n>>> lst = [1, 2, 3, 4,\
    \ 5]\n>>> unique_permutations(lst)\n[(1, 2, 3, 4, 5), (1, 2, 4, 5, 3), (1, 2,\
    \ 3, 4, 5), (1, 3, 2, 4, 5, 4), (1, 3, 2, 4, 5), (1, 3, 4, 2, 5), (1, 3, 4, 2,\
    \ 5), (1, 4, 2, 3, 4, 5), (1, 4, 2, 3, 4, 5), (1, 4, 2, 5, 3, 4), (1,4, 2, 5,\
    \ 3, 4), (1, 4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5,\
    \ 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5,\
    \ 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5,\
    \ 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5,\
    \ 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5,\
    \ 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5,\
    \ 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5,\
    \ 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5,\
    \ 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5,\
    \ 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5, 3, 4), (1,4, 2, 5,\
    \ 3, 4), (1,4, ", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n  \
    \      if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n \
    \           sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \    \n    return sum\n</cell>\n<cell>\nlst = [1, 2, 3, 4, 5]\nsum_squares(lst)\n\
    </cell>\n<cell>\nlst = [-1, -5, 2, -1, -5]\nsum_squares(lst)\n</cell>\n<text>\n\
    Problem 3\nWrite a function that will take a list of integers and a number as\
    \ input. The function shall then return a list of integers whose entries are all\
    \ multiples of that number. \nThe function shall not change the original list.\n\
    \nExamples:\n>>> lst = [1, 2, 3, 4, 5]\n>>> lst\n[1, 2, 3, 4, 5]\n>>> lst = sum_squares(lst)\n\
    >>> lst\n[1, 8, 27, 64, 125]\n>>> lst\n[1, 2, 3, 4, 5]\n>>> lst = [-1, -5, 2,\
    \ -1, -5]\n>>> lst\n[-1, -5, 2, -1, -5]\n>>> lst = sum_squares(lst)\n>>> lst\n\
    [1, 8, 27, 64, 125]\n>>> lst\n[-1, -5, 2, -1, -5]\n</text>\n<cell>", "    \n \
    \   sum = 0\n    \n    for index, value in enumerate(lst):\n        if index %\
    \ 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n  \
    \          sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n</cell>\n<cell>\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\
    </cell>\n<cell>\nsum_squares(lst)\n</cell>\n<cell>\nlst = [-1, -5, 2, -1, -5]\n\
    </cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that takes a list as an argument and returns a list with all the even numbers\
    \ in that list. \nWrite a function that takes a list as an argument and returns\
    \ a list with all the odd numbers in that list. \nWrite a function that takes\
    \ a list as an argument and returns a list with all the numbers that are divisible\
    \ by 3 in that list. \nWrite a function that takes a list as an argument and returns\
    \ a list with all the numbers that are divisible by 5 in that list. \nWrite a\
    \ function that takes a list as an argument and returns a list with all the numbers\
    \ that are divisible by 7 in that list. \nWrite a function that takes a list as\
    \ an argument and returns a list with all the numbers that are divisible by 11\
    \ in that list. \nWrite a function that takes a list as an argument and returns\
    \ a list with all the numbers that are divisible by 15 in that list. \nWrite a\
    \ function that takes a list as an argument and returns a list with all the numbers\
    \ that are divisible by 17 in that list. \nWrite a function that takes a list\
    \ as an argument and returns a list with all the numbers that are divisible by\
    \ 19 in that list. \nWrite a function that takes a list as an argument and returns\
    \ a list with all the numbers that are divisible by 23 in that list. \nWrite a\
    \ function that takes a list as an argument and returns a list with all the numbers\
    \ that are divisible by 29 in that list. \nWrite a function that takes a list\
    \ as an argument and returns a list with all the numbers that are divisible by\
    \ 31 in that list. \nWrite a function that takes a list as an argument and returns\
    \ a list with all the numbers that are divisible by 37 in that list. \nWrite a\
    \ function that takes a list as an argument and returns a list with all the numbers\
    \ that are divisible by 41 in that list. \nWrite a function that takes a list\
    \ as an argument and returns a list with all the numbers that are divisible by\
    \ 43 in that list. \nWrite a function that takes a list as an argument and returns\
    \ a list with all the numbers that are divisible by 47 in that list. \nWrite a\
    \ function that takes a list as an argument and returns a list with all the numbers\
    \ that are divisible by 53 in that list. \nWrite a function that takes a list ",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value\n        elif index % 4 == 0:\n        \
    \    sum += value\n        else:\n            sum += value * value\n         \
    \   \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for i in lst:\n      \
    \  if i % 3 == 0:\n            sum += i ** 2\n        elif i % 4 == 0:\n     \
    \       sum += i ** 3\n        else:\n            sum += i\n    \n    return sum\n",
  "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value\n        elif index % 4 == 0:\n        \
    \    sum += value * value\n        else:\n            sum += value * value * value\n\
    \    return sum\n</cell>\n<cell>\nlst = [1, 2, 3, 4, 5]\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<cell>\nlst = [-1, -5, 2, -1, -5]\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns a list of all even numbers in the list. \nWrite a function that takes\
    \ a list of integers and returns a list of all odd numbers in the list. \nWrite\
    \ a function that takes a list of integers and returns a list of all numbers that\
    \ are divisible by 3 in the list. \nWrite a function that takes a list of integers\
    \ and returns a list of all numbers that are divisible by 5 in the list. \nWrite\
    \ a function that takes a list of integers and returns a list of all numbers that\
    \ are divisible by 7 in the list. \nWrite a function that takes a list of integers\
    \ and returns a list of all numbers that are divisible by 11 in the list. \nWrite\
    \ a function that takes a list of integers and returns a list of all numbers that\
    \ are divisible by 15 in the list. \nWrite a function that takes a list of integers\
    \ and returns a list of all numbers that are divisible by 17 in the list. \nWrite\
    \ a function that takes a list of integers and returns a list of all numbers that\
    \ are divisible by 19 in the list. \nWrite a function that takes a list of integers\
    \ and returns a list of all numbers that are divisible by 21 in the list. \nWrite\
    \ a function that takes a list of integers and returns a list of all numbers that\
    \ are divisible by 23 in the list. \nWrite a function that takes a list of integers\
    \ and returns a list of all numbers that are divisible by 25 in the list. \nWrite\
    \ a function that takes a list of integers and returns a list of all numbers that\
    \ are divisible by 27 in the list. \nWrite a function that takes a list of integers\
    \ and returns a list of all numbers that are divisible by 29 in the list. \nWrite\
    \ a function that takes a list of integers and returns a list of all numbers that\
    \ are divisible by 31 in the list. \nWrite a function that takes a list of integers\
    \ and returns a list of all numbers that are divisible by 33 in the list. \nWrite\
    \ a function that takes a list of integers and returns a list of all numbers that\
    \ are divisible by 35 in the list. \nWrite a function that takes a list of integers\
    \ and returns a list of all numbers that are divisible by 37 in the list. \nWrite\
    \ a function that takes a list of integers and returns a list of all numbers that\
    \ are divisible by 39 in the list. \nWrite a function that takes a list of integers\
    \ and returns a list of all numbers that are divisible by 41 in the list. ", " \
    \   \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0 and index % 4 == 0:\n            sum += value\n        elif index %\
    \ 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n  \
    \          sum += value * value * value\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            sum += value\n            \n    return sum\n", "    \n\
    \    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index in range(len(lst)):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += lst[index]\n\
    \        elif index % 3 == 0:\n            sum += lst[index]\n        elif index\
    \ % 4 == 0:\n            sum += lst[index]\n        else:\n            sum +=\
    \ lst[index] * lst[index]\n            \n    return sum\n</cell>\n<cell>\nlst\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n\
    <cell>\nlst = [-1, -5, 2, -1, -5]\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will take a list of integers and a number\
    \ as input. The function shall then return a list of all integers in the list\
    \ that are divisible by the number input. \nThe function shall not change the\
    \ original list. \nThe function shall then return the list with the integers divisible\
    \ by the number input removed.\n\nExamples:\n>>> lst = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]\n>>> number = 5\n>>> divisible_by_number(lst, number)\n[5, 10]\n>>> lst\
    \ = [-1, -5, 2, -1, -5]\n>>> number = 5\n>>> divisible_by_number(lst, number)\n\
    [-1, -5]\n>>> lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>> number = 2\n>>> divisible_by_number(lst,\
    \ number)\n[1, 3, 6, 10]\n>>> lst = [-1, -5, 2, -1, -5]\n>>> number = 2\n>>> divisible_by_number(lst,\
    \ number)\n[-1, -5]\n>>> lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>> number = 10\n\
    >>> divisible_by_number(lst, number)\n[10]\n>>> lst = [-1, -5, 2, -1, -5]\n>>>\
    \ number = 10\n>>> divisible_by_number(lst, number)\n[-1, -5]\n>>> lst = [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]\n>>> number = 2\n>>> divisible_by_number(lst, number)\n\
    [1, 3, 6, 10]\n>>> lst = [-1, -5, 2, -1, -5]\n>>> number = 2\n>>> divisible_by_number(lst,\
    \ number)\n[-1, -5]\n>>> lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>> number = 10\n\
    >>> divisible_by_number(lst, number)\n[10]\n>>> lst = [-1, -5, 2, -1, -5]\n>>>\
    \ number = 10\n>>> divisible_by_number(lst, number)\n[-1, -5]\n>>> lst = [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]\n>>> number = 5\n>>> divisible_by_number(lst, number)\n\
    [5, 10]\n>>> lst = [-1, -5, 2, -1, -5]\n>>> number = 5\n>>> divisible", "    \n\
    \    sum = 0\n    \n    for i in lst:\n        if i % 3 == 0:\n            sum\
    \ += i\n        elif i % 4 == 0:\n            sum += i\n        else:\n      \
    \      sum += i * i\n            \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<cell>\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n\
    <cell>\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,\
    \ 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,\
    \ 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,\
    \ 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,\
    \ 95, 96, 97, 98, 99, 100]\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<cell>\n\
    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99, 100]\n</cell>\n<", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n \
    \       elif index % 4 == 0:\n            sum += value * value\n        else:\n\
    \            sum += value * value * value\n    \n    return sum\n", "    \n  \
    \  sum = 0\n    \n    for i in lst:\n        if i % 3 == 0:\n            sum +=\
    \ i\n        elif i % 4 == 0:\n            sum += i\n        else:\n         \
    \   sum += i * i\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, value in enumerate(lst):\n        if index % 3 == 0:\n       \
    \     sum += value * value\n        elif index % 4 == 0:\n            sum += value\
    \ * value * value\n        else:\n            sum += value\n    \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, value in enumerate(lst):\n        if index % 3 == 0:\n       \
    \     sum += value\n        elif index % 4 == 0:\n            sum += value * value\n\
    \        else:\n            sum += value * value * value\n    \n    return sum\n\
    </cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([])\n</cell>\n\
    <cell>\nsum_squares([-1, -5, 2, -1, -5])\n</cell>\n<text>\nProblem 3\nWrite a\
    \ function that takes a list as an argument and returns a list that contains the\
    \ squares of the entries in the original list. \nThe function shall not change\
    \ the original list.\n\nExamples:\n>>> lst\n[1, 2, 3]\n>>> lst\n[]\n>>> lst\n\
    [-1, -5, 2, -1, -5]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n\
    [4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4,\
    \ 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9,\
    \ 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16,\
    \ 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n\
    >>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>>\
    \ lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n\
    [4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4,\
    \ 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9,\
    \ 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16,\
    \ 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n\
    >>> lst\n[4, 9, 16, 25]\n", "    \n    sum = 0\n    \n    for index, value in\
    \ enumerate(lst):\n        if index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            sum += value\n            \n    return sum\n</cell>\n\
    <cell>\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<cell>\nlst = [-1, -5, 2, -1, -5]\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a list of integers\
    \ and a number as input. The function shall then return the sum of the integers\
    \ in the list that are divisible by the given number. \nThe function shall not\
    \ change the entries in the list whose indexes are not divisible by the given\
    \ number. \nThe function shall then return the sum of the integers in the list\
    \ that are divisible by the given number. \nThe function shall not change the\
    \ entries in the list whose indexes are not divisible by the given number. \n\
    The function shall then return the sum of the integers in the list that are divisible\
    \ by the given number. \nThe function shall not change the entries in the list\
    \ whose indexes are not divisible by the given number. \nThe function shall then\
    \ return the sum of the integers in the list that are divisible by the given number.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ divisible by the given number. \nThe function shall then return the sum of the\
    \ integers in the list that are divisible by the given number. \nThe function\
    \ shall not change the entries in the list whose indexes are not divisible by\
    \ the given number. \nThe function shall then return the sum of the integers in\
    \ the list that are divisible by the given number. \nThe function shall not change\
    \ the entries in the list whose indexes are not divisible by the given number.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ divisible by the given number. \nThe function shall not change the entries in\
    \ the list whose indexes are not divisible by the given number. \nThe function\
    \ shall then return the sum of the integers in the list that are divisible by\
    \ the given number. \nThe function shall not change the entries in the list whose\
    \ indexes are not divisible by the given number. \nThe function shall then return\
    \ the sum of the integers in the list that are divisible by the given number.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ divisible by the given number. \nThe function shall then return the sum of the\
    \ integers in the list that are divisible by the given number. \nThe function\
    \ shall not change the entries in the list whose indexes are not divisible by\
    \ the given number. \nThe function shall then return the sum of the integers in\
    \ the list that are divisible by the given ", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0 and index % 4 ==\
    \ 0:\n            sum += value\n        elif index % 3 == 0:\n            sum\
    \ += value * value\n        elif index % 4 == 0:\n            sum += value * value\
    \ * value\n        else:\n            sum += value\n    return sum\n", "    \n\
    \    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value\n        elif index % 4 == 0:\n        \
    \    sum += value * value\n        else:\n            sum += value * value * value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n \
    \       elif index % 4 == 0:\n            sum += value\n        else:\n      \
    \      sum += value * value\n    \n    return sum\n", "    \n    sum = 0\n   \
    \ \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n    \
    \        sum += value * value\n        elif index % 4 == 0:\n            sum +=\
    \ value * value * value\n        else:\n            sum += value\n    \n    return\
    \ sum\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
