name: HumanEval_49_modp
language: py
prompt: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
  \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n   \
  \ >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
  \    1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
  \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n\
  \    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert\
  \ candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
completions: ["    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if n == 2:\n        return p % p\n    if n == 3:\n        return ((p * p\
    \ * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) %\
    \ p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    return\
    \ (((p * p * p * p * p * p) % p) % p) % p\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if p == 2:\n        return n\n    if\
    \ p % 4 == 0:\n        return n - (n % p)\n    if p % 2 == 0:\n        return\
    \ n - 1\n    return n\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n\
    \        return p - (p % p)\n    return p - (((p * p) % p) // 2)\n\n", "    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n % 2 == 1:\n        return p % p\n    return p\
    \ % p * p % p\n\n", "    if n == 0:\n        return 0\n    if n < 0:\n       \
    \ return modp(abs(n), p)\n    if n == 1:\n        return p\n    if n == 2:\n \
    \       return p - 1\n    if n == 3:\n        return p - (p - 1)\n    if n ==\
    \ 4:\n        return p - (p - 2)\n    if n == 5:\n        return p - (p - 3)\n\
    \    if n == 6:\n        return p - (p - 4)\n    if n == 7:\n        return p\
    \ - (p - 5)\n    if n == 8:\n        return p - (p - 6)\n    if n == 9:\n    \
    \    return p - (p - 7)\n    if n == 10:\n        return p - (p - 8)\n    if n\
    \ == 11:\n        return p - (p - 9)\n    if n == 12:\n        return p - (p -\
    \ 10)\n    if n == 13:\n        return p - (p - 11)\n    if n == 14:\n       \
    \ return p - (p - 12)\n    if n == 15:\n        return p - (p - 13)\n    if n\
    \ == 16:\n        return p - (p - 14)\n    if n == 17:\n        return p - (p\
    \ - 15)\n    if n == 18:\n        return p - (p - 16)\n    if n == 19:\n     \
    \   return p - (p - 17)\n    if n == 20:\n        return p - (p - 18)\n    if\
    \ n == 21:\n        return p - (p - 19)\n    if n == 22:\n        return p - (p\
    \ - 20)\n    if n == 23:\n        return p - (p - 21)\n    if n == 24:\n     \
    \   return p - (p - 22)\n    if n == 25:\n        return p - (p - 23)\n    if\
    \ n == 26:\n        return p - (p - 24)\n    if n == 27:\n        return p - (p\
    \ - 25)\n    if n == 28:\n        return p - (p - 26)\n    if n == 29:\n     \
    \   return p - (p - 27)\n    if n == 31:\n        return p - (p - 28)\n    if\
    \ n == 32:\n        return p - (p - 29)\n    if n == 33:\n        return p - (p\
    \ - 30)\n    if n == 34:\n        return p - (p - 31)\n    if n == 35:\n     \
    \   return p - (p - 32)\n    if n == 36:\n        return p - (p - 33)\n    if\
    \ n == 37:\n        return p - (p - 34)\n    if n == 38:\n        return p - (p\
    \ - 35)\n    if n == 39:\n        return p - (p - 36)\n    if n == 41:\n     \
    \   return p - (p - 37)\n    if n == 42:\n        return p - (p - 38)\n    if\
    \ n == 43:\n        return p - (p - 39)\n    if n == 44:\n        return p - (p\
    \ - 40)\n    if n == 45:\n        return p - (p - 41)\n    if n == 46:\n     \
    \   return p - (p - 42)\n    if n == 47:\n        return p - (p - 43)\n    if\
    \ n == 48:", "    return ((n << 1) + 1) % (p + 1)\n\n", "    if p == 2:\n    \
    \    return n\n    if n < 0:\n        return modp(n - 1, p) * p\n    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p + p\n    if n % 2 == 0:\n        return modp(n // 2, p) + p\n    return modp(n\
    \ // 2, p) * p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n     \
    \   return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n     \
    \   return p % p\n    return p % p\n\n", "    if n == 0:\n        return 0\n \
    \   if n == 1:\n        return p\n    if p == 2:\n        return n\n    if p %\
    \ 4 == 0:\n        return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return\
    \ modp(n // 8, p) + 3\n    if p % 16 == 0:\n        return modp(n // 16, p) +\
    \ 7\n    if p % 32 == 0:\n        return modp(n // 32, p) + 11\n    if p % 64\
    \ == 0:\n        return modp(n // 64, p) + 13\n    return modp(n // 64, p) + 17\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if n == 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p)\
    \ % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n \
    \   if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n\
    \        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12\
    \ or n == 0:\n        return p\n    if n == 13 or n == 14:\n        return ((p\
    \ * p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n == 16:\n    \
    \    return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17\
    \ or n == 18:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 19 or n == 20:\n        return (((p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return (((p * p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 25 or n == 26:\n        return (((p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 27 or n == 28:\n        return (((p * p * p * p * ",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p %\
    \ 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 == 0:\n        return\
    \ modp(n // 3, p) * 3\n    if p % 5 == 0:\n        return modp(n // 5, p) * 5\n\
    \    return modp(n // 2, p) * 2 + modp(n // 3, p) * 3 + modp(n // 5, p) * 5\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        return p - (p % p)\n \
    \   return p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p == n:\n        return p\n    if p ==\
    \ n:\n        return p\n    if n % 2 == 1:\n        return modp(n // 2, p)\n \
    \   if n % 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 3 == 0:\n \
    \       return modp(n // 3, p) * p * p\n    return modp(n // 3, p) * p * p * p\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if p == 2:\n        return n\n    if p % 4 == 0:\n        return modp(n // 4,\
    \ p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if p % 16\
    \ == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n        return\
    \ modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n // 64, p)\
    \ + 32\n    return modp(n // 64, p) + 64\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n      \
    \  return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return\
    \ p\n    if n == 13 or n == 14:\n        return ((p * p * p * p * p * p * p *\
    \ p) % p) % p\n    if n == 15 or n == 16:\n        return (((p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 21 or n == 22:\n        return (((p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 23 and p % 4 == 0:\n        return (((p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 24 and p % 8 == 0:\n \
    \       return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 25 and p % 16 == 0:\n        return (((p * p * p * p", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n ==\
    \ 0:\n        return p\n    if n == 13 or n == 14:\n        return ((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17\
    \ or n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n   \
    \     return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 23 or n == 24:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 25 or n == 26:\n        return (((p\
    \ * p * p * p * p * p * p * p", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n\
    \        return modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n //\
    \ 3, p)\n    if n % 3 == 0 or n % 5 == 0:\n        return modp(n // 3, p)\n  \
    \  return modp(n // 5, p)\n\n", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2 ==\
    \ 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    return ((n) % (p)) +\
    \ (((n) % (p)) > 0)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n    \
    \    return modp(n // 2, p)\n    return modp(n - 1, p // 2)\n\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if p == 2:\n   \
    \     return n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    return\
    \ modp((n - 1) // 2, p) + p\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n\
    \        return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n\
    \ // 8, p) + 3\n    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n   \
    \ if p % 32 == 0:\n        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n\
    \        return modp(n // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n",
  "    if p == 2:\n        return n\n    if n < 0:\n        return modp(n - 1, p)\
    \ - 1\n    if n == 0:\n        return 0\n    if n == 1:\n        return p\n  \
    \  if n == 2:\n        return p + 1\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p) + p\n    return modp(n // 2, p) * p + p\n\n", "    if n == 0:\n   \
    \     return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", " \
    \   return ((n) % (p)) + (((n) % (p)) == 0)\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 0:\n        return p - (p % p)\n    return p + (p - 1) * (p -\
    \ 1) % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n        return\
    \ p - (p // 2)\n    return p + (p // 2)\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if p == 2:\n        return n\n    if\
    \ p % 4 == 0:\n        return p - (p % 4)\n    if p % 2 == 0:\n        return\
    \ p - 2\n    k = p - 1\n    while k % 2 == 0:\n        k >>= 1\n    return k\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return\
    \ p % pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n    \
    \    return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n\
    \    return modp(n // 256, p) + 17\n\n", "    return ((n) % (p)) + (((n) % (p))\
    \ == 0)\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n\
    \    return p % pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2 ==\
    \ 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n       \
    \ return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p\
    \ % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    # Fall through.\n    return (((p *\
    \ p * p * p * p * p) % p) % p) % p\n\n", "    if n == 0:\n        return 0\n \
    \   if n == 1:\n        return p\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) * 3\n    if n % 3\
    \ == 0 or n % 5 == 0:\n        return modp(n // 3, p) * 5 % p\n    return modp(n\
    \ // 5, p) * 7 % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n \
    \       return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n \
    \       n -= 1\n    return p % pow(2, n)\n\n", "    return ((n) % (p)) + (((n)\
    \ % (p)) == 0)\n", "    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p == 2:\n        return n\n    if p % 4 == 0:\n    \
    \    return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n //\
    \ 8, p) + 4\n    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if\
    \ p % 32 == 0:\n        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n  \
    \      return modp(n // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p ==\
    \ 2:\n        return n\n    if p % 4 == 0:\n        return p // 4\n    if p %\
    \ 8 == 0:\n        return p // 8\n    if p % 16 == 0:\n        return p // 16\n\
    \    return p % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n  \
    \      return p - (p % p)\n    return p\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 1:\n        return p - (p % p)\n    return p\n\n", "    if n\
    \ == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % p *\
    \ modp(n // 2, p)\n", "    if n == 0:\n        return 0\n    if n == 1:\n    \
    \    return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n    \
    \    return p - (p % p)\n    return p - ((p - 1) * (p - 1) % p)\n\n", "    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2,\
    \ n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if n == 2:\n        return p % p\n    if n == 3:\n        return ((p * p\
    \ * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) %\
    \ p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    return\
    \ (((p * p * p * p * p * p) % p) % p) % p\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n      \
    \  return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return\
    \ p\n    if n == 13:\n        return ((p * p * p * p * p * p * p * p) % p) % p\n\
    \    if n == 14:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 15:\n        return (((p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 16:\n        return (((p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 17:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 18:\n        return (((p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 20:\n      \
    \  return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 21:\n        return (((p * p * p * ", "    if n == 0:\n        return 0\n  \
    \  if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if p == 0:\n\
    \        raise ZeroDivisionError('modp(0, 0) is not defined')\n    if p == n:\n\
    \        return p\n    if p < 0:\n        p += n\n    if p < 0 or p > n:\n   \
    \     raise ValueError(f'modp({n}, {p}) is not defined')\n    if p == 1 or p ==\
    \ 2:\n        return p\n    if p == n:\n        return p\n    if n % p == 0:\n\
    \        return p - 1\n    return p - 1\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n      \
    \  return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n ==\
    \ 8:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 13:\n        return (((p * p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n      \
    \  return (((p * p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17:\n        return (((p * p * p * p * p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 18:\n        return (((p * p * p * p * p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19:", "    if n\
    \ == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n\
    \    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n\
    \        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return\
    \ (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n\
    \        return p\n    if n == 13 or n == 14:\n        return ((p * p * p * p\
    \ * p * p * p * p) % p) % p\n    if n == 15 or n == 16:\n        return (((p *\
    \ p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n \
    \       return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 19 or n == 20:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 21 or n == 22:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 25 or n == 26:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 27 or n == 28:\n        return (((p * p * p * p * p * ", "    if p == 2:\n\
    \        return n\n    if p % 2 == 0:\n        return modp(n // 2, p) + n\n  \
    \  if p % 3 == 0:\n        return modp(n // 3, p) + n // 3\n    if p % 5 == 0:\n\
    \        return modp(n // 5, p) + n // 5\n    return modp(n // 2, p) + modp(n\
    \ // 3, p) + modp(n // 5, p)\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2\
    \ == 1:\n        return p - (p % p)\n    return p\n\n", "    if n == 0:\n    \
    \    return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return modp(n\
    \ // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if\
    \ p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n   \
    \     return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n", "    if n == 0:\n   \
    \     return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    # n >= 6\n    return (((p * p * p *\
    \ p * p * p) % p) % p) % p\n\n", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2 ==\
    \ 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n       \
    \ return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p\
    \ % p\n    if n == 3:\n        return ((p * p + 1) // p) % p\n    if n == 4:\n\
    \        return ((p * p * p + 3 * p + 2) // p) % p\n    if n == 5:\n        return\
    \ ((p * p * p * p + 2 * p * p + 3 * p + 4) // p) % p\n    if n == 6:\n       \
    \ return ((p * p * p * p * p + p * p * p + 3 * p * p + 5 * p + 4) // p) % p\n\
    \    if n == 7:\n        return ((p * p * p * p * p * p + p * p * p * p + p *\
    \ p + 3 * p + 5 * p + 2) // p) % p\n    if n == 8:\n        return ((p * p * p\
    \ * p * p * p * p + p * p * p * p * p + p * p * p + p * p + 3 * p + 5 * p + 1)\
    \ // p) % p\n    if n == 9:\n        return ((p * p * p * p * p * p * p + p *\
    \ p * p * p * p * p + p * p * p * p + p * p + p * p + 3 * p + 5 * p + 0) // p)\
    \ % p\n    if n == 10:\n        return ((p * p * p * p * p * p * p + p * p * p\
    \ * p * p * p * p + p * p * p * p * p + p * p * p + p * p + 3 * p + 5 * p + 1)\
    \ // p) % p\n    if n == 11:\n        return ((p * p * p * p * p * p * p + p *\
    \ p * p * p * p * p * p + p * p * p * p * p * p + p * p * p * p + p * p + p *\
    \ p + 3 * p + 5 * p + 0) // p) % p\n    if n == 12 or n == 0:\n        return\
    \ p\n    if n == 1:\n        return p % p\n    if n == 2:\n        return ((p\
    \ * p + 1) // p) % p\n    if n == 3:\n        return ((p * p * p + 2 * p + 1)\
    \ // p) % p\n    if n == 4:\n        return ((p * p * p * p + 3 * p + 2 * p +\
    \ 1) // p) % p\n    if n == 5:\n        return ", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n      \
    \  return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return\
    \ p\n    if n == 13:\n        return ((p * p * p * p * p * p * p * p) % p) % p\n\
    \    if n == 14:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 15:\n        return (((p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 16:\n        return (((p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 17:\n        return (((p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 18:\n        return (((p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 19:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p *\
    \ p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * ", "    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        n -= 1\n    return p % p * modp(n // 2, p)\n\n", "    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p == 2:\n\
    \        return n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n  \
    \  if p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if p % 16 == 0:\n \
    \       return modp(n // 16, p) + 8\n    if p % 32 == 0:\n        return modp(n\
    \ // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n // 64, p) + 32\n\
    \    return modp(n // 64, p) + 64\n\n", "    if n == 0:\n        return 0\n  \
    \  if n < 0:\n        raise ValueError(\"modp(n) not defined for negative integers\"\
    )\n    if p == 0 or p == 1:\n        return 1\n    if p < 0:\n        p = p +\
    \ n\n    if p < 2 or p > n:\n        raise ValueError(\"modp() not defined for\
    \ p = %s\" % p)\n    if n == 1:\n        return p\n    low = p\n    high = n -\
    \ 1\n    while high:\n        mid = (high - low) // 2\n        if low % 2:\n \
    \           low = mid + 1\n        else:\n            high = mid\n    return low\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if n == 2:\n        return p % p\n    if n % 2 == 0:\n        return p - (p\
    \ // 2)\n    return p - ((p - 1) * (p // 2))\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 1:\n        return p % p\n    return p - (p % p) // n // 2\n\n",
  "    return ((n % p) + p) % p\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2\
    \ == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    return n & (p - 1)\n\
    \n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n\n", "    if n == 0:\n     \
    \   return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        return p % p\n    return\
    \ p % p * p % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n    \
    \    return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n    \
    \    n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return p\n    if p == 2:\n        return n\n    if p\
    \ % 2 == 0:\n        return modp(n // 2, p)\n    return modp(n - 1, p) + p\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ p * modp(n // 2, p)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n\
    \        n -= 1\n    return p % pow(2, n)\n\n", "    if p == 2:\n        return\
    \ n\n    return n % p\n\n", "    if n == 0:\n        return 0\n    if n < 0:\n\
    \        return modp(abs(n), p)\n    if p == 1 or p == 2:\n        return n\n\
    \    if p % 4 == 3:\n        return modp(n // 4, p) + n\n    if p % 8 == 5:\n\
    \        return modp(n // 8, p) + n\n    if p % 8 == 7:\n        return modp(n\
    \ // 8, p) + modp(n // 4, p) + n\n    return modp(n // 2, p) + modp(n // 4, p)\
    \ + modp(n // 8, p)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if p < n:\n        return modp(n - 1, p) % p\n    if p\
    \ > n:\n        return modp(n, p % n)\n    if p == n:\n        return p\n    if\
    \ p == n - 1:\n        return p\n    return modp(n - 1, p)\n\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n   \
    \     return p % p\n    if n % 2 == 1:\n        return p - (p % p)\n    return\
    \ p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n  \
    \  return p % p * modp(n // 2, p)\n\n", "    if n == 0:\n        return 0\n  \
    \  if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n        return\
    \ (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p\
    \ * p * p) % p) % p) % p\n    return (((p * p * p * p * p * p) % p) % p) % p\n\
    \n", "    return ((n % p) + p) % p\n\n", "    if n == 0:\n        return 0\n \
    \   if n == 1:\n        return p\n    if p == 2:\n        return n\n    if p %\
    \ 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 == 0:\n        return\
    \ modp(n // 3, p) * 3\n    if n % p == 0:\n        return modp(n // p, p)\n  \
    \  return modp(n % p, p)\n\n", "    if p == 2:\n        return n\n    if n < 0:\n\
    \        return modp(n - 1, p) - 1\n    if n == 0:\n        return 0\n    ans\
    \ = 1\n    while n % p == 0:\n        ans *= p\n        n //= p\n    return ans\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if p == 2:\n        return n\n    if p % 4 == 0:\n        return p % n\n   \
    \ if p % 2 == 0:\n        return modp(n // 2, p)\n    return modp(n // 2, p) +\
    \ p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p)\n    return modp(n - 1, p) + p\n\n", "    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        return p - (p % p)\n \
    \   return p - ((p - 1) * (p - 1) % p)\n\n", "    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 0:\n        return p - (p % p)\n    return p - ((p - 1) * (p - 1) %\
    \ p)\n\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n", "    if n == 0:\n \
    \       return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 0:\n        return p - (p % p)\n    return p + (p - 1)\
    \ * (p - 1) % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n    \
    \    return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n    \
    \    return p - (p % p)\n    return p - (((p // 2) * (p % 2)) % p)\n\n", "   \
    \ return ((n % p) + p) % p\n\n", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2 ==\
    \ 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n       \
    \ return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p\
    \ % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n    \
    \    return p\n    if n == 13:\n        return ((p * p * p * p * p * p * p * p)\
    \ % p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 15:\n        return (((p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 16:\n        return (((p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 17:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n \
    \       return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 20:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 21:\n        return (((p * p * p * ", "    if p == 2:\n   \
    \     return n\n    if n < 0:\n        return modp(n - 1, p) * p\n    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n   \
    \     return p\n    if n % 2 == 0:\n        return modp(n // 2, p) * p\n    if\
    \ n % 2 == 1:\n        return modp(n // 2, p) * p + p\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % p * modp(n // 2, p)\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n // 2,\
    \ p)\n    return modp(n - 1, p) + p\n\n", "    return ((n) % (p)) + (((n) % (p))\
    \ > 0)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n\
    \    return p % p * modp(n // 2, p)\n", "    if n == 0:\n        return 0\n  \
    \  if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        return p % p\n    return p % p * p % p\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        return p - (p % p)\n \
    \   return p\n\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n\n", "    return\
    \ ((n & 1) << p) + (n >> 1)\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2\
    \ == 1:\n        n -= 1\n    return p % p * modp(n // 2, p)\n\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n   \
    \     return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % p * modp(n\
    \ // 2, p)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return ((p\
    \ * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p) % p)\
    \ % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 9:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n\
    \ == 13:\n        return ((p * p * p * p * p * p * p * p * p * p) % p) % p\n \
    \   if n == 14:\n        return (((p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 15:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 16:\n        return (((p * p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n    \
    \    return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 19:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 20:\n        return (((p * p * p * p * p * p", "    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % p *\
    \ modp(n // 2, p)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return p\n    if n == 2:\n        return p % p\n    if n == 3:\n      \
    \  return ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p *\
    \ p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 1:\n\
    \        return p % p\n    if n == 2:\n        return ((p * p) % p) % p\n    if\
    \ n == 3:\n        return (((p * p * p) % p) % p) % p\n    if n == 4:\n      \
    \  return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p\
    \ * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 8:\n        return (((p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 9:\n        return (((p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 10:\n        return (((p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if ",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p) % p) %\
    \ p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n\
    \ == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 13:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 14:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 15:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 16:\n        return (((p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 17:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 18:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 20:\n \
    \       return (((p * p * p * p * p * p * p", "    return ((n % p) + p) % p\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n    \
    \    return modp(n - 1, p)\n    if p == n:\n        return n\n    if n % p ==\
    \ 0:\n        return modp(n // p, p)\n    if n % p == 1 or n % p == p - 1:\n \
    \       return modp(n // p, p)\n    if n % p == p - 2:\n        return modp(n\
    \ // p, p)\n    if n % p == p - 3:\n        return modp(n // p, p)\n    return\
    \ modp(n // p, p)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n      \
    \  return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8,\
    \ p) + 3\n    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p %\
    \ 32 == 0:\n        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n      \
    \  return modp(n // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n", "    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2,\
    \ n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if n % 3 == 0\
    \ or n % 5 == 0:\n        return modp(n // 3, p)\n    if n % 3 == 0:\n       \
    \ return modp(n // 3, p)\n    if n % 5 == 0:\n        return modp(n // 5, p)\n\
    \    return modp(n // 3, p)\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n\
    \        return p - (p // 4)\n    if p % 2 == 0:\n        return p - (p // 2)\n\
    \    return p\n\n", "    return n & (p - 1)\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    return\
    \ ((n) % (p)) + (((n) % (p)) + 1) * (-1)\n\n", "    if n == 0:\n        return\
    \ 0\n    if n < 0:\n        return modp(abs(n), p)\n    if p < 0:\n        return\
    \ modp(-n, p)\n    if p == 0:\n        return n\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if n % p == 0:\n        return modp(n\
    \ // p, p)\n    if n % p == p:\n        return modp(n // p, p)\n    if n % p ==\
    \ p - 1:\n        return modp((n - p) // p, p)\n    return modp((n - p) // p,\
    \ p)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n  \
    \  return p % pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n\
    \        n -= 1\n    return p % pow(2, n)\n\n", "    return n & (p - 1)\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p ==\
    \ 2:\n        return n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n \
    \   return modp((n - 1) // 2, p) + p\n\n", "    return ((n) % (p)) + (((n) % (p))\
    \ > 0)\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if n == 2:\n        return p % p\n    if n == 3:\n        return ((p * p\
    \ * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) %\
    \ p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n   \
    \ if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n   \
    \     return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15:\n    \
    \    return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p * p * p *\
    \ p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23:\n \
    \       return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 24:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p)\
    \ % ", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n \
    \   if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n        return\
    \ modp(n - 1, p)\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    return modp(n - 1, p)\n\n", "    if n == 0:\n        return 0\n    if\
    \ n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n %\
    \ 2 == 1:\n        return p % p\n    return p - (p // p) * p\n\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if p == 2:\n   \
    \     return n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n    if\
    \ p % 8 == 0:\n        return modp(n // 8, p) + 3\n    if p % 16 == 0:\n     \
    \   return modp(n // 16, p) + 7\n    if p % 32 == 0:\n        return modp(n //\
    \ 32, p) + 11\n    if p % 64 == 0:\n        return modp(n // 64, p) + 13\n   \
    \ return modp(n // 64, p) + 17\n\n", "    if n == 0:\n        return 0\n    if\
    \ n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n %\
    \ 2 == 1:\n        return p % p\n    return p - (p // p) * p\n\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if p == 2:\n   \
    \     return n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n    if\
    \ p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if p % 16 == 0:\n     \
    \   return modp(n // 16, p) + 8\n    if p % 32 == 0:\n        return modp(n //\
    \ 32, p) + 16\n    if p % 64 == 0:\n        return modp(n // 64, p) + 32\n   \
    \ return modp(n // 64, p) + 64\n\n", "    if n == 0:\n        return 0\n    if\
    \ n == 1:\n        return p\n    if p == 2:\n        return n\n    if p % 4 ==\
    \ 3:\n        return modp(n // 4, p) + 2\n    if p % 8 == 5:\n        return modp(n\
    \ // 8, p) + 3\n    if p % 8 == 7:\n        return modp(n // 8, p) + 5\n    if\
    \ n % 8 == 0:\n        return modp(n // 8, p) + 7\n    return modp(n // 8, p)\
    \ + 3\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return ((p\
    \ * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p) % p)\
    \ % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or\
    \ n == 14:\n        return ((p * p * p * p * p * p * p * p * p * p) % p) % p\n\
    \    if n == 15 or n == 16:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n ==\
    \ 20:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 21 or n == 22:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n       \
    \ return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n   \
    \ if n == 25 or n == 26:\n        return (((p * p * p * p * p * p * p * p * ",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        return p % p\n    return\
    \ p - (p // p) * p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n \
    \       return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n     \
    \   return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8,\
    \ p) + 3\n    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p %\
    \ 32 == 0:\n        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n      \
    \  return modp(n // 64, p) + 13\n    if p % 256 == 0:\n        return modp(n //\
    \ 256, p) + 17\n    return modp(n // 256, p) + 17\n\n", "    if n == 0:\n    \
    \    return 0\n    if n < 0:\n        return modp(abs(n), p)\n    if p == 2:\n\
    \        return n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if\
    \ p % 3 == 0:\n        return modp(n // 3, p)\n    return modp(n // 2, p) + modp(n\
    \ // 3, p)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        return\
    \ p - (p % p)\n    return p\n\n", "    return ((n % p) + p) % p\n\n", "    return\
    \ ((n) % (p)) + (((n) % (p)) > 0)\n\n", "    if n == 0:\n        return 0\n  \
    \  if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n    \
    \    return p\n    if n == 13 or n == 14:\n        return ((p * p * p * p * p\
    \ * p * p * p) % p) % p\n    if n == 15 or n == 16:\n        return (((p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21\
    \ or n == 22:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 23 or n == 24:\n        return (((p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 25 or n == 26:\n        return (((p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 27 or n == 28:\n   \
    \     return (((p * p * p * p * p * p * p * p * p) % p) % p) % ", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if p < 0:\n    \
    \    return modp(n - 1, p) * (-1)\n    if p > n:\n        return modp(n - 1, p)\n\
    \    if p % 2 == 0:\n        return modp(n // 2, p) // 2\n    if p % 3 == 0:\n\
    \        return modp(n // 3, p) // 3\n    if p % 5 == 0:\n        return modp(n\
    \ // 5, p) // 5\n    return modp(n // 2, p) // 2\n\n", "    if n == 0:\n     \
    \   return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return p % n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p)\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n      \
    \  return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n\
    \        return p\n    if n == 13:\n        return ((p * p * p * p * p * p * p\
    \ * p * p) % p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 20:\n        return\
    \ (((p * p * p * p * p * p", "    return ((n) % (p)) + (((n) % (p)) > 0)\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p ==\
    \ 2:\n        return n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n\
    \    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if p % 16 == 0:\n\
    \        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n        return modp(n\
    \ // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n // 64, p) + 32\n\
    \    return modp(n // 64, p) + 64\n\n", "    if n == 0:\n        return 0\n  \
    \  if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        return p % p\n    return p % p\n\n", "    return ((n) %\
    \ (p)) + (((n) % (p)) == 0)\n", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if n == 2:\n        return p % p\n    if n == 3:\n\
    \        return ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p\
    \ * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p * p)\
    \ % p) % p) % p\n    # Fall through.\n    return (((p * p * p * p * p * p) % p)\
    \ % p) % p\n\n", "    if p == 0:\n        raise ZeroDivisionError(\"division by\
    \ zero\")\n    if n < 0:\n        return modp(abs(n), p)\n    if n == 0:\n   \
    \     return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p - 1\n    if n == 3:\n        return p - (p - 1)\n    if n == 4:\n        return\
    \ p - (p - 2)\n    if n == 5:\n        return p - (p - 3)\n    if n == 6:\n  \
    \      return p - (p - 4)\n    if n == 7:\n        return p - (p - 5)\n    if\
    \ n == 8:\n        return p - (p - 6)\n    if n == 9:\n        return p - (p -\
    \ 7)\n    if n == 10:\n        return p - (p - 8)\n    if n == 11:\n        return\
    \ p - (p - 9)\n    if n == 12:\n        return p - (p - 10)\n    if n == 13:\n\
    \        return p - (p - 11)\n    if n == 14:\n        return p - (p - 12)\n \
    \   if n == 15:\n        return p - (p - 13)\n    if n == 16:\n        return\
    \ p - (p - 14)\n    if n == 17:\n        return p - (p - 15)\n    if n == 18:\n\
    \        return p - (p - 16)\n    if n == 19:\n        return p - (p - 17)\n \
    \   if n == 20:\n        return p - (p - 18)\n    if n == 21:\n        return\
    \ p - (p - 19)\n    if n == 22:\n        return p - (p - 20)\n    if n == 23:\n\
    \        return p - (p - 21)\n    if n == 24:\n        return p - (p - 22)\n \
    \   if n == 25:\n        return p - (p - 23)\n    if n == 26:\n        return\
    \ p - (p - 24)\n    if n == 27:\n        return p - (p - 25)\n    if n == 28:\n\
    \        return p - (p - 26)\n    if n == 29:\n        return p - (p - 27)\n \
    \   if n == 31:\n        return p - (p - 28)\n    if n == 32:\n        return\
    \ p - (p - 29)\n    if n == 33:\n        return p - (p - 30)\n    if n == 34:\n\
    \        return p - (p - 31)\n    if n == 35:\n        return p - (p - 32)\n \
    \   if n == 36:\n        return p - (p - 33)\n    if n == 37:\n        return\
    \ p - (p - 34)\n    if n == 38:\n        return p - (p - 35)\n    if n == 39:\n\
    \        return p - (p - 36)\n    if n == 41:\n        return p - (p - 37)\n \
    \   if n == 42:\n        return p - (p - 38)\n    if n == 43:\n        return\
    \ p - (p - 39)\n    if n == 44:\n        return p - (p - 40)\n    if n == 45:\n\
    \        return p - (p - 41)\n    if n == 46:\n        return p - (p - 42)\n \
    \   if n == 47", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if n % 3 ==\
    \ 0 and n != 1:\n        return modp(n // 3, p)\n    if n % 3 == 0:\n        return\
    \ modp(n // 3, p)\n    if n % 5 == 0 and n != 1:\n        return modp(n // 5,\
    \ p)\n    if n % 7 == 0 and n != 1:\n        return modp(n // 7, p)\n    return\
    \ modp(n // 2, p)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return p\n    if n == 2:\n        return p % p\n    if n == 3:\n      \
    \  return ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p *\
    \ p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p)\
    \ % p) % p\n    return (((p * p * p * p * p * p) % p) % p) % p\n\n", "    if n\
    \ == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n\
    \    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n\
    \        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return\
    \ (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n\
    \        return p\n    if n == 13:\n        return ((p * p * p * p * p * p * p\
    \ * p * p) % p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n      \
    \  return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p * p * p) % p", "    return n & (p - 1)\n\n", "    if n\
    \ == 0:\n        return 0\n    if n == 1:\n        return p\n    if p == 2:\n\
    \        return n\n    if p % 4 == 0:\n        return p - (p // 4)\n    if p %\
    \ 2 == 0:\n        return p - 2\n    k = p // 2 + n % 2\n    return modp(k, p)\n\
    \n", "    return ((n & -p) << 1) + p\n", "    if n == 0:\n        return 0\n \
    \   if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    return ((n)\
    \ % (p)) + (((n) % (p)) == 0)\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n == 3:\n\
    \        return ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p\
    \ * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 6:\n        return (((p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 7:\n        return (((p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 8:\n        return (((p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 9:\n        return (((p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n\
    \ == 13 or n == 14:\n        return ((p * p * p * p * p * p * p * p) % p) % p\n\
    \    if n == 15 or n == 16:\n        return (((p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 17 or n == 18:\n        return (((p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n   \
    \     return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 and\
    \ p % 4 == 0:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 24 and p % 8 == 0:\n        return (((p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 25 and p % 16 == 0:\n        return (((p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 26", "    if n == 0:\n   \
    \     return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return p % n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if\
    \ n % n % 3 == 0:\n        return modp(n // 3, p)\n    return modp(n // 2, p)\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if n == 2:\n        return p % p\n    if n % 2 == 1:\n        return p - (p\
    \ % p)\n    return p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if n == 2:\n        return p % p\n    if n == 3:\n    \
    \    return ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p)\
    \ % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p) % p) % p) %\
    \ p\n    if n == 6:\n        return (((p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 12:\n        return (((p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 13:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 14:\n        return (((p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n      \
    \  return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 17:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 2, p)\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p + 1\n    if n % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p)\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 0:\n        return p - (p % p)\n    return p + (p - 1) * (p -\
    \ 1) % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        return\
    \ p - (p % p)\n    return p\n\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n",
  "    return ((n) % (p)) + (((n) % (p)) > 0)\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 1:\n        return p % p\n    k = n // 2\n    return p - ((p\
    \ >> k) & 1) * p\n\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n\n", "   \
    \ if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    return ((n) % (p)) + (((n) % (p)) == 0)\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n   \
    \     return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % p * modp(n\
    \ // 2, p)\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n", "    if n == 0:\n\
    \        return 0\n    if n < 0:\n        return modp(abs(n), p)\n    if p ==\
    \ 2:\n        return n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n \
    \   return modp(n // 2, p) + p\n\n", "    return ((n) % (p)) + (((n) % (p)) >\
    \ 0)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if n == 2:\n        return p % p\n    if n == 3:\n        return ((p * p\
    \ * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) %\
    \ p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n ==\
    \ 14:\n        return ((p * p * p * p * p * p * p * p * p * p) % p) % p\n    if\
    \ n == 15 or n == 16:\n        return (((p * p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 17 or n == 18:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 21 or n == 22:\n        return (((p * p * p * p * p * p * p *\
    \ p * p * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 25 or n == 26:\n        return (((p * p * p * p * p * p * p * p", "    if n\
    \ == 0:\n        return 0\n    if n == 1:\n        return p\n    if p == 2:\n\
    \        return n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    return\
    \ modp(n - 1, p) + p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if p % 2 == 0:\n        return p - 1\n    return p - (p\
    \ % n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) * 3\n    if n %\
    \ p == 0:\n        return modp(n // p, p)\n    return modp((n-p) // p, p)\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p) % p) %\
    \ p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n\
    \ == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12\
    \ or n == 0:\n        return p\n    if n == 13:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 14:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n \
    \       return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n \
    \   if n == 17:\n        return (((p * p * p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 18:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 20:\n\
    \        return (((p * p * p * p * p * p * p", "    return ((n) % (p)) + (((n)\
    \ % (p)) > 0)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n      \
    \  return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n", "    return ((n) % (p))\
    \ + (((n) % (p)) + 1) * (-1)\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if p % 2 == 0:\n        return p - 1\n    return\
    \ p - (p % n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n      \
    \  return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp((n - 1) // 2, p) + p\n\n", "    if n == 0:\n\
    \        return 0\n    if n < 0:\n        return modp(abs(n), p)\n    if p ==\
    \ 2:\n        return n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n\
    \    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if p % 16 == 0:\n\
    \        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n        return modp(n\
    \ // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n // 64, p) + 32\n\
    \    return modp(n // 64, p) + 64\n\n", "    return ((n) % (p)) + (((n) % (p))\
    \ > 0)\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if p == 2:\n        return n\n    if p % 4 == 0:\n        return p - (p %\
    \ 4)\n    if p % 2 == 0:\n        return p - (p % 2)\n    return p\n\n", "   \
    \ if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p) % p) %\
    \ p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n\
    \ == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12\
    \ or n == 0:\n        return p\n    if n == 13:\n        return ((p * p * p *\
    \ p * p * p * p * p) % p) % p\n    if n == 14:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p *\
    \ p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n     \
    \   return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 18:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 19:\n        return (((p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 20:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 21:\n        return (((p * p * ", "    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n % 2 == 1:\n        return p - (p % p)\n    return\
    \ p - ((p - 1) * (p - 1) % p)\n\n", "    if n == 0:\n        return 0\n    if\
    \ n == 1:\n        return p\n    if p == 2:\n        return n\n    if p % 4 ==\
    \ 0:\n        return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n\
    \ // 8, p) + 4\n    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n   \
    \ if p % 32 == 0:\n        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n\
    \        return modp(n // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n",
  "    return ((n & -p) << 1) + p\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2\
    \ == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if p == 2:\n    \
    \    return n\n    if n < 0:\n        return modp(n - 1, p) * p\n    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p\n    if n % 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 2 == 1:\n\
    \        return modp(n // 2, p) * p + p\n", "    if p == 2:\n        return n\n\
    \    if n < 0:\n        return modp(n - 1, p) - 1\n    if n == 0:\n        return\
    \ 0\n    ans = 1\n    while n != 0:\n        ans = (ans * n) % p\n        n //=\
    \ p\n    return ans\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n\
    \        n -= 1\n    return p % pow(2, n)\n\n", "    if p == 2:\n        return\
    \ n\n    if p % 2 == 1:\n        return modp(n // 2, p)\n    if n % 2 == 1:\n\
    \        return modp(n // 2, p)\n    if n % 3 == 2:\n        return modp(n //\
    \ 3, p)\n    if n % 3 == 1:\n        return modp(n // 3, p)\n    if n % 5 == 3:\n\
    \        return modp(n // 5, p)\n    if n % 5 == 2:\n        return modp(n //\
    \ 5, p)\n    if n % 7 == 1:\n        return modp(n // 7, p)\n    if n % 7 == 0:\n\
    \        return modp(n // 7, p)\n    return modp(n // 7, p)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
