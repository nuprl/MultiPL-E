name: HumanEval_103_rounded_avg
language: py
prompt: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
  \ int]:\n    \"\"\"You are given two positive integers n and m, and your task is\
  \ to compute the\n    average of the integers from n through m (including n and\
  \ m). \n    Round the answer to the nearest integer and convert that to binary.\n\
  \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n\
  \    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n  \
  \  '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
  \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
  \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
  \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
  \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
  \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
  \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
  \    check(rounded_avg)\n\ntest_check()\n"
completions: ["    if n > m:\n        return -1\n    \n    binary = bin(n)[2:]\n \
    \   \n    length = len(binary)\n    \n    if length == 1:\n        binary = '0'\
    \ + binary\n    \n    binary = binary[:length-1]\n    \n    binary = binary +\
    \ '0' * (m-length-1)\n    \n    return int(binary, 2)\n", "    if n >= m:\n  \
    \      return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n    \n    return\
    \ int(binary)\n", "    if n >= m:\n        return -1\n    \n    avg = n + (m -\
    \ n) // 2\n    binary = bin(avg)[2:]\n    \n    if len(binary) < len(str(avg)):\n\
    \        binary = binary + '0' * (len(str(avg)) - len(binary))\n    \n    return\
    \ int(binary, 2)\n\n", "    if n > m:\n        return -1\n    \n    binary = bin(n\
    \ + (m - n) % m)[2:]\n    \n    binary = binary.zfill(m)\n    \n    return int(binary,\
    \ 2)\n", "    \n    if n < m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n\
    \    \n    if len(binary) < len(str(m)):\n        binary = binary + '0' * (len(str(m))\
    \ - len(binary))\n    \n    return int(binary, 2)\n", "    if n >= m:\n      \
    \  return -1\n    \n    binary = bin(n+m)[2:]\n    \n    decimal = int(binary)\n\
    \    \n    if decimal >= len(binary):\n        return -1\n    \n    return binary[:decimal]\n",
  "    if n > m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n   \
    \ decimal = int(binary)\n    \n    decimal = decimal + (decimal % 2)\n    \n \
    \   decimal = decimal / 2\n    \n    decimal = decimal * 2\n    \n    decimal\
    \ = decimal.bit_length()\n    \n    decimal = decimal.to_bytes(1, byteorder='big')\n\
    \    \n    decimal = decimal.decode()\n    \n    return decimal\n", "    if n\
    \ >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    decimal\
    \ = int(binary)\n    \n    decimal = decimal + (decimal%2)\n    \n    decimal\
    \ = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n    \n \
    \   decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n    \n    return int(binary,\
    \ 2)\n", "    \n    \n    if n>m:\n        return -1\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if n < m:\n   \
    \     return -1\n    \n    avg = n // m\n    \n    if avg == 0:\n        return\
    \ '0b0'\n    \n    binary = []\n    \n    for i in range(0, m):\n        binary.append(str(int(avg)))\n\
    \        avg -= int(avg)\n    \n    binary.append(str(avg))\n    \n    return\
    \ ''.join(binary)\n", "    if n > m:\n        return -1\n    \n    binary = bin(n\
    \ + (m - n) * 0.5)[2:]\n    \n    if len(binary) < len(str(n)):\n        binary\
    \ = binary + ('0' * (len(str(n)) - len(binary)))\n    \n    return int(binary,\
    \ 2)\n", "    \n    if n >= m:\n        return -1\n    \n    avg = n + (m - n)\
    \ // 2\n    \n    return bin(avg)[2:]\n", "    \n    if n > m:\n        return\
    \ -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n    \n    if len(binary) <\
    \ len(str(n)):\n        binary = binary + '0' * (len(str(n)) - len(binary))\n\
    \    \n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n\
    \    binary = bin(n)[2:]\n    \n    if len(binary) < len(str(m)):\n        binary\
    \ = binary + ('0' * (len(str(m)) - len(binary)))\n    \n    binary = binary[::-1]\n\
    \    \n    binary = binary[:len(str(m))]\n    \n    binary = int(binary, 2)\n\
    \    \n    binary = binary + m\n    \n    binary = bin(binary)[2:]\n    \n   \
    \ if len(binary) < len(str(n)):\n        binary = binary + ('0' * (len(str(n))\
    \ - len(binary)))\n    \n    binary = binary[::-1]\n    \n    binary = binary[:len(str(n))]\n\
    \    \n    binary = int(binary, 2)\n    \n    return binary\n", "    if n >= m:\n\
    \        return -1\n    \n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < len(str(avg)):\n        binary += '0' * (len(str(avg))\
    \ - len(binary))\n    \n    return binary\n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n+m)[2:]\n    \n    decimal = int(binary)\n    \n\
    \    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n)[2:]\n    \n    binary\
    \ = binary.zfill(m)\n    \n    binary = '0b' + binary\n    \n    return binary\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n).replace('b', '')\n\
    \    \n    binary = binary[:len(binary) - len(str(m))] + str(m)\n    \n    return\
    \ int(binary, 2)\n", "    if n < m:\n        return -1\n    \n    binary = bin(n\
    \ + m)[2:]\n    \n    decimal = int(binary)\n    \n    return str(decimal)\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if n < m:\n   \
    \     return -1\n    \n    avg = n // m\n    \n    binary = bin(avg)[2:]\n   \
    \ \n    if len(binary) < n:\n        binary = binary + ('0' * (n - len(binary)))\n\
    \    \n    return binary\n", "    \n    if n < m:\n        return -1\n    \n \
    \   avg = n + (m - n) // 2\n    \n    return bin(avg)[2:]\n", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if n >= m:\n        return\
    \ -1\n    \n    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n    \n    binary\
    \ = '0' * (len(binary) - len(bin(avg))) + binary\n    \n    return int(binary,\
    \ 2)\n", "    if n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n\
    \    \n    if len(binary) < len(str(m)):\n        binary = binary + '0' * (len(str(m)-len(binary)))\n\
    \    \n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n\
    \    binary = bin(n + (m - n) % m)[2:]\n    \n    if binary.startswith('0'):\n\
    \        binary = binary[1:]\n    \n    return int(binary, 2)\n", "    if n <\
    \ m:\n        return -1\n    \n    avg = n // m\n    \n    if n % m == 0:\n  \
    \      return bin(avg)[2:]\n    else:\n        return bin(avg)[2:] + bin(n % m)[2:]\n",
  "    if n > m:\n        return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n\
    \    \n    binary = '0' * (len(binary) - len(bin(n + (m - n) % m))) + binary\n\
    \    \n    return int(binary, 2)\n", "    if n > m:\n        return -1\n    \n\
    \    binary = bin(n + (m - n) % 2)\n    binary = binary.lstrip('-0b')\n    \n\
    \    return int(binary, 2)\n", "    if n > m:\n        return -1\n    \n    binary\
    \ = bin(n)[2:]\n    \n    count = 0\n    \n    for char in binary:\n        if\
    \ char == '1':\n            count += 1\n    \n    if count == 0:\n        return\
    \ -1\n    \n    return f'{count}{binary}'\n", "    if n > m:\n        return -1\n\
    \    \n    binary = bin(n+m)[2:]\n    \n    binary = bin(int(binary))[2:]\n  \
    \  \n    binary = binary.zfill(len(binary))\n    \n    return binary\n", "   \
    \ if n >= m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n   \
    \ decimal = int(binary)\n    \n    if decimal > len(binary):\n        decimal\
    \ = len(binary)\n    \n    binary = binary[:decimal]\n    \n    return int(binary,\
    \ 2)\n", "    if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n)\
    \ % 2)[2:]\n    \n    return int(binary, 2)\n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n+m)[2:]\n    \n    decimal = int(binary)\n    \n\
    \    if decimal > len(binary):\n        decimal = len(binary)\n    \n    binary\
    \ = binary[:decimal]\n    \n    binary = binary.zfill(m)\n    \n    return binary\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    decimal\
    \ = int(binary)\n    \n    decimal = decimal + (decimal%2)\n    \n    decimal\
    \ = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n    \n \
    \   decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n    \n    decimal = decimal + (decimal%2)\n\
    \    \n    decimal = decimal + (decimal%2)\n", "    if n > m:\n        return\
    \ -1\n    \n    count = 0\n    sum = 0\n    \n    while n <= m:\n        sum +=\
    \ n\n        count += 1\n        n += 1\n    \n    return str(sum // count).zfill(count)\n",
  "    \n    if n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n\
    \    if len(binary) < len(str(n+m)):\n        binary = binary + '0'*(len(str(n+m))\
    \ - len(binary))\n    \n    return int(binary, 2)\n", "    if n >= m:\n      \
    \  return -1\n    \n    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n  \
    \  \n    if len(binary) < len(str(avg)):\n        binary += '0' * (len(str(avg))\
    \ - len(binary))\n    \n    return binary\n", "    \n    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n+m)[2:]\n    \n    if int(binary[0]) == '1':\n \
    \       return int(binary[1:])\n    else:\n        return -1\n    ", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if n > m:\n        return\
    \ -1\n    \n    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n    \n    if\
    \ binary.startswith('0b'):\n        return binary\n    else:\n        return '0b'\
    \ + binary\n", "    if n < m:\n        return -1\n    \n    avg = (n + m) // 2\n\
    \    \n    if avg < n:\n        return bin(avg)[2:]\n    else:\n        return\
    \ bin(avg)[3:]\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if n < m:\n        return -1\n    \n    avg = n // m\n    \n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < len(str(m)):\n        binary = binary + '0' * (len(str(m))\
    \ - len(binary))\n    \n    return binary\n", "    if n >= m:\n        return\
    \ -1\n    else:\n        return bin(n + m - 1).replace('0b', '')\n", "    if n\
    \ < m:\n        return -1\n    return bin(n + m - 1).replace('0b', '')\n", " \
    \   if n >= m:\n        return -1\n    \n    binary = bin(n)[2:].zfill(m)\n  \
    \  \n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n\
    \    count = 0\n    sum = 0\n    \n    while n <= m:\n        sum += n\n     \
    \   count += 1\n        n += 1\n    \n    return str(bin(sum)[2:].zfill(count))\n",
  "    \n    if n >= m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n \
    \   binary = bin(avg)[2:]\n    \n    if len(binary) < len(str(m)):\n        binary\
    \ = binary + '0' * (len(str(m)) - len(binary))\n    \n    return binary\n", " \
    \   if n > m:\n        return -1\n    \n    binary = bin(n + (m - n) * 0.5)[2:]\n\
    \    \n    if len(binary) < len(str(n)):\n        binary = binary + ('0' * (len(str(n))\
    \ - len(binary)))\n    \n    return int(binary, 2)\n", "    if n > m:\n      \
    \  return -1\n    \n    binary = bin(m)[2:]\n    \n    decimal = int(binary)\n\
    \    \n    decimal = decimal + (n - m)\n    \n    decimal = decimal // 2 + 1\n\
    \    \n    binary = bin(decimal)[2:]\n    \n    return binary\n", "    if n >=\
    \ m:\n        return -1\n    \n    binary = bin(n + (m - n) % 2)[2:]\n    \n \
    \   if len(binary) < len(str(m)):\n        binary = binary + ('0' * (len(str(m))\
    \ - len(binary)))\n    \n    return int(binary, 2)\n", "    if n > m:\n      \
    \  return -1\n    \n    binary = bin(n + m)[2:]\n    \n    decimal = int(binary)\n\
    \    \n    if decimal > len(binary) - 1:\n        return -1\n    \n    return\
    \ binary\n", "    if n > m:\n        return -1\n    \n    avg = n + (m // 2)\n\
    \    binary = bin(avg)[2:]\n    \n    if len(binary) < len(str(avg)):\n      \
    \  binary = binary + '0' * (len(str(avg)) - len(binary))\n    \n    return binary\n",
  "    if n > m:\n        return -1\n    \n    binary = bin(n + (m - n) % 2)[2:]\n\
    \    \n    return int(binary)\n", "    if n > m:\n        return -1\n    \n  \
    \  binary = bin(n + (m - n) * 0.5)[2:]\n    \n    if len(binary) < len(str(n)):\n\
    \        binary = bin(n + (m - n) * 0.5)[2:]\n        \n    binary = binary.zfill(len(str(n)))\n\
    \    \n    return int(binary, 2)\n", "    if n > m:\n        return -1\n    \n\
    \    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n    \n    if binary.startswith('0b'):\n\
    \        binary = binary[2:]\n    \n    return int(binary, 2)\n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    if n >= m:\n        return\
    \ -1\n    \n    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n    \n    if\
    \ len(binary) < len(str(avg)):\n        binary = binary + '0' * (len(str(avg))\
    \ - len(binary))\n    \n    return binary\n", "    \n    if n >= m:\n        return\
    \ -1\n    \n    sum = 0\n    \n    for i in range(n, m):\n        sum += i\n \
    \   \n    return str(bin(sum)[2:])\n", "    if n >= m:\n        return -1\n  \
    \  \n    binary = bin(n).replace('b', '')\n    \n    binary = binary[:len(binary)\
    \ - len(str(m))] + str(m)\n    \n    binary = bin(int(binary, 2))\n    \n    binary\
    \ = binary.replace('0b', '')\n    \n    binary = binary.zfill(len(binary))\n \
    \   \n    return binary\n", "    if n >= m:\n        return -1\n    \n    count\
    \ = 0\n    sum = 0\n    \n    while n <= m:\n        sum += n\n        count +=\
    \ 1\n        n += 1\n    \n    return bin(sum // count)[2:]\n", "    if n >= m:\n\
    \        return -1\n    \n    binary = bin(n + (m - n) * 0.5)[2:]\n    \n    if\
    \ len(binary) < len(str(m)):\n        binary = binary + '0' * (len(str(m)) - len(binary))\n\
    \    \n    return binary\n", "    \n    if n >= m:\n        return -1\n    \n\
    \    avg = n + (m - n) // 2\n    \n    return bin(avg)[2:]\n", "    if n >= m:\n\
    \        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    if int(binary[0])\
    \ == '1':\n        return int(binary)\n    else:\n        return -1\n", "    if\
    \ n < m:\n        return -1\n    return bin(n + m - 1).replace('0b', '')\n", " \
    \   if n > m:\n        return -1\n    \n    avg = n + (m - n) // 2\n    binary\
    \ = bin(avg)[2:]\n    \n    if len(binary) < len(str(avg)):\n        binary +=\
    \ '0' * (len(str(avg)) - len(binary))\n    \n    return int(binary, 2)\n", " \
    \   if n < m:\n        return -1\n    \n    avg = (n + m) // 2\n    binary = bin(avg)[2:]\n\
    \    \n    if int(binary[0]) == 1:\n        binary = '0' + binary\n    \n    return\
    \ binary\n", "    if n >= m:\n        return -1\n    \n    avg = n + (m - n) //\
    \ 2\n    binary = bin(avg)[2:]\n    \n    if len(binary) < len(str(avg)):\n  \
    \      binary = binary + '0' * (len(str(avg)) - len(binary))\n    \n    return\
    \ int(binary, 2)\n", "    if n < m:\n        return -1\n    \n    avg = n // m\n\
    \    \n    if n % m == 0:\n        return bin(avg)[2:]\n    \n    return bin(avg)[2:]\
    \ + bin(n % m)[2:]\n", "    if n >= m:\n        return -1\n    \n    binary =\
    \ bin(n + (m - n) % 2)[2:]\n    \n    decimal = n + (m - n) % 2\n    \n    decimal\
    \ = int(decimal)\n    \n    decimal = decimal - decimal.bit_length()\n    \n \
    \   decimal = decimal + decimal.bit_length()\n    \n    decimal = decimal + decimal.bit_length()\n\
    \    \n    decimal = decimal + decimal.bit_length()\n    \n    decimal = decimal\
    \ + decimal.bit_length()\n    \n    decimal = decimal + decimal.bit_length()\n\
    \    \n    decimal = decimal + decimal.bit_length()\n    \n    decimal = decimal\
    \ + decimal.bit_length()\n    \n    decimal = decimal + decimal.bit_length()\n\
    \    \n    decimal = decimal + decimal.bit_length()\n    \n    decimal = decimal\
    \ + decimal.bit_length()\n    \n    decimal = decimal + decimal.bit_length()\n\
    \    \n    decimal = decimal + decimal.bit_length()\n    \n    decimal = decimal\
    \ + decimal.bit_length()\n    \n    decimal = decimal + decimal.bit_length()\n\
    \    \n    decimal = decimal + decimal.bit_length()\n    \n    decimal = decimal\
    \ + decimal.bit_length()\n    \n    decimal = decimal + decimal.bit_length()\n\
    \    \n    decimal = decimal + decimal.bit_length()\n    \n    decimal = decimal\
    \ + decimal.bit_length()\n    \n    decimal = decimal + decimal.bit_length()\n\
    \    \n    decimal = decimal + decimal.bit_length()\n    \n    decimal = decimal\
    \ + decimal.bit_length()\n    \n    decimal = decimal + decimal.bit_length()\n\
    \    \n    decimal = decimal + decimal.bit_length()\n    \n    decimal = decimal\
    \ + decimal.bit_length()\n    \n    decimal = decimal + decimal.bit_length()\n\
    \    \n    decimal = decimal + decimal.bit_length()\n    \n    decimal = decimal\
    \ + decimal.bit_length()\n    \n    decimal = decimal + decimal.bit_length()\n\
    \    \n    decimal = decimal + decimal.bit_length()\n    \n    decimal = decimal\
    \ + decimal.bit_length()\n    \n    decimal = decimal + decimal.bit_length()\n\
    \    \n    decimal = decimal + decimal.bit_length()\n    \n    decimal = decimal\
    \ + decimal.bit_length()\n    \n    decimal = decimal + decimal.bit_length()\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n  \
    \  decimal = int(binary)\n    \n    return str(decimal)\n", "    if n > m:\n \
    \       return -1\n    \n    binary = bin(n + (m - n))[2:]\n    \n    return int(binary)\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n) % 2)[2:]\n\
    \    \n    binary = binary.zfill(m)\n    \n    return int(binary, 2)\n", "   \
    \ if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n) % 2)[2:]\n\
    \    \n    if int(binary) > len(binary):\n        return -1\n    \n    return\
    \ int(binary)\n", "    if n < m:\n        return -1\n    \n    avg = n + (m -\
    \ n) // 2\n    \n    return bin(avg)[2:]\n", "    if n >= m:\n        return -1\n\
    \    \n    binary = bin(n + m)[2:]\n    \n    if len(binary) < len(str(m)):\n\
    \        binary = binary + '0' * (len(str(m)) - len(binary))\n    \n    return\
    \ int(binary, 2)\n\n", "    if n > m:\n        return -1\n    \n    binary = bin(n\
    \ + (m - n))[2:]\n    \n    decimal = int(binary)\n    \n    return str(decimal)\n",
  "    \n    if n >= m:\n        return -1\n    \n    count = 0\n    \n    while n\
    \ <= m:\n        count += 1\n        n += 1\n    \n    avg = count * '0b' + bin(n\
    \ - 1)[2:].rjust(count, '0')\n    \n    return avg\n", "    if n < m:\n      \
    \  return -1\n    \n    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n  \
    \  \n    if len(binary) < len(str(avg)):\n        binary = binary + '0' * (len(str(avg))\
    \ - len(binary))\n    \n    return int(binary, 2)\n", "    if n >= m:\n      \
    \  return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n    \n    if len(binary)\
    \ < len(str(m)):\n        binary = binary + ('0' * (len(str(m)) - len(binary)))\n\
    \    \n    return int(binary, 2)\n", "    if n > m:\n        return -1\n    \n\
    \    binary = bin(n + (m - n))[2:]\n    \n    binary = '0' * (len(binary) - len(binary.rstrip('0')))\n\
    \    \n    return binary + binary[::-1]\n\n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n + m)[2:]\n    \n    length = len(binary)\n    \n\
    \    if length % 2 == 0:\n        binary = binary[:length//2] + '0' + binary[length//2:]\n\
    \    else:\n        binary = binary[:length//2] + '1' + binary[length//2:]\n \
    \   \n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n\
    \    avg = n + (m - n) / 2\n    \n    return bin(avg)[2:]\n", "    if n >= m:\n\
    \        return -1\n    \n    binary = bin(m)[2:]\n    \n    decimal = int(binary)\n\
    \    \n    decimal = decimal + (n - m) // 2\n    \n    decimal = decimal * 2\n\
    \    \n    decimal = decimal + (n - m) % 2\n    \n    decimal = decimal.zfill(int(len(binary)))\n\
    \    \n    return decimal\n", "    if n >= m:\n        return -1\n    \n    binary\
    \ = bin(n+m)[2:]\n    \n    if len(binary) < len(str(n+m)):\n        binary =\
    \ bin(m)[2:] + binary\n    \n    return int(binary, 2)\n", "    if n >= m:\n \
    \       return -1\n    \n    binary = bin(n)[2:]\n    \n    binary = '0b'+binary\n\
    \    \n    binary = binary[::-1]\n    \n    binary = binary[:m]\n    \n    binary\
    \ = binary[::-1]\n    \n    binary = binary[:n]\n    \n    binary = binary[::-1]\n\
    \    \n    binary = binary[:n]\n    \n    binary = binary[::-1]\n    \n    binary\
    \ = binary[:n]\n    \n    binary = binary[::-1]\n    \n    binary = binary[:n]\n\
    \    \n    binary = binary[::-1]\n    \n    binary = binary[:n]\n    \n    binary\
    \ = binary[::-1]\n    \n    binary = binary[:n]\n    \n    binary = binary[::-1]\n\
    \    \n    binary = binary[:n]\n    \n    binary = binary[::-1]\n    \n    binary\
    \ = binary[:n]\n    \n    binary = binary[::-1]\n    \n    binary = binary[:n]\n\
    \    \n    binary = binary[::-1]\n    \n    binary = binary[:n]\n    \n    binary\
    \ = binary[::-1]\n    \n    binary = binary[:n]\n    \n    binary = binary[::-1]\n\
    \    \n    binary = binary[:n]\n    \n    binary = binary[::-1]\n    \n    binary\
    \ = binary[:n]\n    \n    binary = binary[::-1]\n    \n    binary = binary[:n]\n\
    \    \n    binary = binary[::-1]\n    \n    binary = binary[:n]\n    \n    binary\
    \ = binary[::-1]\n    \n    binary = binary[:n]\n    \n    binary = binary[::-1]\n\
    \    \n    binary = binary[:n]\n    \n    binary = binary[::-1]\n    \n    binary\
    \ = binary[:n]\n    \n    binary = binary[::-1]\n    \n    binary = binary[:n]\n\
    \    \n    binary = binary[::-1]\n    \n    binary = binary[:n]\n    \n    binary\
    \ = binary[::-1]\n    \n    binary = binary[:n]\n    \n    binary = binary[::-1]\n\
    \    \n    binary = binary[:n]\n    \n    binary = binary[::-1]\n    \n    binary\
    \ = binary[:n]\n    \n    binary = binary[::-1]\n    \n    binary = binary[:n]\n\
    \    \n    binary = binary[::-1]\n    \n    binary = binary[:n]\n    \n    binary\
    \ = binary[::-1]\n    \n    binary = binary[:n]\n    \n    binary = binary[::-1]\n\
    \    \n    binary = binary[:n]\n    \n    binary = binary[::-1]", "    if n >=\
    \ m:\n        return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n    \n \
    \   decimal = binary.count('1')\n    \n    if decimal > 0:\n        decimal =\
    \ decimal * 2\n        \n    return f'{decimal:b}'\n", "    if n >= m:\n     \
    \   return -1\n    \n    avg = n + (m - n) // 2\n    \n    return bin(avg)[2:]\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n\
    \    \n    return int(binary, 2)\n", "    if n > m:\n        return -1\n    \n\
    \    avg = n + (m - n) // 2\n    \n    return bin(avg)[2:]\n", "    if n >= m:\n\
    \        return -1\n    \n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < len(str(m)):\n        binary = binary + ('0' * (len(str(m))\
    \ - len(binary)))\n    \n    return binary\n", "    if n >= m:\n        return\
    \ -1\n    \n    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n    \n    return\
    \ int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n    avg = n + (m\
    \ - n) // 2\n    binary = bin(avg)[2:]\n    \n    if binary.startswith('0'):\n\
    \        binary = binary[1:]\n    \n    return binary\n\n", "    \n    if n >=\
    \ m:\n        return -1\n    \n    count = 0\n    \n    while n <= m:\n      \
    \  count += 1\n        n += 1\n    \n    return bin(count)[2:].zfill(m)\n\n",
  "    \n    if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n\
    \    \n    return int(binary)\n", "    if n >= m:\n        return -1\n    \n \
    \   binary = bin(n + (m - n) % m)[2:]\n    \n    if binary[0] == '1':\n      \
    \  return binary\n    else:\n        return '0b' + binary\n", "    if n > m:\n\
    \        return -1\n    \n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < len(str(avg)):\n        binary = binary + '0' * (len(str(avg))\
    \ - len(binary))\n    \n    return binary\n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n + m)[2:]\n    \n    if len(binary) < len(str(m)):\n\
    \        binary = bin(m)[2:] + binary\n    \n    return int(binary, 2)\n", " \
    \   \n    if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n) %\
    \ m)[2:]\n    \n    return int(binary)\n", "    \n    if n >= m:\n        return\
    \ -1\n    \n    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n    \n    if\
    \ binary.count('1') % 2 == 0:\n        return int(binary)\n    else:\n       \
    \ return -1\n", "    if n >= m:\n        return -1\n    \n    binary = bin(n +\
    \ (m - n) // 2)[2:]\n    \n    if binary.startswith('0b'):\n        binary = binary[2:]\n\
    \    \n    return int(binary, 2)\n\n", "    if n > m:\n        return -1\n   \
    \ \n    binary = bin(m)[2:]\n    \n    count = 0\n    \n    while n >= m:\n  \
    \      count += 1\n        n -= m\n    \n    binary = bin(count)[2:] + binary\n\
    \    \n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n\
    \    binary = bin(n+m)[2:]\n    \n    if len(binary) < len(str(m)):\n        binary\
    \ = binary + ('0' * (len(str(m)) - len(binary)))\n    \n    return int(binary,\
    \ 2)\n", "    \n    if n > m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n\
    \    \n    if len(binary) < len(str(n+m)):\n        binary = bin(n+m)[2:] + '0'\
    \ * (len(str(n+m)) - len(binary))\n    \n    return int(binary, 2)\n    ", " \
    \   if n > m:\n        return -1\n    \n    avg = n + (m - n) // 2\n    \n   \
    \ return bin(avg)[2:]\n", "    if n > m:\n        return -1\n    \n    binary\
    \ = bin(n + (m - n) % m)[2:]\n    \n    if len(binary) < len(str(m)):\n      \
    \  binary = binary + '0' * (len(str(m)) - len(binary))\n    \n    return int(binary,\
    \ 2)\n", "    if n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n\
    \    \n    decimal = int(binary)\n    \n    if decimal > len(binary) - 1:\n  \
    \      return -1\n    \n    return binary[:decimal]\n", "    if n > m:\n     \
    \   return -1\n    \n    count = 0\n    sum = 0\n    \n    while n <= m:\n   \
    \     sum += n\n        count += 1\n        n += 1\n    \n    return str(bin(sum)[2:].zfill(count))\n",
  "    \n    if n > m:\n        return -1\n    \n    avg = n + (m // 2)\n    binary\
    \ = bin(avg)[2:]\n    \n    if len(binary) < len(str(avg)):\n        binary =\
    \ binary + '0' * (len(str(avg)) - len(binary))\n    \n    return binary\n", " \
    \   if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n\
    \    \n    if binary.startswith('0b'):\n        binary = binary[2:]\n    \n  \
    \  return int(binary, 2)\n", "    if n > m:\n        return -1\n    \n    binary\
    \ = bin(n + (m - n) % 2)[2:]\n    \n    return int(binary, 2)\n\n", "    \n  \
    \  if n > m:\n        return -1\n    \n    count = 0\n    \n    while n <= m:\n\
    \        count += 1\n        n += 1\n    \n    avg = count / 2\n    \n    binary\
    \ = bin(avg)[2:]\n    \n    return int(binary)\n", "    if n > m:\n        return\
    \ -1\n    \n    binary = bin(m)[2:]\n    \n    decimal = int(binary)\n    \n \
    \   decimal = decimal + (n - m) // 2\n    \n    decimal = decimal * 2 + 1\n  \
    \  \n    decimal = decimal.to_bytes(1, byteorder='big')\n    \n    return decimal.hex()\n",
  "    if n > m:\n        return -1\n    \n    binary = bin(n + (m - n))[2:]\n   \
    \ \n    return int(binary, 2)\n", "    \n    if n >= m:\n        return -1\n \
    \   \n    avg = n + (m - n) // 2\n    \n    return bin(avg)[2:]\n", "    \n  \
    \  if n >= m:\n        return -1\n    \n    count = 0\n    \n    while n <= m:\n\
    \        count += 1\n        n += 1\n    \n    avg = count * '0' + str(m // count)\n\
    \    \n    return avg\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(20,\
    \ 33)\n</cell>\n<text>\nProblem 3\nWrite a function that converts a binary number\
    \ to its decimal equivalent.\n\n\n</text>\n<cell>", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n)[2:]\n    \n    count = 0\n    \n    for c in binary:\n\
    \        if c == '1':\n            count += 1\n    \n    if count == 0:\n    \
    \    return -1\n    \n    decimal = n // m\n    \n    if decimal >= 5:\n     \
    \   decimal = decimal // 5\n    \n    decimal = decimal * 5 + count\n    \n  \
    \  decimal = decimal.to_bytes(1, byteorder='big')\n    \n    return bin(decimal)[2:]\n",
  "    if n > m:\n        return -1\n    \n    binary = bin(n + (m - n) % 2)[2:]\n\
    \    \n    if len(binary) < len(str(m)):\n        binary = binary + ('0' * (len(str(m))\
    \ - len(binary)))\n    \n    return int(binary, 2)\n", "    if n > m:\n      \
    \  return -1\n    \n    binary = bin(n + (m - n))[2:]\n    \n    if len(binary)\
    \ < len(str(n)):\n        binary = binary + '0' * (len(str(n)) - len(binary))\n\
    \    \n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n\
    \    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n    \n    if binary.count('1')\
    \ == n:\n        return int(binary, 2)\n    else:\n        return -1\n", "   \
    \ if n < m:\n        return -1\n    \n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < len(str(m)):\n        binary = binary + '0' * (len(str(m))\
    \ - len(binary))\n    \n    return binary\n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n)[2:]\n    \n    if int(binary) > int(bin(m)[2:]):\n\
    \        binary = binary[::-1]\n    \n    binary = bin(int(binary) + int(bin(m)[2:]))[2:]\n\
    \    \n    if int(binary) > int(bin(m)[2:]):\n        binary = binary[::-1]\n\
    \    \n    return int(binary)\n", "    if n > m:\n        return -1\n    \n  \
    \  binary = bin(n + (m - n))[2:]\n    \n    return int(binary, 2)\n", "    \n\
    \    if n < m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n    return\
    \ bin(avg)[2:]\n", "    if n > m:\n        return -1\n    \n    binary = bin(n\
    \ + (m - n) % m)[2:]\n    \n    return int(binary, 2)\n", "    \n    if n < m:\n\
    \        return -1\n    \n    avg = n // m\n    \n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < len(str(m)):\n        binary = binary + '0' * (len(str(m))\
    \ - len(binary))\n    \n    return binary\n", "    if n >= m:\n        return\
    \ -1\n    \n    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n    \n    if\
    \ len(binary) < len(str(avg)):\n        binary = binary + ('0' * (len(str(avg))\
    \ - len(binary)))\n    \n    return binary\n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n + (m - n) % 2)[2:]\n    \n    if len(binary) <\
    \ len(str(m)):\n        binary = binary + ('0' * (len(str(m)) - len(binary)))\n\
    \    \n    return int(binary, 2)\n", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if n > m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n\
    \    \n    if int(binary[0]) == 1:\n        binary = binary[1:]\n    \n    return\
    \ int(binary)\n", "    if n >= m:\n        return -1\n    \n    count = 0\n  \
    \  sum = 0\n    while n <= m:\n        sum += n\n        count += 1\n        n\
    \ += 1\n    \n    return f'{sum:b}' if count > 0 else -1\n", "    if n > m:\n\
    \        return -1\n    \n    binary = bin(m)[2:]\n    \n    binary = bin(n).replace('0b','')\n\
    \    \n    binary = bin(int(binary) + int(binary))[2:]\n    \n    binary = bin(int(binary)\
    \ + int(binary))[2:]\n    \n    binary = bin(int(binary) + int(binary))[2:]\n\
    \    \n    binary = bin(int(binary) + int(binary))[2:]\n    \n    binary = bin(int(binary)\
    \ + int(binary))[2:]\n    \n    binary = bin(int(binary) + int(binary))[2:]\n\
    \    \n    binary = bin(int(binary) + int(binary))[2:]\n    \n    binary = bin(int(binary)\
    \ + int(binary))[2:]\n    \n    binary = bin(int(binary) + int(binary))[2:]\n\
    \    \n    binary = bin(int(binary) + int(binary))[2:]\n    \n    binary = bin(int(binary)\
    \ + int(binary))[2:]\n    \n    binary = bin(int(binary) + int(binary))[2:]\n\
    \    \n    binary = bin(int(binary) + int(binary))[2:]\n    \n    binary = bin(int(binary)\
    \ + int(binary))[2:]\n    \n    binary = bin(int(binary) + int(binary))[2:]\n\
    \    \n    binary = bin(int(binary) + int(binary))[2:]\n    \n    binary = bin(int(binary)\
    \ + int(binary))[2:]\n    \n    binary = bin(int(binary) + int(binary))[2:]\n\
    \    \n    binary = bin(int(binary) + int(binary))[2:]\n    \n    binary = bin(int(binary)\
    \ + int(binary))[2:]\n    \n    binary = bin(int(binary) + int(binary))[2:]\n\
    \    \n    binary = bin(int(binary) + int(binary))[2:]\n    \n    binary = bin(int(binary)\
    \ + int(binary))[2:]\n    \n    binary = bin(int(binary) + int(binary))[2:]\n\
    \    \n    binary = bin(int(binary) + int(binary))[2:]\n    \n    binary = bin(int(binary)\
    \ + int(binary))[2:]\n    \n    binary = bin(int(binary) + int(binary))[2:]\n\
    \    \n    binary = bin(int(binary) + int(binary))[2:]\n    \n    binary = bin(int(binary)\
    \ + int(binary))[2:]\n    \n    binary = bin(int(binary) + int(binary))[2:]\n\
    \    \n    binary = bin(int(binary) + int(binary))[2:]\n    \n    binary = bin(int(binary)\
    \ + int(binary))[2:]\n    ", "    if n > m:\n        return -1\n    \n    binary\
    \ = bin(m)[2:]\n    \n    count = 0\n    \n    while len(binary) < n:\n      \
    \  binary += \"0\"\n    \n    while len(binary) > n:\n        binary = binary[:-1]\n\
    \    \n    count += len(binary) - n\n    \n    return f\"{count:0{n}b}\"\n", " \
    \   if n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n   \
    \ binary = binary.zfill(len(binary))\n    \n    binary = binary.lstrip('0b')\n\
    \    \n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n\
    \    binary = bin(n + (m - n) % m)[2:]\n    \n    if int(binary[0]) == '1':\n\
    \        return int(binary)\n    else:\n        return -1\n", "    if n > m:\n\
    \        return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n    \n    if\
    \ int(binary[0]) == 1:\n        binary = binary[1:]\n    \n    return binary\n",
  "    \n    if n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n\
    \    if len(binary) < len(str(m)):\n        binary = binary + '0' * (len(str(m)-len(binary)))\n\
    \    \n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n\
    \    binary = bin(n)[2:]\n    \n    if m == n:\n        return binary\n    \n\
    \    binary = binary[:len(binary) - len(str(m))] + str(m)\n    \n    return binary\n",
  "    \n    if n >= m:\n        return -1\n    \n    avg = n + (m - n) // 2\n   \
    \ \n    return bin(avg)[2:]\n", "    \n    if n >= m:\n        return -1\n   \
    \ \n    avg = n + (m - n) // 2\n    \n    return bin(avg)[2:]\n", "    \n    if\
    \ n >= m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n    binary =\
    \ bin(avg)[2:]\n    \n    if len(binary) < len(str(m)):\n        binary = binary\
    \ + ('0' * (len(str(m)) - len(binary)))\n    \n    return binary\n", "    if n\
    \ > m:\n        return -1\n    \n    binary = bin(m)[2:]\n    \n    count = 0\n\
    \    \n    for digit in binary:\n        if digit == '1':\n            count +=\
    \ 1\n    \n    if count == 0:\n        return -1\n    \n    rounded_avg = (n //\
    \ count) + m // count\n    \n    return bin(rounded_avg)[2:]\n", "    if n >=\
    \ m:\n        return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n    \n \
    \   decimal = int(binary)\n    \n    return str(decimal)\n", "    if n >= m:\n\
    \        return -1\n    \n    binary = bin(n)[2:]\n    \n    count = 0\n    \n\
    \    while len(binary) < m:\n        binary += '0'\n        count += 1\n    \n\
    \    binary = binary[:m]\n    \n    binary = binary.zfill(m)\n    \n    return\
    \ int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n    avg = n + (m\
    \ - n) // 2\n    binary = bin(avg)[2:]\n    \n    if binary.count('1') == m:\n\
    \        return int(binary, 2)\n    else:\n        return -1\n", "    if n > m:\n\
    \        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    if len(binary)\
    \ < len(str(n+m)):\n        binary = binary + '0' * (len(str(n+m)) - len(binary))\n\
    \    \n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n\
    \    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n    \n    if int(binary[0])\
    \ == 1:\n        return binary\n    else:\n        return -1\n", "    \n    if\
    \ n > m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n    if len(binary)\
    \ < len(str(n)):\n        binary = binary + ('0' * (len(str(m)) - len(binary)))\n\
    \    \n    return int(binary, 2)\n", "    \n    if n >= m:\n        return -1\n\
    \    \n    binary = bin(n+m)[2:]\n    \n    binary = binary.zfill(len(binary)//2)\n\
    \    \n    return int(binary, 2)\n", "    if n < m:\n        return -1\n    \n\
    \    avg = n // m\n    \n    if n % m == 0:\n        return bin(avg)[2:]\n   \
    \ \n    return bin(avg)[2:] + str(n % m)\n", "    if n >= m:\n        return -1\n\
    \    \n    binary = bin(n+m)[2:]\n    \n    decimal = int(binary)\n    \n    decimal\
    \ = decimal // 2 if decimal % 2 == 0 else decimal // 2 + 1\n    \n    binary =\
    \ bin(decimal)[2:]\n    \n    binary = binary.zfill(m)\n    \n    return binary\n",
  "    \n    if n < m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n  \
    \  binary = bin(avg)[2:]\n    \n    if len(binary) < len(str(m)):\n        binary\
    \ = binary + ('0' * (len(str(m)) - len(binary)))\n    \n    return binary\n",
  "    if n > m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n   \
    \ if len(binary) < len(str(n)):\n        binary = binary + '0' * (len(str(n))\
    \ - len(binary))\n    \n    return int(binary, 2)\n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    if n >= m:\n        return -1\n \
    \   \n    avg = n + (m // 2)\n    \n    binary = bin(avg)[2:]\n    \n    if len(binary)\
    \ < len(str(avg)):\n        binary = binary + '0' * (len(str(avg)) - len(binary))\n\
    \    \n    return binary\n", "    if n > m:\n        return -1\n    \n    avg\
    \ = n + (m // 2)\n    binary = bin(avg)[2:]\n    \n    if int(binary[0]) == 1:\n\
    \        binary = binary[1:]\n    \n    return binary\n", "    if n >= m:\n  \
    \      return -1\n    else:\n        return bin(n + m - 1).replace('0b', '')\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n) * 0.5)[2:]\n\
    \    \n    binary = '0b'+binary\n    \n    return int(binary, 2)\n", "    if n\
    \ >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    decimal\
    \ = int(binary)\n    \n    if decimal >= len(binary):\n        return -1\n   \
    \ \n    return binary[:decimal]\n", "    \n    if n > m:\n        return -1\n\
    \    \n    avg = n + (m // 2)\n    \n    binary = bin(avg)[2:]\n    \n    if len(binary)\
    \ < len(str(avg)):\n        binary = binary + '0' * (len(str(avg)) - len(binary))\n\
    \    \n    return binary\n\n", "    if n > m:\n        return -1\n    \n    binary\
    \ = bin(m)[2:]\n    \n    decimal = int(binary)\n    \n    decimal = decimal +\
    \ int(binary[-decimal:])\n    \n    decimal = decimal // 2 + int(binary[-decimal:])\n\
    \    \n    decimal = decimal // 2 + int(binary[-decimal:])\n    \n    decimal\
    \ = decimal // 2 + int(binary[-decimal:])\n    \n    decimal = decimal // 2 +\
    \ int(binary[-decimal:])\n    \n    decimal = decimal // 2 + int(binary[-decimal:])\n\
    \    \n    decimal = decimal // 2 + int(binary[-decimal:])\n    \n    decimal\
    \ = decimal // 2 + int(binary[-decimal:])\n    \n    decimal = decimal // 2 +\
    \ int(binary[-decimal:])\n    \n    decimal = decimal // 2 + int(binary[-decimal:])\n\
    \    \n    decimal = decimal // 2 + int(binary[-decimal:])\n    \n    decimal\
    \ = decimal // 2 + int(binary[-decimal:])\n    \n    decimal = decimal // 2 +\
    \ int(binary[-decimal:])\n    \n    decimal = decimal // 2 + int(binary[-decimal:])\n\
    \    \n    decimal = decimal // 2 + int(binary[-decimal:])\n    \n    decimal\
    \ = decimal // 2 + int(binary[-decimal:])\n    \n    decimal = decimal // 2 +\
    \ int(binary[-decimal:])\n    \n    decimal = decimal // 2 + int(binary[-decimal:])\n\
    \    \n    decimal = decimal // 2 + int(binary[-decimal:])\n    \n    decimal\
    \ = decimal // 2 + int(binary[-decimal:])\n    \n    decimal = decimal // 2 +\
    \ int(binary[-decimal:])\n    \n    decimal = decimal // 2 + int(binary[-decimal:])\n\
    \    \n    decimal = decimal // 2 + int(binary[-decimal:])\n    \n    decimal\
    \ = decimal // 2 + int(binary[-decimal:])\n    \n    decimal = decimal // 2 +\
    \ int(binary[-decimal:])\n    \n    decimal = decimal // 2 + int(binary[-decimal:])\n\
    \    \n    decimal = decimal // 2 + int(binary[-decimal:])\n    \n    decimal\
    \ = decimal // 2 + int(binary[-decimal:])\n    \n    decimal = decimal // 2 +\
    \ int(binary[-decimal:])\n    \n    decimal = decimal // 2 + int(binary[-decimal:])\n\
    \    \n    decimal = decimal // 2 + int(binary[-decimal:])\n    \n    decimal\
    \ = decimal // 2 + int(binary[-decimal:])\n    \n    decimal = decimal // 2 +\
    \ int(binary[-decimal:])\n    \n    decimal = decimal // 2 + int(binary[-decimal:])\n\
    \    \n    decimal = decimal // 2 + int(binary[-", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if n < m:\n        return -1\n    \n  \
    \  avg = n + (m // 2)\n    binary = bin(avg)[2:]\n    \n    if int(binary[0])\
    \ < len(binary) - 1:\n        binary = binary[:1] + binary[1:]\n    \n    return\
    \ binary\n", "    \n    if n >= m:\n        return -1\n    \n    binary = bin(n\
    \ + m)[2:]\n    \n    length = len(binary)\n    \n    if length == 1:\n      \
    \  return binary\n    \n    if length == 2:\n        if binary[0] == '1':\n  \
    \          return '0b' + binary[1]\n        else:\n            return '0b' + binary[0]\n\
    \    \n    if length == 3:\n        if binary[0] == '1':\n            return '0b'\
    \ + binary[1]\n        elif binary[1] == '1':\n            return '0b' + binary[2]\n\
    \        else:\n            return '0b' + binary[0]\n    \n    if length == 4:\n\
    \        if binary[0] == '1':\n            return '0b' + binary[1]\n        elif\
    \ binary[1] == '1':\n            return '0b' + binary[2]\n        elif binary[2]\
    \ == '1':\n            return '0b' + binary[3]\n        else:\n            return\
    \ '0b' + binary[0]\n    \n    if length == 5:\n        if binary[0] == '1':\n\
    \            return '0b' + binary[1]\n        elif binary[1] == '1':\n       \
    \     return '0b' + binary[2]\n        elif binary[2] == '1':\n            return\
    \ '0b' + binary[3]\n        elif binary[3] == '1':\n            return '0b' +\
    \ binary[4]\n        else:\n            return '0b' + binary[0]\n    \n    if\
    \ length == 6:\n        if binary[0] == '1':\n            return '0b' + binary[1]\n\
    \        elif binary[1] == '1':\n            return '0b' + binary[2]\n       \
    \ elif binary[2] == '1':\n            return '0b' + binary[3]\n        elif binary[3]\
    \ == '1':\n            return '0b' + binary[4]\n        elif binary[4] == '1':\n\
    \            return '0b' + binary[5]\n        else:\n            return '0b' +\
    \ binary[0]\n    \n    if length == 7:\n        if binary[0] == '1':\n       \
    \     return '0b' + binary[1]\n        elif binary[1] == '1':\n            return\
    \ '0b' + binary[2]\n        elif binary[2] == '1':\n            return '0b' +\
    \ binary[3]\n        elif binary[3] == '1':\n            return '0b' + binary[4]\n\
    \        elif binary[4] == '1':\n            return '0b' + binary[5]\n       \
    \ elif binary[5] == '1':\n            return '0b' + binary[6]\n        else:\n\
    \            return '0b' + binary[0]\n    \n    if length == 8:\n        if binary[0]\
    \ == '1':\n            return '0b' + binary[1]\n        elif binary[1] == '1':\n\
    \            return '0b' + binary[2]\n        elif binary[2] == '1':\n       \
    \     return '0b' + binary[3]\n        elif binary[3] == '1':\n            return\
    \ '0b' + binary[4]\n        elif binary[4] == '1':\n            return '0b' +\
    \ binary[5]\n        elif binary[5] == '1':\n            return '0b' + binary[6]\n\
    \        elif binary[6] == '1':\n            return '0b' + binary[7]\n       \
    \ else:\n            return '0b' + binary[0]\n    \n    if length == 9:\n    \
    \    if binary[0] == '1':\n            return '0b' + binary[1]\n        elif binary[1]\
    \ == '1':\n            return '0b' + binary[2]\n        elif binary[2] == '1':\n\
    \            return '0b", "    if n >= m:\n        return -1\n    \n    binary\
    \ = bin(n+m)[2:]\n    \n    decimal = binary.count('1')\n    \n    if decimal\
    \ % 2 == 0:\n        decimal = decimal - 1\n    \n    decimal = decimal // 2\n\
    \    \n    decimal = decimal + decimal\n    \n    decimal = f'{decimal:b}'\n \
    \   \n    return decimal\n", "    if n >= m:\n        return -1\n    \n    avg\
    \ = n + (m - n) // 2\n    binary = bin(avg)[2:]\n    \n    if len(binary) < len(str(avg)):\n\
    \        binary += '0' * (len(str(avg)) - len(binary))\n    \n    return binary\n",
  "    if n > m:\n        return -1\n    \n    binary = bin(n + (m - n) // 2)[2:]\n\
    \    \n    binary = binary.zfill(m)\n    \n    return int(binary, 2)\n", "   \
    \ if n < m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    if\
    \ int(binary[0]) == 1:\n        binary = binary[1:]\n    \n    return int(binary)\n",
  "    if n < m:\n        return -1\n    \n    avg = n + (m - n) // 2\n    binary\
    \ = bin(avg)[2:]\n    \n    binary = '0' * (len(binary) - len(bin(avg))) + binary\n\
    \    \n    return int(binary, 2)\n", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if n > m:\n        return -1\n    \n    binary = bin(n\
    \ + (m - n) % m)[2:]\n    \n    return int(binary, 2)\n", "    if n >= m:\n  \
    \      return -1\n    \n    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n\
    \    \n    return int(binary, 2)\n\n", "    if n > m:\n        return -1\n   \
    \ \n    binary = bin(n + (m - n) * 0.5)[2:]\n    \n    if len(binary) < 2:\n \
    \       binary = '0'\n    \n    return binary\n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n + m)[2:]\n    \n    if binary.startswith('0b'):\n\
    \        binary = binary[2:]\n    \n    return int(binary, 2)\n", "    if n >=\
    \ m:\n        return -1\n    \n    binary = bin(n).replace('b', '')\n    binary\
    \ = binary.lstrip('0b')\n    \n    binary = int(binary, 2)\n    \n    binary =\
    \ binary + (n - m)\n    \n    binary = binary.zfill(m)\n    \n    return binary\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n\
    \    \n    if binary.startswith('0b'):\n        binary = binary[2:]\n    \n  \
    \  return int(binary, 2)\n\n", "    if n > m:\n        return -1\n    \n    binary\
    \ = bin(n + (m - n))[2:]\n    \n    if binary.startswith('0b'):\n        binary\
    \ = binary[2:]\n    \n    if int(binary) > 7:\n        return -1\n    \n    return\
    \ int(binary)\n", "    if n > m:\n        return -1\n    \n    avg = n + (m -\
    \ n) / 2\n    binary = bin(avg)[2:]\n    \n    if int(binary[0]) == 1:\n     \
    \   binary = binary[1:]\n    \n    return binary\n\n", "    if n >= m:\n     \
    \   return -1\n    \n    binary = bin(n + m)[2:]\n    \n    length = len(binary)\n\
    \    \n    if length == 1:\n        return binary\n    \n    if length == 2:\n\
    \        if binary[0] == '1':\n            return binary\n        else:\n    \
    \        return '0b' + binary\n    \n    if length == 3:\n        if binary[0]\
    \ == '1':\n            if binary[1] == '1':\n                return binary\n \
    \           else:\n                return '0b' + binary\n        else:\n     \
    \       return '0b' + binary\n    \n    if length == 4:\n        if binary[0]\
    \ == '1':\n            if binary[1] == '1':\n                if binary[2] == '1':\n\
    \                    return binary\n                else:\n                  \
    \  return '0b' + binary\n            else:\n                return '0b' + binary\n\
    \        else:\n            return '0b' + binary\n    \n    if length == 5:\n\
    \        if binary[0] == '1':\n            if binary[1] == '1':\n            \
    \    if binary[2] == '1':\n                    if binary[3] == '1':\n        \
    \                return binary\n                    else:\n                  \
    \      return '0b' + binary\n                else:\n                    return\
    \ '0b' + binary\n            else:\n                return '0b' + binary\n   \
    \     else:\n            return '0b' + binary\n    \n    if length == 6:\n   \
    \     if binary[0] == '1':\n            if binary[1] == '1':\n               \
    \ if binary[2] == '1':\n                    if binary[3] == '1':\n           \
    \             if binary[4] == '1':\n                            return binary\n\
    \                        else:\n                            return '0b' + binary\n\
    \                    else:\n                        return '0b' + binary\n   \
    \             else:\n                    return '0b' + binary\n            else:\n\
    \                return '0b' + binary\n        else:\n            return '0b'\
    \ + binary\n    \n    if length == 7:\n        if binary[0] == '1':\n        \
    \    if binary[1] == '1':\n                if binary[2] == '1':\n            \
    \        if binary[3] == '1':\n                        if binary[4] == '1':\n\
    \                            if binary[5] == '1':\n                          \
    \      return binary\n                            else:\n                    \
    \            return '0b' + binary\n                        else:\n           \
    \                 return '0b' + binary\n                    else:\n          \
    \              return '0b' + binary\n                else:\n                 \
    \   return '0b' + binary\n            else:\n                return '0b' + binary\n\
    \        else:\n            return '0b' + binary\n    \n    if length == 8:\n\
    \        if binary[0] == '1':\n            if binary[1] == '1':\n            \
    \    if binary[2] == '1':\n                    if binary[3] == '1':\n        \
    \                if binary[4] == '1':\n                            if binary[5]\
    \ == '1':\n                                if binary[6] == '1':\n            \
    \                        return binary\n                                else:\n\
    \                                    return '0b' + binary\n                  \
    \          else:\n                                return '0b' + binary\n     \
    \                   else:\n                            return '0b' + binary\n\
    \                    else:\n                        return '0b' + binary\n   \
    \             else:\n                    return '0b' + binary\n            else:\n\
    \                return '0b' + binary\n        else:\n            return '0b'\
    \ + binary\n    \n    if length == 9:\n        if binary[0] == '1':\n        \
    \    if binary[1] == '1':\n                if binary[2] == '1':\n            \
    \        if binary[3] == '1':", "    if n >= m:\n        return -1\n    \n   \
    \ binary = bin(m)[2:]\n    \n    decimal = int(binary)\n    \n    decimal = decimal\
    \ + (n - m) // 2\n    \n    decimal = decimal + (n - m) % 2\n    \n    decimal\
    \ = decimal * 2\n    \n    decimal = decimal.zfill(m)\n    \n    return decimal\n",
  "    if n > m:\n        return -1\n    \n    binary = bin(n + (m - n) % 2)[2:]\n\
    \    \n    if int(binary) > len(binary):\n        return -1\n    \n    return\
    \ binary\n", "    \n    if n < m:\n        return -1\n    \n    avg = n + (m -\
    \ n) // 2\n    \n    return bin(avg)[2:]\n", "    if n >= m:\n        return -1\n\
    \    \n    binary = bin(n)[2:]\n    \n    decimal = n - m\n    \n    decimal =\
    \ decimal * 2\n    \n    decimal = decimal + decimal\n    \n    decimal = decimal\
    \ // 2\n    \n    decimal = decimal + decimal\n    \n    decimal = decimal //\
    \ 2\n    \n    decimal = decimal + decimal\n    \n    decimal = decimal // 2\n\
    \    \n    decimal = decimal + decimal\n    \n    decimal = decimal // 2\n   \
    \ \n    decimal = decimal + decimal\n    \n    decimal = decimal // 2\n    \n\
    \    decimal = decimal + decimal\n    \n    decimal = decimal // 2\n    \n   \
    \ decimal = decimal + decimal\n    \n    decimal = decimal // 2\n    \n    decimal\
    \ = decimal + decimal\n    \n    decimal = decimal // 2\n    \n    decimal = decimal\
    \ + decimal\n    \n    decimal = decimal // 2\n    \n    decimal = decimal + decimal\n\
    \    \n    decimal = decimal // 2\n    \n    decimal = decimal + decimal\n   \
    \ \n    decimal = decimal // 2\n    \n    decimal = decimal + decimal\n    \n\
    \    decimal = decimal // 2\n    \n    decimal = decimal + decimal\n    \n   \
    \ decimal = decimal // 2\n    \n    decimal = decimal + decimal\n    \n    decimal\
    \ = decimal // 2\n    \n    decimal = decimal + decimal\n    \n    decimal = decimal\
    \ // 2\n    \n    decimal = decimal + decimal\n    \n    decimal = decimal //\
    \ 2\n    \n    decimal = decimal + decimal\n    \n    decimal = decimal // 2\n\
    \    \n    decimal = decimal + decimal\n    \n    decimal = decimal // 2\n   \
    \ \n    decimal = decimal + decimal\n    \n    decimal = decimal // 2\n    \n\
    \    decimal = decimal + decimal\n    \n    decimal = decimal // 2\n    \n   \
    \ decimal = decimal + decimal\n    \n    decimal = decimal // 2\n    \n    decimal\
    \ = decimal + decimal\n    \n    decimal = decimal // 2\n    \n    decimal = decimal\
    \ + decimal\n    \n    decimal = decimal // 2\n    \n    decimal = decimal + decimal\n\
    \    \n    decimal = decimal // 2\n    \n    decimal = decimal + decimal\n   \
    \ \n    decimal = decimal // 2\n    \n    decimal = decimal + decimal\n    \n\
    \    decimal = decimal // 2\n    \n    decimal = decimal + decimal\n    \n   \
    \ decimal = decimal // 2\n    \n    decimal = decimal + decimal\n    \n    decimal\
    \ = decimal // 2\n    ", "    if n > m:\n        return -1\n    \n    binary =\
    \ bin(n + (m - n) * 0.5)[2:]\n    \n    if len(binary) < 2:\n        binary =\
    \ '0'\n    \n    return binary\n", "    if n < m:\n        return -1\n    \n \
    \   binary = bin(n+m)[2:]\n    \n    binary = '0' * (len(binary)-len(bin(n+m)%2))\
    \ + binary\n    \n    return int(binary, 2)\n", "    if n < m:\n        return\
    \ -1\n    \n    avg = n // m\n    \n    if n % m == 0:\n        return bin(avg)[2:]\n\
    \    else:\n        return bin(avg)[2:] + bin(n % m)[2:]\n", "    if n > m:\n\
    \        return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n    \n    return\
    \ int(binary)\n", "    if n > m:\n        return -1\n    \n    binary = bin(m)[2:]\n\
    \    \n    decimal = n - m\n    \n    decimal = decimal // len(binary)\n    \n\
    \    decimal = decimal % len(binary)\n    \n    decimal = decimal + len(binary)\n\
    \    \n    decimal = decimal * 2\n    \n    decimal = decimal.zfill(len(binary))\n\
    \    \n    decimal = int(decimal)\n    \n    decimal = binary + decimal\n    \n\
    \    return decimal\n", "    \n    if n >= m:\n        return -1\n    \n    binary\
    \ = bin(n+m)[2:]\n    \n    if binary.startswith('0b'):\n        binary = binary[2:]\n\
    \    \n    binary = int(binary, 2)\n    \n    return binary\n</cell>\n<cell>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nProblem 3\nWrite a function that takes a positive\
    \ integer and returns the number of leading zeroes in that number.\n\n\n</text>\n\
    <cell>", "    if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n))[2:]\n\
    \    \n    binary = binary.zfill(m)\n    \n    return int(binary, 2)\n", "   \
    \ if n >= m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n   \
    \ if int(binary[0]) == 0:\n        binary = '0' + binary\n    \n    return binary\n",
  "    \n    if n >= m:\n        return -1\n    \n    avg = n + (m - n) // 2\n   \
    \ \n    binary = bin(avg)[2:]\n    \n    if len(binary) < len(str(avg)):\n   \
    \     binary = binary + '0' * (len(str(avg)) - len(binary))\n    \n    return\
    \ binary\n", "    if n >= m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n\
    \    \n    decimal = int(binary)\n    \n    decimal = decimal // 10\n    \n  \
    \  decimal = decimal % 10\n    \n    binary = bin(decimal)[2:]\n    \n    binary\
    \ = binary.zfill(8)\n    \n    return binary\n", "    if n > m:\n        return\
    \ -1\n    \n    binary = bin(n + (m - n) * 0.5)[2:]\n    \n    if len(binary)\
    \ < 2:\n        return -1\n    \n    return binary\n", "    \n    if n >= m:\n\
    \        return -1\n    \n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < n:\n        binary = binary + ('0' * (n - len(binary)))\n\
    \    \n    return binary\n\n", "    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if n >= m:\n        return -1\n    else:\n        return\
    \ bin(n + (m - n) // 2)[2:]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
