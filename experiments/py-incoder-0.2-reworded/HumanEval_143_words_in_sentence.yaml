name: HumanEval_143_words_in_sentence
language: py
prompt: "def words_in_sentence(sentence: str) -> str:\n    \"\"\"\n    You are given\
  \ a string representing a sentence,\n    the sentence contains some words separated\
  \ by a space,\n    and you have to return a string that contains the words from\
  \ the original sentence,\n    whose lengths are prime numbers,\n    the order of\
  \ the words in the new string should be the same as the original one.\n\n    Example\
  \ 1:\n    >>> words_in_sentence('This is a test')\n    'is'\n\n    Example 2:\n\
  \    >>> words_in_sentence('lets go for swimming')\n    'go for'\n    \n    Constraints:\n\
  \        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('This is a test') == 'is'\n  \
  \  assert candidate('lets go for swimming') == 'go for'\n    assert candidate('there\
  \ is no place available here') == 'there is no place'\n    assert candidate('Hi\
  \ I am Hussein') == 'Hi am Hussein'\n    assert candidate('go for it') == 'go for\
  \ it'\n    assert candidate('here') == ''\n    assert candidate('here is') == 'is'\n\
  \ndef test_check():\n    check(words_in_sentence)\n\ntest_check()\n"
completions: ["    \n    # Your code here\n    \n    return \"\"\n</cell>\n<cell>",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words_str = ' '.join(prime_words)\n    \n    return prime_words_str\n\
    </cell>\n<cell>", "    words = sentence.split()\n    prime_words = []\n    for\
    \ word in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n\
    \    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    primes = []\n    \n    for word in words:\n        prime = True\n \
    \       for char in word:\n            if char.isalpha() == False:\n         \
    \       prime = False\n                break\n        if prime == True:\n    \
    \        primes.append(len(word))\n    \n    primes.sort()\n    \n    prime_string\
    \ = ' '.join(words[primes[0]:primes[-1]])\n    \n    return prime_string\n\n",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    words = sentence.split()\n    prime_words = []\n    for\
    \ word in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n\
    \    prime_words = [str(x) for x in prime_words]\n    return \" \".join(prime_words)\n\
    \n", "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n \
    \   for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n",
  "    words = sentence.split()\n    prime_words = []\n    for word in words:\n  \
    \      prime_words.append(len(word))\n    prime_words.sort()\n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n", "   \
    \ words = sentence.split()\n    words_in_sentence = []\n    for word in words:\n\
    \        words_in_sentence.append(word)\n    \n    prime_words = []\n    for word\
    \ in words_in_sentence:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        prime_words.append(len(word))\n  \
    \  \n    prime_words.sort()\n    \n    return ' '.join(prime_words)\n\n", "  \
    \  \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_word", "    words = sentence.split()\n    prime_words = []\n\
    \    for word in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n\
    \    return ' '.join(prime_words)\n</cell>\n<text>\nLet's test our function\n\n\
    \n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nNow let's write a function that takes a\
    \ sentence and returns a list of prime numbers in that sentence.\n\n\n</text>\n\
    <cell>", "    \n    # Your code here\n    \n    return ''\n", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n", "   \
    \ \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        \n        prime_words.append(len(word))\n        \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    prime_words\
    \ = [x for x in prime_words if x != '']\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <cell>", "    \n    words = sentence.split()\n    \n    prime_words = []\n   \
    \ \n    for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    \n", "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n \
    \   for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    prime_words\
    \ = list(set(prime_words))\n    \n    return ' '.join(prime_words)\n\n", "   \
    \ \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the cell\
    \ below to test your code:\n\n\n</text>\n<cell>", "    words = sentence.split()\n\
    \    words_in_sentence = []\n    for word in words:\n        words_in_sentence.append(word)\n\
    \    \n    prime_numbers = []\n    for word in words_in_sentence:\n        prime_numbers.append(len(word))\n\
    \    \n    prime_numbers = sorted(prime_numbers)\n    \n    prime_numbers_string\
    \ = ''\n    for number in prime_numbers:\n        prime_numbers_string += words_in_sentence[prime_numbers.index(number)]\
    \ + ' '\n    \n    return prime_numbers_string\n", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\nLet's test our function\n\n\n</text>\n\
    <cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nGreat! Now let's use our function in an\
    \ exercise.\n\n\n</text>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns a string with all the words from the original string separated by\
    \ a space.\n\nExample 1:\n>>> words_in_sentence('This is a test')\n'This is a\
    \ test'\n\nExample 2:\n>>> words_in_sentence('lets go for swimming')\n'lets go\
    \ for swimming'\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence\
    \ contains only letters\n    * The order of the words in the new string should\
    \ be the same as the original one.\n    \n    Note: don't forget to include spaces\
    \ between the words.\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    \n    # Your code here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    return ' '.join(prime_words)\n\n", " \
    \   \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the following\
    \ cell to test your code:\n\n\n</text>\n<cell>", "    \n    # Your code here\n\
    \    \n    return \"\"\n", "    words = sentence.split()\n    prime_words = []\n\
    \    for word in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n\
    \    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    return ' '.join(prime_words)\n</cell>\n\
    <cell>", "    \n    words = sentence.split()\n    \n    prime_words = []\n   \
    \ \n    for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n\n", "    words = sentence.split()\n\
    \    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    prime_words = list(map(str, prime_words))\n    return\
    \ ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_str = ' '.join(prime_words)\n\
    \    \n    return prime_words_str\n\n", "    \n    # Your code here\n    \n  \
    \  return ''.join([x for x in sentence if x.isalpha()])\n\n", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<text>\nLet's test our function\n\
    \n\n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nNow let's write a function which takes a\
    \ sentence and returns the number of words in the sentence that are prime numbers.\n\
    \n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nImplement the function prime_words_in_sentence() below so that it returns\
    \ the prime words in the sentence in lexicographical order.\n\n\n</text>\n<cell>",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<text>\nLet's test our function\n\
    \n\n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nNow let's write a function that takes a\
    \ sentence and returns the number of words in the sentence that are prime numbers.\n\
    \n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nTest your code\nRun the cell below to test your code.\n\nThe test code\
    \ uses a string that consists of two words 'let' and 'go' separated by a space.\n\
    \nThe test code will output an error if your function does not return a string.\n\
    \n\n</text>\n<cell>", "    words = sentence.split()\n    prime_words = []\n  \
    \  for word in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n\
    \    prime_words = list(map(str, prime_words))\n    return ' '.join(prime_words)\n\
    \n", "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n \
    \   for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<text>\nLet's test our function\n\n\n</text>\n<cell>\nwords_in_sentence('This\
    \ is a test')\n</cell>\n<cell>\nwords_in_sentence('lets go for swimming')\n</cell>\n\
    <text>\nGreat! Now let's write a function that takes a sentence and returns a\
    \ list of prime numbers less than or equal to the length of the sentence.\n\n\
    Example 1:\n>>> prime_numbers_in_sentence('This is a test')\n[2, 3, 5, 7]\n\n\
    Example 2:\n>>> prime_numbers_in_sentence('lets go for swimming')\n[2, 3, 5, 7,\
    \ 11, 13]\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains\
    \ only letters\n    * The output list should be sorted in ascending order\n  \
    \  \"\"\"\n    \n    words = sentence.split()\n    \n    prime_numbers = []\n\
    \    \n    for word in words:\n        prime_numbers.append(len(word))\n    \n\
    \    prime_numbers.sort()\n    \n    prime_numbers = list(map(int, prime_numbers))\n\
    \    \n    return prime_numbers\n</cell>\n<cell>\nprime_numbers_in_sentence('This\
    \ is a test')\n</cell>\n<cell>\nprime_numbers_in_sentence('lets go for swimming')\n\
    </cell>\n<text>\nGreat! Now let's write a function that takes a sentence and returns\
    \ a list of prime numbers less than or equal to the length of the sentence.\n\n\
    Example 1:\n>>> prime_numbers_in_sentence('This is a test')\n[2, 3, 5, 7]\n\n\
    Example 2:\n>>> prime_numbers_in_sentence('lets go for swimming')\n[2, 3, 5, 7,\
    \ 11, 13]\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains\
    \ only letters\n    * The output list should be sorted in ascending order\n  \
    \  \"\"\"\n    \n    words = sentence.split()\n    \n    prime_numbers = []\n\
    \    \n    for word in words:\n        prime_numbers.append(len(word))\n    \n\
    \    prime_numbers.sort()\n    \n    prime_numbers = list(map(int, prime_numbers))\n\
    \    \n    return prime_numbers\n</cell>\n<cell>\nprime_numbers_in_sentence('This\
    \ is a test')\n</cell>\n<cell>\nprime_numbers_in_sentence('lets go for swimming')\n\
    </cell>\n<text>\nGreat! Now let's write a function that takes a sentence and returns\
    \ a list of prime ", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    words =\
    \ sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   return ' '.join(prime_words)\n</cell>\n<text>\nLet's test our function\n\n\
    \n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nNow let's use our function to solve the\
    \ problem of finding the longest word in a sentence.\n\n\n</text>\n<cell>", " \
    \   \n    # Your code here\n    \n    return ''\n", "    words = sentence.split()\n\
    \    words_in_sentence = []\n    for word in words:\n        words_in_sentence.append(word)\n\
    \    \n    prime_numbers = []\n    for word in words_in_sentence:\n        prime_numbers.append(len(word))\n\
    \    \n    prime_numbers = sorted(prime_numbers)\n    \n    prime_numbers_string\
    \ = ''\n    for number in prime_numbers:\n        prime_numbers_string += str(number)\
    \ + ' '\n    \n    return prime_numbers_string\n\n", "    \n    # Your code here\n\
    \    \n    return ''\n", "    \n    words = sentence.split()\n    \n    primes\
    \ = []\n    \n    for word in words:\n        prime = True\n        for char in\
    \ word:\n            if char.isalpha() == False:\n                prime = False\n\
    \                break\n        if prime == True:\n            primes.append(word)\n\
    \    \n    return ' '.join(primes)\n</cell>\n<text>\nLet's test our function\n\
    \n\n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nGreat! Now let's write a function that takes\
    \ a sentence and returns a list of all the words in the sentence with their lengths.\n\
    \n\n</text>\n<cell>", "    \n    words = sentence.split()\n    \n    primes =\
    \ []\n    \n    for word in words:\n        prime = True\n        \n        for\
    \ char in word:\n            if char.isalpha() == False:\n                prime\
    \ = False\n                break\n        \n        if prime == True:\n      \
    \      primes.append(word)\n    \n    return ' '.join(primes)\n</cell>\n<cell>",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n",
  "    \n    # Your code here\n    \n    return \"\"\n", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\nRun the following cell to test your code:\n\
    \n\n</text>\n<cell>\nsentence = 'This is a test'\nassert words_in_sentence(sentence)\
    \ == 'is'\nsentence = 'lets go for swimming'\nassert words_in_sentence(sentence)\
    \ == 'go for'\n</cell>\n<text>\nExercise 4\nThe function is_palindrome should\
    \ return True if the given word is a palindrome and False otherwise. For example,\
    \ words_in_sentence('racecar') should return True and words_in_sentence('racecars')\
    \ should return False.\n\nHint: You may want to use Python's string method called\
    \ reverse to solve this problem.\n\n\n</text>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return ''.join([i for i in sentence if i.isalpha()])\n</cell>\n\
    <cell>", "    \n    # Your code here\n    \n    return ''\n", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        prime_words.append(len(word))\n  \
    \  \n    prime_words.sort()\n    \n    return ' '.join(prime_words)\n</cell>\n\
    <text>\nLet's test our function\n\n\n</text>\n<cell>\nwords_in_sentence('This\
    \ is a test')\n</cell>\n<cell>\nwords_in_sentence('lets go for swimming')\n</cell>\n\
    <text>\nNow let's write a function which takes a sentence and returns a list of\
    \ words,\nand which removes all the punctuation marks and returns the list of\
    \ words.\n\n\n</text>\n<cell>", "    words = sentence.split()\n    prime_words\
    \ = []\n    for word in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n\
    \    prime_words = [str(x) for x in prime_words]\n    return ' '.join(prime_words)\n\
    \n", "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n \
    \   for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return ''\n", "    \n\
    \    # Your code here\n    \n    return \"\"\n", "    words = sentence.split()\n\
    \    words_in_sentence = []\n    for word in words:\n        words_in_sentence.append(word)\n\
    \    \n    prime_words = []\n    for word in words_in_sentence:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_in_sentence = []\n    for\
    \ word in prime_words:\n        prime_words_in_sentence.append(word)\n    \n \
    \   prime_words_in_sentence.sort()\n    \n    return ' '.join(prime_words_in_sentence)\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return ''.join((i for\
    \ i in sentence if i.isalpha()))\n", "    \n    words = sentence.split()\n   \
    \ \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = list(filter(None, prime_words))\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the following cell to test your code:\n\n\n</text>\n<cell>", "   \
    \ \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<text>\nLet's test our function\n\
    \n\n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of words in the string.\n\nExample 1:\n    >>>\
    \ count_words('This is a test')\n    2\n\n    Example 2:\n    >>> count_words('lets\
    \ go for swimming')\n    2\n    \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \"\"\"\n    \n    words\
    \ = sentence.split()\n    \n    return len(words)\n</cell>\n<text>\nLet's test\
    \ our function\n\n\n</text>\n<cell>\ncount_words('This is a test')\n</cell>\n\
    <cell>\ncount_words('lets go for swimming')\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns a string that contains the words\
    \ from the original sentence,\n    whose lengths are prime numbers,\n    the order\
    \ of the words in the new string should be the same as the original one.\n\nExample\
    \ 1:\n    >>> prime_words_in_sentence('This is a test')\n    'is this'\n\n   \
    \ Example 2:\n    >>> prime_words_in_sentence('lets go for swimming')\n    'go\
    \ for'\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        *\
    \ sentence contains only letters\n    \"\"\"\n    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    return ' '.join(prime_words)\n</cell>\n\
    <text>\nLet's test our function\n\n\n</text>\n<cell>\nprime_words_in_sentence('This\
    \ is a test')\n</cell>\n<cell>\nprime_words_in_sentence('lets go for swimming')\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ a string that contains the words from the original sentence,\n    whose lengths\
    \ are prime numbers,\n    the order of the words in the new string should be the\
    \ same as the original one.\n\nExample 1:\n    >>> prime_words_in_sentence('This\
    \ is a test')\n    'is this'\n\n    Example 2:\n    >>> prime_words_in_sentence('lets\
    \ go for swimming')\n    'go for'\n    \n    Constraints:\n        * ", "    \n\
    \    # Your code here\n    \n    return ''\n</cell>\n<text>\nRun the following\
    \ cell to test your code:\n\n\n</text>\n<cell>", "    \n    # write your code\
    \ here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n    \n\
    \    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    return\
    \ ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code here\n    \n\
    \    return \"\"\n</cell>\n<text>\nRun the following cell to test your code:\n\
    \n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n", " \
    \   \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for\
    \ word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    \n    # Your code here\n\
    \    \n    return \"\"\n", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n", "    words = sentence.split()\n  \
    \  prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    return ' '.join(prime_words)\n\n", "    \n    # write\
    \ your code here\n    \n    return \"\"\n</cell>\n<text>\nTest your code\nRun\
    \ the cell below to test your code.\n\nThe code cell below will turn 'Hello World!'\
    \ into 'Hello World!'.\nThe code cell below will turn 'Hello World!' into 'Hello\
    \ World!'.\n\n\n</text>\n<cell>", "    \n    words = sentence.split()\n    \n\
    \    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x\
    \ % 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_word", "    words = sentence.split()\n\
    \    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    \n    return ' '.join(prime_words)\n</cell>\n<cell>",
  "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<cell>", "    \n  \
    \  words = sentence.split()\n    \n    prime_words = []\n    \n    for word in\
    \ words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [x for x in prime_words\
    \ if x != 1]\n    \n    return ' '.join(prime_words)\n\n", "    \n    words =\
    \ sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = list(map(str, prime_words))\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    words = sentence.split()\n    prime_words = []\n    for\
    \ word in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n\
    \    prime_words = list(map(str, prime_words))\n    return ' '.join(prime_words)\n\
    </cell>\n<text>\nLet's test our function\n\n\n</text>\n<cell>\nwords_in_sentence('This\
    \ is a test')\n</cell>\n<cell>\nwords_in_sentence('lets go for swimming')\n</cell>\n\
    <text>\nGreat! Now let's write a function which takes a sentence and returns the\
    \ number of words in the sentence that are palindromes.\n\n\n</text>\n<cell>",
  "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the following\
    \ cell to test your code:\n\n\n</text>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    words = sentence.split()\n\
    \    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    prime_words = list(map(str, prime_words))\n    return\
    \ ' '.join(prime_words)\n\n", "    words = sentence.split()\n    words_in_sentence\
    \ = ' '.join(words)\n    prime_words = []\n    for word in words_in_sentence.split():\n\
    \        prime_words.append(prime_number(word))\n    prime_words.sort()\n    return\
    \ ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x\
    \ % 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 3 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 5 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 7 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 11 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 13 == 0, prime_words))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 17 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 19 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 23 == 0, prime_words))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 29 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 31 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 37 == 0, prime_words))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 41 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 43 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 47 == 0, prime_words))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 53 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 59 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 61 == 0, prime_word", "   \
    \ \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the following\
    \ cell to test your code:\n\n\n</text>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_string = ' '.join(prime_words)\n\
    \    \n    return prime_words_string\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n    \n\
    \    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n</cell>\n<cell>", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\nTest your code\nRun the cell below to\
    \ test your code.\n\nThe test code uses a custom assert function which checks\
    \ that each case in the switch statement is followed by the correct output. Your\
    \ code will be tested for all test cases. If you have a bug, there is an assert\
    \ statement at the bottom of the cell to help you find and fix the bug.\n\n\n\
    </text>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nImplement the function prime_words_in_sentence() below to solve the problem\
    \ above.\n\n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return\
    \ \"\"\n</cell>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x\
    \ % 2 == 0, prime_words))\n    \n    return ' '.join(prime_words)\n</cell>\n<text>\n\
    Let's test our function\n\n\n</text>\n<cell>\nwords_in_sentence('This is a test')\n\
    </cell>\n<cell>\nwords_in_sentence('lets go for swimming')\n</cell>\n<text>\n\
    Great! Now let's write a function that takes a sentence and returns a list of\
    \ prime numbers less than or equal to the length of the sentence.\n\nExample 1:\n\
    >>> prime_numbers_in_sentence('This is a test')\n[2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\nExample\
    \ 2:\n>>> prime_numbers_in_sentence('lets go for swimming')\n[2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97]\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains\
    \ only letters\n    * The output list should contain all the prime numbers less\
    \ than or equal to the length of the sentence.\n    \"\"\"\n    \n    words =\
    \ sentence.split()\n    \n    prime_numbers = []\n    \n    for word in words:\n\
    \        prime_numbers.append(len(word))\n    \n    prime_numbers.sort()\n   \
    \ \n    prime_numbers = list(filter(lambda x: x % 2 == 0, prime_numbers))\n  \
    \  \n    return prime_numbers\n</cell>\n<text>\nLet's test our function\n\n\n\
    </text>\n<cell>\nprime_numbers_in_sentence('This is a test')\n</cell>\n<cell>\n\
    prime_numbers_in_sentence('lets go for swimming')\n</cell>\n<text>\nGreat! Now\
    \ let's write a function that takes a sentence and returns a list of prime numbers\
    \ less than or equal to the length of the sentence.\n\nExample 1:\n>>> prime_numbers_in_sentence('This\
    \ is a test')\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97]\n\nExample 2:\n>>> prime_numbers_in_sentence('lets\
    \ go for swimming')\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\nConstraints:\n    * 1 <= len(sentence)\
    \ <= 100\n    * sentence contains only ", "    \n    # Your code here\n    \n\
    \    return \"\"\n", "    words = sentence.split()\n    prime_words = []\n   \
    \ for word in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n\
    \    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    words =\
    \ sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    prime_words\
    \ = [x for x in prime_words if x != '']\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return ''\n", "    \n\
    \    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return ' '.join(prime_words)\n\n", "    words = sentence.split()\n\
    \    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    return ' '.join(prime_words)\n", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        prime_words.append(len(word))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x >\
    \ 1, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda\
    \ x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 3 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 5 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 7 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 11 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 13 == 0, prime_words))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 17 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 19 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 23 == 0, prime_words))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 29 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 31 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 37 == 0, prime_words))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 41 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 43 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 47 == 0, prime_words))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 53 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 59 == 0, prime_words))\n    ", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return ''\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_string = ''\n    \n    for\
    \ word in prime_words:\n        prime_words_string += word + ' '\n    \n    return\
    \ prime_words_string\n</cell>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x\
    \ % 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_word", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    words = sentence.split()\n\
    \    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    return ' '.join(prime_words)\n\n", "    \n    # Your\
    \ code here\n    \n    return ''.join([i for i in sentence if i.isalpha()])\n",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        prime_words.append(len(word))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    return\
    \ ' '.join(prime_words)\n</cell>\n<cell>", "    words = sentence.split()\n   \
    \ prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    prime_words = list(map(str, prime_words))\n    return\
    \ ' '.join(prime_words)\n\n", "    \n    # Your code here\n    \n    return \"\
    \"\n</cell>\n<text>\n3. Prime Numbers\nGiven a positive integer $n$, find out\
    \ if there are two prime numbers $p$ and $q$ in the interval $[1,n]$.\n\nExample\
    \ 1:\nInput: n = 10\nOutput: True\n\nExample 2:\nInput: n = 11\nOutput: False\n\
    \nExample 3:\nInput: n = 12\nOutput: True\n\nExample 4:\nInput: n = 13\nOutput:\
    \ False\n\nExample 5:\nInput: n = 14\nOutput: True\n\nExample 6:\nInput: n = 15\n\
    Output: False\n\nExample 7:\nInput: n = 16\nOutput: True\n\nExample 8:\nInput:\
    \ n = 17\nOutput: False\n\nExample 9:\nInput: n = 18\nOutput: True\n\nExample\
    \ 10:\nInput: n = 19\nOutput: False\n\nExample 11:\nInput: n = 20\nOutput: True\n\
    \nExample 12:\nInput: n = 21\nOutput: False\n\nExample 13:\nInput: n = 22\nOutput:\
    \ True\n\nExample 14:\nInput: n = 23\nOutput: False\n\nExample 15:\nInput: n =\
    \ 24\nOutput: True\n\nExample 16:\nInput: n = 25\nOutput: False\n\nExample 17:\n\
    Input: n = 26\nOutput: True\n\nExample 18:\nInput: n = 27\nOutput: False\n\nExample\
    \ 19:\nInput: n = 28\nOutput: True\n\nExample 20:\nInput: n = 29\nOutput: False\n\
    \nExample 21:\nInput: n = 30\nOutput: True\n\nExample 22:\nInput: n = 31\nOutput:\
    \ False\n\nExample 23:\nInput: n = 32\nOutput: True\n\nExample 24:\nInput: n =\
    \ 33\nOutput: False\n\nExample 25:\nInput: n = 34\nOutput: True\n\nExample 26:\n\
    Input: n = 35\nOutput: False\n\nExample 27:\nInput: n = 36\nOutput: True\n\nExample\
    \ 28:\nInput: n = 37\nOutput: False\n\nExample 29:\nInput: n = 38\nOutput: True\n\
    \nExample 30:\nInput: n = 39\nOutput: False\n\nExample 31:\nInput: n = 40\nOutput:\
    \ True\n\nExample 32:\nInput: n = 41\nOutput: False\n\nExample 33:\nInput: n =\
    \ 42\nOutput: True\n\nExample 34:\nInput: n = 43\nOutput: False\n\nExample 35:\n\
    Input: n = 44\nOutput: True\n\nExample 36:\nInput: n = 45\nOutput: False\n\nExample\
    \ 37:\nInput: n = 46\nOutput: True\n\nExample 38:\nInput: n = 47\nOutput: False\n\
    \nExample 39:\nInput: n = 48\nOutput: True\n\nExample 40:\nInput: n = 49\nOutput:\
    \ False\n\n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\n\
    Let's test your code\n\n\n</text>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    primes = []\n    \n    for word in words:\n        prime = True\n \
    \       for char in word:\n            if not char.isalpha():\n              \
    \  prime = False\n                break\n        if prime:\n            primes.append(len(word))\n\
    \    \n    primes.sort()\n    \n    return ' '.join(words[i:i+primes[i]] for i\
    \ in range(len(primes)-1))\n</cell>\n<cell>", "    \n    # Your code here\n  \
    \  \n    return \"\"\n</cell>\n<text>\nTest your code\nRun the cell below to test\
    \ your code.\n\nThe test code uses a hard-coded input string, so make sure that\
    \ it passes the test.\n\n\n</text>\n<cell>", "    \n    # Your code here\n   \
    \ \n    return \"\"\n", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x\
    \ % 2 == 0, prime_words))\n    \n    return ' '.join(prime_words)\n</cell>\n<cell>",
  "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nTest your code\n\
    Run the cell below to test your code.\n\nThe test code uses a string that consists\
    \ of three words,\nand each word is separated by a space.\n\nIf the code delivers\
    \ an AssertionError with the message \"Test Failed!\",\nthen you have correctly\
    \ implemented the function words_in_sentence,\nbut your answer is still not correct.\n\
    \nIf the code does not raise an AssertionError with the message \"Test Failed!\"\
    ,\nthen you have implemented the function words_in_sentence\nincorrectly. \n\n\
    If your code passes the test cases,\nbut not the sample tests,\nthat's okay! The\
    \ next step is to check your algorithm and implementation\non edge cases.\n\n\n\
    </text>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return ''\n", "    \n    # Your code here\n    \n    return\
    \ \"\"\n", "    \n    # Your code here\n    \n    return ''\n", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        prime_words.append(len(word))\n  \
    \  \n    prime_words.sort()\n    \n    return ' '.join(prime_words)\n\n", "  \
    \  words = sentence.split()\n    words_in_sentence = []\n    for word in words:\n\
    \        words_in_sentence.append(word)\n    \n    prime_words = []\n    for word\
    \ in words_in_sentence:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    prime_words\
    \ = list(map(int, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n",
  "    \n    # Your code here\n    \n    return ''\n</cell>\n<text>\nRun the following\
    \ cell to test your code:\n\n\n</text>\n<cell>", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\nRun the following cell to test your code:\n\
    \n\n</text>\n<cell>\nsentence = 'This is a test'\nassert words_in_sentence(sentence)\
    \ == 'is'\nsentence = 'lets go for swimming'\nassert words_in_sentence(sentence)\
    \ == 'go for'\n</cell>\n<text>\nExercise 3\nGiven a string, you need to find all\
    \ the words that are longer than or equal to three characters.\nFor example, given\
    \ 'hello', you should return 'he', 'hel', 'hell', 'hello'.\n\nGiven 'hello', you\
    \ should return 'he', 'hel', 'hell', 'hello'.\n\nGiven 'hello', you should return\
    \ 'he', 'hel', 'hell', 'hello'.\n\nHint: You may want to use re.findall() with\
    \ a pattern that matches word boundaries.\n\n\n</text>\n<cell>", "    \n    #\
    \ Your code here\n    \n    return \"\"\n", "    \n    # Your code here\n    \n\
    \    return \"\"\n", "    words = sentence.split()\n    primes = []\n    for word\
    \ in words:\n        prime = True\n        for char in word:\n            if not\
    \ char.isalpha():\n                prime = False\n                break\n    \
    \    if prime:\n            primes.append(len(word))\n    primes.sort()\n    primes_str\
    \ = ' '.join(str(x) for x in primes)\n    return primes_str\n\n", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words_string = ''\n    \n    for word in prime_words:\n        prime_words_string\
    \ += word\n    \n    return prime_words_string\n</cell>\n<cell>", "    \n    #\
    \ Your code here\n    \n    return \"\"\n</cell>\n<text>\n3. Write a Python program\
    \ to remove spaces from a string and return a string.\n\n</text>\n<cell>", " \
    \   \n    # Your code here\n    \n    return ''\n</cell>\n<cell>", "    \n   \
    \ # Your code here\n    \n    return \"\"\n</cell>\n<cell>", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    prime_words\
    \ = [x for x in prime_words if x != '']\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<text>\nLet's test your implementation with a few test cases:\n\n\n</text>\n\
    <cell>", "    \n    words = sentence.split()\n    \n    prime_words = []\n   \
    \ \n    for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return ''\n", "    \n    words = sentence.split()\n    \n  \
    \  prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(int, prime_words))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_word",
  "    \n    words = sentence.split()\n    \n    primes = []\n    \n    for word in\
    \ words:\n        prime = True\n        \n        for char in word:\n        \
    \    if char.isalpha() == False:\n                prime = False\n            \
    \    break\n        \n        if prime == True:\n            primes.append(word)\n\
    \    \n    prime_string = ' '.join(primes)\n    \n    return prime_string\n\n",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n    \n\
    \    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n    \n\
    \    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<text>\nLet's test your function\n\
    \n\n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nGreat! Now you have a function that can\
    \ get the prime words in a sentence.\n\n</text>\n<text>\nProblem 9: Prime Numbers\n\
    Write a function that takes in a positive integer $n$ and returns $n$ if it is\
    \ a prime number, and $n + 1$ if it is not. Test your function with $n = 5$ and\
    \ $n = 10$.\n\nExample 1:\n>>> is_prime(5)\n5\n\nExample 2:\n>>> is_prime(10)\n\
    11\n\nExample 3:\n>>> is_prime(15)\n15\n\nExample 4:\n>>> is_prime(20)\n20\n\n\
    Example 5:\n>>> is_prime(25)\n25\n\nExample 6:\n>>> is_prime(30)\n30\n\nExample\
    \ 7:\n>>> is_prime(35)\n35\n\nExample 8:\n>>> is_prime(100)\n100\n\nConstraints:\n\
    \    * $n \\in \\mathbb{N}$ where $n$ is an integer within the range [2,100]\n\
    \    * $n$ can only be a positive integer\n    * $n$ can only be a prime number\n\
    \    * $n$ can only be a positive integer\n    * $n$ can only be a prime number\n\
    \    * $n$ can only be a positive integer\n    * $n$ can only be a prime number\n\
    \    * $n$ can only be a positive integer\n    * $n$ can only be a prime number\n\
    \    * $n$ can only be a positive integer\n    * $n$ can only be a prime number\n\
    \    * $n$ can only be a positive integer\n    * $n$ can only be a prime number\n\
    \    * $n$ can only be a positive integer\n    * $n$ can only be a prime number\n\
    \    * $n$ can only be a positive integer\n    * $n$ can only be a prime number\n\
    \    * $n$ can only be a positive integer\n    * $n$ can only be a prime number\n\
    \    * $n$ can only be a positive integer\n    * $n$ can only be a prime number\n\
    \    * $n$ can only be a positive integer\n    * $n$ can only be a prime number\n\
    \    * $n$ can only be a positive integer\n    * $n$ can only be a prime number\n\
    \    * $n$ ", "    words = sentence.split()\n    prime_words = []\n    for word\
    \ in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n \
    \   prime_words = [str(x) for x in prime_words]\n    return ' '.join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return ''\n", "    words = sentence.split()\n\
    \    words_in_sentence = []\n    for word in words:\n        words_in_sentence.append(word)\n\
    \    \n    prime_words = []\n    for word in words_in_sentence:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_in_sentence = []\n    for\
    \ word in prime_words:\n        prime_words_in_sentence.append(word)\n    \n \
    \   return \" \".join(prime_words_in_sentence)\n</cell>\n<text>\nLet's test our\
    \ function\n\n\n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n\
    <cell>\nwords_in_sentence('lets go for swimming')\n</cell>\n<text>\nWe can also\
    \ test our function with some edge cases\n\n\n</text>\n<cell>\nwords_in_sentence('This\
    \ sentence is too short')\n</cell>\n<cell>\nwords_in_sentence('This sentence is\
    \ too long')\n</cell>\n<text>\nWe can also test our function with some edge cases\n\
    \n\n</text>\n<cell>\nwords_in_sentence('This sentence is too short')\n</cell>\n\
    <cell>\nwords_in_sentence('This sentence is too long')\n</cell>\n<text>\nWe can\
    \ also test our function with some edge cases\n\n\n</text>\n<cell>\nwords_in_sentence('This\
    \ sentence is too short')\n</cell>\n<cell>\nwords_in_sentence('This sentence is\
    \ too long')\n</cell>\n<text>\nWe can also test our function with some edge cases\n\
    \n\n</text>\n<cell>\nwords_in_sentence('This sentence is too short')\n</cell>\n\
    <cell>\nwords_in_sentence('This sentence is too long')\n</cell>\n<text>\nWe can\
    \ also test our function with some edge cases\n\n\n</text>\n<cell>\nwords_in_sentence('This\
    \ sentence is too short')\n</cell>\n<cell>\nwords_in_sentence('This sentence is\
    \ too long')\n</cell>\n<text>\nWe can also test our function with some edge cases\n\
    \n\n</text>\n<cell>\nwords_in_sentence('This sentence is too short')\n</cell>\n\
    <cell>\nwords_in_sentence('This sentence is too long')\n</cell>\n<text>\nWe can\
    \ also test our function with some edge cases\n\n\n</text>\n<cell>\nwords_in_sentence('This\
    \ sentence is too short')\n</cell>\n<cell>\nwords_in_sentence('This sentence is\
    \ too long')\n</cell>\n<text>\nWe can also test our function with some edge cases",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    return ' '.join(prime_words)\n\
    \n", "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n \
    \   for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words_str = ' '.join(prime_words)\n    \n    return prime_words_str\n\
    \n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun\
    \ the cell below to test your code:\n\n\n</text>\n<cell>\nsentence = 'This is\
    \ a test'\nassert words_in_sentence(sentence) == 'is'\nsentence = 'lets go for\
    \ swimming'\nassert words_in_sentence(sentence) == 'go for'\n</cell>\n<text>\n\
    Exercise 3\nThe function prime_words_in_sentence should take a string as its only\
    \ parameter and return a string with the words from the sentence separated by\
    \ spaces.\n\nThe function prime_words_in_sentence has the following parameter(s):\n\
    \nsentence: a string representing a sentence.\n\nThe function should return a\
    \ string with the words from the sentence separated by spaces.\n\nThe function\
    \ should return '' if the sentence is empty or contains only spaces.\n\nExample\
    \ 1:\n>>> prime_words_in_sentence('This is a test')\n'is is a test'\n\nExample\
    \ 2:\n>>> prime_words_in_sentence('lets go for swimming')\n'go for'\n\nExample\
    \ 3:\n>>> prime_words_in_sentence('')\n''\n\nExample 4:\n>>> prime_words_in_sentence('\
    \ ')\n''\n\nConstraints:\n    The length of the sentence is at most 100.\n   \
    \ The sentence can contain letters a-z.\n    The sentence can contain spaces.\n\
    \    All words in the sentence are separated by spaces.\n    All words in the\
    \ sentence are lowercase.\n    All words in the sentence are unique.\n    All\
    \ words in the sentence are separated by spaces.\n    All words in the sentence\
    \ are lowercase.\n    All words in the sentence are unique.\n    All words in\
    \ the sentence are separated by spaces.\n    All words in the sentence are lowercase.\n\
    \    All words in the sentence are unique.\n    All words in the sentence are\
    \ separated by spaces.\n    All words in the sentence are lowercase.\n    All\
    \ words in the sentence are unique.\n    All words in the sentence are separated\
    \ by spaces.\n    All words in the sentence are lowercase.\n    All words in the\
    \ sentence are unique.\n    All words in the sentence are separated by spaces.\n\
    \    All words in the sentence are lowercase.\n    All words in the sentence are\
    \ unique.\n    All words in the sentence are separated by spaces.\n    All words\
    \ in the sentence are lowercase.\n    All words in the sentence are unique.\n\
    \    All words in the sentence are separated by spaces.\n    All words in the\
    \ sentence are lowercase.\n    All words in the sentence are unique.\n    All\
    \ words in the sentence are separated by spaces.\n    All words in the sentence\
    \ are lowercase.\n    All words in the sentence are unique.\n    All word", " \
    \   \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for\
    \ word in words:\n        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n\n", "    words = sentence.split()\n\
    \    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    return ' '.join(words[:prime_words[-1]])\n\n", " \
    \   \n    words = sentence.split()\n    \n    primes = []\n    \n    for word\
    \ in words:\n        prime = True\n        for char in word:\n            if not\
    \ char.isalpha():\n                prime = False\n                break\n    \
    \    if prime:\n            primes.append(len(word))\n    \n    primes.sort()\n\
    \    \n    return ' '.join(words[i:i+primes[i]] for i in range(len(words)-primes[i]))\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return ''.join((i for\
    \ i in sentence if i.isalpha()))\n</cell>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    return ' '.join(prime_words)\n</cell>\n\
    <cell>", "    \n    # Your code here\n    \n    return ''\n</cell>\n<text>\nRun\
    \ the following cell to test your code:\n\n\n</text>\n<cell>\nsentence = 'This\
    \ is a test'\nassert words_in_sentence(sentence) == 'is'\nsentence = 'lets go\
    \ for swimming'\nassert words_in_sentence(sentence) == 'go for'\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a string and returns a string with all\
    \ the words in lower case.\n\nExample 1:\n>>> to_lower_case('This is a test')\n\
    'this is a test'\n\nExample 2:\n>>> to_lower_case('lets go for swimming')\n'lets\
    \ go for swimming'\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence\
    \ contains only letters\n    * All words in the sentence are separated by a single\
    \ space\n    \"\"\"\n    \n    # Your code here\n    \n    return ''\n</cell>\n\
    <text>\nRun the following cell to test your code:\n\n\n</text>\n<cell>\nsentence\
    \ = 'This is a test'\nassert to_lower_case(sentence) == 'this is a test'\nsentence\
    \ = 'lets go for swimming'\nassert to_lower_case(sentence) == 'lets go for swimming'\n\
    </cell>\n<text>\nExercise 5\nWrite a function that takes a string and returns\
    \ a string with all the words in upper case.\n\nExample 1:\n>>> to_upper_case('This\
    \ is a test')\n'THIS IS A TEST'\n\nExample 2:\n>>> to_upper_case('lets go for\
    \ swimming')\n'LETS GO FOR SWIMMING'\n\nConstraints:\n    * 1 <= len(sentence)\
    \ <= 100\n    * sentence contains only letters\n    * All words in the sentence\
    \ are separated by a single space\n    \"\"\"\n    \n    # Your code here\n  \
    \  \n    return ''\n</cell>\n<text>\nRun the following cell to test your code:\n\
    \n\n</text>\n<cell>\nsentence = 'This is a test'\nassert to_upper_case(sentence)\
    \ == 'THIS IS A TEST'\nsentence = 'lets go for swimming'\nassert to_upper_case(sentence)\
    \ == 'LETS GO FOR SWIMMING'\n</cell>\n<text>\nExercise 6\nWrite a function that\
    \ takes a string and returns a string with all the words in title case.\n\nExample\
    \ 1:\n>>> to_title_case('This is a test')\n'This Is A Test'\n\nExample 2:\n>>>\
    \ to_title_case('lets go for swimming')\n'Lets Go For Swimming'\n\nConstraints:\n\
    \    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n    *\
    \ All words in the sentence are separated by a single space\n    \"\"\"\n    \n\
    \    # Your ", "    words = sentence.split()\n    prime_words = []\n    for word\
    \ in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n \
    \   return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n \
    \   \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x\
    \ % 2 == 0, prime_words))\n    \n    return ' '.join(prime_words)\n", "    \n\
    \    # Your code here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [x for x in prime_words\
    \ if x != 0]\n    \n    return ' '.join(prime_words)\n</cell>\n<text>\nLet's test\
    \ your function\n\n\n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n\
    <cell>\nwords_in_sentence('lets go for swimming')\n</cell>\n<text>\nGreat! Now\
    \ you have a function that can get the prime words in a sentence.\n\n\n</text>\n\
    <text>\nProblem 7: Write a function that takes a sentence and returns a list of\
    \ prime numbers.\nThe sentence consists of words only and punctuation marks are\
    \ ignored.\n\nThe function should return a list containing the prime numbers in\
    \ the sentence in ascending order.\n\nExample 1:\n>>> prime_numbers_in_sentence('This\
    \ is a test')\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97]\n\nExample 2:\n>>> prime_numbers_in_sentence('lets\
    \ go for swimming')\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n</text>\n<cell>", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n\n", "    \n    # Your code here\n  \
    \  \n    return \"\"\n</cell>\n<text>\nRun the following cell to test your code:\n\
    \n\n</text>\n<cell>\nsentence = 'This is a test'\nassert words_in_sentence(sentence)\
    \ == 'is'\nsentence = 'lets go for swimming'\nassert words_in_sentence(sentence)\
    \ == 'go for'\n</cell>\n<text>\nExercise 3\nThe function is_palindrome checks\
    \ if a string is a palindrome,\nit takes a string as an argument and returns True\
    \ if it is a palindrome and False otherwise.\n\nThe function is_palindrome has\
    \ the following parameter(s):\n\nsentence: a string that you want to check if\
    \ it is a palindrome\nThe function should return a boolean value.\n\nThe function\
    \ is_palindrome has the following code:\n", "    words = sentence.split()\n  \
    \  prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    return ' '.join(prime_words)\n</cell>\n<cell>", " \
    \   \n    # Your code here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n\
    \    \n    primes = []\n    \n    for word in words:\n        prime = True\n \
    \       for char in word:\n            if char.isalpha():\n                prime\
    \ = False\n                break\n        if prime:\n            primes.append(len(word))\n\
    \    \n    primes.sort()\n    \n    return ' '.join(words[i:i+primes[i]] for i\
    \ in range(len(primes)-1))\n</cell>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n", "    words = sentence.split()\n    prime_words\
    \ = []\n    for word in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n\
    \    return ' '.join(prime_words)\n\n", "    \n    # Your code here\n    \n  \
    \  return \"\"\n", "    \n    # Your code here\n    \n    return ''\n</cell>\n\
    <text>\n3. Sort a sentence in lexicographical order\n\n</text>\n<text>\nGiven\
    \ a sentence, sort the words in lexicographical order.\n\nExample 1:\nInput: sentence\
    \ = \"the cat sat on the mat\"\nOutput: \"cat sat on the mat\"\n\nExplanation:\
    \ \nThe words \"the\", \"cat\", \"sat\", \"on\", \"mat\" are sorted lexicographically\
    \ in ascending order.\n\nExample 2:\nInput: sentence = \"a man a plan a canal\"\
    \nOutput: \"a can a man a plan\"\n\nExplanation: \nThe words \"a\", \"man\", \"\
    a\", \"plan\", \"canal\" are sorted lexicographically in ascending order.\n\n\
    Example 3:\nInput: sentence = \"a bad apple\"\nOutput: \"a bad apple\"\n\nExplanation:\
    \ \nThe words \"a\", \"bad\", \"apple\" are sorted lexicographically in ascending\
    \ order.\n\nExample 4:\nInput: sentence = \"one fish two fish red fish blue fish\"\
    \nOutput: \"one red fish two fish blue fish red fish\"\n\nExplanation: \nThe words\
    \ \"one\", \"two\", \"red\", \"blue\", \"fish\" are sorted lexicographically in\
    \ ascending order.\n\nExample 5:\nInput: sentence = \"the dog ran to the store\"\
    \nOutput: \"the store dog ran\"\n\nExplanation: \nThe words \"the\", \"dog\",\
    \ \"ran\", \"to\", \"store\" are sorted lexicographically in ascending order.\n\
    \nExample 6:\nInput: sentence = \"fish red fish blue fish\"\nOutput: \"blue fish\
    \ red fish fish\"\n\nExplanation: \nThe words \"blue\", \"fish\", \"red\", \"\
    fish\" are sorted lexicographically in ascending order.\n\nExample 7:\nInput:\
    \ sentence = \"one and two\"\nOutput: \"one two\"\n\nExplanation: \nThe words\
    \ \"one\", \"two\" are sorted lexicographically in ascending order.\n\nExample\
    \ 8:\nInput: sentence = \"one\"\nOutput: \"one\"\n\nExplanation: \nThe word \"\
    one\" is sorted lexicographically in ascending order.\n\nExample 9:\nInput: sentence\
    \ = \"\"\nOutput: \"\"\n\nExplanation: \nThe word \"\" is sorted lexicographically\
    \ in ascending order.\n\nExample 10:\nInput: sentence = \"a bad apple\"\nOutput:\
    \ \"a bad apple\"\n\nExplanation: \nThe words \"a\", \"bad\", \"apple\" are sorted\
    \ lex", "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n\
    \    for word in words:\n        \n        prime_words.append(len(word))\n   \
    \     \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return ''\n</cell>\n<cell>", "    words = sentence.split()\n\
    \    words_in_sentence = []\n    for word in words:\n        words_in_sentence.append(word)\n\
    \    \n    prime_words = []\n    for word in words_in_sentence:\n        if prime_checker(word):\n\
    \            prime_words.append(word)\n    \n    return ' '.join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\n3. Prime\
    \ Numbers\nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself.\nThe first few prime numbers are 2, 3, 5,\
    \ 7, 11, and 13.\n\nWrite a program to find all the prime numbers between 1 and\
    \ 100.\n\nExample 1:\nInput: 10\nOutput: [2,3,5,7]\n\nExample 2:\nInput: 11\n\
    Output: [2,3,5,7,11]\n\nExample 3:\nInput: 12\nOutput: [2,3,5,7,11,13]\n\nExample\
    \ 4:\nInput: 100\nOutput: [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \n</text>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n", " \
    \   \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for\
    \ word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return ''\n</cell>\n<text>\nTest your\
    \ code\nRun the cell below to test your code.\n\nThe code cell below will generate\
    \ the unit test code for you.\n\n\n</text>\n<cell>", "    words = sentence.split()\n\
    \    words_in_sentence = []\n    for word in words:\n        word_length = len(word)\n\
    \        if word_length == 1:\n            words_in_sentence.append(word)\n  \
    \      elif word_length == 2:\n            if word[0] in 'aeiou':\n          \
    \      words_in_sentence.append(word[0])\n                words_in_sentence.append(word[1])\n\
    \            else:\n                words_in_sentence.append(word[0])\n      \
    \  elif word_length == 3:\n            if word[0] in 'aeiou':\n              \
    \  words_in_sentence.append(word[0])\n                words_in_sentence.append(word[1])\n\
    \                words_in_sentence.append(word[2])\n            else:\n      \
    \          words_in_sentence.append(word[0])\n                words_in_sentence.append(word[1])\n\
    \        elif word_length == 4:\n            if word[0] in 'aeiou':\n        \
    \        words_in_sentence.append(word[0])\n                words_in_sentence.append(word[1])\n\
    \                words_in_sentence.append(word[2])\n                words_in_sentence.append(word[3])\n\
    \            else:\n                words_in_sentence.append(word[0])\n      \
    \          words_in_sentence.append(word[1])\n                words_in_sentence.append(word[2])\n\
    \                words_in_sentence.append(word[3])\n        elif word_length ==\
    \ 5:\n            if word[0] in 'aeiou':\n                words_in_sentence.append(word[0])\n\
    \                words_in_sentence.append(word[1])\n                words_in_sentence.append(word[2])\n\
    \                words_in_sentence.append(word[3])\n                words_in_sentence.append(word[4])\n\
    \            else:\n                words_in_sentence.append(word[0])\n      \
    \          words_in_sentence.append(word[1])\n                words_in_sentence.append(word[2])\n\
    \                words_in_sentence.append(word[3])\n                words_in_sentence.append(word[4])\n\
    \        elif word_length == 6:\n            if word[0] in 'aeiou':\n        \
    \        words_in_sentence.append(word[0])\n                words_in_sentence.append(word[1])\n\
    \                words_in_sentence.append(word[2])\n                words_in_sentence.append(word[3])\n\
    \                words_in_sentence.append(word[4])\n                words_in_sentence.append(word[5])\n\
    \            else:\n                words_in_sentence.append(word[0])\n      \
    \          words_in_sentence.append(word[1])\n                words_in_sentence.append(word[2])\n\
    \                words_in_sentence.append(word[3])\n                words_in_sentence.append(word[4])\n\
    \                words_in_sentence.append(word[5])\n        elif word_length ==\
    \ 7:\n            if word[0] in 'aeiou':\n                words_in_sentence.append(word[0])\n\
    \                words_in_sentence.append(word[1])\n                words_in_sentence.append(word[2])\n\
    \                words_in_sentence.append(word[3])\n                words_in_sentence.append(word[4])\n\
    \                words_in_sentence.append(word[5])\n                words_in_sentence.append(word[6])\n\
    \            else:\n                words_in_sentence.append(word[0])\n      \
    \          words_in_sentence.append(word[1])", "    \n    # Your code here\n \
    \   \n    return ''\n", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_string = ' '.join(prime_words)\n\
    \    \n    return prime_words_string\n\n", "    \n    # Your code here\n    \n\
    \    return \"\"\n", "    \n    # Your code here\n    \n    return ''\n</cell>\n\
    <text>\nTest your code\n\n</text>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x\
    \ % 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        prime_words.append(len(word))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    words = sentence.split()\n\
    \    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    \n    prime_words_str = ' '.join(prime_words)\n \
    \   \n    return prime_words_str\n\n", "    \n    words = sentence.split()\n \
    \   \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    return ' '.join(prime_words)\n", "  \
    \  \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n",
  "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<cell>"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
