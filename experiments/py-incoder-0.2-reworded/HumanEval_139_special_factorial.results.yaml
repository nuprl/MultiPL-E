language: py
name: HumanEval_139_special_factorial
results:
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxym2gjdf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxym2gjdf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxym2gjdf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxym2gjdf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * (n - 1) * (n - 2) * ... * (n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj48qgyjj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpj48qgyjj.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpj48qgyjj.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpj48qgyjj.py\"\
    , line 15, in special_factorial\n    return factorial(n) * (n - 1) * (n - 2) *\
    \ ... * (n - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxym2gjdf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxym2gjdf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxym2gjdf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxym2gjdf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxym2gjdf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxym2gjdf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"\
    The factorial of a negative number is not defined\")\n    if n == 0:\n       \
    \ return 1\n    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphpvr163h.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphpvr163h.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmphpvr163h.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        return 0\n\
    \    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihcvsg_p.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpihcvsg_p.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpihcvsg_p.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxym2gjdf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxym2gjdf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxym2gjdf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxym2gjdf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2emum7os.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2emum7os.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2emum7os.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp2emum7os.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n - 1)\n\
    NameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    if n == 1:\n        return 1\n    return n * special_factorial(n - 1)\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8q8nulfh.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8q8nulfh.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8q8nulfh.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxym2gjdf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxym2gjdf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    if n == 1:\n        return 1\n    return n * special_factorial(n - 1)\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8q8nulfh.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8q8nulfh.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8q8nulfh.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n  \
    \  return factorial\n\n\ndef check(candidate):\n    assert candidate(4) == 288\n\
    \    assert candidate(5) == 34560\n    assert candidate(7) == 125411328000\n \
    \   assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmproq_2297.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmproq_2297.py\", line 28,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmproq_2297.py\"\
    , line 22, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        return 0\n\
    \    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihcvsg_p.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpihcvsg_p.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpihcvsg_p.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * factorial(n-1) * factorial(n-2)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppb21vwzj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppb21vwzj.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmppb21vwzj.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmppb21vwzj.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n-1) * factorial(n-2)\n\
    NameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2emum7os.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2emum7os.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2emum7os.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp2emum7os.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n - 1)\n\
    NameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    if n == 1:\n        return 1\n    return n * special_factorial(n - 1)\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8q8nulfh.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8q8nulfh.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8q8nulfh.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * (n - 1) * (n - 2) * ... * (n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj48qgyjj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpj48qgyjj.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpj48qgyjj.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpj48qgyjj.py\"\
    , line 15, in special_factorial\n    return factorial(n) * (n - 1) * (n - 2) *\
    \ ... * (n - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        return 0\n\
    \    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihcvsg_p.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpihcvsg_p.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpihcvsg_p.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxym2gjdf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxym2gjdf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"\
    The factorial is undefined for negative numbers\")\n    if n == 0:\n        return\
    \ 1\n    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4k7jp0be.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp4k7jp0be.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp4k7jp0be.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        return 0\n\
    \    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihcvsg_p.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpihcvsg_p.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpihcvsg_p.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2emum7os.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2emum7os.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2emum7os.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp2emum7os.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n - 1)\n\
    NameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"\
    The factorial of a negative number is not defined\")\n    if n == 0:\n       \
    \ return 1\n    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphpvr163h.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphpvr163h.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmphpvr163h.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxym2gjdf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxym2gjdf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    if n == 1:\n        return n\n    return n * special_factorial(n - 1)\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4xa9ft99.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp4xa9ft99.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp4xa9ft99.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxym2gjdf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxym2gjdf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxym2gjdf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxym2gjdf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    if n < 0:\n        return 0\n    return n * special_factorial(n - 1)\n\n\n\
    def check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5p7xrelf.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5p7xrelf.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp5p7xrelf.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxym2gjdf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxym2gjdf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxym2gjdf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxym2gjdf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2emum7os.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2emum7os.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2emum7os.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp2emum7os.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n - 1)\n\
    NameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxym2gjdf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxym2gjdf.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpxym2gjdf.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw689a38s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw689a38s.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw689a38s.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpw689a38s.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659747526
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq0io7ku.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiq0io7ku.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiq0io7ku.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659747490
