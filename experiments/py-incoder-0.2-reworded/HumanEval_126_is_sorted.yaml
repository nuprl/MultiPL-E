name: HumanEval_126_is_sorted
language: py
prompt: "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    \"\
  \"\"\n    Given a list of numbers, return whether or not they are sorted\n    in\
  \ ascending order. If list has more than 1 duplicate of the same\n    number, return\
  \ False. Assume no negative numbers and only integers.\n\n    Examples\n    >>>\
  \ is_sorted([5])\n    True\n    >>> is_sorted([1, 2, 3, 4, 5])\n    True\n    >>>\
  \ is_sorted([1, 3, 2, 4, 5])\n    False\n    >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
  \    True\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    True\n    >>> is_sorted([1,\
  \ 3, 2, 4, 5, 6, 7])\n    False\n    >>> is_sorted([1, 2, 2, 3, 3, 4])\n    True\n\
  \    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([5]) == True\n    assert candidate([1,\
  \ 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert\
  \ candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6,\
  \ 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False\n    assert\
  \ candidate([]) == True\n    assert candidate([1]) == True\n    assert candidate([3,\
  \ 2, 1]) == False\n    assert candidate([1, 2, 2, 2, 3, 4]) == False\n    assert\
  \ candidate([1, 2, 3, 3, 3, 4]) == False\n    assert candidate([1, 2, 2, 3, 3, 4])\
  \ == True\n    assert candidate([1, 2, 3, 4]) == True\n\ndef test_check():\n   \
  \ check(is_sorted)\n\ntest_check()\n"
completions: ["    seen = set()\n    for item in lst:\n        if item in seen:\n\
    \            return False\n        seen.add(item)\n    return True\n", "    seen\
    \ = set()\n    for x in lst:\n        if x in seen:\n            return False\n\
    \        seen.add(x)\n    return True\n", "    \n    sorted_lst = sorted(lst)\n\
    \    \n    if len(lst) == len(set(lst)):\n        return True\n    else:\n   \
    \     return False\n", "    seen = set()\n    for i in lst:\n        if i in seen:\n\
    \            return False\n        seen.add(i)\n    return True\n", "    seen\
    \ = set()\n    for i in lst:\n        if i in seen:\n            return False\n\
    \        seen.add(i)\n    return True\n", "    seen = set()\n    for i in lst:\n\
    \        if i in seen:\n            return False\n        seen.add(i)\n    return\
    \ True\n", "    lst = sorted(lst)\n    if len(lst) != len(set(lst)):\n       \
    \ return False\n    for num in lst:\n        if num != lst[0]:\n            return\
    \ False\n    return True\n", "    seen = set()\n    for x in lst:\n        if\
    \ x in seen:\n            return False\n        seen.add(x)\n    return True\n",
  "    seen = set()\n    for i in lst:\n        if i in seen:\n            return\
    \ False\n        seen.add(i)\n    return True\n", "    \n    # Your code here\n\
    \    \n    return sorted(lst) == lst\n</cell>\n<cell>", "    seen = set()\n  \
    \  for item in lst:\n        if item in seen:\n            return False\n    \
    \    seen.add(item)\n    return True\n", "    lst = list(lst)\n    count = {}\n\
    \    for item in lst:\n        if item in count:\n            count[item] += 1\n\
    \        else:\n            count[item] = 1\n    for k, v in count.items():\n\
    \        if v == 1:\n            return False\n    return True\n", "    seen =\
    \ set()\n    for i in lst:\n        if i in seen:\n            return False\n\
    \        seen.add(i)\n    return True\n", "    seen = set()\n    for i in lst:\n\
    \        if i in seen:\n            return False\n        seen.add(i)\n    return\
    \ True\n", "    seen = set()\n    for x in lst:\n        if x in seen:\n     \
    \       return False\n        seen.add(x)\n    return True\n", "    seen = set()\n\
    \    for i in lst:\n        if i in seen:\n            return False\n        seen.add(i)\n\
    \    return True\n", "    seen = set()\n    for item in lst:\n        if item\
    \ in seen:\n            return False\n        seen.add(item)\n    return True\n",
  "    seen = set()\n    for i in lst:\n        if i in seen:\n            return\
    \ False\n        seen.add(i)\n    return True\n\n", "    counts = {}\n    for\
    \ num in lst:\n        if num in counts:\n            counts[num] += 1\n     \
    \   else:\n            counts[num] = 1\n    return all(counts[num] == 1 for num\
    \ in counts)\n", "    seen = set()\n    for i in lst:\n        if i in seen:\n\
    \            return False\n        seen.add(i)\n    return True\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
