name: HumanEval_57_monotonic
language: py
prompt: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\"\
  \"Return True is list elements are monotonically increasing or decreasing.\n   \
  \ >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n  \
  \  False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
  \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
  \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0])\
  \ == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
  \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
  \    check(monotonic)\n\ntest_check()\n"
completions: ["    if len(l) < 2:\n        return True\n    \n    prev = l[0]\n  \
    \  for i in l[1:]:\n        if prev > i:\n            return False\n        prev\
    \ = i\n    return True\n", "    if len(l) < 2:\n        return True\n    \n  \
    \  prev = l[0]\n    for x in l[1:]:\n        if prev < x:\n            return\
    \ False\n        prev = x\n    return True\n", "    if len(l) < 2:\n        return\
    \ True\n    \n    prev = l[0]\n    for x in l[1:]:\n        if prev < x:\n   \
    \         return False\n        prev = x\n    return True\n", "    l = list(l)\n\
    \    l.sort()\n    return l[0] < l[-1]\n", "    if len(l) < 2:\n        return\
    \ True\n    if l[-1] < l[0]:\n        return True\n    return False\n", "    if\
    \ len(l) < 2:\n        return True\n    l.sort()\n    return l[0] == l[-1] and\
    \ l[1:-1] == sorted(l[0:-1], reverse=True)\n", "    if len(l) < 2:\n        return\
    \ True\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\n", "    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n",
  "    if len(l) < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n\
    \        if prev > x:\n            return False\n        prev = x\n    return\
    \ True\n", "    if len(l) < 2:\n        return True\n    else:\n        first\
    \ = l[0]\n        last = l[-1]\n        if first < last:\n            return False\n\
    \        else:\n            return True\n", "    if len(l) < 2:\n        return\
    \ True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n", "    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n", "    if len(l) < 2:\n        return True\n    \n    prev = l[0]\n\
    \    for x in l[1:]:\n        if prev < x:\n            return False\n       \
    \ prev = x\n    return True\n", "    if len(l) < 2:\n        return True\n   \
    \ l.sort()\n    return l[0] < l[-1]\n", "    if len(l) < 2:\n        return True\n\
    \    if l[-1] < l[0]:\n        return True\n    return False\n", "    if len(l)\
    \ < 2:\n        return True\n    else:\n        return all(l[i] <= l[i+1] for\
    \ i in xrange(len(l)-1))\n", "    if len(l) < 2:\n        return True\n    i =\
    \ len(l) - 2\n    j = i\n    while j > 0 and l[j-1] > l[j]:\n        j -= 1\n\
    \    return j >= 0\n", "    if len(l) < 2:\n        return True\n    return all(l[i]\
    \ <= l[i+1] for i in xrange(len(l)-1))\n", "    if len(l) < 2:\n        return\
    \ True\n    if l[-1] < l[0]:\n        return False\n    i, j = 0, len(l) - 1\n\
    \    while i < j:\n        if l[i] < l[j]:\n            return False\n       \
    \ i += 1\n        i %= len(l)\n        j -= 1\n        j %= len(l)\n    return\
    \ True\n", "    if len(l) < 2:\n        return True\n    return all(l[i] <= l[i+1]\
    \ for i in range(len(l)-1))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
