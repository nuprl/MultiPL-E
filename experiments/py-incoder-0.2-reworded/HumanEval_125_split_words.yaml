name: HumanEval_125_split_words
language: py
prompt: "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str],\
  \ int]:\n    \"\"\"\n    Given a string of words, return a list of words split on\
  \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
  \ ',' if no commas exists you should return the number of lower-case letters with\
  \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
  \    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n  \
  \  >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n\
  \    3\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
  \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
  \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
  \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
  \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
  \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
completions: ["    return txt.split()\n", "    return txt.split()\n\n", "    words\
    \ = txt.split(' ')\n    if len(words) == 1:\n        return words[0]\n    elif\
    \ len(words) == 2:\n        return words\n    else:\n        words = [word for\
    \ word in words if word != '']\n        words = [word for word in words if word.isalpha()]\n\
    \        words = [word for word in words if ord(word[0]) % 2 == 1]\n        return\
    \ words\n", "    return txt.split()\n", "    words = txt.split()\n    if len(words)\
    \ == 0:\n        return words\n    elif len(words) == 1:\n        return words\n\
    \    else:\n        words = list(words)\n        words[0] = words[0].lower()\n\
    \        words[-1] = words[-1].lower()\n        return words\n", "    return txt.split()\n",
  "    return txt.split()\n", "    return txt.split()\n", "    return txt.split()\n",
  "    words = txt.split()\n    if len(words) == 1:\n        return words[0]\n   \
    \ elif len(words) > 1:\n        return words\n    else:\n        return len(txt)\n",
  "    return txt.split()\n", "    words = txt.split()\n    if len(words) == 0:\n\
    \        return words\n    else:\n        words = [word for word in words if word\
    \ != '']\n        if len(words) == 1:\n            return words\n        else:\n\
    \            words = [word for word in words if word != '']\n            words\
    \ = [word for word in words if word.isalpha()]\n            if len(words) <= 1:\n\
    \                return words\n            else:\n                words = [word\
    \ for word in words if word.isalpha()]\n                words = [word for word\
    \ in words if word.islower()]\n                words = [word for word in words\
    \ if ord(word[0]) % 2 != 0]\n                return words\n", "    return txt.split()\n",
  "    return txt.split()\n", "    return txt.split()\n", "    return txt.split()\n",
  "    words = txt.split()\n    if len(words) == 0:\n        return words\n    else:\n\
    \        words = [word for word in words if word != \"\"]\n        words = [word\
    \ for word in words if word.isalpha()]\n        if len(words) == 0:\n        \
    \    return words\n        else:\n            words = [word for word in words\
    \ if ord(word[0]) % 2 == 1]\n            if len(words) == 0:\n               \
    \ return words\n            else:\n                return words\n", "    return\
    \ txt.split()\n", "    return txt.split()\n", "    return txt.split()\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
