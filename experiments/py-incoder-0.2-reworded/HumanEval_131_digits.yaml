name: HumanEval_131_digits
language: py
prompt: "def digits(n: int) -> int:\n    \"\"\"Given a positive integer n, return\
  \ the product of the odd digits.\n    Return 0 if all digits are even.\n    For\
  \ example:\n    >>> digits(1)\n    1\n    >>> digits(4)\n    0\n    >>> digits(235)\n\
  \    15\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(5) == 5\n    assert candidate(54)\
  \ == 5\n    assert candidate(120) == 1\n    assert candidate(5014) == 5\n    assert\
  \ candidate(98765) == 315\n    assert candidate(5576543) == 2625\n    assert candidate(2468)\
  \ == 0\n\ndef test_check():\n    check(digits)\n\ntest_check()\n"
completions: ["    if n == 0:\n        return 0\n    digits = 1\n    while n > 0:\n\
    \        digits = digits * n % 10\n        n = n // 10\n    return digits\n\n",
  "    product = 1\n    while n > 0:\n        product *= n % 10\n        n //= 10\n\
    \    return product\n\n", "    product = 1\n    while n > 0:\n        product\
    \ *= n % 10\n        n //= 10\n    return product\n\n", "    product = 1\n   \
    \ while n > 0:\n        product *= n % 10\n        n //= 10\n    return product\n\
    \n", "    product = 1\n    while n:\n        product *= n % 10\n        n //=\
    \ 10\n    return product\n\n", "    product = 1\n    while n > 0:\n        product\
    \ *= n % 10\n        n //= 10\n    return product\n\n", "    product = 1\n   \
    \ while n > 0:\n        product *= n % 10\n        n //= 10\n    return product\n\
    \n", "    return n * digits(n // 10)\n\n", "    if n == 0:\n        return 0\n\
    \    digits = 1\n    while n > 0:\n        digits = digits * n % 10\n        n\
    \ = n // 10\n    return digits\n\n", "    if n == 0:\n        return 0\n    product\
    \ = 1\n    while n > 0:\n        product *= n % 10\n        n //= 10\n    return\
    \ product\n\n", "    return prod([d for d in str(n) if d % 2 != 0])\n\n", "  \
    \  if n == 0:\n        return 0\n    product = 1\n    while n > 0:\n        product\
    \ *= n % 10\n        n //= 10\n    return product\n\n", "    if n == 0:\n    \
    \    return 0\n    digits = 1\n    while n > 0:\n        digits = digits * n %\
    \ 10\n        n = n // 10\n    return digits\n\n", "    product = 1\n    while\
    \ n > 0:\n        product *= n % 10\n        n //= 10\n    return product\n\n",
  "    return n // 10 * 2 + n % 10\n\n", "    if n == 0:\n        return 0\n    digits\
    \ = 1\n    while n > 0:\n        digits = digits * n % 10\n        n = n // 10\n\
    \    return digits\n\n", "    product = 1\n    while n > 0:\n        product *=\
    \ n % 10\n        n //= 10\n    return product\n\n", "    return n * digits(n\
    \ // 2)\n\n", "    if n == 0:\n        return 0\n    product = 1\n    while n\
    \ > 0:\n        product *= n % 10\n        n //= 10\n    return product\n\n",
  "    product = 1\n    while n > 0:\n        product *= n % 10\n        n //= 10\n\
    \    return product\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
