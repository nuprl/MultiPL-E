name: HumanEval_111_histogram
language: py
results:
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    letters_count.most_common()\n\
    \    letters_count.most_common(1)\n    letters_count.most_common(2)\n    letters_count.most_common(3)\n\
    \    letters_count.most_common(4)\n    letters_count.most_common(5)\n    letters_count.most_common(6)\n\
    \    letters_count.most_common(7)\n    letters_count.most_common(8)\n    letters_count.most_common(9)\n\
    \    letters_count.most_common(10)\n    letters_count.most_common(11)\n    letters_count.most_common(12)\n\
    \    letters_count.most_common(13)\n    letters_count.most_common(14)\n    letters_count.most_common(15)\n\
    \    letters_count.most_common(16)\n    letters_count.most_common(17)\n    letters_count.most_common(18)\n\
    \    letters_count.most_common(19)\n    letters_count.most_common(20)\n    letters_count.most_common(21)\n\
    \    letters_count.most_common(22)\n    letters_count.most_common(23)\n    letters_count.most_common(24)\n\
    \    letters_count.most_common(25)\n    letters_count.most_common(26)\n    letters_count.most_common(27)\n\
    \    letters_count.most_common(28)\n    letters_count.most_common(29)\n    letters_count.most_common(30)\n\
    \    letters_count.most_common(31)\n    letters_count.most_common(32)\n    letters_count.most_common(33)\n\
    \    letters_count.most_common(34)\n    letters_count.most_common(35)\n    letters_count.most_common(36)\n\
    \    letters_count.most_common(37)\n    letters_count.most_common(38)\n    letters_count.most_common(39)\n\
    \    letters_count.most_common(40)\n    letters_count.most_common(41)\n    letters_count.most_common(42)\n\
    \    letters_count.most_common(43)\n    letters_count.most_common(44)\n    letters_count.most_common(45)\n\
    \    letters_count.most_common(46)\n    letters_count.most_common(47)\n    letters_count.most_common(48)\n\
    \    letters_count.most_common(49)\n    letters_count.most_common(50)\n    letters_count.most_common(51)\n\
    \    letters_count.most_common(52)\n    letters_count.most_common\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmc2uc22f.py\"\
    , line 90, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmc2uc22f.py\"\
    , line 88, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmc2uc22f.py\"\
    , line 78, in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \ File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmc2uc22f.py\", line\
    \ 22, in histogram\n    letters_count = Counter(letters)\nNameError: name 'Counter'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    counts = {}\n    for letter in letters:\n        if letter\
    \ in counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    return counts\n\ndef check(candidate):\n    assert candidate('a b b\
    \ a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1,\
    \ 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0s8fmfm.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0s8fmfm.py\"\
    , line 41, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0s8fmfm.py\"\
    , line 32, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    return letters_count\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjr2kkgo2.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjr2kkgo2.py\"\
    , line 36, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjr2kkgo2.py\"\
    , line 26, in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \ File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjr2kkgo2.py\", line\
    \ 22, in histogram\n    letters_count = Counter(letters)\nNameError: name 'Counter'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    letters.sort()\n    counts = {}\n    for letter in letters:\n\
    \        if letter in counts:\n            counts[letter] += 1\n        else:\n\
    \            counts[letter] = 1\n    return counts\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpot43r31s.py\"\
    , line 44, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpot43r31s.py\"\
    , line 42, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpot43r31s.py\"\
    , line 33, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    counts = Counter(letters)\n    return dict(counts)\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6y4l4jef.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6y4l4jef.py\"\
    , line 36, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6y4l4jef.py\"\
    , line 26, in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \ File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6y4l4jef.py\", line\
    \ 22, in histogram\n    counts = Counter(letters)\nNameError: name 'Counter' is\
    \ not defined. Did you mean: 'counts'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    counts = {}\n    for letter in letters:\n        if letter\
    \ in counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    return counts\n\ndef check(candidate):\n    assert candidate('a b b\
    \ a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1,\
    \ 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8j_18bpk.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8j_18bpk.py\"\
    , line 41, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8j_18bpk.py\"\
    , line 32, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    return letters_count.most_common()\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe5z52rt7.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe5z52rt7.py\"\
    , line 36, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe5z52rt7.py\"\
    , line 26, in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \ File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe5z52rt7.py\", line\
    \ 22, in histogram\n    letters_count = Counter(letters)\nNameError: name 'Counter'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    letters_count = {}\n    for letter in letters:\n       \
    \ if letter in letters_count:\n            letters_count[letter] += 1\n      \
    \  else:\n            letters_count[letter] = 1\n    return letters_count\n\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2_xxfrb.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2_xxfrb.py\"\
    , line 41, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2_xxfrb.py\"\
    , line 32, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    counts = {}\n    for letter in letters:\n        if letter\
    \ in counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    return counts\n\ndef check(candidate):\n    assert candidate('a b b\
    \ a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1,\
    \ 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdj25whl7.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdj25whl7.py\"\
    , line 41, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdj25whl7.py\"\
    , line 32, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    counts = {}\n    for letter in letters:\n        if letter\
    \ in counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    return counts\n\ndef check(candidate):\n    assert candidate('a b b\
    \ a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1,\
    \ 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0rjrzl4q.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0rjrzl4q.py\"\
    , line 41, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0rjrzl4q.py\"\
    , line 32, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    counts = {}\n    for letter in letters:\n        if letter\
    \ in counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    return counts\n\ndef check(candidate):\n    assert candidate('a b b\
    \ a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1,\
    \ 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf29i7l8z.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf29i7l8z.py\"\
    , line 41, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf29i7l8z.py\"\
    , line 32, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    letters_count_sorted\
    \ = sorted(letters_count.items(), key=lambda item: item[1], reverse=True)\n  \
    \  return letters_count_sorted\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwww57ph.py\"\
    , line 39, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwww57ph.py\"\
    , line 37, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwww57ph.py\"\
    , line 27, in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \ File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwww57ph.py\", line\
    \ 22, in histogram\n    letters_count = Counter(letters)\nNameError: name 'Counter'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    letters_count = {}\n    for letter in letters:\n       \
    \ if letter in letters_count:\n            letters_count[letter] += 1\n      \
    \  else:\n            letters_count[letter] = 1\n    return letters_count\n\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm1ps1w9g.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm1ps1w9g.py\"\
    , line 41, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm1ps1w9g.py\"\
    , line 32, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    letters = list(set(letters))\n    letters.sort()\n    counts\
    \ = {}\n    for letter in letters:\n        counts[letter] = letters.count(letter)\n\
    \    return counts\n\ndef check(candidate):\n    assert candidate('a b b a') ==\
    \ { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgxjvrsoe.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgxjvrsoe.py\"\
    , line 40, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgxjvrsoe.py\"\
    , line 30, in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    letters_set = set(letters)\n    letters_count = Counter(letters)\n\
    \    letters_count_sorted = sorted(letters_count.items(), key=lambda x: x[1],\
    \ reverse=True)\n    letters_count_sorted_letters = [x[0] for x in letters_count_sorted]\n\
    \    letters_count_sorted_counts = [x[1] for x in letters_count_sorted]\n    letters_count_sorted_letters_set\
    \ = set(letters_count_sorted_letters)\n    letters_count_sorted_counts_set = set(letters_count_sorted_counts)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_sorted_letters_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_sorted_letters_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_sorted_counts_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_sorted_counts_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_sorted_counts_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_sorted_counts_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_sorted_counts_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_sorted_counts_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_sorted_counts_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_sorted_counts_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_sorted_counts_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_sorted_counts_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_sorted_counts_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_sorted_counts_set)\n\
    \    letters_count_sorted_counts_set = letters_count_sorted_counts_set.difference(letters_count_sorted_counts_set)\n\
    \    letters_count_sorted_counts_set = \ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph1gjzyly.py\"\
    , line 46\n    letters_count_sorted_counts_set = \n                          \
    \            ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    counts = {}\n    for letter in letters:\n        if letter\
    \ in counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    return counts\n\ndef check(candidate):\n    assert candidate('a b b\
    \ a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1,\
    \ 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rc53a9q.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rc53a9q.py\"\
    , line 41, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rc53a9q.py\"\
    , line 32, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    letters_count_sorted\
    \ = sorted(letters_count.items(), key=lambda x: x[1], reverse=True)\n    letters_count_sorted\
    \ = [letter for letter, count in letters_count_sorted]\n    return dict(letters_count_sorted)\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3i8qcr5t.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3i8qcr5t.py\"\
    , line 38, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3i8qcr5t.py\"\
    , line 28, in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \ File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3i8qcr5t.py\", line\
    \ 22, in histogram\n    letters_count = Counter(letters)\nNameError: name 'Counter'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    letters = list(letters)\n    letters.sort(key=str.lower)\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n\ndef check(candidate):\n    assert candidate('a b b a') ==\
    \ { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv5wh9o6i.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv5wh9o6i.py\"\
    , line 43, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv5wh9o6i.py\"\
    , line 34, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    counts = {}\n    for letter in letters:\n        if letter\
    \ in counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    return counts\n\ndef check(candidate):\n    assert candidate('a b b\
    \ a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1,\
    \ 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp564w_pw0.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp564w_pw0.py\"\
    , line 41, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp564w_pw0.py\"\
    , line 32, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1,\
    \ 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n   \
    \ >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b\
    \ b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n    letters\
    \ = test.split()\n    letters = list(letters)\n    letters.sort()\n    counts\
    \ = {}\n    for letter in letters:\n        if letter in counts:\n           \
    \ counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return\
    \ counts\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0vmxygvq.py\"\
    , line 45, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0vmxygvq.py\"\
    , line 43, in test_check\n    check(histogram)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0vmxygvq.py\"\
    , line 34, in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
