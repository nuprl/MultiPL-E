name: HumanEval_34_unique
language: py
prompt: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    \"\
  \"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9,\
  \ 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
  \ == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
completions: ["    seen = set()\n    seen_add = seen.add\n    return [x for x in l\
    \ if x not in seen and not seen_add(x)]\n", "    seen = set()\n    seen_add =\
    \ seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    return sorted(set(l))\n",
  "    return sorted(set(l))\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    return sorted(set(l))\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    return sorted(set(l))\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    return sorted(set(l))\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    return sorted(set(l))\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    return\
    \ sorted(set(l))\n", "    seen = set()\n    seen_add = seen.add\n    return [x\
    \ for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n   \
    \ seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    return sorted(set(l))\n",
  "    return sorted(set(l))\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    return sorted(set(l))\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    return sorted(set(l))\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    return\
    \ sorted(set(l))\n", "    seen = set()\n    seen_add = seen.add\n    return [x\
    \ for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n   \
    \ seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    return sorted(set(l))\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    return sorted(set(l))\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    return sorted(set(l))\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    return sorted(set(l))\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    return sorted(set(l))\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    return sorted(set(l))\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    return sorted(set(l))\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    return sorted(set(l))\n", "    return sorted(set(l))\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if not (x in seen or seen_add(x))]\n", "    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n",
  "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in\
    \ seen and not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n \
    \   return [x for x in l if x not in seen and not seen_add(x)]\n", "    seen =\
    \ set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and\
    \ not seen_add(x)]\n", "    seen = set()\n    seen_add = seen.add\n    return\
    \ [x for x in l if x not in seen and not seen_add(x)]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
