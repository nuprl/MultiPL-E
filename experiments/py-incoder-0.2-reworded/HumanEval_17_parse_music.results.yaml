name: HumanEval_17_parse_music
language: py
results:
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = []\n    notes_str = ''\n    for c in music_string:\n       \
    \ if c == '.':\n            notes.append(notes_str)\n            notes_str = ''\n\
    \        elif c == '|':\n            notes_str += '2'\n        elif c == 'o':\n\
    \            notes_str += '1'\n        else:\n            notes_str += c\n   \
    \ notes.append(notes_str)\n    return notes\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyv1c_94a.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpyv1c_94a.py\", line 39,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpyv1c_94a.py\", line\
    \ 32, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = music_string.split(' ')\n    notes = [note.strip() for note\
    \ in notes]\n    notes = [note for note in notes if note != '']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != 'o']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != 'o']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != 'o']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != 'o']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != 'o']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != 'o']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != 'o']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != 'o']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != 'o']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != 'o']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != 'o']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != 'o']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != 'o']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != 'o']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != 'o']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != 'o']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != 'o']\n    notes = [note \ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpbudr21s8.py\", line 54\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = music_string.split(' ')\n    notes = [n for n in notes if n\
    \ != '']\n    notes = [n for n in notes if n[0] != '|']\n    notes = [n for n\
    \ in notes if n[0] != 'o']\n    notes = [n for n in notes if n[0] != '|']\n  \
    \  notes = [n for n in notes if n[0] != 'o']\n    notes = [n for n in notes if\
    \ n[0] != '|']\n    notes = [n for n in notes if n[0] != 'o']\n    notes = [n\
    \ for n in notes if n[0] != '|']\n    notes = [n for n in notes if n[0] != 'o']\n\
    \    notes = [n for n in notes if n[0] != '|']\n    notes = [n for n in notes\
    \ if n[0] != 'o']\n    notes = [n for n in notes if n[0] != '|']\n    notes =\
    \ [n for n in notes if n[0] != 'o']\n    notes = [n for n in notes if n[0] !=\
    \ '|']\n    notes = [n for n in notes if n[0] != 'o']\n    notes = [n for n in\
    \ notes if n[0] != '|']\n    notes = [n for n in notes if n[0] != 'o']\n    notes\
    \ = [n for n in notes if n[0] != '|']\n    notes = [n for n in notes if n[0] !=\
    \ 'o']\n    notes = [n for n in notes if n[0] != '|']\n    notes = [n for n in\
    \ notes if n[0] != 'o']\n    notes = [n for n in notes if n[0] != '|']\n    notes\
    \ = [n for n in notes if n[0] != 'o']\n    notes = [n for n in notes if n[0] !=\
    \ '|']\n    notes = [n for n in notes if n[0] != 'o']\n    notes = [n for n in\
    \ notes if n[0] != '|']\n    notes = [n for n in notes if n[0] != 'o']\n    notes\
    \ = [n for n in notes if n[0] != '|']\n    notes = [n for n in notes if n[0] !=\
    \ 'o']\n    notes = [n for n in notes if n[0] != '|']\n    notes = [n for n in\
    \ notes if n[0] != 'o']\n    notes = [n for n in notes if n[0] != '|']\n    notes\
    \ = [n for n in notes if n[0] != 'o']\n    notes = [n for n in notes if n[0] !=\
    \ '|']\n    notes = [n for n in notes if n[0] != 'o']\n    notes = [n for n in\
    \ notes if n[0] != '|']\n    notes = [n for n in notes if n[0] != 'o']\n    notes\
    \ = [n for n in notes if n[0] != '|']\n    notes = [n for n in notes if n[0] !=\
    \ 'o']\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpccse3lse.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpccse3lse.py\", line 64,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpccse3lse.py\", line\
    \ 57, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = []\n    notes_str = music_string.split(' ')\n    for note in\
    \ notes_str:\n        if note == 'o':\n            notes.append(4)\n        elif\
    \ note == 'o|':\n            notes.append(2)\n        elif note == '.|':\n   \
    \         notes.append(1)\n        else:\n            raise ValueError(f'Unknown\
    \ note {note}')\n    return notes\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppt0mt72r.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmppt0mt72r.py\", line 37,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmppt0mt72r.py\", line\
    \ 30, in check\n    assert candidate('') == []\n  File \"/tmp/tmppt0mt72r.py\"\
    , line 26, in parse_music\n    raise ValueError(f'Unknown note {note}')\nValueError:\
    \ Unknown note \n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = music_string.split(' ')\n    notes = [note.strip() for note\
    \ in notes]\n    notes = [note for note in notes if note != '']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != 'o']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note \ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp_qdcc_1l.py\", line 54\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = music_string.split(' ')\n    notes = [note.strip() for note\
    \ in notes]\n    notes = [note for note in notes if note != '']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != 'o']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note for note in notes if note\
    \ != '|']\n    notes = [note for note in notes if note != '|']\n    notes = [note\
    \ for note in notes if note != '|']\n    notes = [note \ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp_gfpx8bn.py\", line 54\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = []\n    notes_str = music_string.strip()\n    for note in notes_str.split('|'):\n\
    \        notes.append(int(note))\n    return notes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92ou0wvz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp92ou0wvz.py\", line 30,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp92ou0wvz.py\", line\
    \ 23, in check\n    assert candidate('') == []\n  File \"/tmp/tmp92ou0wvz.py\"\
    , line 19, in parse_music\n    notes.append(int(note))\nValueError: invalid literal\
    \ for int() with base 10: ''\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = []\n    notes_str = ''\n    for char in music_string:\n    \
    \    if char == 'o':\n            notes.append(4)\n        elif char == 'o|':\n\
    \            notes.append(2)\n        elif char == '.|':\n            notes.append(1)\n\
    \        else:\n            notes_str += char\n    notes.append(len(notes_str)\
    \ / 4)\n    return notes\n\ndef check(candidate):\n    assert candidate('') ==\
    \ []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4qrhabt7.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp4qrhabt7.py\", line 38,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp4qrhabt7.py\", line\
    \ 31, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = []\n    notes_str = ''\n    notes_str_list = music_string.split('\
    \ ')\n    for note in notes_str_list:\n        if note == 'o':\n            notes.append(4)\n\
    \        elif note == 'o|':\n            notes.append(2)\n        elif note ==\
    \ '.|':\n            notes.append(1)\n        else:\n            raise ValueError(f\"\
    Unknown note {note}\")\n    return notes\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbwq6cp3k.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbwq6cp3k.py\", line 38,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpbwq6cp3k.py\", line\
    \ 31, in check\n    assert candidate('') == []\n  File \"/tmp/tmpbwq6cp3k.py\"\
    , line 27, in parse_music\n    raise ValueError(f\"Unknown note {note}\")\nValueError:\
    \ Unknown note \n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = music_string.split(' ')\n    notes = [note.strip() for note\
    \ in notes]\n    notes = [note for note in notes if note != '']\n    notes = [note\
    \ for note in notes if note[0] != '|']\n    notes = [note for note in notes if\
    \ note[-1] != '|']\n    notes = [note for note in notes if note[0] != 'o']\n \
    \   notes = [note for note in notes if note[-1] != 'o']\n    notes = [note for\
    \ note in notes if note[0] != '|']\n    notes = [note for note in notes if note[-1]\
    \ != '|']\n    notes = [note for note in notes if note[0] != 'o']\n    notes =\
    \ [note for note in notes if note[-1] != 'o']\n    notes = [note for note in notes\
    \ if note[0] != '|']\n    notes = [note for note in notes if note[-1] != '|']\n\
    \    notes = [note for note in notes if note[0] != 'o']\n    notes = [note for\
    \ note in notes if note[-1] != 'o']\n    notes = [note for note in notes if note[0]\
    \ != '|']\n    notes = [note for note in notes if note[-1] != '|']\n    notes\
    \ = [note for note in notes if note[0] != 'o']\n    notes = [note for note in\
    \ notes if note[-1] != 'o']\n    notes = [note for note in notes if note[0] !=\
    \ '|']\n    notes = [note for note in notes if note[-1] != '|']\n    notes = [note\
    \ for note in notes if note[0] != 'o']\n    notes = [note for note in notes if\
    \ note[-1] != 'o']\n    notes = [note for note in notes if note[0] != '|']\n \
    \   notes = [note for note in notes if note[-1] != '|']\n    notes = [note for\
    \ note in notes if note[0] != 'o']\n    notes = [note for note in notes if note[-1]\
    \ != 'o']\n    notes = [note for note in notes if note[0] != '|']\n    notes =\
    \ [note for note in notes if note[-1] != '|']\n    notes = [note for note in notes\
    \ if note[0] != 'o']\n    notes = [note for note in notes if note[-1] != 'o']\n\
    \    notes = [note for note in notes if note[0] != '|']\n    notes = [note for\
    \ note in notes if note[-1] != '|']\n    notes = [note for note in notes if note[0]\
    \ != 'o']\n    notes = [note for note in notes if note[-1] != 'o']\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd9vm3_zw.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpd9vm3_zw.py\", line 60,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpd9vm3_zw.py\", line\
    \ 53, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = music_string.split(' ')\n    notes = [note.replace('|', '')\
    \ for note in notes]\n    notes = [note.replace('o', '') for note in notes]\n\
    \    notes = [note.replace('.', '') for note in notes]\n    notes = [int(note)\
    \ for note in notes]\n    return notes\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4hscze_g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4hscze_g.py\", line 31,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp4hscze_g.py\", line\
    \ 24, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4hscze_g.py\"\
    , line 20, in parse_music\n    notes = [int(note) for note in notes]\n  File \"\
    /tmp/tmp4hscze_g.py\", line 20, in <listcomp>\n    notes = [int(note) for note\
    \ in notes]\nValueError: invalid literal for int() with base 10: ''\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = ['o', 'o|', '|.|']\n    notes_length = len(notes)\n    beats_length\
    \ = int(len(music_string) / notes_length)\n    beats = []\n    for i in range(beats_length):\n\
    \        beats.append(0)\n    i = 0\n    while i < len(music_string):\n      \
    \  if music_string[i] in notes:\n            beats[notes.index(music_string[i])]\
    \ += 1\n        i += 1\n    return beats\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvzqflem.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmppvzqflem.py\", line 37,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmppvzqflem.py\", line\
    \ 31, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = ['o', 'o|', '.|']\n    notes_length = len(notes)\n    beats_length\
    \ = int(len(music_string) / notes_length)\n    notes_indexes = [notes_length *\
    \ i for i in range(beats_length)]\n    notes_indexes[-1] = len(music_string)\n\
    \    notes_indexes = [notes_index - 1 for notes_index in notes_indexes]\n    notes_indexes\
    \ = [notes_index - 1 for notes_index in notes_indexes]\n    notes_indexes = [notes_index\
    \ - 1 for notes_index in notes_indexes]\n    notes_indexes = [notes_index - 1\
    \ for notes_index in notes_indexes]\n    notes_indexes = [notes_index - 1 for\
    \ notes_index in notes_indexes]\n    notes_indexes = [notes_index - 1 for notes_index\
    \ in notes_indexes]\n    notes_indexes = [notes_index - 1 for notes_index in notes_indexes]\n\
    \    notes_indexes = [notes_index - 1 for notes_index in notes_indexes]\n    notes_indexes\
    \ = [notes_index - 1 for notes_index in notes_indexes]\n    notes_indexes = [notes_index\
    \ - 1 for notes_index in notes_indexes]\n    notes_indexes = [notes_index - 1\
    \ for notes_index in notes_indexes]\n    notes_indexes = [notes_index - 1 for\
    \ notes_index in notes_indexes]\n    notes_indexes = [notes_index - 1 for notes_index\
    \ in notes_indexes]\n    notes_indexes = [notes_index - 1 for notes_index in notes_indexes]\n\
    \    notes_indexes = [notes_index - 1 for notes_index in notes_indexes]\n    notes_indexes\
    \ = [notes_index - 1 for notes_index in notes_indexes]\n    notes_indexes = [notes_index\
    \ - 1 for notes_index in notes_indexes]\n    notes_indexes = [notes_index - 1\
    \ for notes_index in notes_indexes]\n    notes_indexes = [notes_index - 1 for\
    \ notes_index in notes_indexes]\n    notes_indexes = [notes_index - 1 for notes_index\
    \ in notes_indexes]\n    notes_indexes = [notes_index - 1 for notes_index in notes_indexes]\n\
    \    notes_indexes = [notes_index - 1 for notes_index in notes_indexes]\n    notes_indexes\
    \ = [notes_index - 1 for notes_index in notes_indexes]\n    notes_indexes = [notes_index\
    \ - 1 for notes_index in notes_indexes]\n    notes_indexes = [notes_index - 1\
    \ for notes_index in notes_indexes]\n    notes_indexes = [\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp6kgfrmgj.py\", line 47\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = []\n    notes_str = ''\n    for c in music_string:\n       \
    \ if c == 'o':\n            notes.append(4)\n        elif c == 'o|':\n       \
    \     notes.append(2)\n        elif c == '.|':\n            notes.append(1)\n\
    \        else:\n            notes_str += c\n    notes.append(len(notes_str))\n\
    \    return notes\n\ndef check(candidate):\n    assert candidate('') == []\n \
    \   assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .|\
    \ .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2,\
    \ 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqsdmwl3o.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpqsdmwl3o.py\", line 38,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpqsdmwl3o.py\", line\
    \ 31, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = []\n    notes_str = ''\n    for c in music_string:\n       \
    \ if c == 'o':\n            notes.append(4)\n        elif c == '|':\n        \
    \    notes.append(2)\n        elif c == '.':\n            notes.append(1)\n  \
    \      else:\n            notes.append(0)\n        notes_str += c\n    return\
    \ notes\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7vwzg4ot.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp7vwzg4ot.py\", line 38,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp7vwzg4ot.py\", line\
    \ 32, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = []\n    notes_str = ''\n    notes_str_list = music_string.split('\
    \ ')\n    for notes_str in notes_str_list:\n        if notes_str == 'o':\n   \
    \         notes.append(4)\n        elif notes_str == 'o|':\n            notes.append(2)\n\
    \        elif notes_str == '.|':\n            notes.append(1)\n        else:\n\
    \            raise Exception(f'Unknown note {notes_str}')\n    return notes\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzt836z1m.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpzt836z1m.py\", line 38,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpzt836z1m.py\", line\
    \ 31, in check\n    assert candidate('') == []\n  File \"/tmp/tmpzt836z1m.py\"\
    , line 27, in parse_music\n    raise Exception(f'Unknown note {notes_str}')\n\
    Exception: Unknown note \n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = ['o', 'o|', '|.|']\n    notes_index = 0\n    notes_beats = []\n\
    \    notes_beats_index = 0\n    notes_beats_index2 = 0\n    notes_beats_index3\
    \ = 0\n    notes_beats_index4 = 0\n    notes_beats_index5 = 0\n    notes_beats_index6\
    \ = 0\n    notes_beats_index7 = 0\n    notes_beats_index8 = 0\n    notes_beats_index9\
    \ = 0\n    notes_beats_index10 = 0\n    notes_beats_index11 = 0\n    notes_beats_index12\
    \ = 0\n    notes_beats_index13 = 0\n    notes_beats_index14 = 0\n    notes_beats_index15\
    \ = 0\n    notes_beats_index16 = 0\n    notes_beats_index17 = 0\n    notes_beats_index18\
    \ = 0\n    notes_beats_index19 = 0\n    notes_beats_index20 = 0\n    notes_beats_index21\
    \ = 0\n    notes_beats_index22 = 0\n    notes_beats_index23 = 0\n    notes_beats_index24\
    \ = 0\n    notes_beats_index25 = 0\n    notes_beats_index26 = 0\n    notes_beats_index27\
    \ = 0\n    notes_beats_index28 = 0\n    notes_beats_index29 = 0\n    notes_beats_index30\
    \ = 0\n    notes_beats_index31 = 0\n    notes_beats_index32 = 0\n    notes_beats_index33\
    \ = 0\n    notes_beats_index34 = 0\n    notes_beats_index35 = 0\n    notes_beats_index36\
    \ = 0\n    notes_beats_index37 = 0\n    notes_beats_index38 = 0\n    notes_beats_index39\
    \ = 0\n    notes_beats_index40 = 0\n    notes_beats_index41 = 0\n    notes_beats_index42\
    \ = 0\n    notes_beats_index43 = 0\n    notes_beats_index44 = 0\n    notes_beats_index45\
    \ = 0\n    notes_beats_index46 = 0\n    notes_beats_index47 = 0\n    notes_beats_index48\
    \ = 0\n    notes_beats_index49 = 0\n    notes_beats_index50 = 0\n    notes_beats_index51\
    \ = 0\n    notes_beats_index52 = 0\n    notes_beats_index53 = 0\n    notes_beats_index54\
    \ = 0\n    notes_\ndef check(candidate):\n    assert candidate('') == []\n   \
    \ assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .|\
    \ .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2,\
    \ 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ecoteh3.py\", line\
    \ 84, in <module>\n    test_check()\n  File \"/tmp/tmp_ecoteh3.py\", line 82,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp_ecoteh3.py\", line\
    \ 75, in check\n    assert candidate('') == []\n  File \"/tmp/tmp_ecoteh3.py\"\
    , line 73, in parse_music\n    notes_\nNameError: name 'notes_' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = []\n    notes_str = ''\n    for c in music_string:\n       \
    \ if c == 'o':\n            notes.append(4)\n            notes_str += 'o'\n  \
    \      elif c == '|':\n            notes.append(2)\n            notes_str += '|'\n\
    \        elif c == '.':\n            notes.append(1)\n            notes_str +=\
    \ '.'\n        else:\n            notes.append(1)\n            notes_str += c\n\
    \    notes = [int(i) for i in notes]\n    return notes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2giycc66.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp2giycc66.py\", line 42,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp2giycc66.py\", line\
    \ 36, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n  \
    \  assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .|\
    \ .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2,\
    \ 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpliewmu2g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpliewmu2g.py\", line 27,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpliewmu2g.py\", line\
    \ 20, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\n    notes = []\n    notes_str_list = music_string.split(' ')\n    for note_str\
    \ in notes_str_list:\n        if note_str == 'o':\n            notes.append(4)\n\
    \        elif note_str == 'o|':\n            notes.append(2)\n        elif note_str\
    \ == '.|':\n            notes.append(1)\n        else:\n            raise Exception(f'Unknown\
    \ note {note_str}')\n    return notes\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpksdrldf0.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpksdrldf0.py\", line 37,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpksdrldf0.py\", line\
    \ 30, in check\n    assert candidate('') == []\n  File \"/tmp/tmpksdrldf0.py\"\
    , line 26, in parse_music\n    raise Exception(f'Unknown note {note_str}')\nException:\
    \ Unknown note \n"
  exit_code: -1
  status: Exception
