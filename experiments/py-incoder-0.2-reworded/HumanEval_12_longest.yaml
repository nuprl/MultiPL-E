name: HumanEval_12_longest
language: py
prompt: "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n\
  \    \"\"\" Out of list of strings, return the longest one. Return the first one\
  \ in case of multiple\n    strings of the same length. Return None in case the input\
  \ list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a', 'b', 'c'])\n\
  \    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
  \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc'])\
  \ == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
completions: ["    if not strings:\n        return None\n    return max(strings, key=len)\n",
  "    if not strings:\n        return None\n    return max(strings, key=len)\n",
  "    if not strings:\n        return None\n    return max(strings, key=len)\n",
  "    if not strings:\n        return None\n    return max(strings, key=len)\n",
  "    if not strings:\n        return None\n    max_length = 0\n    max_length_str\
    \ = None\n    for s in strings:\n        if len(s) > max_length:\n           \
    \ max_length = len(s)\n            max_length_str = s\n    if max_length == 0:\n\
    \        return None\n    return max_length_str\n", "    if not strings:\n   \
    \     return None\n    return max(strings, key=len)\n", "    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n", "    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n", "    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n", "    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n", "    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n", "    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n", "    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n", "    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n", "    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n", "    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n", "    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n", "    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n", "    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n", "    if not strings:\n\
    \        return None\n    return max(strings, key=len)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
