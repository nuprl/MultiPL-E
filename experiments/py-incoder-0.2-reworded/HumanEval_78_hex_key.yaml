name: HumanEval_78_hex_key
language: py
prompt: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a\
  \ function that receives \n    a hexadecimal number as a string and counts the number\
  \ of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural\
  \ number \n    greater than 1 that is not a product of two smaller natural numbers).\n\
  \    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n  \
  \  Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a\
  \ number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal\
  \ 13).\n    Note: you may assume the input is always correct or empty string, \n\
  \    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n\
  \    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n  \
  \  >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\
  \"\"\n"
tests: "def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
  \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n\
  \    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
  \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
completions: ["    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    hex_list2\
    \ = []\n    \n    hex_list2.append(hex_list[0])\n    \n    for i in range(1,len(hex_list)):\n\
    \        \n        if hex_list[i] == hex_list[i-1]:\n            hex_list2.append(hex_list[i])\n\
    \        else:\n            hex_list2.append(hex_list[i])\n            hex_list2.append(hex_list[i-1])\n\
    \            \n    hex_list2.sort()\n    \n    hex_list3 = []\n    \n    hex_list3.append(hex_list2[0])\n\
    \    \n    for i in range(1,len(hex_list2)):\n        \n        if hex_list2[i]\
    \ == hex_list2[i-1]:\n            hex_list3.append(hex_list2[i])\n        else:\n\
    \            hex_list3.append(hex_list2[i])\n            hex_list3.append(hex_list2[i-1])\n\
    \            \n    hex_list3.sort()\n    \n    hex_list4 = []\n    \n    hex_list4.append(hex_list3[0])\n\
    \    \n    for i in range(1,len(hex_list3)):\n        \n        if hex_list3[i]\
    \ == hex_list3[i-1]:\n            hex_list4.append(hex_list3[i])\n        else:\n\
    \            hex_list4.append(hex_list3[i])\n            hex_list4.append(hex_list3[i-1])\n\
    \            \n    hex_list4.sort()\n    \n    hex_list5 = []\n    \n    hex_list5.append(hex_list4[0])\n\
    \    \n    for i in range(1,len(hex_list4)):\n        \n        if hex_list4[i]\
    \ == hex_list4[i-1]:\n            hex_list5.append(hex_list4[i])\n        else:\n\
    \            hex_list5.append(hex_list4[i])\n            hex_list5.append(hex_list4[i-1])\n\
    \            \n    hex_list5.sort()\n    \n    hex_list6 = []\n    \n    hex_list6.append(hex_list5[0])\n\
    \    \n    for i in range(1,len(hex_list5)):\n        \n        if hex_list5[i]\
    \ == hex_list5[i-1]:\n            hex_list6.append(hex_list5[i])\n        else:\n\
    \            hex_list6.append(hex_list5[i])\n            hex_list6.append(hex_list5[i-1])\n\
    \            \n    hex_list6.sort()\n    \n    hex_list7 = []\n    \n    hex_list7.append(hex_list6[0])\n\
    \    \n    for i in range(1,len(hex_list6)):\n        \n        if hex_list6[i]\
    \ == hex_list6[i-1]:\n            hex_list7.append(hex_list6[i])\n        else:\n\
    \            hex_list7.append(hex_list6[i])\n            hex_list7.append(hex_list6[i-1])\n\
    \            \n    hex_list7.sort()\n    \n", "    \n    count = 0\n    \n   \
    \ digits = [int(i) for i in num.upper()]\n    \n    for digit in digits:\n   \
    \     if digit in primes:\n            count += 1\n            \n    return count\n\
    </cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\n\
    hex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\n\
    hex_key('2020')\n</cell>\n<text>\nExercise 2\nWrite a function that receives a\
    \ positive integer and returns the sum of the squares of the digits of that number.\n\
    Examples:\n>>> square_digits(123)\n25\n>>> square_digits(125)\n125\n>>> square_digits(125)\n\
    125\n>>> square_digits(0)\n0\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-", "    \n    hex_list = list(num)\n    hex_list.sort()\n\
    \    \n    prime_numbers = []\n    \n    for hex in hex_list:\n        \n    \
    \    if hex in prime_numbers:\n            \n            prime_numbers.remove(hex)\n\
    \            \n        else:\n            \n            prime_numbers.append(hex)\n\
    \            \n    prime_numbers.sort()\n    \n    prime_numbers_length = len(prime_numbers)\n\
    \    \n    if prime_numbers_length == 1:\n        \n        return prime_numbers[0]\n\
    \    \n    elif prime_numbers_length == 2:\n        \n        return prime_numbers[0]\
    \ * prime_numbers[1]\n    \n    else:\n        \n        return prime_numbers[0]\
    \ * prime_numbers[1] * prime_numbers[2]\n    \n    ", "    hex_list = list(num)\n\
    \    hex_list.sort()\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n   \
    \ hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n \
    \   hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(", "    \n    hex_list = ['0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n    \n    hex_dict = {\n     \
    \   '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'a': 10,\n        'b': 11,\n        'c': 12,\n        'd': 13,\n\
    \        'e': 14,\n        'f': 15\n    }\n    \n    hex_digit = hex_dict[num]\n\
    \    \n    hex_digits = []\n    \n    while hex_digit > 0:\n        hex_digits.append(hex_digit)\n\
    \        hex_digit -= 1\n    \n    hex_digits = hex_digits[::-1]\n    \n    hex_digits_primes\
    \ = []\n    \n    for hex_digit in hex_digits:\n        if hex_digit in hex_digits_primes:\n\
    \            hex_digits_primes.remove(hex_digit)\n        else:\n            hex_digits_primes.append(hex_digit)\n\
    \    \n    hex_digits_primes = hex_digits_primes[::-1]\n    \n    hex_digits_primes_count\
    \ = 0\n    \n    for hex_digit in hex_digits_primes:\n        hex_digits_primes_count\
    \ += hex_digit\n    \n    return hex_digits_primes_count\n\n", "    hex_list =\
    \ list(num)\n    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(filter(lambda\
    \ x: x not in '0123456789ABCDEF', hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n\
    \    hex_list = list(filter(lambda x: x not in 'ABCDEF', hex_list))\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = list(filter(lambda x: x not in 'BCD',\
    \ hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(filter(lambda\
    \ x: x not in '0', hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n \
    \   hex_list = list(filter(lambda x: x not in '', hex_list))\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = list(filter(lambda x: x not in '', hex_list))\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(filter(lambda\
    \ x: x not in '', hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n  \
    \  hex_list = list(filter(lambda x: x not in '', hex_list))\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = list(filter(lambda x: x not in '', hex_list))\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(filter(lambda\
    \ x: x not in '', hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n  \
    \  hex_list = list(filter(lambda x: x not in '', hex_list))\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = list(filter(lambda x: x not in '', hex_list))\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(filter(lambda\
    \ x: x not in '', hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n  \
    \  hex_list = list(filter(lambda x: x not in '', hex_list))\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = list(filter(lambda x: x not in '', hex_list))\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(filter(lambda\
    \ x: x not in '', hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n  \
    \  hex_list = list(filter(lambda x: x not in '', hex_list))\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = list(filter(lambda x: x not in '', hex_list))\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(filter(lambda\
    \ x: x not in '', hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n  \
    \  hex_list = list(filter(lambda x: x not in '', hex_list", "    \n    hex_list\
    \ = list(num)\n    hex_list.sort()\n    hex_list.reverse()\n    \n    hex_dict\
    \ = {}\n    \n    for x in hex_list:\n        hex_dict[x] = hex_dict.get(x, 0)\
    \ + 1\n    \n    prime_hex_dict = {}\n    \n    for x in hex_dict:\n        if\
    \ hex_dict[x] % 2 == 0:\n            continue\n        \n        prime_hex_dict[x]\
    \ = hex_dict[x]\n        \n    prime_hex_dict.update({\n        '2': 3,\n    \
    \    '3': 3,\n        '5': 5,\n        '7': 7,\n        '11': 11,\n        '13':\
    \ 13,\n        '17': 17,\n        '19': 19,\n        '23': 23,\n        '29':\
    \ 29,\n        '31': 31,\n        '37': 37,\n        '41': 41,\n        '43':\
    \ 43,\n        '47': 47,\n        '53': 53,\n        '59': 59,\n        '61':\
    \ 61,\n        '67': 67,\n        '71': 71,\n        '73': 73,\n        '79':\
    \ 79,\n        '83': 83,\n        '89': 89,\n        '97': 97,\n        '101':\
    \ 101,\n        '103': 103,\n        '107': 107,\n        '109': 109,\n      \
    \  '113': 113,\n        '127': 127,\n        '131': 131,\n        '137': 137,\n\
    \        '139': 139,\n        '149': 149,\n        '151': 151,\n        '157':\
    \ 157,\n        '163': 163,\n        '167': 167,\n        '173': 173,\n      \
    \  '179': 179,\n        '181': 181,\n        '191': 191,\n        '193': 193,\n\
    \        '197': 197,\n        '199': 199,\n        '211': 211,\n        '223':\
    \ 223,\n        '227': 227,\n        '229': 229,\n        '233': 233,\n      \
    \  '239': 239,\n        '241': 241,\n        '251': 251,\n        '257': 257,\n\
    \        '263': 263,\n        '269': 269,\n        '271': 271,\n        '277':\
    \ 277,\n        '281': 281,\n        '283': 283,\n        '293': 293,\n      \
    \  '307': 307,\n        '311': 311,\n        '313': 313,\n        '317': 317,\n\
    \        '331': 331,\n        '337': 337,\n        '347': 347,\n        '349':\
    \ 349,\n        '353': 353,\n        '359': 359,", "    \n    hex_key = ''\n \
    \   \n    # Your code here\n    \n    return hex_key\n", "    \n    hex_key =\
    \ ''\n    \n    hex_key = int(num, 16)\n    \n    hex_key = str(hex_key)\n   \
    \ \n    hex_key = hex_key.upper()\n    \n    hex_key = list(hex_key)\n    \n \
    \   hex_key = list(map(int, hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x % 2 == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 3 ==\
    \ 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 5 == 0, hex_key))\n\
    \    \n    hex_key = list(filter(lambda x: x % 7 == 0, hex_key))\n    \n    hex_key\
    \ = list(filter(lambda x: x % 11 == 0, hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x % 13 == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 17\
    \ == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 19 == 0, hex_key))\n\
    \    \n    hex_key = list(filter(lambda x: x % 23 == 0, hex_key))\n    \n    hex_key\
    \ = list(filter(lambda x: x % 29 == 0, hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x % 31 == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 37\
    \ == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 41 == 0, hex_key))\n\
    \    \n    hex_key = list(filter(lambda x: x % 43 == 0, hex_key))\n    \n    hex_key\
    \ = list(filter(lambda x: x % 47 == 0, hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x % 53 == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 59\
    \ == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 61 == 0, hex_key))\n\
    \    \n    hex_key = list(filter(lambda x: x % 67 == 0, hex_key))\n    \n    hex_key\
    \ = list(filter(lambda x: x % 71 == 0, hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x % 73 == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 79\
    \ == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 83 == 0, hex_key))\n\
    \    \n    hex_key = list(filter(lambda x: x % 89 == 0, hex_key))\n    \n    hex_key\
    \ = list(filter(lambda x: x % 97 == 0, hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x % 101 == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 103\
    \ == 0, hex_key))", "    \n    hex_key = ''\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = int(hex_key,16)\n \
    \   \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = int(hex_key,16)\n \
    \   \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = int(hex_key,16)\n \
    \   \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = int(hex_key,16)\n \
    \   \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = int(hex_key,16)\n \
    \   \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = int(hex_key,16)\n \
    \   \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = int(hex_key,16)\n \
    \   \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,", "    \n    hex_key = 0\n    \n    hex_key =\
    \ len(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n\
    \    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n\
    \    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key\
    \ = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n   \
    \ \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key =\
    \ int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n\
    \    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n\
    \    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key\
    \ = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n   \
    \ \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key =\
    \ int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n\
    \    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n\
    \    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key\
    \ = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n   \
    \ \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key =\
    \ int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n\
    \    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n\
    \    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key\
    \ = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n   \
    \ \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key =\
    \ int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n\
    \    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n\
    \    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key\
    \ = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    ",
  "    \n    hex_key = ''\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n", "    \n  \
    \  hex_list = list(num)\n    hex_list.sort()\n    \n    hex_dict = {}\n    \n\
    \    for hex in hex_list:\n        if hex in hex_dict:\n            hex_dict[hex]\
    \ += 1\n        else:\n            hex_dict[hex] = 1\n    \n    prime_hex_dict\
    \ = {}\n    \n    for hex in hex_dict:\n        if hex_dict[hex] % 2 == 0:\n \
    \           prime_hex_dict[hex] = hex_dict[hex]\n        else:\n            prime_hex_dict[hex]\
    \ = hex_dict[hex] // 2\n    \n    prime_hex_list = list(prime_hex_dict.keys())\n\
    \    prime_hex_list.sort()\n    \n    prime_hex_dict = {}\n    \n    for hex in\
    \ prime_hex_list:\n        if hex in hex_dict:\n            prime_hex_dict[hex]\
    \ = hex_dict[hex]\n        else:\n            prime_hex_dict[hex] = hex_dict[hex]\
    \ // 2\n    \n    prime_hex_list = list(prime_hex_dict.keys())\n    prime_hex_list.sort()\n\
    \    \n    prime_hex_dict = {}\n    \n    for hex in prime_hex_list:\n       \
    \ if hex in hex_dict:\n            prime_hex_dict[hex] = hex_dict[hex]\n     \
    \   else:\n            prime_hex_dict[hex] = hex_dict[hex] // 2\n    \n    prime_hex_list\
    \ = list(prime_hex_dict.keys())\n    prime_hex_list.sort()\n    \n    prime_hex_dict\
    \ = {}\n    \n    for hex in prime_hex_list:\n        if hex in hex_dict:\n  \
    \          prime_hex_dict[hex] = hex_dict[hex]\n        else:\n            prime_hex_dict[hex]\
    \ = hex_dict[hex] // 2\n    \n    prime_hex_list = list(prime_hex_dict.keys())\n\
    \    prime_hex_list.sort()\n    \n    prime_hex_dict = {}\n    \n    for hex in\
    \ prime_hex_list:\n        if hex in hex_dict:\n            prime_hex_dict[hex]\
    \ = hex_dict[hex]\n        else:\n            prime_hex_dict[hex] = hex_dict[hex]\
    \ // 2\n    \n    prime_hex_list = list(prime_hex_dict.keys())\n    prime_hex_list.sort()\n\
    \    \n    prime_hex_dict = {}\n    \n    for hex in prime_hex_list:\n       \
    \ if hex in hex_dict:\n            prime_hex_dict[hex] = hex_dict[hex]\n     \
    \   else:\n            prime_hex_dict[hex] = hex_dict[hex] // 2\n    \n    prime_hex_list\
    \ = list(prime_hex_dict.keys())\n    prime_hex_list.sort()\n    \n    prime_hex_dict\
    \ = {}\n    \n    for hex in prime_hex_list:", "    \n    hex_key = ''\n    \n\
    \    # Your code here\n    \n    return int(hex_key, 16)\n</cell>\n<cell>\nhex_key('AB')\n\
    </cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n\
    <cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that receives a positive integer and returns\
    \ the sum of the squares of the digits of that number.\nExamples:\n>>> square_digits(123)\n\
    123\n>>> square_digits(1234)\n9\n>>> square_digits(12345)\n49\n>>> square_digits(123456789)\n\
    987\n>>> square_digits(1234567890)\n9876\n>>> square_digits(12345678901)\n98765\n\
    >>> square_digits(123456789012)\n987654\n>>> square_digits(1234567890123)\n9876543\n\
    >>> square_digits(12345678901234)\n98765432\n>>> square_digits(123456789012345)\n\
    987654321\n>>> square_digits(1234567890123456)\n98765432112\n>>> square_digits(12345678901234567)\n\
    9876543211234\n>>> square_digits(123456789012345678)\n987654321123456\n>>> square_digits(1234567890123456787)\n\
    98765432112345678\n>>> square_digits(12345678901234567879)\n987654321123456789\n\
    >>> square_digits(123456789012345678790)\n9876543211234567890\n>>> square_digits(1234567890123456787901)\n\
    98765432112345678901\n>>> square_digits(12345678901234567879012)\n987654321123456789012\n\
    >>> square_digits(123456789012345678790123)\n9876543211234567890123\n>>> square_digits(1234567890123456787901234)\n\
    98765432112345678901234\n>>> square_digits(12345678901234567879012345)\n987654321123456789012345\n\
    >>> square_digits(123456789012345678790123456)\n9876543211234567890123456\n>>>\
    \ square_", "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    count\
    \ = 0\n    \n    for h in hex_list:\n        if h == 'A' or h == 'B' or h == 'C'\
    \ or h == 'D' or h == 'E' or h == 'F':\n            count += 1\n            \n\
    \    return count\n\n", "    \n    hex_key = 0\n    \n    # Your code here\n \
    \   \n    return hex_key\n</cell>\n<cell>", "    \n    digits = [int(digit) for\
    \ digit in num.upper() if digit in '0123456789ABCDEF']\n    \n    primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    \n    count = 0\n    for digit in digits:\n        if digit\
    \ in primes:\n            count += 1\n    return count\n\n", "    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    ", "    \n    digits\
    \ = [int(d) for d in hex_key.digits]\n    \n    count = 0\n    \n    for d in\
    \ digits:\n        if d % 2 == 0:\n            count += 1\n        else:\n   \
    \         count += 2\n    \n    return count\n\n\nhex_key.digits = '0123456789ABCDEF'\n\
    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    count = 0\n    \n   \
    \ digits = [int(i) for i in num.upper() if i.isdigit()]\n    \n    for digit in\
    \ digits:\n        if digit % 2 == 0:\n            count += 1\n        else:\n\
    \            count += 2\n    \n    return count\n\n", "    \n    hex_key = int(num,\
    \ 16)\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    prime_digits_set\
    \ = set(prime_digits)\n    \n    prime_digits_set = prime_digits_set.union(set(range(10,\
    \ 16)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(20, 16)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(30, 16)))\n   \
    \ \n    prime_digits_set = prime_digits_set.union(set(range(40, 16)))\n    \n\
    \    prime_digits_set = prime_digits_set.union(set(range(50, 16)))\n    \n   \
    \ prime_digits_set = prime_digits_set.union(set(range(60, 16)))\n    \n    prime_digits_set\
    \ = prime_digits_set.union(set(range(70, 16)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(80,\
    \ 16)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(90, 16)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(100, 16)))\n  \
    \  \n    prime_digits_set = prime_digits_set.union(set(range(110, 16)))\n    \n\
    \    prime_digits_set = prime_digits_set.union(set(range(120, 16)))\n    \n  \
    \  prime_digits_set = prime_digits_set.union(set(range(130, 16)))\n    \n    prime_digits_set\
    \ = prime_digits_set.union(set(range(140, 16)))\n    \n    prime_digits_set =\
    \ prime_digits_set.union(set(range(150, 16)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(160,\
    \ 16)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(170, 16)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(180, 16)))\n  \
    \  \n    prime_digits_set = prime_digits_set.union(set(range(190, 16)))\n    \n\
    \    prime_digits_set = prime_digits_set.union(set(range(200, 16)))\n    \n  \
    \  prime_digits_set = prime_digits_set.union(set(range(210, 16)))\n    \n    prime_digits_set\
    \ = prime_digits_set.union(set(range(220, 16)))\n    \n    prime_digits_set =\
    \ prime_digits_set.union(set(range(230, 16)))\n    \n    prime", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    hex_list = list(num)\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = ['A','B','C','D','E','F']\n    hex_list.reverse()\n\
    \    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.reverse()\n    hex_list = ['0','1','2','3", "    \n    hex_key =\
    \ int(num, 16)\n    \n    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    prime_digits_set\
    \ = set(prime_digits)\n    \n    prime_digits_set = prime_digits_set - {hex_key}\n\
    \    \n    prime_digits_set = prime_digits_set - {hex_key-1}\n    \n    prime_digits_set\
    \ = prime_digits_set - {hex_key+1}\n    \n    prime_digits_set = prime_digits_set\
    \ - {hex_key+2}\n    \n    prime_digits_set = prime_digits_set - {hex_key+3}\n\
    \    \n    prime_digits_set = prime_digits_set - {hex_key+4}\n    \n    prime_digits_set\
    \ = prime_digits_set - {hex_key+5}\n    \n    prime_digits_set = prime_digits_set\
    \ - {hex_key+6}\n    \n    prime_digits_set = prime_digits_set - {hex_key+7}\n\
    \    \n    prime_digits_set = prime_digits_set - {hex_key+8}\n    \n    prime_digits_set\
    \ = prime_digits_set - {hex_key+9}\n    \n    prime_digits_set = prime_digits_set\
    \ - {hex_key+10}\n    \n    prime_digits_set = prime_digits_set - {hex_key+11}\n\
    \    \n    prime_digits_set = prime_digits_set - {hex_key+12}\n    \n    prime_digits_set\
    \ = prime_digits_set - {hex_key+13}\n    \n    prime_digits_set = prime_digits_set\
    \ - {hex_key+14}\n    \n    prime_digits_set = prime_digits_set - {hex_key+15}\n\
    \    \n    prime_digits_set = prime_digits_set - {hex_key+16}\n    \n    prime_digits_set\
    \ = prime_digits_set - {hex_key+17}\n    \n    prime_digits_set = prime_digits_set\
    \ - {hex_key+18}\n    \n    prime_digits_set = prime_digits_set - {hex_key+19}\n\
    \    \n    prime_digits_set = prime_digits_set - {", "    \n    hex_key = ''\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n   \
    \ hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n", "    \n    hex_list = list(num)\n    hex_list.sort()\n \
    \   \n    count = 0\n    \n    for hex in hex_list:\n        if hex in 'ABCDEF':\n\
    \            count += 1\n            \n    return count\n\n", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    hex_key = ''\n    \n\
    \    hex_digits = [int(hexdigit, 16) for hexdigit in num]\n    \n    primes =\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    prime_digits = [int(primedigit) for primedigit\
    \ in primes]\n    \n    prime_digits_set = set(prime_digits)\n    \n    hex_digits_set\
    \ = set(hex_digits)\n    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n\
    \    \n    hex_digits_set = hex_digits_set.difference(primes)\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set = hex_digits_set.difference(primes)\n\
    \    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n\
    \    hex_digits_set = hex_digits_set.difference(primes)\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set = hex_digits_set.difference(primes)\n\
    \    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n\
    \    hex_digits_set = hex_digits_set.difference(primes)\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set = hex_digits_set.difference(primes)\n\
    \    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n\
    \    hex_digits_set = hex_digits_set.difference(primes)\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set = hex_digits_set.difference(primes)\n\
    \    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n\
    \    hex_digits_set = hex_digits_set.difference(primes)\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set = hex_digits_set.difference(primes)\n\
    \    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n\
    \    hex_digits_set = hex_digits_set.difference(primes)\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set = hex_digits_set.difference(primes)\n\
    \    \n    hex_digits_set = hex_digits_set.", "    \n    hex_list = list(num)\n\
    \    hex_list.sort()\n    \n    hex_dict = {\n        '0': 0,\n        '1': 1,\n\
    \        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6':\
    \ 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n  \
    \      'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n      \
    \  'F': 15\n    }\n    \n    hex_dict2 = {\n        '0': 0,\n        '1': 1,\n\
    \        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6':\
    \ 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n  \
    \      'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n      \
    \  'F': 15\n    }\n    \n    hex_dict3 = {\n        '0': 0,\n        '1': 1,\n\
    \        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6':\
    \ 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n  \
    \      'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n      \
    \  'F': 15\n    }\n    \n    hex_dict4 = {\n        '0': 0,\n        '1': 1,\n\
    \        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6':\
    \ 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n  \
    \      'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n      \
    \  'F': 15\n    }\n    \n    hex_dict5 = {\n        '0': 0,\n        '1': 1,\n\
    \        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6':\
    \ 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n  \
    \      'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n      \
    \  'F': 15\n    }\n    \n    hex_dict6 = {\n        '0': 0,\n        '1': 1,\n\
    \        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6':\
    \ 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n  \
    \      'B': 11,\n        'C': 12,\n        '", "    \n    count = 0\n    \n  \
    \  # Your code here\n    \n    return count\n", "    \n    hex_list = list(num)\n\
    \    hex_list.sort()\n    \n    hex_list2 = []\n    \n    for x in hex_list:\n\
    \        if x not in hex_list2:\n            hex_list2.append(x)\n    \n    hex_list2.sort()\n\
    \    \n    hex_list3 = []\n    \n    for x in hex_list2:\n        if x not in\
    \ hex_list3:\n            hex_list3.append(x)\n    \n    hex_list3.sort()\n  \
    \  \n    hex_list4 = []\n    \n    for x in hex_list3:\n        if x not in hex_list4:\n\
    \            hex_list4.append(x)\n    \n    hex_list4.sort()\n    \n    hex_list5\
    \ = []\n    \n    for x in hex_list4:\n        if x not in hex_list5:\n      \
    \      hex_list5.append(x)\n    \n    hex_list5.sort()\n    \n    hex_list6 =\
    \ []\n    \n    for x in hex_list5:\n        if x not in hex_list6:\n        \
    \    hex_list6.append(x)\n    \n    hex_list6.sort()\n    \n    hex_list7 = []\n\
    \    \n    for x in hex_list6:\n        if x not in hex_list7:\n            hex_list7.append(x)\n\
    \    \n    hex_list7.sort()\n    \n    hex_list8 = []\n    \n    for x in hex_list7:\n\
    \        if x not in hex_list8:\n            hex_list8.append(x)\n    \n    hex_list8.sort()\n\
    \    \n    hex_list9 = []\n    \n    for x in hex_list8:\n        if x not in\
    \ hex_list9:\n            hex_list9.append(x)\n    \n    hex_list9.sort()\n  \
    \  \n    hex_list10 = []\n    \n    for x in hex_list9:\n        if x not in hex_list10:\n\
    \            hex_list10.append(x)\n    \n    hex_list10.sort()\n    \n    hex_list11\
    \ = []\n    \n    for x in hex_list10:\n        if x not in hex_list11:\n    \
    \        hex_list11.append(x)\n    \n    hex_list11.sort()\n    \n    hex_list12\
    \ = []\n    \n    for x in hex_list11:\n        if x not in hex_list12:\n    \
    \        hex_list12.append(x)\n    \n    hex_list12.sort()\n    \n    hex_list13\
    \ = []\n    \n    for x in hex_list12:\n        if x not in hex_list13:\n    \
    \        hex_list13.append(x)\n    \n    hex_list13.sort()\n    \n    hex_list14\
    \ = []\n    \n    for x in hex_list13:\n        if x not in hex_list14:\n    \
    \        hex_list14.append(x)\n    \n    hex_list14.sort()\n    \n    hex_list15",
  "    \n    count = 0\n    \n    digits = num.upper()\n    \n    for digit in digits:\n\
    \        if digit == 'A' or digit == 'B':\n            count += 1\n        elif\
    \ digit == 'C' or digit == 'D':\n            count += 1\n        elif digit ==\
    \ 'E' or digit == 'F':\n            count += 1\n        else:\n            count\
    \ += 1\n            \n    return count\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n\
    <cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\n\
    hex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that receives a positive integer and returns the\
    \ number of \nhexadecimal digits in the number. \nExamples:\n>>> hexdigits(123)\n\
    3\n>>> hexdigits(1235)\n4\n>>> hexdigits(12356)\n5\n>>> hexdigits(12356789)\n\
    6\n>>> hexdigits(123567890)\n7\n>>> hexdigits(1235678901)\n8\n>>> hexdigits(123567890123)\n\
    9\n>>> hexdigits(1235678901234)\n10\n>>> hexdigits(1235678901234567)\n11\n>>>\
    \ hexdigits(12356789012345678)\n12\n>>> hexdigits(1235678901234567801)\n13\n>>>\
    \ hexdigits(123567890123456780123)\n14\n>>> hexdigits(1235678901234567801234)\n\
    15\n>>> hexdigits(1235678901234567801234567)\n16\n>>> hexdigits(12356789012345678012345678)\n\
    17\n>>> hexdigits(1235678901234567801234567801)\n18\n>>> hexdigits(123567890123456780123456780123)\n\
    19\n>>> hexdigits(1235678901234567801234567801234)\n20\n>>> hexdigits(1235678901234567801234567801234567)\n\
    21\n>>> hexdigits(12356789012345678012345678012345678)\n22\n>>> hexdigits(1235678901234567801234567801234567801)\n\
    23\n>>> hexdigits(12356789012345678012345678012345678012", "    \n    hex_key\
    \ = ''\n    \n    # Your code here\n    \n    return len(hex_key)\n", "    \n\
    \    hex_list = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c',\
    \ 'd', 'e', 'f']\n    \n    hex_digit = hex_list[num]\n    \n    hex_decimal =\
    \ int(hex_digit, 16)\n    \n    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    prime_digit\
    \ = prime_digits[hex_decimal]\n    \n    return prime_digit\n</cell>\n<cell>\n\
    hex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n\
    </cell>\n<cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that receives a positive integer\
    \ and returns the number of digits in the number.\nExamples:\n>>> digits_number(1234)\n\
    4\n>>> digits_number(123)\n3\n>>> digits_number(123)\n3\n>>> digits_number(0)\n\
    1\n>>> digits_number(-1)\n1\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n\
    4\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n\
    4\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n\
    4\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n\
    4\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n\
    4\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n\
    4\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n\
    4\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n\
    4\n>>> digits_number(-1234)\n4\n>>> digits_number(-1234)\n4\n>>> digits_", " \
    \   hex_key = int(num, 16)\n    hex_digits = [hex_key]\n    hex_digits_set = set()\n\
    \    hex_digits_set.add('2')\n    hex_digits_set.add('3')\n    hex_digits_set.add('5')\n\
    \    hex_digits_set.add('7')\n    hex_digits_set.add('B')\n    hex_digits_set.add('D')\n\
    \    hex_digits_set.add('F')\n    hex_digits_set.add('0')\n    hex_digits_set.add('1')\n\
    \    hex_digits_set.add('4')\n    hex_digits_set.add('6')\n    hex_digits_set.add('8')\n\
    \    hex_digits_set.add('A')\n    hex_digits_set.add('C')\n    hex_digits_set.add('E')\n\
    \    hex_digits_set.add('G')\n    hex_digits_set.add('H')\n    hex_digits_set.add('J')\n\
    \    hex_digits_set.add('K')\n    hex_digits_set.add('L')\n    hex_digits_set.add('M')\n\
    \    hex_digits_set.add('N')\n    hex_digits_set.add('P')\n    hex_digits_set.add('Q')\n\
    \    hex_digits_set.add('R')\n    hex_digits_set.add('S')\n    hex_digits_set.add('T')\n\
    \    hex_digits_set.add('U')\n    hex_digits_set.add('V')\n    hex_digits_set.add('W')\n\
    \    hex_digits_set.add('X')\n    hex_digits_set.add('Y')\n    hex_digits_set.add('Z')\n\
    \    hex_digits_set.add('a')\n    hex_digits_set.add('b')\n    hex_digits_set.add('c')\n\
    \    hex_digits_set.add('d')\n    hex_digits_set.add('e')\n    hex_digits_set.add('f')\n\
    \    hex_digits_set.add('g')\n    hex_digits_set.add('h')\n    hex_digits_set.add('j')\n\
    \    hex_digits_set.add('k')\n    hex_digits_set.add('l')\n    hex_digits_set.add('m')\n\
    \    hex_digits_set.add('n')\n    hex_digits_set.add('p')\n    hex_digits_set.add('q')\n\
    \    hex_digits_set.add('r')\n    hex_digits_set.add('s')\n    hex_digits_", " \
    \   \n    hex_list = list(num)\n    hex_list.sort()\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(1,0)\n    hex_list.insert(2,0)\n    hex_list.insert(3,0)\n\
    \    hex_list.insert(4,0)\n    hex_list.insert(5,0)\n    hex_list.insert(6,0)\n\
    \    hex_list.insert(7,0)\n    hex_list.insert(8,0)\n    hex_list.insert(9,0)\n\
    \    hex_list.insert(10,0)\n    hex_list.insert(11,0)\n    hex_list.insert(12,0)\n\
    \    hex_list.insert(13,0)\n    hex_list.insert(14,0)\n    hex_list.insert(15,0)\n\
    \    hex_list.insert(16,0)\n    hex_list.insert(17,0)\n    hex_list.insert(18,0)\n\
    \    hex_list.insert(19,0)\n    hex_list.insert(20,0)\n    hex_list.insert(21,0)\n\
    \    hex_list.insert(22,0)\n    hex_list.insert(23,0)\n    hex_list.insert(24,0)\n\
    \    hex_list.insert(25,0)\n    hex_list.insert(26,0)\n    hex_list.insert(27,0)\n\
    \    hex_list.insert(28,0)\n    hex_list.insert(29,0)\n    hex_list.insert(30,0)\n\
    \    hex_list.insert(31,0)\n    hex_list.insert(32,0)\n    hex_list.insert(33,0)\n\
    \    hex_list.insert(34,0)\n    hex_list.insert(35,0)\n    hex_list.insert(36,0)\n\
    \    hex_list.insert(37,0)\n    hex_list.insert(38,0)\n    hex_list.insert(39,0)\n\
    \    hex_list.insert(40,0)\n    hex_list.insert(41,0)\n    hex_list.insert(42,0)\n\
    \    hex_list.insert(43,0)\n    hex_list.insert(44,0)\n    hex_list.insert(45,0)\n\
    \    hex_list.insert(46,0)\n    hex_list.insert(47,0)\n    hex_list.insert(48,0)\n\
    \    hex_list.insert(49,0)\n    hex_list.insert(50,0)\n    hex_list.insert(51,0)\n\
    \    hex_list.insert(52,0)\n    hex_list.insert(53,0)\n    hex_list.insert(54,0)\n\
    \    hex_list.insert(55,0)\n    hex_list.insert(56,0)\n    hex_list.insert(57,0)\n\
    \    hex_list.insert(58,0)\n    hex_list.insert(59,0)\n    hex_list.insert(60,0)\n\
    \    hex_list.insert(61,0)\n    hex_list.insert(62,0)\n    hex_list.insert(63,0)\n\
    \    hex_list.insert(64,0)\n    hex_list.insert(65,0)\n    hex_list.insert(66,0)\n\
    \    hex_list.insert(67,", "    \n    hex_list = list(num)\n    hex_list.sort()\n\
    \    \n    hex_list.reverse()\n    \n    hex_list2 = []\n    \n    for x in hex_list:\n\
    \        if x not in hex_list2:\n            hex_list2.append(x)\n    \n    hex_list2.sort()\n\
    \    \n    hex_list2.reverse()\n    \n    hex_list3 = []\n    \n    for x in hex_list2:\n\
    \        if x not in hex_list3:\n            hex_list3.append(x)\n    \n    hex_list3.sort()\n\
    \    \n    hex_list3.reverse()\n    \n    hex_list4 = []\n    \n    for x in hex_list3:\n\
    \        if x not in hex_list4:\n            hex_list4.append(x)\n    \n    hex_list4.sort()\n\
    \    \n    hex_list4.reverse()\n    \n    hex_list5 = []\n    \n    for x in hex_list4:\n\
    \        if x not in hex_list5:\n            hex_list5.append(x)\n    \n    hex_list5.sort()\n\
    \    \n    hex_list5.reverse()\n    \n    hex_list6 = []\n    \n    for x in hex_list5:\n\
    \        if x not in hex_list6:\n            hex_list6.append(x)\n    \n    hex_list6.sort()\n\
    \    \n    hex_list6.reverse()\n    \n    hex_list7 = []\n    \n    for x in hex_list6:\n\
    \        if x not in hex_list7:\n            hex_list7.append(x)\n    \n    hex_list7.sort()\n\
    \    \n    hex_list7.reverse()\n    \n    hex_list8 = []\n    \n    for x in hex_list7:\n\
    \        if x not in hex_list8:\n            hex_list8.append(x)\n    \n    hex_list8.sort()\n\
    \    \n    hex_list8.reverse()\n    \n    hex_list9 = []\n    \n    for x in hex_list8:\n\
    \        if x not in hex_list9:\n            hex_list9.append(x)\n    \n    hex_list9.sort()\n\
    \    \n    hex_list9.reverse()\n    \n    hex_list10 = []\n    \n    for x in\
    \ hex_list9:\n        if x not in hex_list10:\n            hex_list10.append(x)\n\
    \    \n    hex_list10.sort()\n    \n    hex_list10.reverse()\n    \n    hex_list11\
    \ = []\n    \n    for x in hex_list10:\n        if x not in hex_list11:\n    \
    \        hex_list11.append(x)\n    \n    hex_list11.sort()\n    \n    hex_list11.reverse()\n\
    \    \n    hex_list12 = []\n    \n    for x in hex_list11:\n        if x not in\
    \ hex_list12:", "    hex_key = 0\n    hex_key = int(num, 16)\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key ", "    \n    digits = ''\n    \n    # Convert string to list of\
    \ digits\n    for char in num:\n        if char.isdigit():\n            digits\
    \ += char\n    \n    # Count number of digits that are primes\n    count = 0\n\
    \    \n    # Count number of digits that are not primes\n    for digit in digits:\n\
    \        count += hex_key.digits[digit]\n    \n    return count\n\nhex_key.digits\
    \ = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5':\
    \ 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    'A': 10,\n    'B':\
    \ 11,\n    'C': 12,\n    'D': 13,\n    'E': 14,\n    'F': 15\n}\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that receives a hexadecimal number as a string and\
    \ counts the number of hexadecimal digits that are primes (prime number, or a\
    \ prime, is a natural number greater than 1 that is not a product of two smaller\
    \ natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B,\
    \ C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n\
    Notes: you may assume the input is always correct or empty string, and symbols\
    \ A,B,C,D,E,F are always uppercase.\nExamples:\n>>> hex_key('AB')\n1\n>>> hex_key('1077E')\n\
    2\n>>> hex_key('ABED1A33')\n4\n>>> hex_key('123456789ABCDEF0')\n6\n>>> hex_key('2020')\n\
    2\nHint: you may use the hex_key.digits dictionary to count the number of digits\
    \ that are primes.\n\n\n</text>\n<cell>", "    hex_list = list(num)\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = ['A', 'B', 'C', 'D', 'E', 'F']\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9']\n    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '0']\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '0', '1']\n    hex_list.sort()\n   \
    \ hex_list.reverse()\n    hex_list = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2']\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3']\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4']\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4', '5']\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4', '5', '6']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3',\
    \ '4', '5', '6', '7']\n    hex_list.sort()\n    hex_list.reverse()\n    hex_list\
    \ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F', '0', '1', '2', '3', '4', '5', '6', '7', '8']\n    hex_list.sort()\n   \
    \ hex_list.reverse()\n    hex_list = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '", "    \n    count\
    \ = 0\n    \n    # Your code here\n    \n    return count\n\n", "    hex_list\
    \ = list(num)\n    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(hex_list)\n\
    \    hex", "    \n    hex_key = ''\n    \n    hex_key = ''.join(hex_key)\n   \
    \ \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n", "    hex_key = int(num, 16)\n    hex_digits\
    \ = [hex_key]\n    hex_digits_len = len(hex_digits)\n    hex_digits_len_2 = hex_digits_len\
    \ // 2\n    hex_digits_len_3 = hex_digits_len_2 // 2\n    hex_digits_len_4 = hex_digits_len_3\
    \ // 2\n    hex_digits_len_5 = hex_digits_len_4 // 2\n    hex_digits_len_6 = hex_digits_len_5\
    \ // 2\n    hex_digits_len_7 = hex_digits_len_6 // 2\n    hex_digits_len_8 = hex_digits_len_7\
    \ // 2\n    hex_digits_len_9 = hex_digits_len_8 // 2\n    hex_digits_len_10 =\
    \ hex_digits_len_9 // 2\n    hex_digits_len_11 = hex_digits_len_10 // 2\n    hex_digits_len_12\
    \ = hex_digits_len_11 // 2\n    hex_digits_len_13 = hex_digits_len_12 // 2\n \
    \   hex_digits_len_14 = hex_digits_len_13 // 2\n    hex_digits_len_15 = hex_digits_len_14\
    \ // 2\n    hex_digits_len_16 = hex_digits_len_15 // 2\n    hex_digits_len_17\
    \ = hex_digits_len_16 // 2\n    hex_digits_len_18 = hex_digits_len_17 // 2\n \
    \   hex_digits_len_19 = hex_digits_len_18 // 2\n    hex_digits_len_20 = hex_digits_len_19\
    \ // 2\n    hex_digits_len_21 = hex_digits_len_20 // 2\n    hex_digits_len_22\
    \ = hex_digits_len_21 // 2\n    hex_digits_len_23 = hex_digits_len_22 // 2\n \
    \   hex_digits_len_24 = hex_digits_len_23 // 2\n    hex_digits_len_25 = hex_digits_len_24\
    \ // 2\n    hex_digits_len_26 = hex_digits_len_25 // 2\n    hex_digits_len_27\
    \ = hex_digits_len_26 // 2\n    hex_digits_len_28 = hex_digits_len_27 // 2\n \
    \   hex_digits_len_29 = hex_digits_len_28 // 2\n    hex_digits_len_30 = hex_digits_len_29\
    \ // 2\n    hex_digits_len_31 = hex_digits_len_30 // 2\n    hex_digits_len_32\
    \ = hex_digits_len_31 // 2\n    hex_digits_len_33 = hex_digits_len_32 // 2\n \
    \   hex_digits_len_34 = hex_digits_len_33 // 2\n    hex_digits_len_35 = hex_digits_len_34\
    \ // 2\n    hex_digits_len_36 = hex_", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    hex_key = int(num, 16)\n    \n    prime_digits\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997]\n    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set\
    \ = prime_digits_set.union(set(hex_key))\n    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_",
  "    hex_key = ''\n    hex_digits = ''\n    hex_digits_count = 0\n    hex_digit_count\
    \ = 0\n    hex_digit_sum = 0\n    hex_digit_sum2 = 0\n    hex_digit_sum3 = 0\n\
    \    hex_digit_sum4 = 0\n    hex_digit_sum5 = 0\n    hex_digit_sum6 = 0\n    hex_digit_sum7\
    \ = 0\n    hex_digit_sum8 = 0\n    hex_digit_sum9 = 0\n    hex_digit_sum10 = 0\n\
    \    hex_digit_sum11 = 0\n    hex_digit_sum12 = 0\n    hex_digit_sum13 = 0\n \
    \   hex_digit_sum14 = 0\n    hex_digit_sum15 = 0\n    hex_digit_sum16 = 0\n  \
    \  hex_digit_sum17 = 0\n    hex_digit_sum18 = 0\n    hex_digit_sum19 = 0\n   \
    \ hex_digit_sum20 = 0\n    hex_digit_sum21 = 0\n    hex_digit_sum22 = 0\n    hex_digit_sum23\
    \ = 0\n    hex_digit_sum24 = 0\n    hex_digit_sum25 = 0\n    hex_digit_sum26 =\
    \ 0\n    hex_digit_sum27 = 0\n    hex_digit_sum28 = 0\n    hex_digit_sum29 = 0\n\
    \    hex_digit_sum30 = 0\n    hex_digit_sum31 = 0\n    hex_digit_sum32 = 0\n \
    \   hex_digit_sum33 = 0\n    hex_digit_sum34 = 0\n    hex_digit_sum35 = 0\n  \
    \  hex_digit_sum36 = 0\n    hex_digit_sum37 = 0\n    hex_digit_sum38 = 0\n   \
    \ hex_digit_sum39 = 0\n    hex_digit_sum40 = 0\n    hex_digit_sum41 = 0\n    hex_digit_sum42\
    \ = 0\n    hex_digit_sum43 = 0\n    hex_digit_sum44 = 0\n    hex_digit_sum45 =\
    \ 0\n    hex_digit_sum46 = 0\n    hex_digit_sum47 = 0\n    hex_digit_sum48 = 0\n\
    \    hex_digit_sum49 = 0\n    hex_digit_sum50 = 0\n    hex_digit_sum51 = 0\n \
    \   hex_digit_sum52 = 0\n    hex_digit_sum53 = 0\n    hex_digit_sum54 = 0\n  \
    \  hex_digit_sum55 = 0\n    hex_digit_sum56 = 0\n    hex_digit_sum57 = 0\n   \
    \ hex_digit_sum58 = 0\n    hex_digit_sum59 = 0\n    hex_digit_sum60 = 0\n    hex_digit_sum61\
    \ = 0\n    hex_digit_sum62 = 0\n    hex_digit_sum63 = 0\n    hex_digit_sum64 =\
    \ 0\n    hex_digit_sum65 = 0\n    hex_digit_sum66 = 0\n    hex_digit_sum67 = 0\n\
    \    hex_digit_sum68 = 0\n    hex_digit_sum69 = 0\n    hex_digit_sum70 = 0\n \
    \   ", "    \n    count = 0\n    \n    # your code here\n    \n    return count\n\
    \n", "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    hex_dict\
    \ = {}\n    \n    for h in hex_list:\n        if h in hex_dict:\n            hex_dict[h]\
    \ += 1\n        else:\n            hex_dict[h] = 1\n    \n    hex_list = [hex_dict[k]\
    \ for k in hex_dict]\n    \n    hex_list.sort()\n    \n    hex_list.reverse()\n\
    \    \n    hex_list2 = []\n    \n    for h in hex_list:\n        if h % 2 == 0:\n\
    \            hex_list2.append(h)\n    \n    hex_list2.sort()\n    \n    hex_list2.reverse()\n\
    \    \n    hex_list3 = []\n    \n    for h in hex_list2:\n        if h % 3 ==\
    \ 0:\n            hex_list3.append(h)\n    \n    hex_list3.sort()\n    \n    hex_list3.reverse()\n\
    \    \n    hex_list4 = []\n    \n    for h in hex_list3:\n        if h % 5 ==\
    \ 0:\n            hex_list4.append(h)\n    \n    hex_list4.sort()\n    \n    hex_list4.reverse()\n\
    \    \n    hex_list5 = []\n    \n    for h in hex_list4:\n        if h % 7 ==\
    \ 0:\n            hex_list5.append(h)\n    \n    hex_list5.sort()\n    \n    hex_list5.reverse()\n\
    \    \n    hex_list6 = []\n    \n    for h in hex_list5:\n        if h % 11 ==\
    \ 0:\n            hex_list6.append(h)\n    \n    hex_list6.sort()\n    \n    hex_list6.reverse()\n\
    \    \n    hex_list7 = []\n    \n    for h in hex_list6:\n        if h % 13 ==\
    \ 0:\n            hex_list7.append(h)\n    \n    hex_list7.sort()\n    \n    hex_list7.reverse()\n\
    \    \n    hex_list8 = []\n    \n    for h in hex_list7:\n        if h % 17 ==\
    \ 0:\n            hex_list8.append(h)\n    \n    hex_list8.sort()\n    \n    hex_list8.reverse()\n\
    \    \n    hex_list9 = []\n    \n    for h in hex_list8:\n        if h % 19 ==\
    \ 0:\n            hex_list9.append(h)\n    \n    hex_list9.sort()\n    \n    hex_list9.reverse()\n\
    \    \n    hex_list10 = []\n    \n    for h in hex_list9:\n        if h % 23 ==\
    \ 0:\n            hex_list10.append(h)\n    \n    hex_list10.sort()\n    \n  \
    \  hex_list10.reverse()\n    \n    hex_list11 = []\n    \n    for h", "    \n\
    \    hex_key = ''\n    \n    hex_key = int(num, 16)\n    \n    hex_digits = [int(hex_key[i:i+2],\
    \ 16) for i in range(0, 6, 2)]\n    \n    prime_digits = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set.remove(hex_key)\n\
    \    \n    prime_digits_set = list(prime_digits_set)\n    \n    prime_digits_set.sort()\n\
    \    \n    prime_digits_set = prime_digits_set[::-1]\n    \n    prime_digits_set\
    \ = prime_digits_set[:len(hex_digits)]\n    \n    prime_digits_set = prime_digits_set[:len(prime_digits_set)]\n\
    \    \n    prime_digits_set = prime_digits_set[:len(prime_digits_set)]\n    \n\
    \    prime_digits_set = prime_digits_set[:len(prime_digits_set)]\n    \n    prime_digits_set\
    \ = prime_digits_set[:len(prime_digits_set)]\n    \n    prime_digits_set = prime_digits_set[:len(prime_digits_set)]\n\
    \    \n    prime_digits_set = prime_digits_set[:len(prime_digits_set)]\n    \n\
    \    prime_digits_set = prime_digits_set[:len(prime_digits_set)]\n    \n    prime_digits_set\
    \ = prime_digits_set[:len(prime_digits_set)]\n    \n    prime_digits_set = prime_digits_set[:len(prime_digits_set)]\n\
    \    \n    prime_digits_set = prime_digits_set[:len(prime_digits_set)]\n    \n\
    \    prime_digits_set = prime_digits_set[:len(prime_digits_set)]\n    \n    prime_digits_set\
    \ = prime_digits_set[:len(prime_digits_set)]\n    \n    prime_digits_set = prime_digits_set[:len(prime_digits_set)]\n\
    \    \n    prime_digits_set = prime_digits_set[:len(prime_digits_set)]\n    \n\
    \    prime_digits_set = prime_digits_set[:len(prime_digits_set)]\n    \n    prime_digits_set\
    \ = prime_digits_set[:len(prime_digits_set)]\n    ", "    \n    hex_list = list(num)\n\
    \    hex_list.sort()\n    \n    count = 0\n    \n    for x in hex_list:\n    \
    \    if x in [2,3,5,7,11,13,17,19]:\n            count += 1\n    \n    return\
    \ count\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n</cell>\n\
    <cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n</cell>\n\
    <cell>\nhex_key('2020')\n</cell>\n<text>\nExercise 3\nWrite a function that receives\
    \ a positive integer number and returns its \nbinary representation.\nExamples:\n\
    >>> bin(10)\n'0b1010'\n>>> bin(12)\n'0b1100'\n>>> bin(15)\n'0b1111'\n>>> bin(16)\n\
    '0b10000'\n>>> bin(20)\n'0b100000'\n>>> bin(32)\n'0b10000000'\n>>> bin(64)\n'0b1000000000000'\n\
    >>> bin(128)\n'0b1000000000000000000000000000000'\n>>> bin(256)\n'0b10000000000000000000000000000000'\n\
    >>> bin(512)\n'0b10000000000000000000000000000000'\n>>> bin(1024)\n'0b10000000000000000000000000000000'\n\
    >>> bin(2048)\n'0b10000000000000000000000000000000'\n>>> bin(4096)\n'0b10000000000000000000000000000000'\n\
    >>> bin(8192)\n'0b10000000000000000000000000000000'\n>>> bin(16384)\n'0b10000000000000000000000000000000'\n\
    >>> bin(32768)\n'0b10000000000000000000000000000000'\n>>> bin(65536)\n'0b10000000000000000000000000000000'\n\
    >>> bin(131072)\n'0b10000000000000000000000000000000'\n>>> bin(262144)\n'0b10000000000000000000000000000000'\n\
    >>> bin(524288)\n'0b10000000000000000000000000000000'\n>>> bin(1048576)\n'0b10000000000000000000000000000000'\n\
    >>> bin(2097152)\n'0b10000000000000000000000000000000'\n>>> bin(4194304)\n'0b10000000000000000000000000000000'\n\
    >>> bin(8388608)\n'0b10000000000000000000000000000000'\n>>> bin(16777216)\n'0b10000000000000000000000000000000'\n\
    >>> bin(33554432)\n'0b10000000000000000000000000000000'\n>>> bin(67108864)\n'0b100",
  "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    prime_numbers =\
    \ []\n    \n    for digit in hex_list:\n        if digit in 'ABCDEF':\n      \
    \      prime_numbers.append(int(digit))\n            \n    prime_numbers.sort()\n\
    \    \n    prime_numbers_len = len(prime_numbers)\n    \n    if prime_numbers_len\
    \ > 1:\n        \n        prime_numbers_2 = []\n        \n        for digit in\
    \ hex_list:\n            if digit in 'ABCDEF':\n                prime_numbers_2.append(int(digit))\n\
    \                \n        prime_numbers_2.sort()\n        \n        prime_numbers_2_len\
    \ = len(prime_numbers_2)\n        \n        if prime_numbers_2_len > 1:\n    \
    \        \n            prime_numbers_3 = []\n            \n            for digit\
    \ in hex_list:\n                if digit in 'ABCDEF':\n                    prime_numbers_3.append(int(digit))\n\
    \                    \n            prime_numbers_3.sort()\n            \n    \
    \        prime_numbers_3_len = len(prime_numbers_3)\n            \n          \
    \  if prime_numbers_3_len > 1:\n                \n                prime_numbers_4\
    \ = []\n                \n                for digit in hex_list:\n           \
    \         if digit in 'ABCDEF':\n                        prime_numbers_4.append(int(digit))\n\
    \                        \n                prime_numbers_4.sort()\n          \
    \      \n                prime_numbers_4_len = len(prime_numbers_4)\n        \
    \        \n                if prime_numbers_4_len > 1:\n                    \n\
    \                    prime_numbers_5 = []\n                    \n            \
    \        for digit in hex_list:\n                        if digit in 'ABCDEF':\n\
    \                            prime_numbers_5.append(int(digit))\n            \
    \                \n                    prime_numbers_5.sort()\n              \
    \      \n                    prime_numbers_5_len = len(prime_numbers_5)\n    \
    \                \n                    if prime_numbers_5_len > 1:\n         \
    \               \n                        prime_numbers_6 = []\n             \
    \           \n                        for digit in hex_list:\n               \
    \             if digit in 'ABCDEF':\n                                prime_numbers_6.append(int(digit))\n\
    \                                \n                        prime_numbers_6.sort()\n\
    \                        \n                        prime_numbers_6_len = len(prime_numbers_6)\n\
    \                        \n                        if prime_numbers_6_len > 1:\n\
    \                            \n                            prime_numbers_7 = []\n\
    \                            \n                            for digit in hex_list:\n\
    \                                if digit in 'ABCDEF':\n                     \
    \               prime_numbers_7.append(int(digit))\n                         \
    \           \n                            prime_numbers_7.sort()\n           \
    \                 \n                            prime_numbers_7_len = len(prime_numbers_7)\n\
    \                            \n", "    \n    hex_key = 0\n    \n    hex_digits\
    \ = ''\n    \n    for char in num:\n        if char.isupper():\n            hex_digits\
    \ += char\n        else:\n            hex_digits += char.lower()\n    \n    hex_digits\
    \ = hex_digits.upper()\n    \n    hex_digits_len = len(hex_digits)\n    \n   \
    \ if hex_digits_len % 2 == 0:\n        hex_digits_len += 1\n    \n    hex_digits_len\
    \ = int(hex_digits_len)\n    \n    if hex_digits_len < 10:\n        hex_digits_len\
    \ += 2\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len = int(hex_digits_len)\n    \n    hex_digits_len\
    \ += 1\n    \n", "    \n    hex_key = 0\n    \n    hex_digits = [int(i) for i\
    \ in hex_key]\n    \n    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for digit\
    \ in hex_digits:\n        if digit in prime_digits:\n            hex_key += 1\n\
    \    \n    return hex_key\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n\
    </cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n\
    </cell>\n<cell>\nhex_key('2020')\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that receives a positive integer and returns the sum of the squares of the digits\
    \ of that number.\nExamples:\n>>> square_digits(123)\n9\n>>> square_digits(12321)\n\
    49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n\
    49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n\
    49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n\
    49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n\
    49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n\
    49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n\
    49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n\
    49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n\
    49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n49\n>>> square_digits(12321)\n\
    49", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    digits\
    \ = num.upper()\n    \n    count = 0\n    \n    for digit in digits:\n       \
    \ if digit in 'ABCDEF':\n            count += 1\n            \n    if count ==\
    \ 2:\n        count += 1\n        \n    return count\n\n", "    \n    count =\
    \ 0\n    \n    hex_list = list(num)\n    \n    for digit in hex_list:\n      \
    \  \n        if digit == 'A' or digit == 'B' or digit == 'C' or digit == 'D' or\
    \ digit == 'E' or digit == 'F':\n            \n            count += 1\n      \
    \      \n        elif digit == '0' or digit == '1':\n            \n          \
    \  count += 1\n            \n        elif digit == '2' or digit == '3' or digit\
    \ == '5' or digit == '7' or digit == '11' or digit == '13' or digit == '17' or\
    \ digit == '19' or digit == '23' or digit == '29' or digit == '31' or digit ==\
    \ '37' or digit == '41' or digit == '43' or digit == '47' or digit == '53' or\
    \ digit == '59' or digit == '61' or digit == '67' or digit == '71' or digit ==\
    \ '73' or digit == '79' or digit == '83' or digit == '89' or digit == '97':\n\
    \            \n            count += 1\n            \n        elif digit == '4'\
    \ or digit == '6' or digit == '8' or digit == '10' or digit == '12' or digit ==\
    \ '14' or digit == '16' or digit == '18' or digit == '20' or digit == '24' or\
    \ digit == '28' or digit == '32' or digit == '36' or digit == '40' or digit ==\
    \ '44' or digit == '48' or digit == '52' or digit == '56' or digit == '60' or\
    \ digit == '64' or digit == '68' or digit == '72' or digit == '76' or digit ==\
    \ '80' or digit == '84' or digit == '88' or digit == '92' or digit == '96':\n\
    \            \n            count += 1\n            \n        elif digit == '9':\n\
    \            \n            count += 1\n            \n    return count\n</cell>\n\
    <cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n\
    </cell>\n<cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n\
    </cell>\n<text>\nProblem 3\nWrite a function that receives a string and returns\
    \ the number of characters in the string.\nExamples:\n>>> count_characters('Hello\
    \ World')\n12\n>>> count_characters('Hello World!')\n13\n>>> count_characters('')\n\
    0\n>>> count_characters('Hello World!')\n13\n>>> count_characters('Hello World!Hello\
    \ World!')\n26\n>>> count_characters('Hello World!Hello World!Hello World!')\n\
    42\n>>> count_characters('Hello World!Hello World!Hello World!Hello World!')\n\
    62\n>>> count_characters('Hello World!", "    \n    count = 0\n    \n    hex_list\
    \ = list(num)\n    \n    for hex in hex_list:\n        \n        if hex in 'ABCDEF':\n\
    \            \n            count += 1\n            \n    return count\n</cell>\n\
    <cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    hex_list = list(num)\n    hex_list.sort()\n    \n    hex_dict = {\n     \
    \   'A':0,'B':1,'C':2,'D':3,'E':4,'F':5\n    }\n    \n    count = 0\n    \n  \
    \  for char in hex_list:\n        count += hex_dict[char]\n        \n    return\
    \ count\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n</cell>\n\
    <cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n</cell>\n\
    <cell>\nhex_key('2020')\n</cell>\n<text>\nExercise 3\nWrite a function that receives\
    \ a positive integer and returns the number of \ndigits in the number that are\
    \ greater than or equal to 5.\nExamples:\n>>> count_digits(123)\n3\n>>> count_digits(1234)\n\
    4\n>>> count_digits(1235)\n5\n>>> count_digits(1236)\n6\n>>> count_digits(1237)\n\
    7\n>>> count_digits(1238)\n8\n>>> count_digits(1239)\n9\n>>> count_digits(1240)\n\
    10\n>>> count_digits(1241)\n11\n>>> count_digits(1242)\n12\n>>> count_digits(1243)\n\
    13\n>>> count_digits(1244)\n14\n>>> count_digits(1245)\n15\n>>> count_digits(1246)\n\
    16\n>>> count_digits(1247)\n17\n>>> count_digits(1248)\n18\n>>> count_digits(1249)\n\
    19\n>>> count_digits(1250)\n20\n>>> count_digits(1251)\n21\n>>> count_digits(1252)\n\
    22\n>>> count_digits(1253)\n23\n>>> count_digits(1254)\n24\n>>> count_digits(1255)\n\
    25\n>>> count_digits(1256)\n26\n>>> count_digits(1257)\n27\n>>> count_digits(1258)\n\
    28\n>>> count_digits(1259)\n29\n>>> count_digits(1260)\n30\n>>> count_digits(1261)\n\
    31\n>>> count_digits(1262)\n32\n>>> count_digits(1263)\n33\n>>> count_digits(1264)\n\
    34\n>>> count_digits(1265)\n35\n>>> count_digits(1266)\n36\n>>> count_digits(1267)\n\
    37\n>>> ", "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    hex_list2\
    \ = []\n    \n    for x in hex_list:\n        hex_list2.append(x)\n    \n    hex_list2.sort()\n\
    \    \n    hex_list3 = []\n    \n    for x in hex_list2:\n        hex_list3.append(x)\n\
    \    \n    hex_list3.sort()\n    \n    hex_list4 = []\n    \n    for x in hex_list3:\n\
    \        hex_list4.append(x)\n    \n    hex_list4.sort()\n    \n    hex_list5\
    \ = []\n    \n    for x in hex_list4:\n        hex_list5.append(x)\n    \n   \
    \ hex_list5.sort()\n    \n    hex_list6 = []\n    \n    for x in hex_list5:\n\
    \        hex_list6.append(x)\n    \n    hex_list6.sort()\n    \n    hex_list7\
    \ = []\n    \n    for x in hex_list6:\n        hex_list7.append(x)\n    \n   \
    \ hex_list7.sort()\n    \n    hex_list8 = []\n    \n    for x in hex_list7:\n\
    \        hex_list8.append(x)\n    \n    hex_list8.sort()\n    \n    hex_list9\
    \ = []\n    \n    for x in hex_list8:\n        hex_list9.append(x)\n    \n   \
    \ hex_list9.sort()\n    \n    hex_list10 = []\n    \n    for x in hex_list9:\n\
    \        hex_list10.append(x)\n    \n    hex_list10.sort()\n    \n    hex_list11\
    \ = []\n    \n    for x in hex_list10:\n        hex_list11.append(x)\n    \n \
    \   hex_list11.sort()\n    \n    hex_list12 = []\n    \n    for x in hex_list11:\n\
    \        hex_list12.append(x)\n    \n    hex_list12.sort()\n    \n    hex_list13\
    \ = []\n    \n    for x in hex_list12:\n        hex_list13.append(x)\n    \n \
    \   hex_list13.sort()\n    \n    hex_list14 = []\n    \n    for x in hex_list13:\n\
    \        hex_list14.append(x)\n    \n    hex_list14.sort()\n    \n    hex_list15\
    \ = []\n    \n    for x in hex_list14:\n        hex_list15.append(x)\n    \n \
    \   hex_list15.sort()\n    \n    hex_list16 = []\n    \n    for x in hex_list15:\n\
    \        hex_list16.append(x)\n    \n    hex_list16.sort()\n    \n    hex_list17\
    \ = []\n    \n    for x in hex_list16:\n        hex_list17.append(x)\n    \n \
    \   hex_list17.sort()\n    \n    hex", "    \n    hex_list = list(num)\n    hex_list.sort()\n\
    \    \n    hex_dict = {\n        'A' : 1,\n        'B' : 2,\n        'C' : 3,\n\
    \        'D' : 4,\n        'E' : 5,\n        'F' : 6,\n    }\n    \n    count\
    \ = 0\n    \n    for char in hex_list:\n        if char in hex_dict:\n       \
    \     count += 1\n            \n    return count\n\n", "    \n    hex_key = ''\n\
    \    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n    \n \
    \   hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(str, hex_key))\n\
    \    \n    hex_key = list(map(lambda x: x.upper(), hex_key))\n    \n    hex_key\
    \ = list(map(lambda x: x.replace(' ', ''), hex_key))\n    \n    hex_key = list(map(lambda\
    \ x: x.replace('A', '0'), hex_key))\n    \n    hex_key = list(map(lambda x: x.replace('B',\
    \ '1'), hex_key))\n    \n    hex_key = list(map(lambda x: x.replace('C', '2'),\
    \ hex_key))\n    \n    hex_key = list(map(lambda x: x.replace('D', '3'), hex_key))\n\
    \    \n    hex_key = list(map(lambda x: x.replace('E', '4'), hex_key))\n    \n\
    \    hex_key = list(map(lambda x: x.replace('F', '5'), hex_key))\n    \n    hex_key\
    \ = list(map(lambda x: x.replace('0', 'A'), hex_key))\n    \n    hex_key = list(map(lambda\
    \ x: x.replace('1', 'B'), hex_key))\n    \n    hex_key = list(map(lambda x: x.replace('2',\
    \ 'C'), hex_key))\n    \n    hex_key = list(map(lambda x: x.replace('3', 'D'),\
    \ hex_key))\n    \n    hex_key = list(map(lambda x: x.replace('4', 'E'), hex_key))\n\
    \    \n    hex_key = list(map(lambda x: x.replace('5', 'F'), hex_key))\n    \n\
    \    hex_key = list(map(lambda x: x.replace('6', '0'), hex_key))\n    \n    hex_key\
    \ = list(map(lambda x: x.replace('7', '1'), hex_key))\n    \n    hex_key = list(map(lambda\
    \ x: x.replace('8', '2'), hex_key))\n    \n    hex_key = list(map(lambda x: x.replace('9',\
    \ '3'), hex_key))\n    \n    hex_key = list(map(lambda x: x.replace('A', '4'),\
    \ hex_key))\n    \n    hex_key = list(map(lambda x: x.replace('B', '5'), hex_key))\n\
    \    \n    hex_key = list(map(lambda x: x.replace('C', '6'), hex_key))\n    \n\
    \    hex_key = list(map(lambda x: x.replace('D', '7'), hex_key))\n    \n    hex_key\
    \ = list(map(lambda x: x.replace('E', '8'), hex_key))\n    \n    hex_key = list(map(lambda\
    \ x: x.replace('F', '9'), hex_key))\n    \n    hex_key = list(map(lambda x: x.replace('0',\
    \ 'A'), hex_key))\n    \n    hex_key = list(map(lambda x: x.replace('1', 'B'),\
    \ hex_key))\n    \n    hex_key = list(map(lambda x: x.replace('2', 'C'), hex_key))\n\
    \    \n    hex_key = list(map(lambda x: x.replace('3', 'D'), hex_key))\n    ",
  "    \n    count = 0\n    \n    hex_list = list(hex_key)\n    \n    for char in\
    \ hex_list:\n        if char.isalpha():\n            char = int(char)\n      \
    \      \n            if char > 9:\n                char -= 10\n            \n\
    \            if char == 13:\n                char = 10\n            \n       \
    \     if char == 11:\n                char = 10\n            \n            if\
    \ char == 13:\n                char = 10\n            \n            if char ==\
    \ 17:\n                char = 10\n            \n            if char == 19:\n \
    \               char = 10\n            \n            if char == 19:\n        \
    \        char = 10\n            \n            if char == 19:\n               \
    \ char = 10\n            \n            if char == 19:\n                char =\
    \ 10\n            \n            if char == 19:\n                char = 10\n  \
    \          \n            if char == 19:\n                char = 10\n         \
    \   \n            if char == 19:\n                char = 10\n            \n  \
    \          if char == 19:\n                char = 10\n            \n         \
    \   if char == 19:\n                char = 10\n            \n            if char\
    \ == 19:\n                char = 10\n            \n            if char == 19:\n\
    \                char = 10\n            \n            if char == 19:\n       \
    \         char = 10\n            \n            if char == 19:\n              \
    \  char = 10\n            \n            if char == 19:\n                char =\
    \ 10\n            \n            if char == 19:\n                char = 10\n  \
    \          \n            if char == 19:\n                char = 10\n         \
    \   \n            if char == 19:\n                char = 10\n            \n  \
    \          if char == 19:\n                char = 10\n            \n         \
    \   if char == 19:\n                char = 10\n            \n            if char\
    \ == 19:\n                char = 10\n            \n            if char == 19:\n\
    \                char = 10\n            \n            if char == 19:\n       \
    \         char = 10\n            \n            if char == 19:\n              \
    \  char = 10\n            \n            if char == 19:\n                char =\
    \ 10\n            \n            if char == 19:\n                char = 10\n  \
    \          \n            if char == 19:\n                char = 10\n         \
    \   \n            if char == 19:\n                char = 10\n            \n  \
    \          if char == 19:\n                char = 10\n            \n         \
    \   if char == 19:\n                char = 10\n            \n            if char\
    \ == 19:\n                char = 10\n            \n            if char == 19:\n\
    \                char = 10\n            \n            if char == 19:\n       \
    \         char = 10\n            \n            if char == 19:\n              \
    \  char = 10\n            \n            if char == 19:\n                char =\
    \ 10\n            \n            if char == 19:\n                char = 10\n  \
    \          \n            if char == 19:\n                char = 10\n         \
    \   \n            if char == 19:\n                char = 10\n            \n  \
    \          if char == 19:\n                char = 10\n            \n         \
    \   if char == 19:", "    \n    hex_key = 0\n    \n    hex_digits = [int(i) for\
    \ i in num.upper() if i.isdigit()]\n    \n    for digit in hex_digits:\n     \
    \   hex_key += digit * digit\n    \n    return hex_key\n", "    \n    digits =\
    \ num.upper()\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    prime_digits_set\
    \ = set(prime_digits)\n    \n    prime_digits_set = prime_digits_set.union(set(digits))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n\
    \    prime", "    \n    hex_key = ''\n    \n    hex_key = str(num)\n    \n   \
    \ hex_key = list(hex_key)\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for\
    \ i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for\
    \ i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n",
  "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    hex_list.reverse()\n\
    \    \n    hex_list2 = []\n    \n    for x in hex_list:\n        if x == 'A' or\
    \ x == 'B' or x == 'C' or x == 'D' or x == 'E' or x == 'F':\n            hex_list2.append(x)\n\
    \    \n    hex_list2.sort()\n    \n    hex_list2.reverse()\n    \n    hex_list3\
    \ = []\n    \n    for x in hex_list2:\n        if x == '2' or x == '3' or x ==\
    \ '5' or x == '7' or x == '11' or x == '13' or x == '17':\n            hex_list3.append(x)\n\
    \    \n    hex_list3.sort()\n    \n    hex_list3.reverse()\n    \n    hex_list4\
    \ = []\n    \n    for x in hex_list3:\n        if x == '2' or x == '3' or x ==\
    \ '5' or x == '7':\n            hex_list4.append(x)\n    \n    hex_list4.sort()\n\
    \    \n    hex_list4.reverse()\n    \n    hex_list5 = []\n    \n    for x in hex_list4:\n\
    \        if x == '5' or x == '7':\n            hex_list5.append(x)\n    \n   \
    \ hex_list5.sort()\n    \n    hex_list5.reverse()\n    \n    hex_list6 = []\n\
    \    \n    for x in hex_list5:\n        if x == '7':\n            hex_list6.append(x)\n\
    \    \n    hex_list6.sort()\n    \n    hex_list6.reverse()\n    \n    hex_list7\
    \ = []\n    \n    for x in hex_list6:\n        if x == '11' or x == '13':\n  \
    \          hex_list7.append(x)\n    \n    hex_list7.sort()\n    \n    hex_list7.reverse()\n\
    \    \n    hex_list8 = []\n    \n    for x in hex_list7:\n        if x == '13':\n\
    \            hex_list8.append(x)\n    \n    hex_list8.sort()\n    \n    hex_list8.reverse()\n\
    \    \n    hex_list9 = []\n    \n    for x in hex_list8:\n        if x == '17':\n\
    \            hex_list9.append(x)\n    \n    hex_list9.sort()\n    \n    hex_list9.reverse()\n\
    \    \n    hex_list10 = []\n    \n    for x in hex_list9:\n        if x == '17':\n\
    \            hex_list10.append(x)\n    \n    hex_list10.sort()\n    \n    hex_list10.reverse()\n\
    \    \n    hex_list11 = []\n    \n    for x in hex_list", "    \n    hex_list\
    \ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e',\
    \ 'f']\n    \n    hex_dict = {\n        '0': 0,\n        '1': 1,\n        '2':\
    \ 3,\n        '3': 5,\n        '4': 7,\n        '5': 11,\n        '6': 13,\n \
    \       '7': 17,\n        '8': 19,\n        '9': 23,\n        'a': 27,\n     \
    \   'b': 31,\n        'c': 37,\n        'd': 43,\n        'e': 51,\n        'f':\
    \ 59\n    }\n    \n    hex_digit = hex_dict[num]\n    \n    hex_digit_list = []\n\
    \    \n    for hex_digit in hex_list:\n        if hex_digit in hex_dict:\n   \
    \         hex_digit_list.append(hex_digit)\n    \n    hex_digit_list = list(set(hex_digit_list))\n\
    \    \n    hex_digit_list.sort()\n    \n    hex_digit_list = list(filter(lambda\
    \ x: x != '0', hex_digit_list))\n    \n    hex_digit_list.sort()\n    \n    hex_digit_list\
    \ = list(filter(lambda x: x != '0', hex_digit_list))\n    \n    hex_digit_list.sort()\n\
    \    \n    hex_digit_list = list(filter(lambda x: x != '0', hex_digit_list))\n\
    \    \n    hex_digit_list.sort()\n    \n    hex_digit_list = list(filter(lambda\
    \ x: x != '0', hex_digit_list))\n    \n    hex_digit_list.sort()\n    \n    hex_digit_list\
    \ = list(filter(lambda x: x != '0', hex_digit_list))\n    \n    hex_digit_list.sort()\n\
    \    \n    hex_digit_list = list(filter(lambda x: x != '0', hex_digit_list))\n\
    \    \n    hex_digit_list.sort()\n    \n    hex_digit_list = list(filter(lambda\
    \ x: x != '0', hex_digit_list))\n    \n    hex_digit_list.sort()\n    \n    hex_digit_list\
    \ = list(filter(lambda x: x != '0', hex_digit_list))\n    \n    hex_digit_list.sort()\n\
    \    \n    hex_digit_list = list(filter(lambda x: x != '0', hex_digit_list))\n\
    \    \n    hex_digit_list.sort()\n    \n    hex_digit_list = list(filter(lambda\
    \ x: x != '0', hex_digit_list))\n    \n    hex_digit_list.sort()\n    \n    hex_digit_list\
    \ = list(filter(lambda x: x != '0', hex_digit_list))\n    \n    hex_digit_list.sort()\n\
    \    \n    hex_digit_list = list(filter(lambda x: x != '0', hex_digit_list))\n\
    \    \n    hex_digit_list.sort()\n    \n    hex_digit_list = list(filter(lambda\
    \ x: x != '0', hex_digit_list))\n    \n    hex_digit_list.sort()\n    \n    hex_digit_list\
    \ = list(filter(lambda x: x != '0', ", "    \n    hex_key = int(num, 16)\n   \
    \ \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set =\
    \ prime_digits_set - set([hex_key])\n    \n    prime_digits_set = prime_digits_set\
    \ - set([hex_key])\n    \n    prime_digits_set = prime_digits_set - set([hex_key])\n\
    \    \n    prime_digits_set = prime_digits_set - set([hex_key])\n    \n    prime_digits_set\
    \ = prime_digits_set - set([hex_key])\n    \n    prime_digits_set = prime_digits_set\
    \ - set([hex_key])\n    \n    prime_digits_set = prime_digits_set - set([hex_key])\n\
    \    \n    prime_digits_set = prime_digits_set - set([hex_key])\n    \n    prime_digits_set\
    \ = prime_digits_set - set([hex_key])\n    \n    prime_digits_set = prime_digits_set\
    \ - set([hex_key])\n    \n    prime_digits_set = prime_digits_set - set([hex_key])\n\
    \    \n    prime_digits_set = prime_digits_set - set([hex_key])\n    \n    prime_digits_set\
    \ = prime_digits_set - set([hex_key])\n    \n    prime_digits_set = prime_digits_set\
    \ - set([hex_key])\n    \n    prime_digits_set = prime_digits_set - set([hex_key])\n\
    \    \n    prime_digits_set = prime_digits_set - set([hex_key])\n    \n    prime_digits_set\
    \ = prime_digits_set - set([hex_key])\n    \n    prime_digits_set = prime_digits_set\
    \ - set([hex_key])\n    \n    prime_digits_set = prime_digits_set - set([hex_key])\n\
    \    \n    prime_digits_set = prime_digits_set - set([hex_key])\n    \n    prime_digits_set\
    \ = prime_digits_set - set([hex_key])\n    \n    prime_digits_set = prime_digits_set\
    \ - set([hex_key])\n    \n    prime_digits_set = prime_digits_set - set([hex_key])\n\
    \    \n    prime_digit", "    hex_key = 0\n    hex_digits = ''\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len = len(hex_key)\n    hex_digits_len = len(",
  "    \n    hex_key = 0\n    \n    # Your code here\n    \n    return hex_key\n</cell>\n\
    <cell>", "    \n    hex_key = 0\n    \n    hex_digits = num.upper()\n    \n  \
    \  for digit in hex_digits:\n        if digit in 'ABCDEF':\n            hex_key\
    \ += 2\n        elif digit in '0123456789':\n            hex_key += 1\n      \
    \  else:\n            pass\n    \n    return hex_key\n\n", "    \n    hex_list\
    \ = list(num)\n    hex_list.sort()\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_count = 0\n    \n    for digit in hex_list:\n        if\
    \ digit in prime_digits:\n            prime_digits_count += 1\n    \n    return\
    \ prime_digits_count\n\n", "    \n    hex_list = list(num)\n    \n    hex_list.sort()\n\
    \    \n    hex_list.reverse()\n    \n    hex_list = ['A','B','C','D','E','F']\n\
    \    \n    hex_list.extend(hex_list)\n    \n    hex_list.sort()\n    \n    hex_list.reverse()\n\
    \    \n    hex_list = ['2','3','5','7','B','D','E']\n    \n    hex_list.extend(hex_list)\n\
    \    \n    hex_list.sort()\n    \n    hex_list.reverse()\n    \n    hex_list =\
    \ ['2','3','5','7','B','D','E','F']\n    \n    hex_list.extend(hex_list)\n   \
    \ \n    hex_list.sort()\n    \n    hex_list.reverse()\n    \n    hex_list = ['2','3','5','7','B','D','E','F','A']\n\
    \    \n    hex_list.extend(hex_list)\n    \n    hex_list.sort()\n    \n    hex_list.reverse()\n\
    \    \n    hex_list = ['2','3','5','7','B','D','E','F','A','3']\n    \n    hex_list.extend(hex_list)\n\
    \    \n    hex_list.sort()\n    \n    hex_list.reverse()\n    \n    hex_list =\
    \ ['2','3','5','7','B','D','E','F','A','3','5']\n    \n    hex_list.extend(hex_list)\n\
    \    \n    hex_list.sort()\n    \n    hex_list.reverse()\n    \n    hex_list =\
    \ ['2','3','5','7','B','D','E','F','A','3','5','7']\n    \n    hex_list.extend(hex_list)\n\
    \    \n    hex_list.sort()\n    \n    hex_list.reverse()\n    \n    hex_list =\
    \ ['2','3','5','7','B','D','E','F','A','3','5','7','B']\n    \n    hex_list.extend(hex_list)\n\
    \    \n    hex_list.sort()\n    \n    hex_list.reverse()\n    \n    hex_list =\
    \ ['2','3','5','7','B','D','E','F','A','3','5','7','B','D']\n    \n    hex_list.extend(hex_list)\n\
    \    \n    hex_list.sort()\n    \n    hex_list.reverse()\n    \n    hex_list =\
    \ ['2','3','5','7','B','D','E','F','A','3','5','7','", "    \n    count = 0\n\
    \    \n    # your code here\n    \n    return count\n\n", "    \n    hex_key =\
    \ int(num, 16)\n    \n    prime_digits = [2, 3]\n    \n    prime_digits_set =\
    \ set(prime_digits)\n    \n    prime_digits_set.add((hex_key))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(range(10, hex_key+1)))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(range(hex_key+2, hex_key+10)))\n    \n   \
    \ prime_digits_set = prime_digits_set.difference(set(range(hex_key+11, hex_key+20)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(hex_key+21,\
    \ hex_key+100)))\n    \n    prime_digits_set = prime_digits_set.difference(set(range(hex_key+101,\
    \ hex_key+200)))\n    \n    prime_digits_set = prime_digits_set.difference(set(range(hex_key+201,\
    \ hex_key+1000)))\n    \n    prime_digits_set = prime_digits_set.difference(set(range(hex_key+1001,\
    \ hex_key+2000)))\n    \n    prime_digits_set = prime_digits_set.difference(set(range(hex_key+2001,\
    \ hex_key+10000)))\n    \n    prime_digits_set = prime_digits_set.difference(set(range(hex_key+10001,\
    \ hex_key+100000)))\n    \n    prime_digits_set = prime_digits_set.difference(set(range(hex_key+100001,\
    \ hex_key+1000000)))\n    \n    prime_digits_set = prime_digits_set.difference(set(range(hex_key+1000001,\
    \ hex_key+10000000)))\n    \n    prime_digits_set = prime_digits_set.difference(set(range(hex_key+10000001,\
    \ hex_key+100000000)))\n    \n    prime_digits_set = prime_digits_set.difference(set(range(hex_key+100000001,\
    \ hex_key+1000000000)))\n    \n    prime_digits_set = prime_digits_set.difference(set(range(hex_key+1000000001,\
    \ hex_key+10000000000)))\n    \n    prime_digits_set = prime_digits_set.difference(set(range(hex_key+10000000001,\
    \ hex_key+100000000000)))\n    \n    prime_digits_set = prime_digits_set.difference(set(range(hex_key+100000000001,\
    \ hex_key+1000000000000)))\n    \n    prime_digits_set = prime_digits_set.difference(set(range(hex_key+1000000000001,\
    \ hex_key+10000000000000", "    \n    hex_key = 0\n    \n    hex_key = int(num,\
    \ 16)\n    \n    hex_digits = [int(hex_key[i:i+2], 16) for i in range(0, 6, 2)]\n\
    \    \n    prime_digits = [2, 3, 5, 7, 11, 13, 17]\n    \n    prime_digits_set\
    \ = set(prime_digits)\n    \n    hex_digits_set = set(hex_digits)\n    \n    hex_digits_set\
    \ = hex_digits_set.intersection(prime_digits_set)\n    \n    hex_digits_set =\
    \ hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n\
    \    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n\
    \    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n\
    \    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n\
    \    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n\
    \    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n\
    \    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n\
    \    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n\
    \    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n\
    \    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n\
    \    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(prime_digits_set)\n    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n\
    \    \n    hex_digits_set = hex_digits_set.difference(prime_digits_set)\n    \n\
    \    hex_", "    \n    hex_list = list(hex_key)\n    hex_list.sort()\n    \n \
    \   count = 0\n    \n    for digit in hex_list:\n        if digit in 'ABCDEF':\n\
    \            count += 1\n    \n    return count\n</cell>\n<cell>\nhex_key('AB')\n\
    </cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n\
    <cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that receives a positive integer and returns\
    \ the number of \ntimes it appears in the following list: \n[10, 20, 30, 40, 50,\
    \ 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210,\
    \ 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370,\
    \ 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530,\
    \ 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690,\
    \ 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850,\
    \ 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000,\
    \ 1010, 1020, 1030, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130,\
    \ 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210, 1220, 1230, 1240, 1250, 1260,\
    \ 1270, 1280, 1290, 1300, 1310, 1320, 1330, 1340, 1350, 1360, 1370, 1380, 1390,\
    \ 1400, 1410, 1420, 1430, 1440, 1450, 1460, 1470, 1480, 1490, 1500, 1510, 1520,\
    \ 1530, 1540, 1550, 1560, 1570, 1580, 1590, 1600, 1610, 1620, 1630, 1640, 1650,\
    \ 1660, 1670, 1680, 1690, 1700, 1710, 1720, 1730, 1740, 1750, 1760, 1770, 1780,\
    \ 1790, 1800, 1810, 1820, 1830, 1840, 1850, 1860, 1870, 1880, 1890, 1900, 1910, ",
  "    \n    hex_key = 0\n    \n    # Your code here\n    \n    return hex_key\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    count = 0\n\
    \    \n    # Your code here\n    \n    return count\n\n", "    \n    count = 0\n\
    \    \n    hex_list = list(num)\n    \n    for hex in hex_list:\n        \n  \
    \      if hex in '0123456789ABCDEF':\n            \n            count += 1\n \
    \           \n    return count\n\n", "    \n    hex_list = list(hex_key)\n   \
    \ \n    hex_list.sort()\n    \n    hex_list.insert(0,0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(hex_list),0)\n\
    \    \n    hex_list.insert(len(hex_list),0)\n    \n    hex_list.insert(len(",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    digits =\
    \ num.upper()\n    \n    count=0\n    \n    for digit in digits:\n        if digit\
    \ in 'ABCDEF':\n            count+=1\n            \n    if count==2:\n       \
    \ return count\n    elif count==3:\n        return count+1\n    elif count==5:\n\
    \        return count+2\n    elif count==7:\n        return count+3\n    elif\
    \ count==11:\n        return count+4\n    elif count==13:\n        return count+5\n\
    \    else:\n        return count+6\n    ", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    hex_key = int(num, 16)\n    count = 0\n    while\
    \ hex_key > 0:\n        hex_key //= 16\n        count += 1\n    return count\n\
    \n", "    \n    hex_key = int(num, 16)\n    \n    primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    \    \n    count = 0\n    \n    for prime in primes:\n        if hex_key%prime\
    \ == 0:\n            count += 1\n            \n    return count\n</cell>\n<cell>\n\
    hex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n\
    </cell>\n<cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that receives a positive integer\
    \ and returns the number of \ndigits that are primes (prime number, or a prime,\
    \ is a natural number \ngreater than 1 that is not a product of two smaller natural\
    \ numbers).\nExamples:\n>>> prime_digits(10)\n1\n>>> prime_digits(100)\n3\n>>>\
    \ prime_digits(1000)\n5\n>>> prime_digits(10000)\n7\n>>> prime_digits(100000)\n\
    9\n>>> prime_digits(1000000)\n11\n>>> prime_digits(10000000)\n13\n>>> prime_digits(100000000)\n\
    17\n>>> prime_digits(1000000000)\n19\n>>> prime_digits(10000000000)\n23\n>>> prime_digits(100000000000)\n\
    29\n>>> prime_digits(1000000000000)\n31\n>>> prime_digits(10000000000000)\n37\n\
    >>> prime_digits(100000000000000)\n41\n>>> prime_digits(1000000000000000)\n43\n\
    >>> prime_digits(10000000000000000)\n47\n>>> prime_digits(100000000000000000)\n\
    53\n>>> prime_digits(100000000000000001)\n59\n>>> prime_digits(100000000000000002)\n\
    61\n>>> prime_digits(100000000000000003)\n67\n>>> prime_digits(100000000000000004)\n\
    71\n>>> prime_digits(100000000000000005)\n73\n>>> prime_digits(100000000000000006)\n\
    79\n>>> prime_digits(100000000000000007)\n83\n>>> prime_digits(100000000000000008)\n\
    89\n>>> prime_digits(100000000000000009)\n97\n>>> prime_digits(100000000000000010)\n\
    101\n>>> prime_digits(100000000000000011)\n103\n", "    hex_key = 0\n    hex_key\
    \ = int(num, 16)\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key ", "    \n    hex_key\
    \ = 0\n    \n    # Your code here\n    \n    return hex_key\n", "    \n    hexadecimal\
    \ = num.upper()\n    \n    count = 0\n    \n    for digit in hexadecimal:\n  \
    \      if digit in 'ABCDEF':\n            count += 1\n            \n    return\
    \ count\n\n", "    \n    hex_key = 0\n    \n    hex_digits = ''\n    \n    for\
    \ char in num:\n        if char in '0123456789ABCDEF':\n            hex_digits\
    \ += char\n    \n    hex_digits = hex_digits.upper()\n    \n    hex_digits_len\
    \ = len(hex_digits)\n    \n    if hex_digits_len % 2 == 0:\n        hex_digits_len\
    \ += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len_2 = hex_digits_len\
    \ // 2\n    \n    hex_digits_len_3 = hex_digits_len_2 // 3\n    \n    hex_digits_len_4\
    \ = hex_digits_len_3 // 4\n    \n    hex_digits_len_5 = hex_digits_len_4 // 5\n\
    \    \n    hex_digits_len_6 = hex_digits_len_5 // 6\n    \n    hex_digits_len_7\
    \ = hex_digits_len_6 // 7\n    \n    hex_digits_len_8 = hex_digits_len_7 // 8\n\
    \    \n    hex_digits_len_9 = hex_digits_len_8 // 9\n    \n    hex_digits_len_10\
    \ = hex_digits_len_9 // 10\n    \n    hex_digits_len_11 = hex_digits_len_10 //\
    \ 11\n    \n    hex_digits_len_12 = hex_digits_len_11 // 12\n    \n    hex_digits_len_13\
    \ = hex_digits_len_12 // 13\n    \n    hex_digits_len_14 = hex_digits_len_13 //\
    \ 14\n    \n    hex_digits_len_15 = hex_digits_len_14 // 15\n    \n    hex_digits_len_16\
    \ = hex_digits_len_15 // 16\n    \n    hex_digits_len_17 = hex_digits_len_16 //\
    \ 17\n    \n    hex_digits_len_18 = hex_digits_len_17 // 18\n    \n    hex_digits_len_19\
    \ = hex_digits_len_18 // 19\n    \n    hex_digits_len_20 = hex_digits_len_19 //\
    \ 20\n    \n    hex_digits_len_21 = hex_digits_len_20 // 21\n    \n    hex_digits_len_22\
    \ = hex_digits_len_21 // 22\n    \n    hex_digits_len_23 = hex_digits_len_22 //\
    \ 23\n    \n    hex_digits_len_24 = hex_digits_len_23 // 24\n    \n    hex_digits_len_25\
    \ = hex_digits_len_24 // 25\n    \n    hex_digits_len_26 = hex_digits_len_25 //\
    \ 26\n    \n    hex_digits_len_27 = hex_digits_len_26 // ", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    hex_key = ''\n    \n    hex_key\
    \ = int(num, 16)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    ", "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    count\
    \ = 0\n    \n    for hex in hex_list:\n        \n        if hex in 'ABCDEF':\n\
    \            count += 1\n            \n    return count\n\n", "    \n    hex_key\
    \ = 0\n    \n    hex_key = int(num, 16)\n    \n    hex_digits = [int(i) for i\
    \ in str(hex_key)]\n    \n    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    prime_digits_set\
    \ = set(prime_digits)\n    \n    prime_digits_set = prime_digits_set.intersection(hex_digits)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_", "    \n    hex_key = 0\n    \n    hex_digits\
    \ = num.upper()\n    \n    hex_digits_len = len(hex_digits)\n    \n    hex_digits_primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    hex_digits_primes_len = len(hex_digits_primes)\n\
    \    \n    hex_digits_primes_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    hex_digits_primes_primes_len\
    \ = len(hex_digits_primes_primes)\n    \n    hex_digits_primes_primes_primes =\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    hex_digits_primes_primes_primes_len = len(hex_digits_primes_primes_primes)\n\
    \    \n    hex_digits_primes_primes_primes_primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n\
    \    hex_digits_primes_primes_primes_primes_len = len(hex_digits_primes_primes_primes_primes)\n\
    \    \n    hex_digits_primes_primes_primes_primes_primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    \    \n    hex_digits_primes_primes_primes_primes_primes_len = len(hex_digits_primes_primes_primes_primes_primes)\n\
    \    \n    hex_digits_primes_primes_primes_primes_primes_primes = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    \n    hex_digits_primes_primes_primes_primes_primes_primes_len\
    \ = len(hex_digits_primes_primes_primes_primes_primes_primes)\n    \n    hex_digits_primes_primes_primes_primes_primes_primes_primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    hex_digit", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    hex_list = list(num)\n    hex_list.sort()\n\
    \    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    count = 0\n    \n    for digit in hex_list:\n        if digit in prime_digits:\n\
    \            count += 1\n    \n    return count\n", "    \n    hex_key = 0\n \
    \   \n    hex_digits = [int(i) for i in hex_key]\n    \n    prime_digits = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    \n    hex_digits_prime = [i for i in hex_digits if i in\
    \ prime_digits]\n    \n    hex_digits_prime_len = len(hex_digits_prime)\n    \n\
    \    if hex_digits_prime_len == 0:\n        hex_digits_prime_len = 1\n    \n \
    \   if hex_digits_prime_len == 1:\n        hex_digits_prime_len = 2\n    \n  \
    \  hex_digits_prime_len = len(hex_digits_prime)\n    \n    if hex_digits_prime_len\
    \ == 2:\n        hex_digits_prime_len = 4\n    \n    hex_digits_prime_len = len(hex_digits_prime)\n\
    \    \n    if hex_digits_prime_len == 4:\n        hex_digits_prime_len = 8\n \
    \   \n    hex_digits_prime_len = len(hex_digits_prime)\n    \n    if hex_digits_prime_len\
    \ == 8:\n        hex_digits_prime_len = 16\n    \n    hex_digits_prime_len = len(hex_digits_prime)\n\
    \    \n    if hex_digits_prime_len == 16:\n        hex_digits_prime_len = 64\n\
    \    \n    hex_digits_prime_len = len(hex_digits_prime)\n    \n    if hex_digits_prime_len\
    \ == 64:\n        hex_digits_prime_len = 256\n    \n    hex_digits_prime_len =\
    \ len(hex_digits_prime)\n    \n    if hex_digits_prime_len == 256:\n        hex_digits_prime_len\
    \ = 512\n    \n    hex_digits_prime_len = len(hex_digits_prime)\n    \n    if\
    \ hex_digits_prime_len == 512:\n        hex_digits_prime_len = 1024\n    \n  \
    \  hex_digits_prime_len = len(hex_digits_prime)\n    \n    if hex_digits_prime_len\
    \ == 1024:\n        hex_digits_prime_len = 2048\n    \n    hex_digits_prime_len\
    \ = len(hex_digits_prime)\n    \n    if hex_digits_prime_len == 2048:\n      \
    \  hex_digits_prime_len = 4096\n    \n    hex_digits_prime_len = len(hex_digits_prime)\n\
    \    \n    if hex_digits_prime_len == 4096:\n        hex_digits_prime_len = 8192\n\
    \    \n    hex_digits_prime_len = len(hex_digits_prime)\n    \n    if hex_digits_prime_len\
    \ == 8192:", "    \n    count = 0\n    \n    # Your code here\n    \n    return\
    \ count\n\n", "    \n    hex_key = ''\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n", "    \n    digits = ''\n\
    \    \n    digits = hex_string.upper()\n    \n    digits = digits[2:]\n    \n\
    \    digits = digits[:len(digits)-1]\n    \n    digits = digits[::-1]\n    \n\
    \    digits = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits\
    \ = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n\
    \    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits\
    \ = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n\
    \    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits\
    \ = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n\
    \    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits\
    \ = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n\
    \    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits\
    \ = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n\
    \    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits\
    \ = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n\
    \    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits\
    \ = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n\
    \    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits\
    \ = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n\
    \    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits\
    \ = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n\
    \    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits\
    \ = digits[::-1]\n    \n    digits = digits[::-1]\n    \n    digits = digits[::-1]\n\
    \    \n    digits = digits[::-1]\n    \n    digits = ", "    \n    hex_key = ''\n\
    \    \n    # Your code here\n    \n    return int(hex_key)\n</cell>\n<cell>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    count = 0\n    \n    hex_list\
    \ = list(hex_key)\n    \n    for digit in hex_list:\n        \n        if digit\
    \ == 'A' or digit == 'B' or digit == 'C' or digit == 'D' or digit == 'E' or digit\
    \ == 'F':\n            \n            count += 1\n            \n        elif digit\
    \ == '2' or digit == '3' or digit == '5' or digit == '7' or digit == '11' or digit\
    \ == '13' or digit == '17' or digit == '19' or digit == '23' or digit == '29'\
    \ or digit == '31' or digit == '37' or digit == '41' or digit == '43' or digit\
    \ == '47' or digit == '53' or digit == '59' or digit == '61' or digit == '67'\
    \ or digit == '71' or digit == '73' or digit == '79' or digit == '83' or digit\
    \ == '89' or digit == '97':\n            \n            count += 1\n          \
    \  \n        elif digit == '0': \n            \n            count += 1\n     \
    \       \n    return count\n\n", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    hex_key = int(num, 16)\n    \n    primes = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,\
    \ 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257,\
    \ 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353,\
    \ 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,\
    \ 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563,\
    \ 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,\
    \ 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761,\
    \ 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,\
    \ 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991,\
    \ 997]\n    \n    count = 0\n    \n    for prime in primes:\n        if hex_key%prime\
    \ == 0:\n            count += 1\n            \n    return count\n", "    \n  \
    \  hex_list = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c',\
    \ 'd', 'e', 'f']\n    \n    hex_dict = {hex_list[i]: i for i in range(len(hex_list))}\n\
    \    \n    hex_key = int(hex_dict[num])\n    \n    prime_hex_dict = {2: 2, 3:\
    \ 3, 5: 5, 7: 7, 11: 11, 13: 13, 17: 17, 19: 19, 23: 23, 29: 29, 31: 31, 37: 37,\
    \ 41: 41, 43: 43, 47: 47, 53: 53, 59: 59, 61: 61, 67: 67, 71: 71, 73: 73, 79:\
    \ 79, 83: 83, 89: 89, 97: 97}\n    \n    prime_hex_list = [prime_hex_dict[i] for\
    \ i in hex_list]\n    \n    prime_hex_list.sort()\n    \n    prime_hex_list.reverse()\n\
    \    \n    prime_hex_list = [i for i in prime_hex_list if i > 0]\n    \n    prime_hex_list.sort()\n\
    \    \n    prime_hex_list.reverse()\n    \n    prime_hex_list = [i for i in prime_hex_list\
    \ if i > 0]\n    \n    prime_hex_list.sort()\n    \n    prime_hex_list.reverse()\n\
    \    \n    prime_hex_list = [i for i in prime_hex_list if i > 0]\n    \n    prime_hex_list.sort()\n\
    \    \n    prime_hex_list.reverse()\n    \n    prime_hex_list = [i for i in prime_hex_list\
    \ if i > 0]\n    \n    prime_hex_list.sort()\n    \n    prime_hex_list.reverse()\n\
    \    \n    prime_hex_list = [i for i in prime_hex_list if i > 0]\n    \n    prime_hex_list.sort()\n\
    \    \n    prime_hex_list.reverse()\n    \n    prime_hex_list = [i for i in prime_hex_list\
    \ if i > 0]\n    \n    prime_hex_list.sort()\n    \n    prime_hex_list.reverse()\n\
    \    \n    prime_hex_list = [i for i in prime_hex_list if i > 0]\n    \n    prime_hex_list.sort()\n\
    \    \n    prime_hex_list.reverse()\n    \n    prime_hex_list = [i for i in prime_hex_list\
    \ if i > 0]\n    \n    prime_hex_list.sort()\n    \n    prime_hex_list.reverse()\n\
    \    \n    prime_hex_list = [i for i in prime_hex_list if i > 0]\n    \n    prime_hex_list.sort()\n\
    \    \n    prime_hex_list.reverse()\n    \n    prime_hex_list = [i for i in prime_hex_list\
    \ if i > 0]\n", "    \n    count = 0\n    \n    hex_string = num.upper()\n   \
    \ \n    hex_string = hex_string.replace('A','0')\n    hex_string = hex_string.replace('B','1')\n\
    \    hex_string = hex_string.replace('C','2')\n    hex_string = hex_string.replace('D','3')\n\
    \    hex_string = hex_string.replace('E','4')\n    hex_string = hex_string.replace('F','5')\n\
    \    \n    hex_string = hex_string.replace('0','')\n    hex_string = hex_string.replace('1','')\n\
    \    hex_string = hex_string.replace('2','')\n    hex_string = hex_string.replace('3','')\n\
    \    hex_string = hex_string.replace('4','')\n    hex_string = hex_string.replace('5','')\n\
    \    hex_string = hex_string.replace('6','')\n    hex_string = hex_string.replace('7','')\n\
    \    hex_string = hex_string.replace('8','')\n    hex_string = hex_string.replace('9','')\n\
    \    \n    hex_string = hex_string.replace(' ','')\n    \n    hex_string = hex_string.replace('\
    \ ','')\n    \n    hex_string = hex_string.replace(' ','')\n    \n    hex_string\
    \ = hex_string.replace(' ','')\n    \n    hex_string = hex_string.replace(' ','')\n\
    \    \n    hex_string = hex_string.replace(' ','')\n    \n    hex_string = hex_string.replace('\
    \ ','')\n    \n    hex_string = hex_string.replace(' ','')\n    \n    hex_string\
    \ = hex_string.replace(' ','')\n    \n    hex_string = hex_string.replace(' ','')\n\
    \    \n    hex_string = hex_string.replace(' ','')\n    \n    hex_string = hex_string.replace('\
    \ ','')\n    \n    hex_string = hex_string.replace(' ','')\n    \n    hex_string\
    \ = hex_string.replace(' ','')\n    \n    hex_string = hex_string.replace(' ','')\n\
    \    \n    hex_string = hex_string.replace(' ','')\n    \n    hex_string = hex_string.replace('\
    \ ','')\n    \n    hex_string = hex_string.replace(' ','')\n    \n    hex_string\
    \ = hex_string.replace(' ','')\n    \n    hex_string = hex_string.replace(' ','')\n\
    \    \n    hex_string = hex_string.replace(' ','')\n    \n    hex_string = hex_string.replace('\
    \ ','')\n    \n    hex_string = hex_string.replace(' ','')\n    \n    hex_string\
    \ = hex_string.replace(' ','')\n    \n    hex_string", "    hex_list = ['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n    hex_dict\
    \ = {hex_list[i]: i for i in range(len(hex_list))}\n    hex_digits = num.upper()\n\
    \    hex_digits_len = len(hex_digits)\n    hex_digits_prime = 0\n    hex_digits_not_prime\
    \ = 0\n    hex_digits_prime_counter = 0\n    hex_digits_not_prime_counter = 0\n\
    \    hex_digits_prime_counter_list = []\n    hex_digits_not_prime_counter_list\
    \ = []\n    hex_digits_prime_counter_list.append(hex_digits_prime_counter)\n \
    \   hex_digits_not_prime_counter_list.append(hex_digits_not_prime_counter)\n \
    \   hex_digits_prime_counter = 1\n    hex_digits_not_prime_counter = 1\n    hex_digits_prime_counter_list.append(hex_digits_prime_counter)\n\
    \    hex_digits_not_prime_counter_list.append(hex_digits_not_prime_counter)\n\
    \    hex_digits_prime_counter = 2\n    hex_digits_not_prime_counter = 2\n    hex_digits_prime_counter_list.append(hex_digits_prime_counter)\n\
    \    hex_digits_not_prime_counter_list.append(hex_digits_not_prime_counter)\n\
    \    hex_digits_prime_counter = 3\n    hex_digits_not_prime_counter = 3\n    hex_digits_prime_counter_list.append(hex_digits_prime_counter)\n\
    \    hex_digits_not_prime_counter_list.append(hex_digits_not_prime_counter)\n\
    \    hex_digits_prime_counter = 5\n    hex_digits_not_prime_counter = 5\n    hex_digits_prime_counter_list.append(hex_digits_prime_counter)\n\
    \    hex_digits_not_prime_counter_list.append(hex_digits_not_prime_counter)\n\
    \    hex_digits_prime_counter = 7\n    hex_digits_not_prime_counter = 7\n    hex_digits_prime_counter_list.append(hex_digits_prime_counter)\n\
    \    hex_digits_not_prime_counter_list.append(hex_digits_not_prime_counter)\n\
    \    hex_digits_prime_counter = 11\n    hex_digits_not_prime_counter = 11\n  \
    \  hex_digits_prime_counter_list.append(hex_digits_prime_counter)\n    hex_digits_not_prime_counter_list.append(hex_digits_not_prime_counter)\n\
    \    hex_digits_prime_counter = 13\n    hex_digits_not_prime_counter = 13\n  \
    \  hex_digits_prime_counter_list.append(hex_digits_prime_counter)\n    hex_digits_not_prime_counter_list.append(hex_digits_",
  "    \n    count = 0\n    \n    # your code here\n    \n    return count\n\n", " \
    \   hex_key = ''\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key", "    \n    digits = num.upper()\n\
    \    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    prime_digits_set =\
    \ set(prime_digits)\n    \n    prime_digits_set = prime_digits_set.difference(digits)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(0,10)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(10,16)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(16,32)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(32,64)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(64,128)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(128,256)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(256,512)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(512,1024)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(1024,2048)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(2048,4096)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(4096,8192)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(8192,16384)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(16384,32768)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(32768,65536)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(65536,131072)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(131072,262144)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(262144,524288)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(524288,1048576)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(1048576,2097152)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(2097152,4194304)))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(range(4194304,",
  "    \n    count = 0\n    \n    hex_list = list(num)\n    \n    for char in hex_list:\n\
    \        if char == 'A' or char == 'B' or char == 'C' or char == 'D' or char ==\
    \ 'E' or char == 'F':\n            count += 1\n            \n    return count\n\
    \n", "    \n    hex_key = ''\n    \n    # Your code here\n    \n    return hex_key\n\
    </cell>\n<cell>", "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n\
    \    count = 0\n    \n    for index in range(0,len(hex_list)-1):\n        \n \
    \       if hex_list[index] == hex_list[index+1]:\n            count += 1\n   \
    \         \n    return count\n", "    \n    hex_list = list(hex_key)\n    hex_list.sort()\n\
    \    \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = [hex_key[i]\
    \ for i in range(len(hex_key)) if hex_key[i] in hex_list]\n    \n    hex_key.sort()\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in hex_list]\n    \n    hex_key.sort()\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in hex_list]\n    \n    hex_key.sort()\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in hex_list]\n    \n    hex_key.sort()\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in hex_list]\n    \n    hex_key.sort()\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in hex_list]\n    \n    hex_key.sort()\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in hex_list]\n    \n    hex_key.sort()\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in hex_list]\n    \n    hex_key.sort()\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in hex_list]\n    \n    hex_key.sort()\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in hex_list]\n    \n    hex_key.sort()\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in hex_list]\n    \n    hex_key.sort()\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in hex_list]\n    \n    hex_key.sort()\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in hex_list]\n    \n    hex_key.sort()\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in hex_list]\n    \n    hex_key.sort()\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in hex_list]\n    \n    hex_key.sort()\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in hex_list]\n    \n    hex_key.sort()\n    \n    ", "    \n    hex_list = list(num)\n\
    \    hex_list.sort()\n    \n    count = 0\n    \n    for hex in hex_list:\n  \
    \      if hex in '01234567':\n            count += 1\n            \n    return\
    \ count\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n</cell>\n\
    <cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n</cell>\n\
    <cell>\nhex_key('2020')\n</cell>\n<text>\nExercise 2\nWrite a function that receives\
    \ a positive integer as a string and returns the number of digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nExamples:\n>>> count_digits('12')\n\
    2\n>>> count_digits('121')\n3\n>>> count_digits('1214')\n4\n>>> count_digits('121415')\n\
    5\n>>> count_digits('12141516')\n6\n>>> count_digits('1214151617')\n7\n>>> count_digits('121415161719')\n\
    8\n>>> count_digits('12141516171921')\n9\n>>> count_digits('1214151617192133')\n\
    10\n>>> count_digits('1214151617192133445566')\n11\n>>> count_digits('1214151617192133445566')\n\
    11\n>>> count_digits('1214151617192133445566')\n11\n>>> count_digits('1214151617192133445566')\n\
    11\n>>> count_digits('1214151617192133445566')\n11\n>>> count_digits('1214151617192133445566')\n\
    11\n>>> count_digits('1214151617192133445566')\n11\n>>> count_digits('1214151617192133445566')\n\
    11\n>>> count_digits('1214151617192133445566')\n11\n>>> count_digits('1214151617192133445566')\n\
    11\n>>> count_digits('1214151617192133445566')\n11\n>>> count_digits('1214151617192133445566')\n\
    11\n>>> count_digits('12141516", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    count = 0\n    \n    for char in num:\n        if char.isalpha():\n\
    \            count += 1\n            \n        elif char.isnumeric():\n      \
    \      count += 1\n            \n        elif char.isupper():\n            count\
    \ += 1\n            \n        elif char.islower():\n            count += 1\n \
    \           \n        elif char == 'B':\n            count += 1\n            \n\
    \        elif char == 'D':\n            count += 1\n            \n    return count\n\
    \n", "    \n    hex_key = int(num, 16)\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set =\
    \ prime_digits_set.union(set(range(10, 16)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(16,\
    \ 256)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(256, 4096)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(4096, 8192)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(8192, 16384)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(16384, 32768)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(32768, 65536)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(65536, 131072)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(131072, 262144)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(262144, 524288)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(524288, 1048576)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(1048576, 2097152)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(2097152, 4194304)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(4194304, 8388608)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(8388608, 16777216)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(16777216, 33554432)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(33554432, 67108864)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(67108864, 134217728)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(134217728, 268435456)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(268435456, 5368709",
  "    \n    count = 0\n    \n    digits = num.upper()\n    \n    for digit in digits:\n\
    \        if digit == 'A':\n            count += 2\n        elif digit == 'B':\n\
    \            count += 3\n        elif digit == 'C':\n            count += 5\n\
    \        elif digit == 'D':\n            count += 7\n        elif digit == 'E':\n\
    \            count += 11\n        elif digit == 'F':\n            count += 13\n\
    \        else:\n            count += 1\n    \n    return count\n\n", "    \n \
    \   hex_list = list(hex_key)\n    \n    hex_list.sort()\n    \n    hex_string\
    \ = hex_list[0]\n    \n    hex_list.remove(hex_string)\n    \n    hex_string =\
    \ hex_list[0]\n    \n    hex_list.remove(hex_string)\n    \n    hex_string = hex_list[0]\n\
    \    \n    hex_list.remove(hex_string)\n    \n    hex_string = hex_list[0]\n \
    \   \n    hex_list.remove(hex_string)\n    \n    hex_string = hex_list[0]\n  \
    \  \n    hex_list.remove(hex_string)\n    \n    hex_string = hex_list[0]\n   \
    \ \n    hex_list.remove(hex_string)\n    \n    hex_string = hex_list[0]\n    \n\
    \    hex_list.remove(hex_string)\n    \n    hex_string = hex_list[0]\n    \n \
    \   hex_list.remove(hex_string)\n    \n    hex_string = hex_list[0]\n    \n  \
    \  hex_list.remove(hex_string)\n    \n    hex_string = hex_list[0]\n    \n   \
    \ hex_list.remove(hex_string)\n    \n    hex_string = hex_list[0]\n    \n    hex_list.remove(hex_string)\n\
    \    \n    hex_string = hex_list[0]\n    \n    hex_list.remove(hex_string)\n \
    \   \n    hex_string = hex_list[0]\n    \n    hex_list.remove(hex_string)\n  \
    \  \n    hex_string = hex_list[0]\n    \n    hex_list.remove(hex_string)\n   \
    \ \n    hex_string = hex_list[0]\n    \n    hex_list.remove(hex_string)\n    \n\
    \    hex_string = hex_list[0]\n    \n    hex_list.remove(hex_string)\n    \n \
    \   hex_string = hex_list[0]\n    \n    hex_list.remove(hex_string)\n    \n  \
    \  hex_string = hex_list[0]\n    \n    hex_list.remove(hex_string)\n    \n   \
    \ hex_string = hex_list[0]\n    \n    hex_list.remove(hex_string)\n    \n    hex_string\
    \ = hex_list[0]\n    \n    hex_list.remove(hex_string)\n    \n    hex_string =\
    \ hex_list[0]\n    \n    hex_list.remove(hex_string)\n    \n    hex_string = hex_list[0]\n\
    \    \n    hex_list.remove(hex_string)\n    \n    hex_string = hex_list[0]\n \
    \   \n    hex_list.remove(hex_string)\n    \n    hex_string = hex_list[0]\n  \
    \  \n    hex_list.remove(hex_string)\n    \n    hex_string = hex_list[0]\n   \
    \ \n    hex_list.remove(", "    \n    hex_list = list(hex_key)\n    hex_list.sort()\n\
    \    \n    hex_list = [int(hex_list[i], 16) for i in range(len(hex_list))]\n \
    \   \n    hex_list.sort()\n    \n    hex_list = [hex_list[i] for i in range(len(hex_list))\
    \ if hex_list[i] in {2,3,5,7,11,13,17,19}] \n    \n    hex_list.sort()\n    \n\
    \    hex_list = [hex_list[i] for i in range(len(hex_list)) if hex_list[i] in {2,3,5,7,11,13,17,19}]\
    \ \n    \n    hex_list.sort()\n    \n    hex_list = [hex_list[i] for i in range(len(hex_list))\
    \ if hex_list[i] in {2,3,5,7,11,13,17,19}] \n    \n    hex_list.sort()\n    \n\
    \    hex_list = [hex_list[i] for i in range(len(hex_list)) if hex_list[i] in {2,3,5,7,11,13,17,19}]\
    \ \n    \n    hex_list.sort()\n    \n    hex_list = [hex_list[i] for i in range(len(hex_list))\
    \ if hex_list[i] in {2,3,5,7,11,13,17,19}] \n    \n    hex_list.sort()\n    \n\
    \    hex_list = [hex_list[i] for i in range(len(hex_list)) if hex_list[i] in {2,3,5,7,11,13,17,19}]\
    \ \n    \n    hex_list.sort()\n    \n    hex_list = [hex_list[i] for i in range(len(hex_list))\
    \ if hex_list[i] in {2,3,5,7,11,13,17,19}] \n    \n    hex_list.sort()\n    \n\
    \    hex_list = [hex_list[i] for i in range(len(hex_list)) if hex_list[i] in {2,3,5,7,11,13,17,19}]\
    \ \n    \n    hex_list.sort()\n    \n    hex_list = [hex_list[i] for i in range(len(hex_list))\
    \ if hex_list[i] in {2,3,5,7,11,13,17,19}] \n    \n    hex_list.sort()\n    \n\
    \    hex_list = [hex_list[i] for i in range(len(hex_list)) if hex_list[i] in {2,3,5,7,11,13,17,19}]\
    \ \n    \n    hex_list.sort()\n    \n    hex_list = [hex_list[i] for i in range(len(hex_list))\
    \ if hex_list[i] in {2,3,5,7,11,13,17,19}] \n    \n    hex_list.sort()\n    \n\
    \    hex_list = [hex_list[i] for i in range(len(hex_list)) if hex_list[i] in {2,3,5,7,11,13,17,19}]\
    \ \n    \n    hex_list.sort()\n    \n    hex_list = [hex_list[i] for i in range(len(hex_list))\
    \ if hex_list[i] in {2,3,5,7,11,13,17,19}] \n    \n    hex_list.sort()\n    \n\
    \    hex_list = [hex_list", "    \n    hex_list = ['0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n    \n    hex_string = num.upper()\n\
    \    \n    hex_string = hex_string.replace('A', '0')\n    hex_string = hex_string.replace('B',\
    \ '1')\n    hex_string = hex_string.replace('C', '2')\n    hex_string = hex_string.replace('D',\
    \ '3')\n    hex_string = hex_string.replace('E', '4')\n    hex_string = hex_string.replace('F',\
    \ '5')\n    \n    hex_string = hex_string.replace('0', '0')\n    hex_string =\
    \ hex_string.replace('1', '1')\n    hex_string = hex_string.replace('2', '2')\n\
    \    hex_string = hex_string.replace('3', '3')\n    hex_string = hex_string.replace('4',\
    \ '4')\n    hex_string = hex_string.replace('5', '5')\n    hex_string = hex_string.replace('6',\
    \ '6')\n    hex_string = hex_string.replace('7', '7')\n    hex_string = hex_string.replace('8',\
    \ '8')\n    hex_string = hex_string.replace('9', '9')\n    \n    hex_string =\
    \ hex_string.replace('A', '0')\n    hex_string = hex_string.replace('B', '1')\n\
    \    hex_string = hex_string.replace('C', '2')\n    hex_string = hex_string.replace('D',\
    \ '3')\n    hex_string = hex_string.replace('E', '4')\n    hex_string = hex_string.replace('F',\
    \ '5')\n    \n    hex_string = hex_string.replace('0', '0')\n    hex_string =\
    \ hex_string.replace('1', '1')\n    hex_string = hex_string.replace('2', '2')\n\
    \    hex_string = hex_string.replace('3', '3')\n    hex_string = hex_string.replace('4',\
    \ '4')\n    hex_string = hex_string.replace('5', '5')\n    hex_string = hex_string.replace('6',\
    \ '6')\n    hex_string = hex_string.replace('7', '7')\n    hex_string = hex_string.replace('8',\
    \ '8')\n    hex_string = hex_string.replace('9', '9')\n    \n    hex_string =\
    \ hex_string.replace('A', '0')\n    hex_string = hex_string.replace('B', '1')\n\
    \    hex_string = hex_string.replace('C', '2')\n    hex_string = hex_string.replace('D',\
    \ '3')\n    hex_string = hex_string.replace('E', '4')\n    hex_string = hex_string.replace('F',\
    \ '5')\n    \n    hex_string = hex_string.replace('0', '0')\n    hex_string =\
    \ hex_string.replace('1', '1')\n    hex_string = hex_string.replace('2', '2')\n\
    \    hex_string = hex_string.replace('3', '3')\n    hex_string", "    \n    hex_key\
    \ = 0\n    \n    # Your code here\n    \n    return hex_key\n</cell>\n<cell>",
  "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    count = 0\n    \n\
    \    for num in hex_list:\n        \n        if num in 'ABCDEF':\n           \
    \ count += 1\n            \n        elif num in '123456789':\n            count\
    \ += 1\n            \n        elif num in '01234567':\n            count += 1\n\
    \            \n        elif num in '0123456790':\n            count += 1\n   \
    \         \n        elif num in '012345679':\n            count += 1\n       \
    \     \n        elif num in '01234567A':\n            count += 1\n           \
    \ \n        elif num in '01234567B':\n            count += 1\n            \n \
    \       elif num in '01234567C':\n            count += 1\n            \n     \
    \   elif num in '01234567D':\n            count += 1\n            \n        elif\
    \ num in '01234567E':\n            count += 1\n            \n        elif num\
    \ in '01234567F':\n            count += 1\n            \n        elif num in '012345678':\n\
    \            count += 1\n            \n        elif num in '012345679':\n    \
    \        count += 1\n            \n        elif num in '01234567A':\n        \
    \    count += 1\n            \n        elif num in '01234567B':\n            count\
    \ += 1\n            \n        elif num in '01234567C':\n            count += 1\n\
    \            \n        elif num in '01234567D':\n            count += 1\n    \
    \        \n        elif num in '01234567E':\n            count += 1\n        \
    \    \n        elif num in '01234567F':\n            count += 1\n            \n\
    \        elif num in '012345678':\n            count += 1\n            \n    \
    \    elif num in '012345679':\n            count += 1\n            \n        elif\
    \ num in '01234567A':\n            count += 1\n            \n        elif num\
    \ in '01234567B':\n            count += 1\n            \n        elif num in '01234567C':\n\
    \            count += 1\n            \n        elif num in '01234567D':\n    \
    \        count += 1\n            \n        elif num in '01234567E':\n        \
    \    count += 1\n            \n        elif num in '01234567F':\n            count\
    \ += 1\n            \n        elif num in '012345678':\n            count += 1\n\
    \            \n        elif num in '012345679':\n            count += 1\n    \
    \        \n        elif num in '01234567A':\n            count += 1\n        \
    \    \n        elif num in '01234567B':\n            count += 1\n            \n\
    \        elif num in '01234567C':\n            count += 1\n            \n    \
    \    elif num in '01234567D':\n            count += 1\n            \n        elif\
    \ num", "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    hex_list2\
    \ = []\n    \n    for x in hex_list:\n        if x == 'A' or x == 'B' or x ==\
    \ 'C' or x == 'D' or x == 'E' or x == 'F':\n            hex_list2.append(x)\n\
    \    \n    hex_list2.sort()\n    \n    hex_list3 = []\n    \n    for x in hex_list2:\n\
    \        if x == '2' or x == '3' or x == '5' or x == '7' or x == '11' or x ==\
    \ '13' or x == '17':\n            hex_list3.append(x)\n    \n    hex_list3.sort()\n\
    \    \n    hex_list4 = []\n    \n    for x in hex_list3:\n        if x == '2'\
    \ or x == '3' or x == '5' or x == '7' or x == '11' or x == '13' or x == '17':\n\
    \            hex_list4.append(x)\n    \n    hex_list4.sort()\n    \n    hex_list5\
    \ = []\n    \n    for x in hex_list4:\n        if x == '2' or x == '3' or x ==\
    \ '5' or x == '7' or x == '11' or x == '13' or x == '17':\n            hex_list5.append(x)\n\
    \    \n    hex_list5.sort()\n    \n    hex_list6 = []\n    \n    for x in hex_list5:\n\
    \        if x == '2' or x == '3' or x == '5' or x == '7' or x == '11' or x ==\
    \ '13' or x == '17':\n            hex_list6.append(x)\n    \n    hex_list6.sort()\n\
    \    \n    hex_list7 = []\n    \n    for x in hex_list6:\n        if x == '2'\
    \ or x == '3' or x == '5' or x == '7' or x == '11' or x == '13' or x == '17':\n\
    \            hex_list7.append(x)\n    \n    hex_list7.sort()\n    \n    hex_list8\
    \ = []\n    \n    for x in hex_list7:\n        if x == '2' or x == '3' or x ==\
    \ '5' or x == '7' or x == '11' or x == '13' or x == '17':\n            hex_list8.append(x)\n\
    \    \n    hex_list8.sort()\n    \n    hex_list9 = []\n    \n    for x in hex_list8:\n\
    \        if x == '2' or x == '3' or x == '5' or x == '7' or x == '11' or x ==\
    \ '13' or x == '17':\n            hex_list9.append(x)\n    \n    hex_list9.sort()\n\
    \    \n    hex_list10 = []\n    \n    for x in hex_list9:\n", "    \n    count\
    \ = 0\n    \n    for char in num:\n        if char.isalpha():\n            count\
    \ += 1\n        elif char.isdigit():\n            count += 2\n        else:\n\
    \            count += 0\n    \n    return count\n", "    \n    hex_key = ''\n\
    \    \n    hex_key = list(num)\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for i\
    \ in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n    \n    hex_key\
    \ = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] not in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n    \n  \
    \  hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] not in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n    \n  \
    \  hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] not in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n    \n  \
    \  hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] not in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n    \n  \
    \  hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] ", "    hex_key = int(num, 16)\n    count = 0\n    while hex_key\
    \ > 0:\n        hex_key //= 16\n        count += 1\n    return count\n\n", " \
    \   \n    digits = num.upper()\n    \n    count=0\n    \n    for digit in digits:\n\
    \        if digit in 'ABCDEF':\n            count+=1\n            \n    if count==2:\n\
    \        return 1\n    elif count==3:\n        return 2\n    elif count==5:\n\
    \        return 3\n    elif count==7:\n        return 4\n    elif count==11:\n\
    \        return 5\n    elif count==13:\n        return 6\n    elif count==17:\n\
    \        return 7\n    elif count==19:\n        return 8\n    elif count==29:\n\
    \        return 9\n    elif count==39:\n        return 10\n    elif count==49:\n\
    \        return 11\n    elif count==59:\n        return 12\n    elif count==69:\n\
    \        return 13\n    elif count==79:\n        return 14\n    elif count==89:\n\
    \        return 15\n    elif count==99:\n        return 16\n    elif count==109:\n\
    \        return 17\n    elif count==119:\n        return 18\n    elif count==129:\n\
    \        return 19\n    elif count==139:\n        return 20\n    elif count==149:\n\
    \        return 21\n    elif count==159:\n        return 22\n    elif count==169:\n\
    \        return 23\n    elif count==179:\n        return 24\n    elif count==189:\n\
    \        return 25\n    elif count==199:\n        return 26\n    elif count==209:\n\
    \        return 27\n    elif count==219:\n        return 28\n    elif count==229:\n\
    \        return 29\n    elif count==239:\n        return 30\n    elif count==249:\n\
    \        return 31\n    elif count==259:\n        return 32\n    elif count==259:\n\
    \        return 33\n    elif count==259:\n        return 34\n    elif count==259:\n\
    \        return 35\n    elif count==259:\n        return 36\n    elif count==259:\n\
    \        return 37\n    elif count==259:\n        return 38\n    elif count==259:\n\
    \        return 39\n    elif count==259:\n        return 40\n    elif count==259:\n\
    \        return 41\n    elif count==259:\n        return 42\n    elif count==259:\n\
    \        return 43\n    elif count==259:\n        return 44\n    elif count==259:\n\
    \        return 45\n    elif count==259:\n        return 46\n    elif count==259:\n\
    \        return 47\n    elif count==259:\n        return 48\n    elif count==259:\n\
    \        return 49\n    elif count==259:\n        return 50\n    elif count==259:\n\
    \        return 51\n    elif count==259:\n        return 52\n    elif count==259:\n\
    \        return 53\n    elif count==259:\n        return ", "    hex_list = list(num)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['2','3','5','7','B','D','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    hex_list\
    \ = list(hex_key)\n    hex_list.sort()\n    hex_list.reverse()\n    \n    hex_digits\
    \ = [hex_list[i] for i in range(len(hex_list)) if hex_list[i] in '0123456789ABCDEF']\n\
    \    \n    prime_digits = [hex_list[i] for i in range(len(hex_list)) if hex_list[i]\
    \ in '123456789ABCDEF']\n    \n    prime_digits_set = set(prime_digits)\n    \n\
    \    prime_digits_set.add(hex_list[0])\n    \n    prime_digits_set.add(hex_list[1])\n\
    \    \n    prime_digits_set.add(hex_list[2])\n    \n    prime_digits_set.add(hex_list[3])\n\
    \    \n    prime_digits_set.add(hex_list[4])\n    \n    prime_digits_set.add(hex_list[5])\n\
    \    \n    prime_digits_set.add(hex_list[6])\n    \n    prime_digits_set.add(hex_list[7])\n\
    \    \n    prime_digits_set.add(hex_list[8])\n    \n    prime_digits_set.add(hex_list[9])\n\
    \    \n    prime_digits_set.add(hex_list[10])\n    \n    prime_digits_set.add(hex_list[11])\n\
    \    \n    prime_digits_set.add(hex_list[12])\n    \n    prime_digits_set.add(hex_list[13])\n\
    \    \n    prime_digits_set.add(hex_list[14])\n    \n    prime_digits_set.add(hex_list[15])\n\
    \    \n    prime_digits_set.add(hex_list[16])\n    \n    prime_digits_set.add(hex_list[17])\n\
    \    \n    prime_digits_set.add(hex_list[18])\n    \n    prime_digits_set.add(hex_list[19])\n\
    \    \n    prime_digits_set.add(hex_list[20])\n    \n    prime_digits_set.add(hex_list[21])\n\
    \    \n    prime_digits_set.add(hex_list[22])\n    \n    prime_digits_set.add(hex_list[23])\n\
    \    \n    prime_digits_set.add(hex_list[24])\n    \n    prime_digits_set.add(hex_list[25])\n\
    \    \n    prime_digits_set.add(hex_list[26])\n    \n    prime_digits_set.add(hex_list[27])\n\
    \    \n    prime_digits_set.add(hex_list[28])\n    \n    prime_digits_set.add(hex_list[29])\n\
    \    \n    prime_digits_set.add(hex_list[30])\n", "    \n    hex_key = 0\n   \
    \ \n    # Your code here\n    \n    return hex_key\n</cell>\n<cell>", "    \n\
    \    hex_key = ''\n    \n    hex_key = int(num, 16)\n    \n    prime_digits =\
    \ [2,3,5,7,11,13,17,19]\n    \n    prime_digits_hex = [hex(digit) for digit in\
    \ prime_digits]\n    \n    prime_digits_hex = [hex_key] + prime_digits_hex\n \
    \   \n    prime_digits_hex = [int(digit, 16) for digit in prime_digits_hex]\n\
    \    \n    prime_digits_hex = [digit for digit in prime_digits_hex if digit !=\
    \ 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex if digit\
    \ != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex if\
    \ digit != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex\
    \ if digit != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex\
    \ if digit != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex\
    \ if digit != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex\
    \ if digit != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex\
    \ if digit != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex\
    \ if digit != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex\
    \ if digit != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex\
    \ if digit != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex\
    \ if digit != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex\
    \ if digit != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex\
    \ if digit != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex\
    \ if digit != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex\
    \ if digit != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex\
    \ if digit != 0]\n    \n    prime_digits_hex = [digit for digit in prime_digits_hex\
    \ if digit != 0]\n    \n    prime_", "    \n    digits = num.upper()\n    \n \
    \   count = 0\n    \n    for digit in digits:\n        if digit == 'A':\n    \
    \        count += 2\n        elif digit == 'B':\n            count += 3\n    \
    \    elif digit == 'C':\n            count += 5\n        elif digit == 'D':\n\
    \            count += 7\n        elif digit == 'E':\n            count += 11\n\
    \        elif digit == 'F':\n            count += 13\n    \n    return count\n\
    \n", "    \n    hex_list = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'a', 'b', 'c', 'd', 'e', 'f']\n    \n    hex_dict = {\n        '0': 0,\n   \
    \     '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5':\
    \ 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n   \
    \     'a': 10,\n        'b': 11,\n        'c': 12,\n        'd': 13,\n       \
    \ 'e': 14,\n        'f': 15\n    }\n    \n    hex_digit = hex_dict[num]\n    \n\
    \    hex_digit_list = []\n    \n    while hex_digit > 0:\n        hex_digit_list.append(hex_digit)\n\
    \        hex_digit = hex_digit // 16\n    \n    hex_digit_list.sort()\n    \n\
    \    hex_digit_list = hex_digit_list[::-1]\n    \n    hex_digit_count = 0\n  \
    \  \n    for hex_digit in hex_digit_list:\n        if hex_digit in hex_dict:\n\
    \            hex_digit_count += 1\n    \n    return hex_digit_count\n\n", "  \
    \  \n    hex_list = list(num)\n    hex_list.sort()\n    \n    hex_list.reverse()\n\
    \    \n    hex_list2 = []\n    \n    for i in hex_list:\n        hex_list2.append(int(i,\
    \ 16))\n    \n    hex_list2.sort()\n    \n    hex_list2.reverse()\n    \n    hex_list3\
    \ = []\n    \n    for i in hex_list2:\n        hex_list3.append(int(i, 16))\n\
    \    \n    hex_list3.sort()\n    \n    hex_list3.reverse()\n    \n    hex_list4\
    \ = []\n    \n    for i in hex_list3:\n        hex_list4.append(int(i, 16))\n\
    \    \n    hex_list4.sort()\n    \n    hex_list4.reverse()\n    \n    hex_list5\
    \ = []\n    \n    for i in hex_list4:\n        hex_list5.append(int(i, 16))\n\
    \    \n    hex_list5.sort()\n    \n    hex_list5.reverse()\n    \n    hex_list6\
    \ = []\n    \n    for i in hex_list5:\n        hex_list6.append(int(i, 16))\n\
    \    \n    hex_list6.sort()\n    \n    hex_list6.reverse()\n    \n    hex_list7\
    \ = []\n    \n    for i in hex_list6:\n        hex_list7.append(int(i, 16))\n\
    \    \n    hex_list7.sort()\n    \n    hex_list7.reverse()\n    \n    hex_list8\
    \ = []\n    \n    for i in hex_list7:\n        hex_list8.append(int(i, 16))\n\
    \    \n    hex_list8.sort()\n    \n    hex_list8.reverse()\n    \n    hex_list9\
    \ = []\n    \n    for i in hex_list8:\n        hex_list9.append(int(i, 16))\n\
    \    \n    hex_list9.sort()\n    \n    hex_list9.reverse()\n    \n    hex_list10\
    \ = []\n    \n    for i in hex_list9:\n        hex_list10.append(int(i, 16))\n\
    \    \n    hex_list10.sort()\n    \n    hex_list10.reverse()\n    \n    hex_list11\
    \ = []\n    \n    for i in hex_list10:\n        hex_list11.append(int(i, 16))\n\
    \    \n    hex_list11.sort()\n    \n    hex_list11.reverse()\n    \n    hex_list12\
    \ = []\n    \n    for i in hex_list11:\n        hex_list12.append(int(i, 16))\n\
    \    \n    hex_list12.sort()\n    \n    hex_list12.reverse()\n    \n    hex_list13\
    \ = []\n    \n    for i in hex_list12:\n        hex_list13.append(int(i, 16))\n\
    \    \n    hex_list", "    \n    hexadecimal = num.upper()\n    hexadecimal =\
    \ hexadecimal.replace('A','0')\n    hexadecimal = hexadecimal.replace('B','1')\n\
    \    hexadecimal = hexadecimal.replace('C','2')\n    hexadecimal = hexadecimal.replace('D','3')\n\
    \    hexadecimal = hexadecimal.replace('E','4')\n    hexadecimal = hexadecimal.replace('F','5')\n\
    \    hexadecimal = hexadecimal.replace('G','6')\n    hexadecimal = hexadecimal.replace('H','7')\n\
    \    hexadecimal = hexadecimal.replace('I','8')\n    hexadecimal = hexadecimal.replace('J','9')\n\
    \    hexadecimal = hexadecimal.replace('K','A')\n    hexadecimal = hexadecimal.replace('L','B')\n\
    \    hexadecimal = hexadecimal.replace('M','C')\n    hexadecimal = hexadecimal.replace('N','D')\n\
    \    hexadecimal = hexadecimal.replace('O','E')\n    hexadecimal = hexadecimal.replace('P','F')\n\
    \    hexadecimal = hexadecimal.replace('Q','G')\n    hexadecimal = hexadecimal.replace('R','H')\n\
    \    hexadecimal = hexadecimal.replace('S','I')\n    hexadecimal = hexadecimal.replace('T','J')\n\
    \    hexadecimal = hexadecimal.replace('U','K')\n    hexadecimal = hexadecimal.replace('V','L')\n\
    \    hexadecimal = hexadecimal.replace('W','M')\n    hexadecimal = hexadecimal.replace('X','N')\n\
    \    hexadecimal = hexadecimal.replace('Y','O')\n    hexadecimal = hexadecimal.replace('Z','P')\n\
    \    hexadecimal = hexadecimal.replace('0','0')\n    hexadecimal = hexadecimal.replace('1','1')\n\
    \    hexadecimal = hexadecimal.replace('2','2')\n    hexadecimal = hexadecimal.replace('3','3')\n\
    \    hexadecimal = hexadecimal.replace('4','4')\n    hexadecimal = hexadecimal.replace('5','5')\n\
    \    hexadecimal = hexadecimal.replace('6','6')\n    hexadecimal = hexadecimal.replace('7','7')\n\
    \    hexadecimal = hexadecimal.replace('8','8')\n    hexadecimal = hexadecimal.replace('9','9')\n\
    \    hexadecimal = hexadecimal", "    \n    count = 0\n    \n    hex_list = list(num)\n\
    \    \n    for char in hex_list:\n        if char.isdigit():\n            count\
    \ += 1\n            \n    return count\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n\
    <cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\n\
    hex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that receives a positive integer and returns the\
    \ number of \nhexadecimal digits in the number.\nExamples:\n>>> hexdigits(123)\n\
    3\n>>> hexdigits(1234)\n4\n>>> hexdigits(12345)\n5\n>>> hexdigits(123456)\n6\n\
    >>> hexdigits(1234567)\n7\n>>> hexdigits(12345678)\n8\n>>> hexdigits(123456789)\n\
    9\n>>> hexdigits(1234567890)\n10\n>>> hexdigits(12345678901)\n11\n>>> hexdigits(123456789012)\n\
    12\n>>> hexdigits(1234567890123)\n13\n>>> hexdigits(12345678901234)\n14\n>>> hexdigits(123456789012345)\n\
    15\n>>> hexdigits(1234567890123456)\n16\n>>> hexdigits(12345678901234567)\n17\n\
    >>> hexdigits(123456789012345678)\n18\n>>> hexdigits(1234567890123456789)\n19\n\
    >>> hexdigits(12345678901234567890)\n20\n>>> hexdigits(123456789012345678901)\n\
    21\n>>> hexdigits(1234567890123456789012)\n22\n>>> hexdigits(12345678901234567890123)\n\
    23\n>>> hexdigits(123456789012345678901234)\n24\n>>> hexdigits(1234567890123456789012345)\n\
    25\n>>> hexdigits(12345678901234567890123456)\n26\n>>> hexdigits(123456789012345678901234567)\n\
    27\n>>> hexdigits(1234567890123456789012345678)\n28\n>>> hexdigits(12345678901234567890123456789)\n\
    29\n>>> hexdigits(123456789012345678901234567890)\n30\n>>> hexdigits(1234567890123456789012345678901)\n\
    31\n>>> hexdigits(12345678901234567890123456789012)\n32\n>>> hexdigits(123456789012345678901234567890123)\n\
    33\n>>> hexdigits(1234567890123456789012345678901234)\n34\n>>> hexdigits(12345678901234567890123456789012345)\n\
    35\n>>> hexdigits(123456789012345678901234567890", "    \n    hex_key = int(num,\
    \ 16)\n    \n    prime_digits = [2, 3]\n    \n    hex_key = str(hex_key)\n   \
    \ \n    hex_key = list(hex_key)\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] in prime_digits]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 0]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 1]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 2]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 3]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 4]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 5]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 6]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 7]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 8]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 9]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 10]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 11]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 12]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 13]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 14]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 15]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 16]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 17]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 18]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 19]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 20]\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] != 21]\n    ", "    \n    digits = num.upper()\n    \n    hex_dict\
    \ = {\n        'A' : 1, 'B' : 2, 'C' : 3, 'D' : 4, 'E' : 5, 'F' : 6\n    }\n \
    \   \n    count = 0\n    \n    for digit in digits:\n        if digit in hex_dict:\n\
    \            count += 1\n    \n    return count\n</cell>\n<cell>\nhex_key('AB')\n\
    </cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n\
    <cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that receives a positive integer and returns\
    \ the sum of the squares of the digits of that number.\nExamples:\n>>> square_digits(123)\n\
    25\n>>> square_digits(125)\n125\n>>> square_digits(125)\n125\n>>> square_digits(0)\n\
    0\n>>> square_digits(-5)\n-5\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n", "    \n    digits = num.upper()\n    \n    count = 0\n    \n    for digit\
    \ in digits:\n        if digit == 'A' or digit == 'B':\n            count += 1\n\
    \        elif digit == 'C' or digit == 'D':\n            count += 1\n        elif\
    \ digit == 'E' or digit == 'F':\n            count += 1\n        else:\n     \
    \       count += 1\n    \n    return count\n\n", "    \n    hex_key = 0\n    \n\
    \    # Your code here\n    \n    return hex_key\n</cell>\n<cell>", "    \n   \
    \ hex_list = list(hex_key)\n    hex_list.sort()\n    \n    count = 0\n    \n \
    \   for num in hex_list:\n        if num == 'A' or num == 'B' or num == 'C' or\
    \ num == 'D' or num == 'E' or num == 'F':\n            count += 1\n        else:\n\
    \            count += 2\n    \n    return count\n\n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    hex_list = list(num)\n    hex_list.sort()\n\
    \    \n    hex_list.reverse()\n    \n    hex_list = ['A','B','C','D','E','F']\n\
    \    \n    count = 0\n    \n    for x in hex_list:\n        if x == 'A' or x ==\
    \ 'B' or x == 'C' or x == 'D' or x == 'E' or x == 'F':\n            count += 1\n\
    \            \n    return count\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\n\
    hex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n\
    </cell>\n<cell>\nhex_key('2020')\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that receives a positive integer and returns the number of \ntimes it appears\
    \ in the number line (from 1 to n).\nExamples:\n>>> number_line(1)\n1\n>>> number_line(5)\n\
    2\n>>> number_line(10)\n3\n>>> number_line(20)\n4\n>>> number_line(30)\n5\n>>>\
    \ number_line(100)\n6\n>>> number_line(1000)\n7\n>>> number_line(10000)\n8\n>>>\
    \ number_line(100000)\n9\n>>> number_line(1000000)\n10\n>>> number_line(10000000)\n\
    11\n>>> number_line(100000000)\n12\n>>> number_line(1000000000)\n13\n>>> number_line(10000000000)\n\
    14\n>>> number_line(100000000000)\n15\n>>> number_line(1000000000000)\n16\n>>>\
    \ number_line(10000000000000)\n17\n>>> number_line(100000000000000)\n18\n>>> number_line(1000000000000000)\n\
    19\n>>> number_line(10000000000000000)\n20\n>>> number_line(100000000000000000)\n\
    21\n>>> number_line(1000000000000000000)\n22\n>>> number_line(10000000000000000000)\n\
    23\n>>> number_line(100000000000000000000)\n24\n>>> number_line(1000000000000000000000)\n\
    25\n>>> number_line(10000000000000000000000)\n26\n>>> number_line(100000000000000000000000)\n\
    27\n>>> number_line(1000000000000000000000000)\n28\n>>> number_line(10000000000000000000000000)\n\
    29\n>>> number_line(100000000000000000000000000)\n30\n>>> number_line(1000000000000000000000000000)\n\
    31\n>>> number_line(10000000000000000000000000000)\n32\n>>> number_line(100000000000000000000000000000)\n\
    33\n>>> number_line(1000000000000000000000000000000)\n34\n>>> number_line(10000000000000000000000000000000)\n\
    35\n>>> ", "    \n    hex_key = 0\n    \n    # Your code here\n    \n    return\
    \ hex_key\n", "    \n    hex_key = ''\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = [hex_key[i:i+2] for i\
    \ in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for\
    \ i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for\
    \ i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n",
  "    \n    hex_key = ''\n    \n    hex_digits = [int(i) for i in hex_key]\n    \n\
    \    hex_digits_set = set(hex_digits)\n    \n    hex_digits_set = hex_digits_set.difference(set([0,1,2,3,4,5,6,7,8,9]))\n\
    \    \n    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n    \n\
    \    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(set([11,13,17]))\n    \n    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n\
    \    \n    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n    \n\
    \    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(set([11,13,17]))\n    \n    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n\
    \    \n    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n    \n\
    \    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(set([11,13,17]))\n    \n    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n\
    \    \n    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n    \n\
    \    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(set([11,13,17]))\n    \n    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n\
    \    \n    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n    \n\
    \    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(set([11,13,17]))\n    \n    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n\
    \    \n    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n    \n\
    \    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n    \n    hex_digits_set\
    \ = hex_digits_set.difference(set([11,13,17]))\n    \n    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n\
    \    \n    hex_digits_set = hex_digits_set.difference(set([11,13,17]))\n    \n\
    \    hex_digits_set = ", "    \n    hex_key = ''\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n  \
    \  \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n\
    \    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n  \
    \  hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key\
    \ = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key =\
    \ int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n  \
    \  \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n\
    \    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n  \
    \  hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key\
    \ = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key =\
    \ int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n  \
    \  \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n\
    \    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n  \
    \  hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key\
    \ = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key =\
    \ int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n  \
    \  \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n\
    \    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key", "    \n    hex_key\
    \ = ''\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for\
    \ i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for\
    \ i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    ", "    hex_key =\
    \ 0\n    hex_key = int(num, 16)\n    hex_digits = [int(i) for i in str(hex_key)[2:]]\n\
    \    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97]\n    primes_found = []\n    for digit in hex_digits:\n\
    \        if digit in primes:\n            primes_found.append(digit)\n    return\
    \ len(primes_found)\n", "    \n    hex_list = list(hex_key)\n    hex_list.sort()\n\
    \    \n    hex_string = ''.join(hex_list)\n    \n    hex_digits = [int(hex_string[i:i+2],\
    \ 16) for i in range(0, len(hex_string), 2)]\n    \n    prime_digits = [2, 3]\n\
    \    \n    prime_digits_count = 0\n    \n    for digit in hex_digits:\n      \
    \  if digit in prime_digits:\n            prime_digits_count += 1\n        else:\n\
    \            prime_digits.append(digit)\n            \n    return prime_digits_count\n\
    \n", "    hex_key = '0123456789ABCDEF'\n    hex_digits = hex_key.upper()\n   \
    \ hex_digits_len = len(hex_digits)\n    hex_digits_prime = [2, 3]\n    hex_digits_not_prime\
    \ = [5, 7]\n    hex_digits_prime_len = len(hex_digits_prime)\n    hex_digits_not_prime_len\
    \ = len(hex_digits_not_prime)\n    hex_digits_prime_not_prime = [11, 13]\n   \
    \ hex_digits_prime_not_prime_len = len(hex_digits_prime_not_prime)\n    hex_digits_prime_not_prime_len\
    \ = len(hex_digits_prime_not_prime)\n    hex_digits_prime_not_prime_len = len(hex_digits_prime_not_prime)\n\
    \    hex_digits_prime_not_prime_len = len(hex_digits_prime_not_prime)\n    hex_digits_prime_not_prime_len\
    \ = len(hex_digits_prime_not_prime)\n    hex_digits_prime_not_prime_len = len(hex_digits_prime_not_prime)\n\
    \    hex_digits_prime_not_prime_len = len(hex_digits_prime_not_prime)\n    hex_digits_prime_not_prime_len\
    \ = len(hex_digits_prime_not_prime)\n    hex_digits_prime_not_prime_len = len(hex_digits_prime_not_prime)\n\
    \    hex_digits_prime_not_prime_len = len(hex_digits_prime_not_prime)\n    hex_digits_prime_not_prime_len\
    \ = len(hex_digits_prime_not_prime)\n    hex_digits_prime_not_prime_len = len(hex_digits_prime_not_prime)\n\
    \    hex_digits_prime_not_prime_len = len(hex_digits_prime_not_prime)\n    hex_digits_prime_not_prime_len\
    \ = len(hex_digits_prime_not_prime)\n    hex_digits_prime_not_prime_len = len(hex_digits_prime_not_prime)\n\
    \    hex_digits_prime_not_prime_len = len(hex_digits_prime_not_prime)\n    hex_digits_prime_not_prime_len\
    \ = len(hex_digits_prime_not_prime)\n    hex_digits_prime_not_prime_len = len(hex_digits_prime_not_prime)\n\
    \    hex_digits_prime_not_prime_len = len(hex_digits_prime_not_prime)\n    hex_digits_prime_not_prime_len\
    \ = len(hex_digits_prime_not_prime)\n    hex_digits_prime_not_prime_len = len(hex_digits_prime_not_prime)\n\
    \    hex_digits_prime_not_prime_len = len(hex_digits_prime_not_prime)\n    hex_digits_prime_not_",
  "    \n    hexadecimal = num.upper()\n    hexadecimal = hexadecimal.replace('A','0')\n\
    \    hexadecimal = hexadecimal.replace('B','1')\n    hexadecimal = hexadecimal.replace('C','2')\n\
    \    hexadecimal = hexadecimal.replace('D','3')\n    hexadecimal = hexadecimal.replace('E','4')\n\
    \    hexadecimal = hexadecimal.replace('F','5')\n    hexadecimal = hexadecimal.replace('0','0')\n\
    \    hexadecimal = hexadecimal.replace('1','1')\n    hexadecimal = hexadecimal.replace('2','2')\n\
    \    hexadecimal = hexadecimal.replace('3','3')\n    hexadecimal = hexadecimal.replace('4','4')\n\
    \    hexadecimal = hexadecimal.replace('5','5')\n    hexadecimal = hexadecimal.replace('6','6')\n\
    \    hexadecimal = hexadecimal.replace('7','7')\n    hexadecimal = hexadecimal.replace('8','8')\n\
    \    hexadecimal = hexadecimal.replace('9','9')\n    hexadecimal = hexadecimal.replace('A','A')\n\
    \    hexadecimal = hexadecimal.replace('B','B')\n    hexadecimal = hexadecimal.replace('C','C')\n\
    \    hexadecimal = hexadecimal.replace('D','D')\n    hexadecimal = hexadecimal.replace('E','E')\n\
    \    hexadecimal = hexadecimal.replace('F','F')\n    hexadecimal = hexadecimal.replace('G','G')\n\
    \    hexadecimal = hexadecimal.replace('H','H')\n    hexadecimal = hexadecimal.replace('I','I')\n\
    \    hexadecimal = hexadecimal.replace('J','J')\n    hexadecimal = hexadecimal.replace('K','K')\n\
    \    hexadecimal = hexadecimal.replace('L','L')\n    hexadecimal = hexadecimal.replace('M','M')\n\
    \    hexadecimal = hexadecimal.replace('N','N')\n    hexadecimal = hexadecimal.replace('O','O')\n\
    \    hexadecimal = hexadecimal.replace('P','P')\n    hexadecimal = hexadecimal.replace('Q','Q')\n\
    \    hexadecimal = hexadecimal.replace('R','R')\n    hexadecimal = hexadecimal.replace('S','S')\n\
    \    hexadecimal = hexadecimal.replace('T','T')\n    hexadecimal = hexadecimal",
  "    hex_key = ''\n    hex_digits = [int(i) for i in hex_key]\n    hex_digits_len\
    \ = len(hex_digits)\n    hex_digits_prime = [i for i in range(hex_digits_len)\
    \ if hex_digits[i]%2==0]\n    hex_digits_odd_prime = [i for i in range(hex_digits_len)\
    \ if hex_digits[i]%2!=0]\n    hex_digits_prime_len = len(hex_digits_prime)\n \
    \   hex_digits_odd_prime_len = len(hex_digits_odd_prime)\n    hex_digits_prime_odd_prime\
    \ = [i for i in range(hex_digits_prime_len) if hex_digits_prime[i]%2==0 and hex_digits_odd_prime[i]%2!=0]\n\
    \    hex_digits_prime_odd_prime_len = len(hex_digits_prime_odd_prime)\n    hex_digits_prime_odd_prime_odd_prime\
    \ = [i for i in range(hex_digits_prime_odd_prime_len) if hex_digits_prime_odd_prime[i]%2!=0\
    \ and hex_digits_odd_prime_odd_prime[i]%2==0]\n    hex_digits_prime_odd_prime_odd_prime_len\
    \ = len(hex_digits_prime_odd_prime_odd_prime)\n    hex_digits_prime_odd_prime_odd_prime_odd_prime\
    \ = [i for i in range(hex_digits_prime_odd_prime_odd_prime_len) if hex_digits_prime_odd_prime_odd_prime[i]%2!=0\
    \ and hex_digits_odd_prime_odd_prime_odd_prime[i]%2!=0 and hex_digits_prime_odd_prime_odd_prime_odd_prime[i]%2==0]\n\
    \    hex_digits_prime_odd_prime_odd_prime_odd_prime_len = len(hex_digits_prime_odd_prime_odd_prime_odd_prime)\n\
    \    hex_digits_prime_odd_prime_odd_prime_odd_prime_odd_prime = [i for i in range(hex_digits_prime_odd_prime_odd_prime_odd_prime_len)\
    \ if hex_digits_prime_odd_prime_odd_prime_odd_prime[i]%2!=0 and hex_digits_odd_prime_odd_prime_odd_prime_odd_prime[i]%2!=0\
    \ and hex_digits_prime_odd_prime_odd_prime_odd_prime_odd_prime[i]%2!=0 and hex_digits_prime_odd_prime_odd_prime_odd_prime_odd_prime[i]%2==0]\n\
    \    hex_digits_prime_odd_prime", "    \n    hex_key = ''\n    \n    hex_key =\
    \ ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n\
    \    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n\
    \    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key\
    \ = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n\
    \    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n\
    \    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key\
    \ = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n\
    \    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n\
    \    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key\
    \ = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n\
    \    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n\
    \    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key\
    \ = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n\
    \    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n\
    \    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key\
    \ = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n\
    \    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n\
    \    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key\
    \ = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n\
    \    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n\
    \    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key\
    \ = ''\n    \n    hex_key = ''\n    ", "    \n    hex_list = list(num)\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    \n    count = 0\n    \n    for x in hex_list:\n \
    \       if x == 'A' or x == 'B' or x == 'C' or x == 'D' or x == 'E' or x == 'F':\n\
    \            count += 1\n            \n    return count\n\n", "    \n    digits\
    \ = [int(i) for i in num.upper() if i.isdigit()]\n    \n    primes = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    \n    count = 0\n    \n    for digit in digits:\n        if digit\
    \ in primes:\n            count += 1\n            \n    return count\n\n", " \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    ", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    hex_key =\
    \ ''\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n  \
    \  \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for\
    \ i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for\
    \ i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    ", "    \n    hex_list = list(num)\n\
    \    hex_list.sort()\n    \n    hex_dict = {\n        'A': 2, 'B': 2, 'C': 2,\
    \ 'D': 2, 'E': 2, 'F': 2\n    }\n    \n    hex_dict = {\n        'A': 2, 'B':\
    \ 2, 'C': 2, 'D': 2, 'E': 2, 'F': 2\n    }\n    \n    hex_dict = {\n        'A':\
    \ 2, 'B': 2, 'C': 2, 'D': 2, 'E': 2, 'F': 2\n    }\n    \n    hex_dict = {\n \
    \       'A': 2, 'B': 2, 'C': 2, 'D': 2, 'E': 2, 'F': 2\n    }\n    \n    hex_dict\
    \ = {\n        'A': 2, 'B': 2, 'C': 2, 'D': 2, 'E': 2, 'F': 2\n    }\n    \n \
    \   hex_dict = {\n        'A': 2, 'B': 2, 'C': 2, 'D': 2, 'E': 2, 'F': 2\n   \
    \ }\n    \n    hex_dict = {\n        'A': 2, 'B': 2, 'C': 2, 'D': 2, 'E': 2, 'F':\
    \ 2\n    }\n    \n    hex_dict = {\n        'A': 2, 'B': 2, 'C': 2, 'D': 2, 'E':\
    \ 2, 'F': 2\n    }\n    \n    hex_dict = {\n        'A': 2, 'B': 2, 'C': 2, 'D':\
    \ 2, 'E': 2, 'F': 2\n    }\n    \n    hex_dict = {\n        'A': 2, 'B': 2, 'C':\
    \ 2, 'D': 2, 'E': 2, 'F': 2\n    }\n    \n    hex_dict = {\n        'A': 2, 'B':\
    \ 2, 'C': 2, 'D': 2, 'E': 2, 'F': 2\n    }\n    \n    hex_dict = {\n        'A':\
    \ 2, 'B': 2, 'C': 2, 'D': 2, 'E': 2, 'F': 2\n    }\n    \n    hex_dict = {\n \
    \       'A': 2, 'B': 2, 'C': 2, 'D': 2, 'E': 2, 'F': 2\n    }\n    \n    hex_dict\
    \ = {\n        'A': 2, 'B': 2, 'C': 2, 'D': 2, 'E': 2, 'F': 2\n    }\n    \n \
    \   hex_dict = {\n        'A': 2, 'B': 2, 'C': 2, 'D': 2, 'E': 2, 'F': 2\n   \
    \ }\n    \n    hex_dict = {\n        'A': 2, 'B': 2, 'C': 2, 'D': 2, 'E': 2, 'F':\
    \ 2\n    }\n    \n    hex_dict = {\n        'A': 2, 'B': 2, 'C': 2, 'D': 2, 'E':\
    \ 2, 'F': 2\n    }\n    \n    hex_dict = {", "    \n    hex_list = list(num)\n\
    \    hex_list.sort()\n    \n    count = 0\n    \n    for index in range(0, len(hex_list)):\n\
    \        \n        if hex_list[index] == 'A':\n            count += 1\n      \
    \  elif hex_list[index] == 'B':\n            count += 1\n        elif hex_list[index]\
    \ == 'C':\n            count += 1\n        elif hex_list[index] == 'D':\n    \
    \        count += 1\n        elif hex_list[index] == 'E':\n            count +=\
    \ 1\n        elif hex_list[index] == 'F':\n            count += 1\n    \n    return\
    \ count\n\n", "    \n    count = 0\n    \n    for char in num:\n        if char.isalpha():\n\
    \            count += 2\n        else:\n            count += 1\n    \n    return\
    \ count\n\n", "    \n    hex_key = 0\n    \n    hex_key = int(num, 16)\n    \n\
    \    hex_digits = [hex(i) for i in range(0, 16)]\n    \n    hex_digits_set = set(hex_digits)\n\
    \    \n    hex_digits_prime = [hex(i) for i in range(0, 16) if hex_digits[i] in\
    \ hex_digits_set]\n    \n    hex_digits_prime_len = len(hex_digits_prime)\n  \
    \  \n    if hex_digits_prime_len == 2:\n        hex_digits_prime_2 = hex_digits_prime[0]\n\
    \        hex_digits_prime_3 = hex_digits_prime[1]\n        hex_digits_prime_4\
    \ = hex_digits_prime[2]\n        hex_digits_prime_5 = hex_digits_prime[3]\n  \
    \      hex_digits_prime_6 = hex_digits_prime[4]\n        hex_digits_prime_7 =\
    \ hex_digits_prime[5]\n        hex_digits_prime_8 = hex_digits_prime[6]\n    \
    \    hex_digits_prime_9 = hex_digits_prime[7]\n        hex_digits_prime_10 = hex_digits_prime[8]\n\
    \        hex_digits_prime_11 = hex_digits_prime[9]\n        hex_digits_prime_12\
    \ = hex_digits_prime[10]\n        hex_digits_prime_13 = hex_digits_prime[11]\n\
    \        hex_digits_prime_14 = hex_digits_prime[12]\n        hex_digits_prime_15\
    \ = hex_digits_prime[13]\n        hex_digits_prime_16 = hex_digits_prime[14]\n\
    \        hex_digits_prime_17 = hex_digits_prime[15]\n        hex_digits_prime_18\
    \ = hex_digits_prime[16]\n        hex_digits_prime_19 = hex_digits_prime[17]\n\
    \        hex_digits_prime_20 = hex_digits_prime[18]\n        hex_digits_prime_21\
    \ = hex_digits_prime[19]\n        hex_digits_prime_22 = hex_digits_prime[20]\n\
    \        hex_digits_prime_23 = hex_digits_prime[21]\n        hex_digits_prime_24\
    \ = hex_digits_prime[22]\n        hex_digits_prime_25 = hex_digits_prime[23]\n\
    \        hex_digits_prime_26 = hex_digits_prime[24]\n        hex_digits_prime_27\
    \ = hex_digits_prime[25]\n        hex_digits_prime_28 = hex_digits_prime[26]\n\
    \        hex_digits_prime_29 = hex_digits_prime[27]\n        hex_digits_prime",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    hex_list\
    \ = list(hex_key)\n    hex_list.sort()\n    \n    hex_list.reverse()\n    \n \
    \   hex_list2 = []\n    \n    for x in hex_list:\n        if x not in hex_list2:\n\
    \            hex_list2.append(x)\n    \n    hex_list2.sort()\n    \n    hex_list2.reverse()\n\
    \    \n    hex_list3 = []\n    \n    for x in hex_list2:\n        if x not in\
    \ hex_list3:\n            hex_list3.append(x)\n    \n    hex_list3.sort()\n  \
    \  \n    hex_list3.reverse()\n    \n    hex_list4 = []\n    \n    for x in hex_list3:\n\
    \        if x not in hex_list4:\n            hex_list4.append(x)\n    \n    hex_list4.sort()\n\
    \    \n    hex_list4.reverse()\n    \n    hex_list5 = []\n    \n    for x in hex_list4:\n\
    \        if x not in hex_list5:\n            hex_list5.append(x)\n    \n    hex_list5.sort()\n\
    \    \n    hex_list5.reverse()\n    \n    hex_list6 = []\n    \n    for x in hex_list5:\n\
    \        if x not in hex_list6:\n            hex_list6.append(x)\n    \n    hex_list6.sort()\n\
    \    \n    hex_list6.reverse()\n    \n    hex_list7 = []\n    \n    for x in hex_list6:\n\
    \        if x not in hex_list7:\n            hex_list7.append(x)\n    \n    hex_list7.sort()\n\
    \    \n    hex_list7.reverse()\n    \n    hex_list8 = []\n    \n    for x in hex_list7:\n\
    \        if x not in hex_list8:\n            hex_list8.append(x)\n    \n    hex_list8.sort()\n\
    \    \n    hex_list8.reverse()\n    \n    hex_list9 = []\n    \n    for x in hex_list8:\n\
    \        if x not in hex_list9:\n            hex_list9.append(x)\n    \n    hex_list9.sort()\n\
    \    \n    hex_list9.reverse()\n    \n    hex_list10 = []\n    \n    for x in\
    \ hex_list9:\n        if x not in hex_list10:\n            hex_list10.append(x)\n\
    \    \n    hex_list10.sort()\n    \n    hex_list10.reverse()\n    \n    hex_list11\
    \ = []\n    \n    for x in hex_list10:\n        if x not in hex_list11:\n    \
    \        hex_list11.append(x)\n    \n    hex_list11.sort()\n    \n    hex_list11.reverse()\n\
    \    \n    hex_list12 = []\n    \n    for x in hex_list11:\n        if x not in\
    \ hex_list", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    digits = num.upper()\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    digits_set = set(digits)\n\
    \    \n    prime_digits_set.intersection_update(digits_set)\n    \n    return\
    \ len(prime_digits)\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n\
    </cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n\
    </cell>\n<cell>\nhex_key('2020')\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that receives a positive integer and returns the number of \ntimes it appears\
    \ in the following list: \n[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120,\
    \ 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280,\
    \ 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400]\nExamples:\n>>>\
    \ count_digits(10)\n1\n>>> count_digits(20)\n2\n>>> count_digits(30)\n3\n>>> count_digits(40)\n\
    4\n>>> count_digits(50)\n5\n>>> count_digits(60)\n6\n>>> count_digits(70)\n7\n\
    >>> count_digits(80)\n8\n>>> count_digits(90)\n9\n>>> count_digits(100)\n10\n\
    >>> count_digits(110)\n11\n>>> count_digits(120)\n12\n>>> count_digits(130)\n\
    13\n>>> count_digits(140)\n14\n>>> count_digits(150)\n15\n>>> count_digits(160)\n\
    16\n>>> count_digits(170)\n17\n>>> count_digits(180)\n18\n>>> count_digits(190)\n\
    19\n>>> count_digits(200)\n20\n>>> count_digits(210)\n21\n>>> count_digits(220)\n\
    22\n>>> count_digits(230)\n23\n>>> count_digits(240)\n24\n>>> count_digits(250)\n\
    25\n>>> count_digits(260)\n26\n>>> count_digits(270)\n27\n>>> count_digits(280)\n\
    28\n>>> count_digits(290)\n29\n>>> count_digits(300)\n30\n>>> count_digits(310)",
  "    \n    hex_key = int(num, 16)\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set =\
    \ prime_digits_set.intersection(set(hex_key))\n    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    prime_count = 0\n\
    \    \n    for digit in hex_list:\n        if digit in 'ABCDEF':\n           \
    \ prime_count += 1\n            \n    return prime_count\n\n", "    \n    digits\
    \ = num.upper()\n    \n    primes = []\n    \n    for digit in digits:\n     \
    \   \n        if digit == 'A' or digit == 'B':\n            primes.append(2)\n\
    \        elif digit == 'C' or digit == 'D':\n            primes.append(3)\n  \
    \      elif digit == 'E' or digit == 'F':\n            primes.append(5)\n    \
    \    else:\n            primes.append(7)\n    \n    primes_count = sum(primes)\n\
    \    \n    return primes_count\n\n", "    hex_key = ''\n    hex_digits = ''\n\
    \    hex_digits_len = len(hex_key)\n    hex_digits_len_2 = hex_digits_len // 2\n\
    \    hex_digits_len_3 = hex_digits_len_2 // 3\n    hex_digits_len_4 = hex_digits_len_3\
    \ // 4\n    hex_digits_len_5 = hex_digits_len_4 // 5\n    hex_digits_len_6 = hex_digits_len_5\
    \ // 6\n    hex_digits_len_7 = hex_digits_len_6 // 7\n    hex_digits_len_8 = hex_digits_len_7\
    \ // 8\n    hex_digits_len_9 = hex_digits_len_8 // 9\n    hex_digits_len_10 =\
    \ hex_digits_len_9 // 10\n    hex_digits_len_11 = hex_digits_len_10 // 11\n  \
    \  hex_digits_len_12 = hex_digits_len_11 // 12\n    hex_digits_len_13 = hex_digits_len_12\
    \ // 13\n    hex_digits_len_14 = hex_digits_len_13 // 14\n    hex_digits_len_15\
    \ = hex_digits_len_14 // 15\n    hex_digits_len_16 = hex_digits_len_15 // 16\n\
    \    hex_digits_len_17 = hex_digits_len_16 // 17\n    hex_digits_len_18 = hex_digits_len_17\
    \ // 18\n    hex_digits_len_19 = hex_digits_len_18 // 19\n    hex_digits_len_20\
    \ = hex_digits_len_19 // 20\n    hex_digits_len_21 = hex_digits_len_20 // 21\n\
    \    hex_digits_len_22 = hex_digits_len_21 // 22\n    hex_digits_len_23 = hex_digits_len_22\
    \ // 23\n    hex_digits_len_24 = hex_digits_len_23 // 24\n    hex_digits_len_25\
    \ = hex_digits_len_24 // 25\n    hex_digits_len_26 = hex_digits_len_25 // 26\n\
    \    hex_digits_len_27 = hex_digits_len_26 // 27\n    hex_digits_len_28 = hex_digits_len_27\
    \ // 28\n    hex_digits_len_29 = hex_digits_len_28 // 29\n    hex_digits_len_30\
    \ = hex_digits_len_29 // 30\n    hex_digits_len_31 = hex_digits_len_30 // 31\n\
    \    hex_digits_len_32 = hex_digits_len_31 // 32\n    hex_digits_len_33 = hex_digits_len_32\
    \ // 33\n    hex_digits_len_34 = hex_digits_len_33 // 34\n    hex_digits_len_35\
    \ = hex_digits_", "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n\
    \    count = 0\n    \n    for x in hex_list:\n        if x == 'A' or x == 'B'\
    \ or x == 'C' or x == 'D' or x == 'E' or x == 'F':\n            count += 1\n \
    \       else:\n            count += 1\n            \n    return count\n", "  \
    \  \n    hex_key = ''\n    \n    hex_digits = [int(i) for i in hex_key]\n    \n\
    \    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    prime_digits_set = set(prime_digits)\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(hex_digits))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n \
    \   \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(prime_digits_set))\n\
    \    ", "    hex_key = ''\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key\n                       in num])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key\n                       in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key\n          \
    \             in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key\n                       in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key\n                       in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key\n          \
    \             in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key\n                       in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key\n                       in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key\n          \
    \             in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key\n                       in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key\n                       in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key\n          \
    \             in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key\n                       in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key\n                       in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key\n          \
    \             in hex_key", "    \n    hex_list = list(num)\n    hex_list.sort()\n\
    \    \n    hex_dict = {}\n    \n    for hex in hex_list:\n        if hex in hex_dict:\n\
    \            hex_dict[hex] += 1\n        else:\n            hex_dict[hex] = 1\n\
    \    \n    prime_hex_dict = {}\n    \n    for hex in hex_dict:\n        if hex_dict[hex]\
    \ % 2 == 0:\n            prime_hex_dict[hex] = hex_dict[hex]\n        else:\n\
    \            prime_hex_dict[hex] = hex_dict[hex] + 1\n    \n    prime_hex_dict.sort()\n\
    \    \n    prime_hex_dict.reverse()\n    \n    prime_hex_dict = [hex for hex in\
    \ prime_hex_dict if prime_hex_dict[hex] <= hex_dict[hex]]\n    \n    return len(prime_hex_dict)\n\
    \n", "    \n    hex_key = ''\n    \n    # Your code here\n    \n    return int(hex_key,\
    \ 16)\n", "    \n    digits = num.upper()\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set =\
    \ prime_digits_set.difference(set(digits))\n    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(digits))\n    \n    prime_digits_set = prime_digits_set.difference(set(digits))\n\
    \    \n    prime", "    \n    hex_key = ''\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n    \n \
    \   hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key =\
    \ list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    ", "    \n    hex_key = ''\n    \n    hex_key = ''.join(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n", "    hex_key = int(num, 16)\n    hex_digits\
    \ = [int(hex_key[hex_key.index(i)], 16) for i in '0123456789ABCDEF']\n    primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    primes_count = 0\n    for prime in primes:\n      \
    \  if prime in hex_digits:\n            primes_count += 1\n    return primes_count\n\
    \n", "    \n    hex_key = ''\n    \n    hex_key = ''.join(hex_key)\n    \n   \
    \ hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n", "    \n    hex_list = ['0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n    \n    hex_string\
    \ = num.upper()\n    \n    hex_string = hex_string.replace('A', '0')\n    hex_string\
    \ = hex_string.replace('B', '1')\n    hex_string = hex_string.replace('C', '2')\n\
    \    hex_string = hex_string.replace('D', '3')\n    hex_string = hex_string.replace('E',\
    \ '4')\n    hex_string = hex_string.replace('F', '5')\n    \n    hex_string =\
    \ hex_string.replace('0', 'a')\n    hex_string = hex_string.replace('1', 'b')\n\
    \    hex_string = hex_string.replace('2', 'c')\n    hex_string = hex_string.replace('3',\
    \ 'd')\n    hex_string = hex_string.replace('4', 'e')\n    hex_string = hex_string.replace('5',\
    \ 'f')\n    \n    hex_string = hex_string.replace('a', '0')\n    hex_string =\
    \ hex_string.replace('b', '1')\n    hex_string = hex_string.replace('c', '2')\n\
    \    hex_string = hex_string.replace('d', '3')\n    hex_string = hex_string.replace('e',\
    \ '4')\n    hex_string = hex_string.replace('f', '5')\n    \n    hex_string =\
    \ hex_string.replace('0', 'A')\n    hex_string = hex_string.replace('1', 'B')\n\
    \    hex_string = hex_string.replace('2', 'C')\n    hex_string = hex_string.replace('3',\
    \ 'D')\n    hex_string = hex_string.replace('4', 'E')\n    hex_string = hex_string.replace('5',\
    \ 'F')\n    \n    hex_string = hex_string.replace('A', '0')\n    hex_string =\
    \ hex_string.replace('B', '1')\n    hex_string = hex_string.replace('C', '2')\n\
    \    hex_string = hex_string.replace('D', '3')\n    hex_string = hex_string.replace('E',\
    \ '4')\n    hex_string = hex_string.replace('F', '5')\n    \n    hex_string =\
    \ hex_string.replace('0', 'a')\n    hex_string = hex_string.replace('1', 'b')\n\
    \    hex_string = hex_string.replace('2', 'c')\n    hex_string = hex_string.replace('3',\
    \ 'd')\n    hex_string = hex_string.replace('4', 'e')\n    hex_string = hex_string.replace('5',\
    \ 'f')\n    \n    hex_string = hex_string.replace('A', '0')\n    hex_string =\
    \ hex_string.replace('B', '1')\n    hex_string = hex_string.replace('C', '2')\n\
    \    hex_string = hex_string.replace('D', '3')\n    hex_string = hex_string.replace('E',\
    \ '4')\n    hex_string = hex_string.replace('F', '5')\n    \n    hex_string =\
    \ hex_string.replace('0', '", "    \n    hex_list = list(hex_key)\n    hex_list.sort()\n\
    \    \n    count = 0\n    \n    for num in hex_list:\n        if num in hex_key:\n\
    \            count += 1\n            \n    return count\n", "    \n    digits\
    \ = num.upper()\n    \n    count = 0\n    \n    for digit in digits:\n       \
    \ \n        if digit in 'ABCDEF':\n            count += 1\n            \n    return\
    \ count\n\n", "    \n    hex_key = 0\n    \n    # Your code here\n    \n    return\
    \ hex_key\n</cell>\n<cell>", "    hex_key = ''\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key\n          \
    \            in num])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key\n                      in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key\n                      in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key\n          \
    \            in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key\n                      in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key\n                      in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key\n          \
    \            in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key\n                      in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key\n                      in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key\n          \
    \            in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key\n                      in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key\n                      in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key\n          \
    \            in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key\n                      in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key\n                      in hex_key", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
