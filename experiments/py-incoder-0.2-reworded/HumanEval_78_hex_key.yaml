name: HumanEval_78_hex_key
language: py
prompt: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a\
  \ function that receives \n    a hexadecimal number as a string and counts the number\
  \ of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural\
  \ number \n    greater than 1 that is not a product of two smaller natural numbers).\n\
  \    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n  \
  \  Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a\
  \ number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal\
  \ 13).\n    Note: you may assume the input is always correct or empty string, \n\
  \    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n\
  \    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n  \
  \  >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\
  \"\"\n"
tests: "def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
  \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n\
  \    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
  \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
completions: ["    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    hex_list2\
    \ = []\n    \n    hex_list2.append(hex_list[0])\n    \n    for i in range(1,len(hex_list)):\n\
    \        \n        if hex_list[i] == hex_list[i-1]:\n            hex_list2.append(hex_list[i])\n\
    \        else:\n            hex_list2.append(hex_list[i])\n            hex_list2.append(hex_list[i-1])\n\
    \            \n    hex_list2.sort()\n    \n    hex_list3 = []\n    \n    hex_list3.append(hex_list2[0])\n\
    \    \n    for i in range(1,len(hex_list2)):\n        \n        if hex_list2[i]\
    \ == hex_list2[i-1]:\n            hex_list3.append(hex_list2[i])\n        else:\n\
    \            hex_list3.append(hex_list2[i])\n            hex_list3.append(hex_list2[i-1])\n\
    \            \n    hex_list3.sort()\n    \n    hex_list4 = []\n    \n    hex_list4.append(hex_list3[0])\n\
    \    \n    for i in range(1,len(hex_list3)):\n        \n        if hex_list3[i]\
    \ == hex_list3[i-1]:\n            hex_list4.append(hex_list3[i])\n        else:\n\
    \            hex_list4.append(hex_list3[i])\n            hex_list4.append(hex_list3[i-1])\n\
    \            \n    hex_list4.sort()\n    \n    hex_list5 = []\n    \n    hex_list5.append(hex_list4[0])\n\
    \    \n    for i in range(1,len(hex_list4)):\n        \n        if hex_list4[i]\
    \ == hex_list4[i-1]:\n            hex_list5.append(hex_list4[i])\n        else:\n\
    \            hex_list5.append(hex_list4[i])\n            hex_list5.append(hex_list4[i-1])\n\
    \            \n    hex_list5.sort()\n    \n    hex_list6 = []\n    \n    hex_list6.append(hex_list5[0])\n\
    \    \n    for i in range(1,len(hex_list5)):\n        \n        if hex_list5[i]\
    \ == hex_list5[i-1]:\n            hex_list6.append(hex_list5[i])\n        else:\n\
    \            hex_list6.append(hex_list5[i])\n            hex_list6.append(hex_list5[i-1])\n\
    \            \n    hex_list6.sort()\n    \n    hex_list7 = []\n    \n    hex_list7.append(hex_list6[0])\n\
    \    \n    for i in range(1,len(hex_list6)):\n        \n        if hex_list6[i]\
    \ == hex_list6[i-1]:\n            hex_list7.append(hex_list6[i])\n        else:\n\
    \            hex_list7.append(hex_list6[i])\n            hex_list7.append(hex_list6[i-1])\n\
    \            \n    hex_list7.sort()\n    \n", "    \n    count = 0\n    \n   \
    \ digits = [int(i) for i in num.upper()]\n    \n    for digit in digits:\n   \
    \     if digit in primes:\n            count += 1\n            \n    return count\n\
    </cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\n\
    hex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\n\
    hex_key('2020')\n</cell>\n<text>\nExercise 2\nWrite a function that receives a\
    \ positive integer and returns the sum of the squares of the digits of that number.\n\
    Examples:\n>>> square_digits(123)\n25\n>>> square_digits(125)\n125\n>>> square_digits(125)\n\
    125\n>>> square_digits(0)\n0\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-", "    \n    hex_list = list(num)\n    hex_list.sort()\n\
    \    \n    prime_numbers = []\n    \n    for hex in hex_list:\n        \n    \
    \    if hex in prime_numbers:\n            \n            prime_numbers.remove(hex)\n\
    \            \n        else:\n            \n            prime_numbers.append(hex)\n\
    \            \n    prime_numbers.sort()\n    \n    prime_numbers_length = len(prime_numbers)\n\
    \    \n    if prime_numbers_length == 1:\n        \n        return prime_numbers[0]\n\
    \    \n    elif prime_numbers_length == 2:\n        \n        return prime_numbers[0]\
    \ * prime_numbers[1]\n    \n    else:\n        \n        return prime_numbers[0]\
    \ * prime_numbers[1] * prime_numbers[2]\n    \n    ", "    hex_list = list(num)\n\
    \    hex_list.sort()\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n   \
    \ hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n \
    \   hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(", "    \n    hex_list = ['0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n    \n    hex_dict = {\n     \
    \   '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'a': 10,\n        'b': 11,\n        'c': 12,\n        'd': 13,\n\
    \        'e': 14,\n        'f': 15\n    }\n    \n    hex_digit = hex_dict[num]\n\
    \    \n    hex_digits = []\n    \n    while hex_digit > 0:\n        hex_digits.append(hex_digit)\n\
    \        hex_digit -= 1\n    \n    hex_digits = hex_digits[::-1]\n    \n    hex_digits_primes\
    \ = []\n    \n    for hex_digit in hex_digits:\n        if hex_digit in hex_digits_primes:\n\
    \            hex_digits_primes.remove(hex_digit)\n        else:\n            hex_digits_primes.append(hex_digit)\n\
    \    \n    hex_digits_primes = hex_digits_primes[::-1]\n    \n    hex_digits_primes_count\
    \ = 0\n    \n    for hex_digit in hex_digits_primes:\n        hex_digits_primes_count\
    \ += hex_digit\n    \n    return hex_digits_primes_count\n\n", "    hex_list =\
    \ list(num)\n    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(filter(lambda\
    \ x: x not in '0123456789ABCDEF', hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n\
    \    hex_list = list(filter(lambda x: x not in 'ABCDEF', hex_list))\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = list(filter(lambda x: x not in 'BCD',\
    \ hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(filter(lambda\
    \ x: x not in '0', hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n \
    \   hex_list = list(filter(lambda x: x not in '', hex_list))\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = list(filter(lambda x: x not in '', hex_list))\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(filter(lambda\
    \ x: x not in '', hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n  \
    \  hex_list = list(filter(lambda x: x not in '', hex_list))\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = list(filter(lambda x: x not in '', hex_list))\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(filter(lambda\
    \ x: x not in '', hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n  \
    \  hex_list = list(filter(lambda x: x not in '', hex_list))\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = list(filter(lambda x: x not in '', hex_list))\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(filter(lambda\
    \ x: x not in '', hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n  \
    \  hex_list = list(filter(lambda x: x not in '', hex_list))\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = list(filter(lambda x: x not in '', hex_list))\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(filter(lambda\
    \ x: x not in '', hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n  \
    \  hex_list = list(filter(lambda x: x not in '', hex_list))\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = list(filter(lambda x: x not in '', hex_list))\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = list(filter(lambda\
    \ x: x not in '', hex_list))\n    hex_list.sort()\n    hex_list.reverse()\n  \
    \  hex_list = list(filter(lambda x: x not in '', hex_list", "    \n    hex_list\
    \ = list(num)\n    hex_list.sort()\n    hex_list.reverse()\n    \n    hex_dict\
    \ = {}\n    \n    for x in hex_list:\n        hex_dict[x] = hex_dict.get(x, 0)\
    \ + 1\n    \n    prime_hex_dict = {}\n    \n    for x in hex_dict:\n        if\
    \ hex_dict[x] % 2 == 0:\n            continue\n        \n        prime_hex_dict[x]\
    \ = hex_dict[x]\n        \n    prime_hex_dict.update({\n        '2': 3,\n    \
    \    '3': 3,\n        '5': 5,\n        '7': 7,\n        '11': 11,\n        '13':\
    \ 13,\n        '17': 17,\n        '19': 19,\n        '23': 23,\n        '29':\
    \ 29,\n        '31': 31,\n        '37': 37,\n        '41': 41,\n        '43':\
    \ 43,\n        '47': 47,\n        '53': 53,\n        '59': 59,\n        '61':\
    \ 61,\n        '67': 67,\n        '71': 71,\n        '73': 73,\n        '79':\
    \ 79,\n        '83': 83,\n        '89': 89,\n        '97': 97,\n        '101':\
    \ 101,\n        '103': 103,\n        '107': 107,\n        '109': 109,\n      \
    \  '113': 113,\n        '127': 127,\n        '131': 131,\n        '137': 137,\n\
    \        '139': 139,\n        '149': 149,\n        '151': 151,\n        '157':\
    \ 157,\n        '163': 163,\n        '167': 167,\n        '173': 173,\n      \
    \  '179': 179,\n        '181': 181,\n        '191': 191,\n        '193': 193,\n\
    \        '197': 197,\n        '199': 199,\n        '211': 211,\n        '223':\
    \ 223,\n        '227': 227,\n        '229': 229,\n        '233': 233,\n      \
    \  '239': 239,\n        '241': 241,\n        '251': 251,\n        '257': 257,\n\
    \        '263': 263,\n        '269': 269,\n        '271': 271,\n        '277':\
    \ 277,\n        '281': 281,\n        '283': 283,\n        '293': 293,\n      \
    \  '307': 307,\n        '311': 311,\n        '313': 313,\n        '317': 317,\n\
    \        '331': 331,\n        '337': 337,\n        '347': 347,\n        '349':\
    \ 349,\n        '353': 353,\n        '359': 359,", "    \n    hex_key = ''\n \
    \   \n    # Your code here\n    \n    return hex_key\n", "    \n    hex_key =\
    \ ''\n    \n    hex_key = int(num, 16)\n    \n    hex_key = str(hex_key)\n   \
    \ \n    hex_key = hex_key.upper()\n    \n    hex_key = list(hex_key)\n    \n \
    \   hex_key = list(map(int, hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x % 2 == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 3 ==\
    \ 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 5 == 0, hex_key))\n\
    \    \n    hex_key = list(filter(lambda x: x % 7 == 0, hex_key))\n    \n    hex_key\
    \ = list(filter(lambda x: x % 11 == 0, hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x % 13 == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 17\
    \ == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 19 == 0, hex_key))\n\
    \    \n    hex_key = list(filter(lambda x: x % 23 == 0, hex_key))\n    \n    hex_key\
    \ = list(filter(lambda x: x % 29 == 0, hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x % 31 == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 37\
    \ == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 41 == 0, hex_key))\n\
    \    \n    hex_key = list(filter(lambda x: x % 43 == 0, hex_key))\n    \n    hex_key\
    \ = list(filter(lambda x: x % 47 == 0, hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x % 53 == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 59\
    \ == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 61 == 0, hex_key))\n\
    \    \n    hex_key = list(filter(lambda x: x % 67 == 0, hex_key))\n    \n    hex_key\
    \ = list(filter(lambda x: x % 71 == 0, hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x % 73 == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 79\
    \ == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 83 == 0, hex_key))\n\
    \    \n    hex_key = list(filter(lambda x: x % 89 == 0, hex_key))\n    \n    hex_key\
    \ = list(filter(lambda x: x % 97 == 0, hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x % 101 == 0, hex_key))\n    \n    hex_key = list(filter(lambda x: x % 103\
    \ == 0, hex_key))", "    \n    hex_key = ''\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = int(hex_key,16)\n \
    \   \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = int(hex_key,16)\n \
    \   \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = int(hex_key,16)\n \
    \   \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = int(hex_key,16)\n \
    \   \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = int(hex_key,16)\n \
    \   \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = int(hex_key,16)\n \
    \   \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = int(hex_key,16)\n \
    \   \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = str(hex_key)\n    \n\
    \    hex_key = ''.join([hex_key,", "    \n    hex_key = 0\n    \n    hex_key =\
    \ len(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n\
    \    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n\
    \    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key\
    \ = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n   \
    \ \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key =\
    \ int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n\
    \    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n\
    \    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key\
    \ = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n   \
    \ \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key =\
    \ int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n\
    \    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n\
    \    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key\
    \ = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n   \
    \ \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key =\
    \ int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n\
    \    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n\
    \    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key\
    \ = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n   \
    \ \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key =\
    \ int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n\
    \    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n\
    \    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key\
    \ = int(num)\n    \n    hex_key = int(num)\n    \n    hex_key = int(num)\n    ",
  "    \n    hex_key = ''\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n", "    \n  \
    \  hex_list = list(num)\n    hex_list.sort()\n    \n    hex_dict = {}\n    \n\
    \    for hex in hex_list:\n        if hex in hex_dict:\n            hex_dict[hex]\
    \ += 1\n        else:\n            hex_dict[hex] = 1\n    \n    prime_hex_dict\
    \ = {}\n    \n    for hex in hex_dict:\n        if hex_dict[hex] % 2 == 0:\n \
    \           prime_hex_dict[hex] = hex_dict[hex]\n        else:\n            prime_hex_dict[hex]\
    \ = hex_dict[hex] // 2\n    \n    prime_hex_list = list(prime_hex_dict.keys())\n\
    \    prime_hex_list.sort()\n    \n    prime_hex_dict = {}\n    \n    for hex in\
    \ prime_hex_list:\n        if hex in hex_dict:\n            prime_hex_dict[hex]\
    \ = hex_dict[hex]\n        else:\n            prime_hex_dict[hex] = hex_dict[hex]\
    \ // 2\n    \n    prime_hex_list = list(prime_hex_dict.keys())\n    prime_hex_list.sort()\n\
    \    \n    prime_hex_dict = {}\n    \n    for hex in prime_hex_list:\n       \
    \ if hex in hex_dict:\n            prime_hex_dict[hex] = hex_dict[hex]\n     \
    \   else:\n            prime_hex_dict[hex] = hex_dict[hex] // 2\n    \n    prime_hex_list\
    \ = list(prime_hex_dict.keys())\n    prime_hex_list.sort()\n    \n    prime_hex_dict\
    \ = {}\n    \n    for hex in prime_hex_list:\n        if hex in hex_dict:\n  \
    \          prime_hex_dict[hex] = hex_dict[hex]\n        else:\n            prime_hex_dict[hex]\
    \ = hex_dict[hex] // 2\n    \n    prime_hex_list = list(prime_hex_dict.keys())\n\
    \    prime_hex_list.sort()\n    \n    prime_hex_dict = {}\n    \n    for hex in\
    \ prime_hex_list:\n        if hex in hex_dict:\n            prime_hex_dict[hex]\
    \ = hex_dict[hex]\n        else:\n            prime_hex_dict[hex] = hex_dict[hex]\
    \ // 2\n    \n    prime_hex_list = list(prime_hex_dict.keys())\n    prime_hex_list.sort()\n\
    \    \n    prime_hex_dict = {}\n    \n    for hex in prime_hex_list:\n       \
    \ if hex in hex_dict:\n            prime_hex_dict[hex] = hex_dict[hex]\n     \
    \   else:\n            prime_hex_dict[hex] = hex_dict[hex] // 2\n    \n    prime_hex_list\
    \ = list(prime_hex_dict.keys())\n    prime_hex_list.sort()\n    \n    prime_hex_dict\
    \ = {}\n    \n    for hex in prime_hex_list:", "    \n    hex_key = ''\n    \n\
    \    # Your code here\n    \n    return int(hex_key, 16)\n</cell>\n<cell>\nhex_key('AB')\n\
    </cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n\
    <cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that receives a positive integer and returns\
    \ the sum of the squares of the digits of that number.\nExamples:\n>>> square_digits(123)\n\
    123\n>>> square_digits(1234)\n9\n>>> square_digits(12345)\n49\n>>> square_digits(123456789)\n\
    987\n>>> square_digits(1234567890)\n9876\n>>> square_digits(12345678901)\n98765\n\
    >>> square_digits(123456789012)\n987654\n>>> square_digits(1234567890123)\n9876543\n\
    >>> square_digits(12345678901234)\n98765432\n>>> square_digits(123456789012345)\n\
    987654321\n>>> square_digits(1234567890123456)\n98765432112\n>>> square_digits(12345678901234567)\n\
    9876543211234\n>>> square_digits(123456789012345678)\n987654321123456\n>>> square_digits(1234567890123456787)\n\
    98765432112345678\n>>> square_digits(12345678901234567879)\n987654321123456789\n\
    >>> square_digits(123456789012345678790)\n9876543211234567890\n>>> square_digits(1234567890123456787901)\n\
    98765432112345678901\n>>> square_digits(12345678901234567879012)\n987654321123456789012\n\
    >>> square_digits(123456789012345678790123)\n9876543211234567890123\n>>> square_digits(1234567890123456787901234)\n\
    98765432112345678901234\n>>> square_digits(12345678901234567879012345)\n987654321123456789012345\n\
    >>> square_digits(123456789012345678790123456)\n9876543211234567890123456\n>>>\
    \ square_", "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    count\
    \ = 0\n    \n    for h in hex_list:\n        if h == 'A' or h == 'B' or h == 'C'\
    \ or h == 'D' or h == 'E' or h == 'F':\n            count += 1\n            \n\
    \    return count\n\n", "    \n    hex_key = 0\n    \n    # Your code here\n \
    \   \n    return hex_key\n</cell>\n<cell>", "    \n    digits = [int(digit) for\
    \ digit in num.upper() if digit in '0123456789ABCDEF']\n    \n    primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    \n    count = 0\n    for digit in digits:\n        if digit\
    \ in primes:\n            count += 1\n    return count\n\n", "    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    ", "    \n    digits\
    \ = [int(d) for d in hex_key.digits]\n    \n    count = 0\n    \n    for d in\
    \ digits:\n        if d % 2 == 0:\n            count += 1\n        else:\n   \
    \         count += 2\n    \n    return count\n\n\nhex_key.digits = '0123456789ABCDEF'\n\
    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
