name: HumanEval_136_largest_smallest_integers
language: py
prompt: "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst:\
  \ List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function\
  \ that returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
  \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
  \ no negative or positive integers, return them as None.\n\n    Examples:\n    >>>\
  \ largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n\
  \    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n  \
  \  \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None,\
  \ 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1,\
  \ 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) ==\
  \ (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert\
  \ candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n   \
  \ assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3,\
  \ -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n\
  \    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\ndef test_check():\n\
  \    check(largest_smallest_integers)\n\ntest_check()\n"
completions: ["    positive, negative = largest_smallest_integers_helper(lst)\n  \
    \  return negative, positive\n", "    positive, negative = 0, 0\n    for num in\
    \ lst:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n\
    \            negative += 1\n        else:\n            pass\n    if positive >\
    \ negative:\n        return positive, negative\n    else:\n        return negative,\
    \ positive\n", "    smallest_negative = None\n    largest_positive = None\n  \
    \  for num in lst:\n        if num < 0:\n            if smallest_negative is None:\n\
    \                smallest_negative = num\n            else:\n                smallest_negative\
    \ = min(smallest_negative, num)\n        else:\n            if largest_positive\
    \ is None:\n                largest_positive = num\n            else:\n      \
    \          largest_positive = max(largest_positive, num)\n    return smallest_negative,\
    \ largest_positive\n", "    smallest_negative = None\n    largest_positive = None\n\
    \    for x in lst:\n        if x < 0:\n            if smallest_negative is None:\n\
    \                smallest_negative = x\n            else:\n                smallest_negative\
    \ = min(smallest_negative, x)\n        else:\n            if largest_positive\
    \ is None:\n                largest_positive = x\n            else:\n        \
    \        largest_positive = max(largest_positive, x)\n    return (smallest_negative,\
    \ largest_positive)\n", "    smallest_negative = None\n    largest_positive =\
    \ None\n    for num in lst:\n        if num < 0:\n            if smallest_negative\
    \ is None:\n                smallest_negative = num\n            else:\n     \
    \           smallest_negative = min(smallest_negative, num)\n        else:\n \
    \           if largest_positive is None:\n                largest_positive = num\n\
    \            else:\n                largest_positive = max(largest_positive, num)\n\
    \    return smallest_negative, largest_positive\n", "    smallest_integer = None\n\
    \    largest_integer = None\n    for num in lst:\n        if num < 0:\n      \
    \      if smallest_integer is None:\n                smallest_integer = num\n\
    \            else:\n                smallest_integer = min(smallest_integer, num)\n\
    \        else:\n            if largest_integer is None:\n                largest_integer\
    \ = num\n            else:\n                largest_integer = max(largest_integer,\
    \ num)\n    return smallest_integer, largest_integer\n", "    positive, negative\
    \ = [], []\n    for x in lst:\n        if x > 0:\n            positive.append(x)\n\
    \        elif x < 0:\n            negative.append(x)\n        else:\n        \
    \    positive.append(None)\n            negative.append(None)\n    return max(negative),\
    \ min(positive)\n", "    smallest_integer = None\n    largest_integer = None\n\
    \    for num in lst:\n        if num < 0:\n            if smallest_integer is\
    \ None:\n                smallest_integer = num\n            else:\n         \
    \       smallest_integer = min(smallest_integer, num)\n        else:\n       \
    \     if largest_integer is None:\n                largest_integer = num\n   \
    \         else:\n                largest_integer = max(largest_integer, num)\n\
    \    return smallest_integer, largest_integer\n", "    smallest_integer = None\n\
    \    largest_integer = None\n    for num in lst:\n        if num < 0:\n      \
    \      if smallest_integer is None:\n                smallest_integer = num\n\
    \            else:\n                smallest_integer = min(smallest_integer, num)\n\
    \        else:\n            if largest_integer is None:\n                largest_integer\
    \ = num\n            else:\n                largest_integer = max(largest_integer,\
    \ num)\n    return smallest_integer, largest_integer\n", "    positive, negative\
    \ = lst[0], lst[0]\n    for num in lst[1:]:\n        if num < 0:\n           \
    \ negative = num\n        else:\n            positive = num\n    return negative,\
    \ positive\n", "    positive, negative = -1, 1\n    largest_negative, largest_positive\
    \ = -1, 1\n    for x in lst:\n        if x < 0:\n            largest_negative\
    \ = max(x * negative, largest_negative)\n        elif x > 0:\n            largest_positive\
    \ = max(x * positive, largest_positive)\n        else:\n            largest_positive,\
    \ largest_negative = x, x\n    return largest_negative, largest_positive\n", " \
    \   smallest_integer = None\n    largest_integer = None\n    for num in lst:\n\
    \        if num < 0:\n            if smallest_integer is None:\n             \
    \   smallest_integer = num\n            else:\n                smallest_integer\
    \ = min(smallest_integer, num)\n        else:\n            if largest_integer\
    \ is None:\n                largest_integer = num\n            else:\n       \
    \         largest_integer = max(largest_integer, num)\n    return smallest_integer,\
    \ largest_integer\n", "    lst = list(lst)\n    positives = [x for x in lst if\
    \ x > 0]\n    negatives = [x for x in lst if x < 0]\n    if len(positives) > 0\
    \ and len(negatives) > 0:\n        return max(negatives), min(positives)\n   \
    \ elif len(positives) > 0:\n        return max(positives), None\n    elif len(negatives)\
    \ > 0:\n        return None, min(negatives)\n    else:\n        return None, None\n",
  "    smallest_negative = None\n    largest_positive = None\n    for num in lst:\n\
    \        if num < 0:\n            if smallest_negative is None:\n            \
    \    smallest_negative = num\n            else:\n                smallest_negative\
    \ = min(smallest_negative, num)\n        else:\n            if largest_positive\
    \ is None:\n                largest_positive = num\n            else:\n      \
    \          largest_positive = max(largest_positive, num)\n    return smallest_negative,\
    \ largest_positive\n", "    lst = sorted(lst)\n    neg_ind = lst.index(-min(lst))\n\
    \    pos_ind = lst.index(max(lst))\n    return neg_ind, pos_ind\n", "    largest\
    \ = None\n    smallest = None\n    for num in lst:\n        if largest is None\
    \ or num > largest:\n            largest = num\n        if smallest is None or\
    \ num < smallest:\n            smallest = num\n    return largest, smallest\n",
  "    positive, negative = -1, 1\n    largest_positive, largest_negative = -2, -2\n\
    \    for x in lst:\n        if x > 0:\n            largest_positive = max(x+largest_positive,\
    \ largest_positive)\n        elif x < 0:\n            largest_negative = max(x+largest_negative,\
    \ largest_negative)\n        else:\n            positive, negative = x, x\n  \
    \  return largest_positive, largest_negative\n", "    smallest_negative = None\n\
    \    largest_positive = None\n    for num in lst:\n        if num < 0:\n     \
    \       if smallest_negative is None:\n                smallest_negative = num\n\
    \            else:\n                smallest_negative = min(smallest_negative,\
    \ num)\n        else:\n            if largest_positive is None:\n            \
    \    largest_positive = num\n            else:\n                largest_positive\
    \ = max(largest_positive, num)\n    return smallest_negative, largest_positive\n",
  "    smallest_negative = None\n    largest_positive = None\n    for x in lst:\n\
    \        if x < 0:\n            smallest_negative = x\n        elif x > 0:\n \
    \           largest_positive = x\n        else:\n            continue\n    return\
    \ smallest_negative, largest_positive\n", "    smallest_integer = None\n    largest_integer\
    \ = None\n    for num in lst:\n        if num < 0:\n            if smallest_integer\
    \ is None:\n                smallest_integer = num\n            else:\n      \
    \          smallest_integer = min(smallest_integer, num)\n        else:\n    \
    \        if largest_integer is None:\n                largest_integer = num\n\
    \            else:\n                largest_integer = max(largest_integer, num)\n\
    \    return smallest_integer, largest_integer\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
