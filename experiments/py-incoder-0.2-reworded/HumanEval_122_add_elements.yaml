name: HumanEval_122_add_elements
language: py
prompt: "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n\
  \    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n\
  \    the sum of the elements with at most two digits from the first k elements of\
  \ arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
  \ 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1\
  \ <= k <= len(arr)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88,\
  \ 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
  \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
  \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef\
  \ test_check():\n    check(add_elements)\n\ntest_check()\n"
completions: ["    sum = 0\n    i = 0\n    while i < k and arr[i] < 10:\n        sum\
    \ += arr[i]\n        i += 1\n    return sum\n", "    # Your code here\n    sum\
    \ = 0\n    for num in arr[:k]:\n        sum += num // 10\n        sum += num %\
    \ 10\n    return sum\n", "    # Your code here\n    sum = 0\n    i = 0\n    while\
    \ i < k:\n        sum += arr[i]\n        i += 1\n    return sum\n", "    sum =\
    \ 0\n    i = 0\n    while i < k:\n        sum += arr[i]\n        i += 1\n    return\
    \ sum\n", "    sum = 0\n    i = 0\n    while i < k:\n        sum += arr[i]\n \
    \       i += 1\n    return sum\n", "    # Your code here\n    sum = 0\n    for\
    \ num in arr[:k]:\n        sum += num // 10\n        sum += num % 10\n    return\
    \ sum\n", "    sum = 0\n    i = 0\n    while i < k and arr[i] < 10:\n        sum\
    \ += arr[i]\n        i += 1\n    return sum\n", "    sum = 0\n    i = 0\n    while\
    \ i < k:\n        sum += arr[i]\n        i += 1\n    return sum\n", "    sum =\
    \ 0\n    i = 0\n    while i < k:\n        sum += arr[i]\n        i += 1\n    return\
    \ sum\n", "    # Your code here\n    sum = 0\n    for num in arr[:k]:\n      \
    \  sum += num // 10\n        sum += num % 10\n    return sum\n\n", "    sum =\
    \ 0\n    for num in arr[:k]:\n        sum += num\n    return sum\n", "    sum\
    \ = 0\n    i = 0\n    while i < k:\n        sum += arr[i]\n        i += 1\n  \
    \  return sum\n", "    sum = 0\n    i = 0\n    while i < len(arr):\n        if\
    \ arr[i] % 10 == 0 and arr[i] % 100 != 0:\n            sum += arr[i]\n       \
    \     i += 1\n        else:\n            i += 1\n    return sum\n", "    sum_arr\
    \ = 0\n    sum_arr += arr[0]\n    for i in range(1, len(arr)):\n        sum_arr\
    \ += arr[i]\n        if sum_arr > k:\n            break\n        sum_arr -= arr[i-1]\n\
    \    return sum_arr\n", "    sum = 0\n    i = 0\n    while i < k:\n        sum\
    \ += arr[i]\n        i += 1\n    return sum\n", "    sum = 0\n    i = 0\n    while\
    \ i < k:\n        sum += arr[i]\n        i += 1\n    return sum\n\n", "    sum\
    \ = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum\n", "   \
    \ # Your code here\n    sum = 0\n    i = 0\n    while i < len(arr):\n        if\
    \ arr[i] < 10:\n            sum += arr[i]\n            i += 1\n        else:\n\
    \            sum += arr[i] - 10\n            i += 1\n            if i >= k:\n\
    \                break\n    return sum\n", "    sum = 0\n    i = 0\n    while\
    \ i < len(arr) and sum < k:\n        sum += arr[i]\n        i += 1\n    return\
    \ sum\n", "    sum = 0\n    i = 0\n    while i < len(arr):\n        if arr[i]\
    \ < 10:\n            sum += arr[i]\n            i += 1\n        else:\n      \
    \      sum += arr[i] - 10\n            i += 1\n            if sum > k:\n     \
    \           sum -= arr[i]\n                i += 1\n    return sum\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
