name: HumanEval_71_triangle_area
language: py
prompt: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
  \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
  \ rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
  \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
  \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
  \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
  \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2,\
  \ 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7)\
  \ == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) ==\
  \ 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
  \ntest_check()\n"
completions: ["    if a + b > c:\n        return -1\n    elif b + c > a:\n       \
    \ return -1\n    elif a + c > b:\n        return -1\n    else:\n        return\
    \ round(0.5 * (a + b + c), 2)\n\n", "    a, b, c = sorted([a, b, c])\n    if a\
    \ + b > c:\n        return -1\n    elif b + c > a:\n        return -1\n    elif\
    \ c + a > b:\n        return -1\n    else:\n        return round(0.5 * (a + b\
    \ + c), 2)\n\n", "    if a + b > c:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    else:\n      \
    \  return round( ((a + b + c) / 2) ** (1/2), 2)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\n\
    Write a function that takes in a string and returns the number of words in that\
    \ string.\n\nExample:\n>>> count_words(\"How many words are there in this string?\"\
    )\n5\n>>> count_words(\"How many words are there in this string? How many words\
    \ are there in this string?\")\n3\n>>> count_words(\"How many words are there\
    \ in this string? How many words are there in this string? How many words are\
    \ there in this string?\")\n4\n>>> count_words(\"How many words are there in this\
    \ string? How many words are there in this string? How many words are there in\
    \ this string? How many words are there in this string?\")\n0\n>>> count_words(\"\
    How many words are there in this string? How many words are there in this string?\
    \ How many words are there in this string? How many words are there in this string?\
    \ How many words are there in this string? How many words are there in this string?\"\
    )\n0\n>>> count_words(\"How many words are there in this string? How many words\
    \ are there in this string? How many words are there in this string? How many\
    \ words are there in this string? How many words are there in this string? How\
    \ many words are there in this string? How many words are there in this string?\"\
    )\n0\n>>> count_words(\"How many words are there in this string? How many words\
    \ are there in this string? How many words are there in this string? How many\
    \ words are there in this string? How many words are there in this string? How\
    \ many words are there in this string? How many words are there in this string?\
    \ How many words are there in this string?\")\n0\n>>> count_words(\"How many words\
    \ are there in this string? How many words are there in this string? How many\
    \ words are there in this string? How many words are there in this string? How\
    \ many words are there in this string? How many words are there in this string?\
    \ How many words are there in this string? How many words are there in this string?\
    \ How many words are there in this string?\")\n0\n>>> count_words(\"How many words\
    \ are there in this string? How many words are there in this string? How many\
    \ words are there in this string? How many words are there in this string? ",
  "    if a + b > c:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    elif c + a > b:\n        return -1\n    else:\n        return round((a *\
    \ b * c) / 2, 2)\n\n", "    if a + b > c:\n        return -1\n    elif a + c >\
    \ b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n \
    \       return round(0.5 * (a + b + c), 2)\n\n", "    \n    if a + b > c and b\
    \ + c > a and c + a > b:\n        return round( ( (a + b + c) / 2) ** (1/2) ,\
    \ 2)\n    else:\n        return -1\n</cell>\n<cell>", "    sides = [a, b, c]\n\
    \    sum_of_sides = sum(sides)\n    if sum_of_sides < 0:\n        return -1\n\
    \    elif sum_of_sides == 0:\n        return 0\n    elif sum_of_sides == 1:\n\
    \        return sides[0]\n    else:\n        return round(sum_of_sides / (math.sqrt(3)\
    \ * sides[0]), 2)\n\n", "    \n    area_sum = a + b + c\n    if area_sum > c:\n\
    \        return -1\n    elif area_sum == c:\n        return round(area_sum / 2)\n\
    \    elif area_sum > b:\n        return -1\n    elif area_sum == b:\n        return\
    \ round(area_sum / 2)\n    elif area_sum > a:\n        return -1\n    else:\n\
    \        return round(area_sum / 2)\n\n", "    sides = [a, b, c]\n    sum_of_sides\
    \ = sum(sides)\n    if sum_of_sides < 0:\n        return -1\n    elif sum_of_sides\
    \ == 0:\n        return 0\n    elif sum_of_sides == 1:\n        return sides[0]\n\
    \    elif sum_of_sides == 2:\n        return sides[0] * sides[1]\n    else:\n\
    \        side_lengths = [sides[i] - sides[i - 1] for i in range(1, len(sides))]\n\
    \        side_lengths.insert(0, 0)\n        side_lengths.append(0)\n        area\
    \ = sum(side_lengths) * 0.5\n        return round(area, 2)\n\n", "    \n    sides\
    \ = [a, b, c]\n    \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides\
    \ <= sides[2]:\n        return round(sum_of_sides, 2)\n    else:\n        return\
    \ -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 5\nWrite a function that returns the area of\
    \ a triangle given three sides. \nThe formula for the area of a triangle is: $A=\\\
    sqrt{s^2 + t^2}$, where $s$ and $t$ are the lengths of the sides. \nIf the sides\
    \ are equal, then the area is $0$. \nIf the sides are opposite, then the area\
    \ is $\\pi$. \nIf the sides are parallel, then the area is $\\pi/2$.\n\nThe formula\
    \ for the area of a triangle is given by:\n\n$A=\\sqrt{s^2 + t^2}$\n\nwhere $s$\
    \ and $t$ are the lengths of the sides.\n\nIf the sides are equal, then the area\
    \ is $0$.\n\nIf the sides are opposite, then the area is $\\pi$. \n\nIf the sides\
    \ are parallel, then the area is $\\pi/2$.\n\n\n</text>\n<cell>", "    \n    if\
    \ a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    else:\n        return round( ( (a + b + c)\
    \ / 2 ), 2 )\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function that takes in a list of\
    \ integers and returns the sum of the integers in the list. \nIf the list is empty\
    \ return 0.\nIf the list has one element return that element.\nIf the list has\
    \ more than one element return the first element in the list.\nIf there are two\
    \ or more elements return the first two elements in the list.\nIf there are three\
    \ or more elements return the first three elements in the list.\nIf there are\
    \ four or more elements return the first four elements in the list.\nIf there\
    \ are five or more elements return the first five elements in the list.\nIf there\
    \ are six or more elements return the first six elements in the list.\nIf there\
    \ are seven or more elements return the first seven elements in the list.\nIf\
    \ there are eight or more elements return the first eight elements in the list.\n\
    If there are nine or more elements return the first nine elements in the list.\n\
    If there are ten or more elements return the first ten elements in the list.\n\
    If there are more than ten elements return the first elements in the list.\n\n\
    \n</text>\n<cell>", "    \n    sides = [a, b, c]\n    \n    sum_of_sides = sum(sides)\n\
    \    \n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n\
    \    else:\n        return -1\n    \n</cell>\n<cell>", "    if a + b > c:\n  \
    \      return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n\
    \        return -1\n    else:\n        return round(abs((a * b) - (c * a))) /\
    \ 2\n\n", "    \n    if a + b > c:\n        return -1\n    elif a + c > b:\n \
    \       return -1\n    elif b + c > a:\n        return -1\n    else:\n       \
    \ return round( ( (a + b + c) / 2) ** 0.5, 2)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes in a list of numbers and returns the sum of the numbers\
    \ in the list. \nIf the list is empty return 0.\nIf the list has one number in\
    \ it return that number.\nIf the list has two or more numbers in it return that\
    \ number multiplied by the sum of the numbers in the list.\nExample\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1,\
    \ 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1,\
    \ 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1,\
    \ 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1,\
    \ 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1,\
    \ 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1,\
    \ 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1,\
    \ 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1,\
    \ 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1,\
    \ 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1,\
    \ 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1,\
    \ 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1,\
    \ 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1,\
    \ 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1,\
    \ 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1,\
    \ 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n", "    \n    if a + b > c and a + c >\
    \ b and b + c > a:\n        return round( ((a * b) + (a * c) + (b * c)) / (2 *\
    \ a), 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n\
    </cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<cell>\ntriangle_area(100,\
    \ 100, 100)\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number\
    \ of prime factors of a given integer. \nThe prime factors of 13195 are 5, 7,\
    \ 13 and 29.\nWhat is the largest prime factor of the number 600851475143 ?\n\n\
    \n</text>\n<cell>", "    a, b, c = sorted([a, b, c])\n    if a + b > c:\n    \
    \    return -1\n    if a + c > b:\n        return -1\n    if b + c > a:\n    \
    \    return -1\n    return round(a * b * c / (a + b + c), 2)\n\n", "    if a +\
    \ b > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    else:\n        return round(abs(a * b * c)\
    \ / 2, 2)\n\n", "    \n    if a + b > c:\n        return -1\n    elif a + c >\
    \ b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n \
    \       return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2 )\n</cell>\n\
    <cell>", "    \n    # Your code here\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n\
    \        return round(sum_of_sides, 2)\n    else:\n        return -1\n\n", " \
    \   if a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    else:\n        return round(abs((a\
    \ * b) - (c * c)), 2)\n\n", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n\
    \    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n   \
    \ else:\n        return -1\n\n", "    \n    if a + b > c:\n        return -1\n\
    \    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        return round( ( (a + b + c) / 2) ** (1/2) , 2)\n", "    if\
    \ a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    else:\n        return round((a * b * c) /\
    \ 2, 2)\n\n", "    \n    a, b, c = sorted([a, b, c])\n    if a + b > c:\n    \
    \    return -1\n    else:\n        return (a * b * c) / math.sqrt(a * a + b *\
    \ b + c * c)\n\n", "    if a + b > c:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    else:\n      \
    \  return round(0.5 * (a + b + c), 2)\n\n", "    sides = [a, b, c]\n    sum_of_sides\
    \ = sum(sides)\n    if sum_of_sides < 0:\n        return -1\n    elif sum_of_sides\
    \ == 0:\n        return 0\n    elif sum_of_sides == 1:\n        return sides[0]\n\
    \    else:\n        area_of_triangle = abs((sides[0] + sides[1] + sides[2]) /\
    \ 2)\n        return round(area_of_triangle, 2)\n\n", "    \n    if a + b > c:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round((a * b * c) / 2, 2)\n\n",
  "    \n    sides = [a, b, c]\n    \n    if sides[0] > sides[1] and sides[1] > sides[2]:\n\
    \        return round(sides[0] * sides[1] * sides[2], 2)\n    else:\n        return\
    \ -1\n\n", "    \n    if a + b > c and a + c > b and b + c > a:\n        return\
    \ round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return\
    \ -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 7\nWrite a function that takes in a list of\
    \ numbers and returns the number of positive integers that are less than or equal\
    \ to each of the numbers in the list.\n\n\n</text>\n<cell>", "    if a + b > c:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n\
    \        return -1\n    else:\n        return round(math.sqrt(a * b * c), 2)\n\
    \n", "    \n    if a + b > c and a + c > b and b + c > a:\n        return round(\
    \ ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n\
    </cell>\n<cell>", "    if a + b > c:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    else:\n      \
    \  return round(math.sqrt(a * b * c), 2)\n\n", "    \n    sides = [a, b, c]\n\
    \    \n    # Check if all sides are positive\n    if sum(sides) < 0: \n      \
    \  return -1\n    \n    # Check if all sides are equal\n    if sum(sides) == 0:\
    \ \n        return 0\n    \n    # Check if all sides are equal\n    if sum(sides)\
    \ == 1: \n        return sides[0]\n    \n    # Check if all sides are equal\n\
    \    if sum(sides) == 2: \n        return sides[0] + sides[1]\n    \n    # Check\
    \ if all sides are equal\n    if sum(sides) == 3: \n        return sides[0] +\
    \ sides[1] + sides[2]\n    \n    # Check if all sides are equal\n    if sum(sides)\
    \ == 4: \n        return sides[0] + sides[1] + sides[2] + sides[3]\n    \n   \
    \ # Check if all sides are equal\n    if sum(sides) == 5: \n        return sides[0]\
    \ + sides[1] + sides[2] + sides[3] + sides[4]\n    \n    # Check if all sides\
    \ are equal\n    if sum(sides) == 6: \n        return sides[0] + sides[1] + sides[2]\
    \ + sides[3] + sides[4] + sides[5]\n    \n    # Check if all sides are equal\n\
    \    if sum(sides) == 7: \n        return sides[0] + sides[1] + sides[2] + sides[3]\
    \ + sides[4] + sides[5] + sides[6]\n    \n    # Check if all sides are equal\n\
    \    if sum(sides) == 8: \n        return sides[0] + sides[1] + sides[2] + sides[3]\
    \ + sides[4] + sides[5] + sides[6] + sides[7]\n    \n    # Check if all sides\
    \ are equal\n    if sum(sides) == 9: \n        return sides[0] + sides[1] + sides[2]\
    \ + sides[3] + sides[4] + sides[5] + sides[6] + sides[7] + sides[8]\n    \n  \
    \  # Check if all sides are equal\n    if sum(sides) == 10: \n        return sides[0]\
    \ + sides[1] + sides[2] + sides[3] + sides[4] + sides[5] + sides[6] + sides[7]\
    \ + sides[8] + sides[9]\n    \n    # Check if all sides are equal\n    if sum(sides)\
    \ == 11: \n        return sides[0] + sides[1] + sides[2] + sides[3] + sides[4]\
    \ + sides[5] + sides[6] + sides[7] + sides[8] + sides[9] + sides[10]\n    \n \
    \   # Check if all sides are equal\n    if sum(sides) == 12: \n        return\
    \ sides[0] + sides[1] + sides[2] + sides[3] + sides[4] + sides[5] + sides[6] +\
    \ sides[7] + sides[8] + sides[9] + sides[10] + sides[11", "    \n    if a + b\
    \ > c:\n        return -1\n    elif b + c > a:\n        return -1\n    elif c\
    \ + a > b:\n        return -1\n    else:\n        return round( ( (a + b + c)\
    \ / 2 ), 2 )\n</cell>\n<cell>", "    \n    sides = [a, b, c]\n    \n    sum_of_sides\
    \ = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n\
    </cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7: Write a\
    \ function that takes in a list of integers and returns the sum of the squares\
    \ of the integers in the list. \nExample: \n>>> square_sum([1, 2, 3, 4])\n25\n\
    >>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n\
    25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n\
    25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n\
    25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n\
    25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n\
    25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n\
    25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n\
    25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n",
  "    \n    if a + b > c and a + c > b and b + c > a:\n        return round( ((a\
    \ * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes in a list with any number of integers\
    \ and returns a list with the squares of the integers. \nThe function should work\
    \ for any number of integers in the list.\nExamples:\n>>> square_of_list(1)\n\
    [1]\n>>> square_of_list(2)\n[1, 4]\n>>> square_of_list(3)\n[1, 4, 9]\n>>> square_of_list(4)\n\
    [1, 4, 9, 16]\n>>> square_of_list(5)\n[1, 4, 9, 16, 25]\n>>> square_of_list(6)\n\
    [1, 4, 9, 16, 25, 36]\n>>> square_of_list(7)\n[1, 4, 9, 16, 25, 36, 49]\n>>> square_of_list(8)\n\
    [1, 4, 9, 16, 25, 36, 49, 64]\n>>> square_of_list(9)\n[1, 4, 9, 16, 25, 36, 49,\
    \ 64, 81]\n>>> square_of_list(10)\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n>>>\
    \ square_of_list(11)\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121]\n>>> square_of_list(12)\n\
    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144]\n>>> square_of_list(13)\n[1,\
    \ 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169]\n>>> square_of_list(14)\n\
    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196]\n>>> square_of_list(15)\n\
    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225]\n>>> square_of_list(16)\n\
    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256]\n>>> square_of_list(17)\n\
    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289]\n>>>\
    \ square_of_list(18)\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196,\
    \ 225, 256, 289, 324]\n>>> square_of_list(19)\n[1, 4, 9, 16, 25, 36, 49, 64, 81,\
    \ 100, 121, 144, 169, 196, 225, 256, 289, 324, 36", "    \n    if a + b > c:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round( ( (a + b + c) / 2) ** 0.5,\
    \ 2 )\n</cell>\n<cell>", "    \n    area_of_triangle = abs(a * b * c) / 2\n  \
    \  \n    if area_of_triangle > 0 and a + b > c and b + c > a and a + c > b:\n\
    \        return round(area_of_triangle, 2)\n    else:\n        return -1\n</cell>\n\
    <cell>", "    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n\n", "    \n    if a + b > c:\n        return -1\n    elif a +\
    \ c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n</cell>\n\
    <cell>", "    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(0.5\
    \ * (a + b + c), 2)\n\n", "    a, b, c = sorted([a, b, c])\n    if a + b > c:\n\
    \        return -1\n    if a + c > b:\n        return -1\n    if b + c > a:\n\
    \        return -1\n    return round(0.5 * (a + b + c), 2)\n\n", "    \n    if\
    \ a + b > c and b + c > a and c + a > b:\n        return round( ((a * b) + (b\
    \ * c) + (c * a)) / ((a * b) + (b * c) + (c * a)), 2 )\n    else:\n        return\
    \ -1\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    else:\n        return round(abs((a * b) -\
    \ (c * c)), 2)\n\n", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n \
    \   if sum_of_sides < 0:\n        return -1\n    elif sum_of_sides == 0:\n   \
    \     return 0\n    elif sum_of_sides == 1:\n        return sides[0]\n    elif\
    \ sum_of_sides == 2:\n        return sides[0] * sides[1]\n    else:\n        return\
    \ sides[0] * sides[1] * sides[2]\n\n", "    a, b, c = sorted([a, b, c])\n    if\
    \ a + b > c:\n        return -1\n    return round((a * b * c) / math.sqrt(a **\
    \ 2 + b ** 2), 2)\n\n", "    \n    if a + b > c:\n        return -1\n    elif\
    \ a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        s = (a + b + c) / 2\n        return round(s * (s - a) * (s - b) * (s\
    \ - c), 2)\n\n", "    \n    if a + b > c and a + c > b and b + c > a:\n      \
    \  return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n    \
    \    return -1\n</cell>\n<cell>", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n\
    \    if sum_of_sides > sides[2]:\n        return -1\n    else:\n        return\
    \ round(sum_of_sides / sides[2], 2)\n\n", "    a, b, c = sorted([a, b, c])\n \
    \   if a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    else:\n        return round(0.5 *\
    \ (a + b + c), 2)\n\n", "    \n    if a + b > c:\n        return -1\n    elif\
    \ a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round( ((a * b) + (b * c) + (c * a)) / (2.0 * c), 2)\n", "   \
    \ if a + b > c:\n        return -1\n    elif b + c > a:\n        return -1\n \
    \   elif c + a > b:\n        return -1\n    else:\n        return round( ( (a\
    \ + b + c) / 2 ), 2 )\n\n", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n\
    \    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n   \
    \ else:\n        return -1\n\n", "    \n    if a + b > c:\n        return -1\n\
    \    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        area_of_triangle = abs(a * b * c - a * c * b - a * b * c)\n\
    \        return round(area_of_triangle, 2)\n\n", "    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        return round(abs((a * b) - (c * c)), 2)\n\n", "    if\
    \ a + b > c:\n        return -1\n    elif b + c > a:\n        return -1\n    elif\
    \ c + a > b:\n        return -1\n    else:\n        return round(math.sqrt(a *\
    \ b * c), 2)\n\n", "    \n    if a + b > c and a + c > b and b + c > a:\n    \
    \    return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n  \
    \      return -1\n", "    \n    if a + b > c:\n        return -1\n    elif b +\
    \ c > a:\n        return -1\n    elif c + a > b:\n        return -1\n    else:\n\
    \        return round( ((a * b) + (b * c) + (c * a)) / (2.0), 2)\n\n", "    \n\
    \    if a + b > c:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    elif c + a > b:\n        return -1\n    else:\n        return round( ( (a\
    \ + b + c) / 2 ), 2 )\n\n", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n\
    \    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n   \
    \ else:\n        return -1\n\n", "    if a + b > c and a + c > b and b + c > a:\n\
    \        return round(math.sqrt(a * b * c), 2)\n    else:\n        return -1\n\
    \n", "    if a + b > c and b + c > a and c + a > b:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n\n", "    sides = [a, b, c]\n  \
    \  sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n        return\
    \ round(sum_of_sides, 2)\n    else:\n        return -1\n\n", "    if a + b > c\
    \ and a + c > b and b + c > a:\n        return round(math.sqrt(a * b * c), 2)\n\
    \    else:\n        return -1\n\n", "    \n    if a + b > c:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    elif c + a > b:\n        return -1\n\
    \    else:\n        return round( ( (a + b + c) / 2) ** (1/2), 2)\n\n", "    \n\
    \    \n    if a + b > c and a + c > b and b + c > a:\n        \n        area_tri\
    \ = abs((a+b+c)/2)\n        \n        if area_tri == float(a+b+c)/2:\n       \
    \     \n            return round(area_tri, 2)\n        \n        else:\n     \
    \       \n            return -1\n    \n    else:\n        \n        return -1\n\
    \    \n    ", "    if a + b > c:\n        return -1\n    elif a + c > b:\n   \
    \     return -1\n    elif b + c > a:\n        return -1\n    else:\n        return\
    \ round(math.sqrt(a * a + b * b + c * c), 2)\n\n", "    \n    area_of_triangle\
    \ = abs(a * b * c) \n    if area_of_triangle > abs(a + b + c):\n        return\
    \ round(area_of_triangle, 2)\n    else:\n        return -1\n</cell>\n<cell>\n\
    triangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<cell>\n\
    triangle_area(6, 3, 2)\n</cell>\n<cell>\ntriangle_area(6, 3, 3)\n</cell>\n<cell>\n\
    triangle_area(6, 3, 4)\n</cell>\n<cell>\ntriangle_area(6, 3, 5)\n</cell>\n<cell>\n\
    triangle_area(6, 3, 6)\n</cell>\n<cell>\ntriangle_area(6, 3, 7)\n</cell>\n<cell>\n\
    triangle_area(6, 3, 8)\n</cell>\n<cell>\ntriangle_area(6, 3, 9)\n</cell>\n<cell>\n\
    triangle_area(6, 3, 10)\n</cell>\n<cell>\ntriangle_area(6, 3, 11)\n</cell>\n<cell>\n\
    triangle_area(6, 3, 12)\n</cell>\n<cell>\ntriangle_area(6, 3, 13)\n</cell>\n<cell>\n\
    triangle_area(6, 3, 14)\n</cell>\n<cell>\ntriangle_area(6, 3, 15)\n</cell>\n<cell>\n\
    triangle_area(6, 3, 16)\n</cell>\n<cell>\ntriangle_area(6, 3, 17)\n</cell>\n<cell>\n\
    triangle_area(6, 3, 18)\n</cell>\n<cell>\ntriangle_area(6, 3, 19)\n</cell>\n<cell>\n\
    triangle_area(6, 3, 20)\n</cell>\n<cell>\ntriangle_area(6, 3, 21)\n</cell>\n<cell>\n\
    triangle_area(6, 3, 22)\n</cell>\n<cell>\ntriangle_area(6, 3, 23)\n</cell>\n<cell>\n\
    triangle_area(6, 3, 24)\n</cell>\n<cell>\ntriangle_area(6, 3, 25)\n</cell>\n<cell>\n\
    triangle_area(6, 3, 26)\n</cell>\n<cell>\ntriangle_area(6, 3, 27)\n</cell>\n<cell>\n\
    triangle_area(6, 3, 28)\n</cell>\n<", "    \n    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        return round( ( (a + b + c) / 2) ** 0.5, 2)\n\n", " \
    \   \n    sides = [a, b, c]\n    \n    sum_of_sides = sum(sides)\n    \n    if\
    \ sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n    else:\n\
    \        return -1\n</cell>\n<cell>", "    \n    \n    if a + b > c:\n       \
    \ return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n   \
    \     return -1\n    else:\n        return round( ((a * b) + (b * c) + (c * a))\
    \ / (2 * a * b), 2)\n    \n    ", "    \n    if a + b > c:\n        return -1\n\
    \    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n\
    </cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area", "    \n    if a + b > c and a + c >\
    \ b and b + c > a:\n        return round( ((a * b) + (a * c) + (b * c)) / (2 *\
    \ a), 2)\n    else:\n        return -1\n</cell>\n<cell>", "    if a + b > c:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    else:\n        return round(0.5 * (a + b + c), 2)\n\n",
  "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides > sides[2]:\n\
    \        return -1\n    return round(sum_of_sides / 2, 2)\n\n", "    \n    area_of_triangle\
    \ = abs(a * b * c) / 2\n    \n    if area_of_triangle >= (a + b + c):\n      \
    \  return area_of_triangle\n    else:\n        return -1\n</cell>\n<cell>", " \
    \   \n    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(\
    \ ( (a + b + c) / 2 ), 2 )\n\n", "    \n    # Write your code here\n    \n   \
    \ if a + b > c:\n        area = (a * b) / c\n        return round(area, 2)\n \
    \   else:\n        return -1\n</cell>\n<cell>", "    a, b, c = sorted([a, b, c])\n\
    \    if a + b > c:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    elif c + a > b:\n        return -1\n    else:\n        return round(abs(a\
    \ * b * c) / 2, 2)\n\n", "    if a + b > c and b + c > a and c + a > b:\n    \
    \    return round(math.sqrt(a * b * c), 2)\n    else:\n        return -1\n\n",
  "    \n    area_of_triangle = abs(a * b * c) / 3\n    if area_of_triangle > 0 and\
    \ area_of_triangle < 1:\n        return round(area_of_triangle, 2)\n    else:\n\
    \        return -1\n    ", "    sides = [a, b, c]\n    sum_sides = sum(sides)\n\
    \    if sum_sides <= sides[2]:\n        return round(sum_sides, 2)\n    else:\n\
    \        return -1\n\n", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n\
    \    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n   \
    \ else:\n        return -1\n\n", "    \n    if a + b > c and b + c > a and c +\
    \ a > b:\n        area = (a * b + b * c + c * a) / 2.0\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n", "    if a + b > c:\n        return -1\n\
    \    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        return round(abs((a * b) - (c * c)), 2)\n\n", "    if a +\
    \ b > c and b + c > a and c + a > b:\n        return round(math.sqrt(a * b * c),\
    \ 2)\n    else:\n        return -1\n\n", "    \n    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        return round( ((a * b) + (a * c) + (b * c)) / (2 * a),\
    \ 2)\n", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides\
    \ <= sides[2]:\n        return round(sum_of_sides, 2)\n    else:\n        return\
    \ -1\n\n", "    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n\n", "    \n    # Write your code\
    \ here\n    \n    if a + b > c:\n        return -1\n    elif a + c > b:\n    \
    \    return -1\n    elif b + c > a:\n        return -1\n    else:\n        return\
    \ round((a * b * c) / 2, 2)\n</cell>\n<cell>", "    a, b, c = sorted([a, b, c])\n\
    \    if a + b > c:\n        return -1\n    if a + c > b:\n        return -1\n\
    \    if b + c > a:\n        return -1\n    return round(abs((a * b * c) / 2),\
    \ 2)\n\n", "    if a + b > c:\n        return -1\n    elif a + c > b:\n      \
    \  return -1\n    elif b + c > a:\n        return -1\n    else:\n        return\
    \ round(float(a + b + c) / 2, 2)\n\n", "    \n    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        return round((a * b * c) / 2, 2)\n</cell>\n<cell>", " \
    \   if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n\n", "    \n    sides = [a, b, c]\n\
    \    \n    if a + b > c and a + c > b and b + c > a:\n        \n        area_of_triangle\
    \ = a + b + c\n        \n        if area_of_triangle % 2 == 0:\n            area_of_triangle\
    \ = area_of_triangle // 2\n            \n        return round(area_of_triangle,\
    \ 2)\n    else:\n        return -1\n    \n    ", "    if a + b > c and a + c >\
    \ b and b + c > a:\n        return round(math.sqrt(a * b * c), 2)\n    else:\n\
    \        return -1\n\n", "    \n    sides = [a, b, c]\n    \n    sum_of_sides\
    \ = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n\n", "    \n    \n    if a + b > c:\n    \
    \    return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n\
    \        return -1\n    else:\n        return round( ((a + b + c) / 2) ** 0.5,\
    \ 2)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n", "    if a + b > c:\n    \
    \    return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round(0.5 * (a + b + c), 2)\n\n",
  "    if a + b > c and b + c > a and c + a > b:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n\n", "    if a + b > c:\n      \
    \  return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n  \
    \      return -1\n    else:\n        return round(0.5 * (a + b + c), 2)\n\n",
  "    if a + b > c and a + c > b and b + c > a:\n        area = (a + b + c) / 2\n\
    \        if area >= (a + b + c):\n            return round(area, 2)\n        else:\n\
    \            return -1\n    else:\n        return -1\n\n", "    \n    if a + b\
    \ > c:\n        return -1\n    elif b + c > a:\n        return -1\n    elif c\
    \ + a > b:\n        return -1\n    else:\n        return round( ( (a + b + c)\
    \ / 2) ** 0.5, 2 )\n", "    sides = [a, b, c]\n    sum_sides = sum(sides)\n  \
    \  if sum_sides > sides[2]:\n        return -1\n    else:\n        return round(sum_sides\
    \ / 2, 2)\n\n", "    a, b, c = sorted([a, b, c])\n    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        return round(abs((a * b * c) / 2), 2)\n\n", "    \n \
    \   if a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    else:\n        return round( ((a\
    \ * b) + (a * c) + (b * c)) / (2 * a), 2)\n", "    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        return round(0.5 * (a + b + c), 2)\n\n", "    if a +\
    \ b > c:\n        return -1\n    elif b + c > a:\n        return -1\n    elif\
    \ c + a > b:\n        return -1\n    else:\n        return round(0.5 * (a + b\
    \ + c), 2)\n\n", "    if a + b > c:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    elif c + a > b:\n        return -1\n    else:\n      \
    \  return round(0.5 * (a + b + c), 2)\n\n", "    \n    if a + b > c and a + c\
    \ > b and b + c > a:\n        return round( ((a * b) + (a * c) + (b * c)) / (2\
    \ * a), 2)\n    else:\n        return -1\n</cell>\n<cell>", "    if a + b > c:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round((a * b * c) / 2, 2)\n\n",
  "    \n    if a + b > c and a + c > b and b + c > a:\n        return round( ( (a\
    \ + b + c) / 2) ** (1/2) , 2)\n    else:\n        return -1\n</cell>\n<cell>",
  "    a, b, c = sorted([a, b, c])\n    if a + b > c:\n        return -1\n    elif\
    \ a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round(abs(a * b * c) / 2, 2)\n\n", "    \n    if a + b > c:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n\
    \        return -1\n    else:\n        return round( ( (a + b + c) / 2 ), 2 )\n",
  "    if a + b > c:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    elif c + a > b:\n        return -1\n    else:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n\n", "    if a + b > c:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    else:\n      \
    \  return round(abs((a * b) + (b * c) + (c * a)), 2)\n\n", "    \n    sides =\
    \ [a, b, c]\n    \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides >\
    \ c:\n        return -1\n    \n    area = sum_of_sides * (a + b + c) / 2\n   \
    \ \n    return round(area, 2)\n\n", "    \n    if a + b > c:\n        return -1\n\
    \    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        return round((a * b * c) / 2, 2)\n\n", "    \n    sides =\
    \ [a, b, c]\n    \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides >\
    \ sides[2]:\n        return -1\n    else:\n        return round(sum_of_sides /\
    \ sides[2], 2)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function that returns the area of\
    \ a triangle given three sides. \nThe formula for the area of a triangle is: $\
    \ A = \\sqrt{s (s - a) (s - b) (s - c)} $\nwhere $s = a + b + c$\n\nIf the sides\
    \ are equal, return 0\nIf the area is 0, return 0\nIf the area is negative, return\
    \ -1\n\nExample\n>>> triangle_area(3, 4, 5)\n6.0\n>>> triangle_area(1, 2, 10)\n\
    -1\n>>> triangle_area(3, 4, 0)\n0\n>>> triangle_area(3, 4, -5)\n-1\n>>> triangle_area(3,\
    \ 4, -10)\n-1\n>>> triangle_area(3, 4, -100)\n-1\n>>> triangle_area(3, 4, -1000)\n\
    -1\n>>> triangle_area(3, 4, -10000)\n-1\n>>> triangle_area(3, 4, -100000)\n-1\n\
    >>> triangle_area(3, 4, -1000000)\n-1\n>>> triangle_area(3, 4, -10000000)\n-1\n\
    >>> triangle_area(3, 4, -100000000)\n-1\n>>> triangle_area(3, 4, -1000000000)\n\
    -1\n>>> triangle_area(3, 4, -10000000000)\n-1\n>>> triangle_area(3, 4, -100000000000)\n\
    -1\n>>> triangle_area(3, 4, -1000000000000)\n-1\n>>> triangle_area(3, 4, -1000000000001)\n\
    -1\n>>> triangle_area(3, 4, -1000000000002)\n-1\n>>> triangle_area(3, 4, -1000000000003)\n\
    -1\n>>> triangle_area(3, 4, -1000000000004)\n-1\n>>> triangle_area(3, 4, -1000000000005)\n\
    -1\n>>> triangle_area(3, 4, -1000000000006)\n-1\n>>> triangle_area(3, 4, -1000000000007)\n\
    -1\n>>> triangle_area(3, 4, -1000000000008)\n-1\n>>> triangle_area(3, 4, -1000000000009)\n\
    -1\n>>> triangle_area(3, 4, -1000000000010)\n-1\n>>> triangle_area(3, 4, -1000000000011)\n\
    -1\n>>> triangle_area(3, 4, -1000000000012)\n-1\n>>> triangle_area(3, 4, -1000000000013)\n\
    -1\n>>> triangle_area(3, 4, -1000000000014)\n", "    \n    if a + b > c and b\
    \ + c > a and c + a > b:\n        return round( ((a * b) + (b * c) + (c * a))\
    \ / (2.0 * c), 2)\n    else:\n        return -1\n\n", "    if a + b > c:\n   \
    \     return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round((a * b * c) / 2, 2)\n\n",
  "    if a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    else:\n        return round((a *\
    \ b * c) / 2, 2)\n\n", "    \n    sides = [a, b, c]\n    \n    sum_of_sides =\
    \ sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n</cell>\n<cell>", "    if a + b > c:\n   \
    \     return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n\
    \        return -1\n    else:\n        return round(math.sqrt(a * b * c), 2)\n\
    \n", "    \n    # Your code here\n    \n    if a + b > c:\n        return -1\n\
    \    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        return round( ((a + b + c) / 2), 2)\n", "    \n    if a +\
    \ b > c and a + c > b and b + c > a:\n        area = 0.5 * (a + b + c)\n     \
    \   return round(area, 2)\n    else:\n        return -1\n</cell>\n<cell>", " \
    \   \n    if a + b > c and a + c > b and b + c > a:\n        return round( ((a\
    \ * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n</cell>\n\
    <cell>", "    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n\n", "    if a + b > c and a + c\
    \ > b and b + c > a:\n        return round(math.sqrt(a * b * c), 2)\n    else:\n\
    \        return -1\n\n", "    \n    if a + b > c and a + c > b and b + c > a:\n\
    \        return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n\
    \        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ in a list of numbers and returns the sum of the numbers in the list. \nIf the\
    \ list is empty return 0\nIf the list has one number in it return that number\n\
    If the list has two numbers in it return the first number plus the second number\n\
    If the list has three numbers in it return the first number plus the second number\
    \ plus the third number\nIf the list has more than three numbers in it return\
    \ the first number plus the second number plus the third number plus the sum of\
    \ the rest of the numbers\nExamples:\n>>> sum_of_numbers([1, 2, 3])\n6\n>>> sum_of_numbers([1,\
    \ 2, 3, 5])\n8\n>>> sum_of_numbers([1, 2, 3, 6, 7])\n14\n>>> sum_of_numbers([])\n\
    0\n>>> sum_of_numbers([1])\n1\n>>> sum_of_numbers([1, 2, 3])\n6\n>>> sum_of_numbers([1,\
    \ 2, 3, 5])\n8\n>>> sum_of_numbers([1, 2, 3, 6, 7])\n14\n>>> sum_of_numbers([])\n\
    0\n>>> sum_of_numbers([1])\n1\n>>> sum_of_numbers([1, 2, 3])\n6\n>>> sum_of_numbers([1,\
    \ 2, 3, 5])\n8\n>>> sum_of_numbers([1, 2, 3, 6, 7])\n14\n>>> sum_of_numbers([0,\
    \ 0])\n0\n>>> sum_of_numbers([1, 2, 3, 5])\n8\n>>> sum_of_numbers([1, 2, 3, 6,\
    \ 7])\n14\n>>> sum_of_numbers([1, 2, 3, 6, 7])\n14\n>>> sum_of_numbers([1, 2,\
    \ 3, 6, 7])\n14\n>>> sum_of_numbers([1, 2, 3, 6, 7])\n14\n>>> sum_of_numbers([1,\
    \ 2, 3, 6, 7])\n14\n>>> sum_of_numbers([1, 2, 3, 6, 7])\n14\n>>> sum_of_numbers([1,\
    \ 2, 3, 6, 7])\n14\n>>> sum_of_numbers([1, 2, 3, 6, 7])\n14\n>>> sum_of_numbers([1,\
    \ 2, 3, 6, 7])\n14\n>>> sum_of_numbers([1, 2, 3, 6, 7])\n14\n>>> sum_of_numbers([1,\
    \ 2, 3, 6, 7])\n14\n>>> sum_of_numbers([1, 2, 3, 6, 7])\n14\n>>> sum_of_numbers([1,\
    \ 2, 3, 6, 7])\n14\n>>> sum_of_numbers([1, 2, 3, 6, 7])\n14\n>>> sum_of_numbers([1,\
    \ 2, 3, 6, 7])\n14\n", "    \n    # Write your code here\n    \n    if a + b >\
    \ c:\n        return -1\n    elif b + c > a:\n        return -1\n    elif c +\
    \ a > b:\n        return -1\n    else:\n        return round((a * b * c)/2, 2)\n\
    </cell>\n<cell>", "    \n    if a + b > c and a + c > b and b + c > a:\n     \
    \   return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n   \
    \     return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 5\nWrite a function that takes in a list of\
    \ numbers and returns the sum of the numbers in the list. \nIf the list is empty\
    \ return 0\nIf the list has one number in it return that number\nIf the list has\
    \ two numbers in it return the first number plus the second number\nIf the list\
    \ has three numbers in it return the first number plus the second number plus\
    \ the third number\nIf the list has more than three numbers in it return the first\
    \ number plus the second number plus the third number plus the sum of the fourth\
    \ through last numbers\nExample\n>>> sum([1, 2, 3, 4])\n10\n>>> sum([1, 2, 3,\
    \ 4, 5])\n15\n>>> sum([1, 2, 3, 4, 5, 6])\n20\n>>> sum([1, 2, 3, 4, 5, 6, 7])\n\
    25\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n30\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\
    35\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n40\n>>> sum([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11])\n45\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n50\n>>>\
    \ sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n55\n>>> sum([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14])\n60\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15])\n65\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16])\n70\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17])\n75\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18])\n80\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19])\n85\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20])\n90\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21])\n95\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n100\n>>> sum([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n105\n\
    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24])\n110\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, ",
  "    if a + b > c and a + c > b and b + c > a:\n        return round(0.5 * (a +\
    \ b + c), 2)\n    else:\n        return -1\n\n", "    if a + b > c and b + c >\
    \ a and c + a > b:\n        return round( ((a * b) + (b * c) + (c * a)) / (2 *\
    \ a * b), 2)\n    else:\n        return -1\n</cell>\n<cell>", "    \n    sides\
    \ = [a, b, c]\n    \n    # Check if all sides are positive\n    if any(s < 0 for\
    \ s in sides):\n        return -1\n    \n    # Check if all sides are equal\n\
    \    if sum(sides) != a:\n        return -1\n    \n    # Check if all sides are\
    \ equal\n    if sum(sides) != b:\n        return -1\n    \n    # Check if all\
    \ sides are equal\n    if sum(sides) != c:\n        return -1\n    \n    # Check\
    \ if all sides are equal\n    if sum(sides) != a + b + c:\n        return -1\n\
    \    \n    # Check if all sides are equal\n    if sum(sides) != a + b + c + a:\n\
    \        return -1\n    \n    # Check if all sides are equal\n    if sum(sides)\
    \ != a + b + c + a + b:\n        return -1\n    \n    # Check if all sides are\
    \ equal\n    if sum(sides) != a + b + c + a + b + c:\n        return -1\n    \n\
    \    # Check if all sides are equal\n    if sum(sides) != a + b + c + a + b +\
    \ c + a:\n        return -1\n    \n    # Check if all sides are equal\n    if\
    \ sum(sides) != a + b + c + a + b + c + a + b:\n        return -1\n    \n    #\
    \ Check if all sides are equal\n    if sum(sides) != a + b + c + a + b + c + a\
    \ + b + c:\n        return -1\n    \n    # Check if all sides are equal\n    if\
    \ sum(sides) != a + b + c + a + b + c + a + b + c + a:\n        return -1\n  \
    \  \n    # Check if all sides are equal\n    if sum(sides) != a + b + c + a +\
    \ b + c + a + b + c + a + b:\n        return -1\n    \n    # Check if all sides\
    \ are equal\n    if sum(sides) != a + b + c + a + b + c + a + b + c + a + b +\
    \ c:\n        return -1\n    \n    # Check if all sides are equal\n    if sum(sides)\
    \ != a + b + c + a + b + c + a + b + c + a + b + c + a:\n        return -1\n \
    \   \n    # Check if all sides are equal\n    if sum(sides) != a + b + c + a +\
    \ b + c + a + b + c + a + b + c + a + b:\n        return -1\n    \n    # Check\
    \ if all sides are equal\n    if sum(sides) != a + b + c + a + b + c + a + b +\
    \ c + a + b + c + a + b + c:\n        return -1\n    \n    # Check if all sides\
    \ are equal\n    if sum(sides) != a + b + c + a + b + c + a + b + c + a + b +\
    \ c + a + b + c + a:\n        return -1\n    \n    # Check if all sides are equal\n\
    \    if sum(sides) != a + b + c + a + ", "    \n    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        return round( ((a * b) + (a * c) + (b * c)) / (2 * a),\
    \ 2)\n", "    \n    if a + b > c:\n        return -1\n    elif b + c > a:\n  \
    \      return -1\n    elif c + a > b:\n        return -1\n    else:\n        return\
    \ round(0.5 * (a + b + c), 2)\n\n", "    \n    sides = [a, b, c]\n    \n    sum_of_sides\
    \ = sum(sides)\n    \n    if sum_of_sides > sides[2]:\n        return -1\n   \
    \ else:\n        return round(sum_of_sides, 2)\n\n", "    \n    if a + b > c:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round( ((a * b) + (a * c) + (b *\
    \ c)) / (2 * a), 2)\n    ", "    if a + b > c:\n        return -1\n    elif a\
    \ + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round(0.5 * (a + b + c), 2)\n\n", "    \n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return round( ((a * b) + (b * c) + (c * a))\
    \ / (2 * a * b), 2)\n    else:\n        return -1\n</cell>\n<cell>", "    \n \
    \   if a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    else:\n        return round( ( (a\
    \ + b + c) / 2 ), 2 )\n", "    \n    if a + b > c:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    elif c + a > b:\n        return -1\n    else:\n\
    \        return round( ( (a + b + c) / 2 ), 2 )\n</cell>\n<cell>", "    if a +\
    \ b > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    else:\n        return round( (a * b * c)\
    \ / 2, 2)\n\n", "    if a + b > c and b + c > a and c + a > b:\n        return\
    \ round(math.sqrt(a * b * c), 2)\n    else:\n        return -1\n\n", "    if a\
    \ + b > c:\n        return -1\n    elif b + c > a:\n        return -1\n    elif\
    \ c + a > b:\n        return -1\n    else:\n        return round(0.5 * (a + b\
    \ + c), 2)\n\n", "    a, b, c = sorted([a, b, c])\n    if a + b > c:\n       \
    \ return -1\n    if a + c > b:\n        return -1\n    if b + c > a:\n       \
    \ return -1\n    return round(0.5 * (a + b + c), 2)\n\n", "    \n    if a + b\
    \ > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif b\
    \ + c > a:\n        return -1\n    else:\n        return round( ((a * b) + (b\
    \ * c) + (c * a)) / (2 * a * b), 2)\n\n", "    \n    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        return round( ((a * b) + (a * c) + (b * c) ) / 2, 2)\n\
    </cell>\n<cell>", "    \n    area_of_triangle = abs(a * b * c) / 2\n    if area_of_triangle\
    \ > 0 and a + b + c > 0:\n        return round(area_of_triangle, 2)\n    else:\n\
    \        return -1\n\n", "    \n    if a + b > c and b + c > a and c + a > b:\n\
    \        return round( ((a * b) + (b * c) + (c * a)) / (2 * a * b), 2)\n    else:\n\
    \        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ in a list of integers and returns the sum of the squares of the integers in\
    \ the list. \nIf the list is empty return 0\nIf the list has one number in it\
    \ return that number\nIf the list has two numbers in it return that number^2\n\
    If the list has three numbers in it return that number^3\nIf the list has four\
    \ numbers in it return that number^4\nIf the list has five numbers in it return\
    \ that number^5\nIf the list has six numbers in it return that number^6\nIf the\
    \ list has seven numbers in it return that number^7\nIf the list has eight numbers\
    \ in it return that number^8\nIf the list has nine numbers in it return that number^9\n\
    If the list has ten numbers in it return that number^10\nIf the list has eleven\
    \ numbers in it return that number^11\nIf the list has twelve numbers in it return\
    \ that number^12\nIf the list has thirteen numbers in it return that number^13\n\
    If the list has fourteen numbers in it return that number^14\nIf the list has\
    \ fifteen numbers in it return that number^15\nIf the list has sixteen numbers\
    \ in it return that number^16\nIf the list has seventeen numbers in it return\
    \ that number^17\nIf the list has eighteen numbers in it return that number^18\n\
    If the list has nineteen numbers in it return that number^19\nIf the list has\
    \ twenty numbers in it return that number^20\nIf the list has twenty-one numbers\
    \ in it return that number^21\nIf the list has twenty-two numbers in it return\
    \ that number^22\nIf the list has twenty-three numbers in it return that number^23\n\
    If the list has twenty-four numbers in it return that number^24\nIf the list has\
    \ twenty-five numbers in it return that number^25\nIf the list has twenty-six\
    \ numbers in it return that number^26\nIf the list has twenty-seven numbers in\
    \ it return that number^27\nIf the list has twenty-eight ", "    \n    if a +\
    \ b > c and a + c > b and b + c > a:\n        return round( ((a * b) + (a * c)\
    \ + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n</cell>\n<cell>", " \
    \   \n    area_of_triangle = abs((a * b) + (c * c) - (a * b))\n    \n    if area_of_triangle\
    \ > 0:\n        return round(area_of_triangle, 2)\n    else:\n        return -1\n\
    </cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nProblem 4\nWrite a function that takes in a list of integers\
    \ and returns the sum of the integers in the list. \nIf the list is empty return\
    \ 0.\nIf the list has only one element return that element.\nIf the list has two\
    \ or more elements return the first element in the list.\nIf the list has more\
    \ than two elements return the first two elements in the list.\nExamples:\n>>>\
    \ sum_of_elements([1, 2, 3])\n6\n>>> sum_of_elements([])\n0\n>>> sum_of_elements([1,\
    \ 2])\n1\n>>> sum_of_elements([1, 2, 3, 4])\n6\n>>> sum_of_elements([1, 2, 3,\
    \ 4, 5, 6])\n6\n>>> sum_of_elements([1, 2, 3, 4, 5, 6, 7])\n6\n>>> sum_of_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8])\n8\n>>> sum_of_elements([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\
    9\n>>> sum_of_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n10\n>>> sum_of_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n20\n>>>\
    \ sum_of_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\
    \ 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,\
    \ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,\
    \ 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\
    \ 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,\
    \ 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,\
    \ 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,\
    \ 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,\
    \ 15", "    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n\n", "    if a + b > c:\n      \
    \  return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n  \
    \      return -1\n    else:\n        return round(abs((a + b + c) / 2), 2)\n\n",
  "    sides = [a, b, c]\n    sum_sides = sum(sides)\n    if sum_sides > sides[2]:\n\
    \        return -1\n    else:\n        return round(sum_sides / 2, 2)\n\n", " \
    \   \n    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(\
    \ ((a * b) + (b * c) + (c * a)) / (2.0 * c), 2)\n", "    if a + b > c:\n     \
    \   return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n \
    \       return -1\n    else:\n        return round((a * b * c) / 2, 2)\n\n", " \
    \   \n    \n    if a + b > c:\n        return -1\n    elif b + c > a:\n      \
    \  return -1\n    elif c + a > b:\n        return -1\n    else:\n        return\
    \ round((a * b * c)/2, 2)\n    \n    ", "    \n    sides = [a, b, c]\n    \n \
    \   if sum(sides) <= sides[2]:\n        return round(sum(sides) / 2, 2)\n    else:\n\
    \        return -1\n</cell>\n<cell>", "    if a + b > c:\n        return -1\n\
    \    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        return round( ( (a + b + c) / 2) ** 0.5, 2)\n", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    sides = [a, b, c]\n \
    \   sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n        return\
    \ round(sum_of_sides, 2)\n    else:\n        return -1\n\n", "    sides = [a,\
    \ b, c]\n    sum_sides = sum(sides)\n    if sum_sides <= sides[2]:\n        return\
    \ round(sum_sides, 2)\n    else:\n        return -1\n\n", "    \n    area_of_triangle\
    \ = a + b + c\n    \n    if area_of_triangle >= a:\n        if area_of_triangle\
    \ >= b:\n            if area_of_triangle >= c:\n                return round(area_of_triangle,\
    \ 2)\n            else:\n                return -1\n        else:\n          \
    \  return -1\n    else:\n        if area_of_triangle >= b:\n            return\
    \ -1\n        else:\n            return -1\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes in a list of numbers and returns the sum of the numbers\
    \ in the list. \nIf the list is empty return 0.\nIf the list has only one number\
    \ in it return that number.\nIf the list has two numbers in it return that number\
    \ plus whatever the second number is.\nIf the list has three numbers in it return\
    \ that number plus whatever the second number plus whatever the third number is.\n\
    If the list has more than three numbers in it return the first number plus whatever\
    \ the second number plus whatever the third number plus whatever the fourth number\
    \ is.\nExamples:\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1,\
    \ 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1,\
    \ 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1,\
    \ 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1,\
    \ 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1,\
    \ 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1,\
    \ 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1,\
    \ 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1,\
    \ 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1,\
    \ 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1,\
    \ 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1,\
    \ 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n>>> sum([1,\
    \ 2, 3, 5])\n8\n>>> sum([1, 2, 3, 5])\n8\n", "    \n    sides = [a, b, c]\n  \
    \  \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n \
    \       return round(sum_of_sides, 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes in a list of numbers and returns\
    \ the sum of the numbers in the list. \nIf the list is empty return 0.\nIf the\
    \ list has one number in it return that number.\nIf the list has two numbers in\
    \ it return their sum.\nIf the list has three or more numbers in it return their\
    \ sum.\nIf the list has more than three numbers in it return -1.\n\n\n</text>\n\
    <cell>", "    a, b, c = sorted([a, b, c])\n    if a + b > c:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    elif c + a > b:\n        return -1\n\
    \    else:\n        return round(a * b * c / (a + b + c), 2)\n\n", "    if a +\
    \ b > c:\n        return -1\n    elif b + c > a:\n        return -1\n    elif\
    \ c + a > b:\n        return -1\n    else:\n        return round(math.sqrt(a *\
    \ b * c), 2)\n\n", "    \n    \n    if a + b > c and a + c > b and b + c > a:\n\
    \        area = (a * b * c) / 2\n        return round(area, 2)\n    else:\n  \
    \      return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 7\nWrite a function that takes in a list of\
    \ numbers and returns the number of positive and negative numbers in the list.\
    \ \nIf there are no positive numbers or negative numbers in the list, return 0.\n\
    Examples:\n>>> count_positive([-1, 2, -3, 4, -5, 6])\n2\n>>> count_positive([-1,\
    \ 2, 3, 4, 5])\n0\n>>> count_positive([-1, 2, -3, 4, 5])\n2\n>>> count_positive([-1,\
    \ 2, -3, 4, -5, 6, -7, -8])\n3\n>>> count_positive([-1, 2, -3, 4, 5])\n0\n>>>\
    \ count_positive([-1, 2, -3, 4, -5, 6, -7, -8, 9])\n0\n>>> count_positive([-1,\
    \ 2, -3, 4, 5])\n0\n>>> count_positive([-1, 2, -3, 4, -5, 6, -7, -8, 9, 10])\n\
    0\n>>> count_positive([-1, 2, -3, 4, 5])\n0\n>>> count_positive([-1, 2, -3, 4,\
    \ -5, 6, -7, -8, 9, 10])\n0\n>>> count_positive([-1, 2, -3, 4, 5])\n0\n>>> count_positive([-1,\
    \ 2, -3, 4, -5, 6, -7, -8, 9, 10, 11])\n0\n>>> count_positive([-1, 2, -3, 4, 5])\n\
    0\n>>> count_positive([-1, 2, -3, 4, -5, 6, -7, -8, 9, 10, 11])\n0\n>>> count_positive([-1,\
    \ 2, -3, 4, 5])\n0\n>>> count_positive([-1, 2, -3, 4, -5, 6, -7, -8, 9, 10, 11])\n\
    0\n>>> count_positive([-1, 2, -3, 4, 5])\n0\n>>> count_positive([-1, 2, -3, 4,\
    \ -5, 6, -7, -8, 9, 10, 11])\n0\n>>> count_positive([-1, 2, -3, 4, 5])\n0\n>>>\
    \ count_positive([-1, 2, -3, 4, -5, 6, -7, -8, 9, 10, 11])\n0\n>>> count_positive([-1,\
    \ 2, -3, 4, 5])\n0\n>>> count_positive([-1, 2, -3, 4, -5, 6, -7, -8, 9, 10, 11])\n\
    0\n>>> count_positive([-1, 2, -3, 4, 5])\n0\n>>> count_positive([-1, 2, -3, 4,\
    \ -5, 6, -7, -8, 9, 10, 11])\n0\n>>> count_positive([-1, 2, -3, 4, 5])\n0\n>>> ",
  "    \n    if a + b > c and a + c > b and b + c > a:\n        return round( ((a\
    \ * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes in a list of integers and returns\
    \ the number of positive integers in the list.\n\nExample:\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n4\n>>> count_positive([-1, 0, 2, -3, 4])\n0\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n0\n>>> count_positive([-1, 0, 2, -3, 4])\n0\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n0\n>>> count_positive([-1, 0, 2, -3, 4])\n0\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n0\n>>> count_positive([-1, 0, 2, -3, 4])\n0\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n0\n>>> count_positive([-1, 0, 2, -3, 4])\n0\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n0\n>>> count_positive([-1, 0, 2, -3, 4])\n0\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n0\n>>> count_positive([-1, 0, 2, -3, 4])\n0\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n0\n>>> count_positive([-1, 0, 2, -3, 4])\n0\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n0\n>>> count_positive([-1, 0, 2, -3, 4])\n0\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n0\n>>> count_positive([-1, 0, 2, -3, 4])\n0\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n0\n>>> count_positive([-1, 0, 2, -3, 4])\n0\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n0\n>>> count_positive([-1, 0, 2, -3, 4])\n0\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n0\n>>> count_positive([-1, 0, 2, -3, 4])\n0\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n0\n>>> count_positive([-1, 0, 2, -3, 4])\n0\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n0\n>>> count_positive([-1, 0, 2, -3, 4])\n0\n>>> count_positive([-1,\
    \ 0, 2, -3, 4])\n0\n>>> count_positive([-1, 0, 2, -3, 4])\n", "    a, b, c = sorted([a,\
    \ b, c])\n    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n\n", "    \n    if a + b > c:\n        return -1\n    elif b +\
    \ c > a:\n        return -1\n    elif c + a > b:\n        return -1\n    else:\n\
    \        return round( ( (a + b + c) / 2 ), 2 )\n", "    \n    if a + b > c:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n\
    \        return -1\n    else:\n        return round((a * b * c) / 2, 2)\n</cell>\n\
    <cell>", "    \n    \n    if a + b > c:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    else:\n      \
    \  return round( ( (a + b + c) / 2 ), 2)\n", "    if a + b > c:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n        return\
    \ -1\n    else:\n        return round(0.5 * (a + b + c), 2)\n\n", "    \n    if\
    \ a + b > c and a + c > b and b + c > a:\n        area = (a * b + c) / 2\n   \
    \     return round(area, 2)\n    else:\n        return -1\n</cell>\n<cell>", " \
    \   \n    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(\
    \ ( (a + b + c) / 2 ), 2 )\n    \n</cell>\n<cell>", "    if a + b > c:\n     \
    \   return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n \
    \       return -1\n    else:\n        return round(0.5 * (a + b + c), 2)\n\n",
  "    \n    # Your code here\n    \n    if a + b > c and a + c > b and b + c > a:\n\
    \        return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n\
    \        return -1\n</cell>\n<cell>", "    \n    if a + b > c:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n        return\
    \ -1\n    else:\n        return round( ((a * b) + (b * c) + (c * a)) / (2.0 *\
    \ c), 2)\n\n", "    if a + b > c and a + c > b and b + c > a:\n        return\
    \ round(math.sqrt(a * b * c), 2)\n    else:\n        return -1\n\n", "    sides\
    \ = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[0]:\n\
    \        return -1\n    elif sum_of_sides <= sides[1]:\n        return -1\n  \
    \  elif sum_of_sides <= sides[2]:\n        return sum_of_sides\n    else:\n  \
    \      return round(sum_of_sides, 2)\n\n", "    \n    sides = [a, b, c]\n    \n\
    \    sum_of_sides = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n     \
    \   return round(sum_of_sides, 2)\n    else:\n        return -1\n</cell>\n<cell>",
  "    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n\n", "    \n    if a + b > c:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round((a * b * c) / 2, 2)\n\n",
  "    \n    area_of_triangle = abs(a * b * c) / 2.0\n    if area_of_triangle > 0.0:\n\
    \        return round(area_of_triangle, 2)\n    else:\n        return -1\n</cell>\n\
    <cell>", "    \n    area_sum = a + b + c\n    if area_sum > c:\n        return\
    \ round(area_sum / 2, 2)\n    elif area_sum > b:\n        return round(area_sum\
    \ / 2, 2)\n    elif area_sum > a:\n        return round(area_sum / 2, 2)\n   \
    \ else:\n        return -1\n\n", "    \n    if a + b > c and a + c > b and b +\
    \ c > a:\n        return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n\
    \    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n\
    <cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes in a list of integers and returns the number of positive integers\
    \ that are less than the average of the list.\n\n\n</text>\n<cell>", "    \n \
    \   area_of_triangle = abs(a * b * c) / 2.0\n    if area_of_triangle > 0.0:\n\
    \        return round(area_of_triangle, 2)\n    else:\n        return -1\n\n",
  "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[0]:\n\
    \        return -1\n    elif sum_of_sides <= sides[1]:\n        return -1\n  \
    \  elif sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n   \
    \ else:\n        return -1\n\n", "    \n    area_of_triangle = abs(a * b * c)\
    \ / 2\n    if area_of_triangle > 0 and a + b > c and b + c > a and a + c > 0:\n\
    \        return round(area_of_triangle, 2)\n    else:\n        return -1\n</cell>\n\
    <cell>", "    if a + b > c:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    elif c + a > b:\n        return -1\n    else:\n        return round(0.5\
    \ * (a + b + c), 2)\n\n", "    if a + b > c and a + c > b and b + c > a:\n   \
    \     return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n \
    \       return -1\n", "    \n    if a + b > c:\n        return -1\n    elif a\
    \ + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round((a * b * c) / 2, 2)\n\n", "    \n    if a + b > c and a\
    \ + c > b and b + c > a:\n        return round( ((a * b) + (a * c) + (b * c))\
    \ / (2 * a), 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes in a list of integers and returns the number of positive\
    \ integers in the list.\nExample:\n>>> count_positive([1, 2, 3, -4, 5])\n3\n>>>\
    \ count_positive([-1, -2, -3, -4, 5])\n4\n>>> count_positive([-1, -2, -3, -4,\
    \ -5, 0])\n0\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n0\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, 0])\n0\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n0\n>>>\
    \ count_positive([-1, -2, -3, -4, -5, 0])\n0\n>>> count_positive([-1, -2, -3,\
    \ -4, -5, 0])\n0\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n0\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, 0])\n0\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n0\n>>>\
    \ count_positive([-1, -2, -3, -4, -5, 0])\n0\n>>> count_positive([-1, -2, -3,\
    \ -4, -5, 0])\n0\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n0\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, 0])\n0\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n0\n>>>\
    \ count_positive([-1, -2, -3, -4, -5, 0])\n0\n>>> count_positive([-1, -2, -3,\
    \ -4, -5, 0])\n0\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n0\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, 0])\n0\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n0\n>>>\
    \ count_positive([-1, -2, -3, -4, -5, 0])\n0\n>>> count_positive([-1, -2, -3,\
    \ -4, -5, 0])\n0\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n0\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, 0])\n0\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n0\n>>>\
    \ count_positive([-1, -2, -3, -4, -5, 0])\n0\n>>> count_positive([-1, -2, -3,\
    \ -4, -5, 0])\n0\n", "    \n    sides = [a, b, c]\n    \n    # check that the\
    \ sum of any two sides is greater than the third side\n    if sides[0] + sides[1]\
    \ > sides[2]:\n        return -1\n    \n    # calculate the area of the triangle\n\
    \    area = sides[0] * sides[1] - sides[2] * sides[1]\n    \n    # round the area\
    \ to 2 decimal points\n    return round(area, 2)\n\n", "    \n    if a + b > c:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round( ((a * b) + (b * c) + (c *\
    \ a)) / (2 * a * b), 2)\n</cell>\n<cell>", "    \n    sides = [a, b, c]\n    \n\
    \    sum_sides = sum(sides)\n    \n    if sum_sides > sides[2]:\n        return\
    \ -1\n    else:\n        return round(sum_sides / 2, 2)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\n\
    Write a function that takes a list as an argument and returns a list with the\
    \ square of each element in the list. \nExample:\n>>> square_list([1,2,3,4])\n\
    [1,2,3,4]\n>>> square_list([1,2,3])\n[1,4,9]\n>>> square_list([1,2])\n[1,4]\n\
    >>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n\
    [1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n\
    [1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n\
    [1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n\
    [1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n\
    [1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n\
    [1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n\
    [1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n\
    [1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n\
    [1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n\
    [1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n\
    [1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n\
    [1,4]\n>>> square_list([1,2])\n[1,4]\n>>> square_list([1,2])\n[1,4]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
