name: HumanEval_87_get_row
language: py
prompt: "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int)\
  \ -> List[Tuple[int, int]]:\n    \"\"\"\n    You are given a 2 dimensional data,\
  \ as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n\
  \    each row may contain a different number of columns.\n    Given lst, and integer\
  \ x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2,\
  \ y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting\
  \ with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also,\
  \ sort coordinates of the row by columns in descending order.\n    \n    Examples:\n\
  \    >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n\
  \    [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    >>> get_row([], 1)\n    []\n\
  \    >>> get_row([[], [1], [1, 2, 3]], 3)\n    [(2, 2)]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3,\
  \ 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
  \    assert candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1,\
  \ 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([[1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6],\
  \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0),\
  \ (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([],\
  \ 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1],\
  \ [1, 2, 3]], 3) == [(2, 2)]\n\ndef test_check():\n    check(get_row)\n\ntest_check()\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    # Your code here\n    \n    return []\n", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # sort coordinates\
    \ by rows in ascending order\n    lst = sorted(lst, key=lambda row: row.index(row[x]))\n\
    \    \n    # sort coordinates by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda row: row.index(row[x]), reverse=True)\n    \n    return lst\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    # Your code here\n    \n  \
    \  return []\n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n\
    \    lst = [(x, y) for x, y in lst if x == x]\n    \n    return lst\n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # sort coordinates\
    \ initially by rows in ascending order\n    lst = sorted(lst, key=lambda lst:\
    \ lst[0])\n    \n    # sort coordinates of the row by columns in descending order\n\
    \    lst = sorted(lst, key=lambda lst: lst[-1], reverse=True)\n    \n    # find\
    \ x in the list\n    idx = lst.index(x)\n    \n    # return list of tuples [(x1,\
    \ y1), (x2, y2) ...] such that\n    # each tuple is a coordinate - (row, columns),\
    \ starting with 0\n    return [(i+1, j) for i, j in zip(range(idx), lst[idx:])]\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    ", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda row: row.index(max(x)), reverse=True)\n    lst = sorted(lst, key=lambda\
    \ row: row.index(min(x)), reverse=False)\n    \n    return [(i, lst[i].index(min(x)))\
    \ for i in lst]\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # sort coordinates\
    \ by rows in ascending order\n    lst = sorted(lst, key=lambda row: row.index(max(x)))\n\
    \    \n    # sort coordinates by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda row: row.index(min(x)), reverse=True)\n    \n    # return list of\
    \ tuples - (row, columns), starting with 0\n    return [(i+1, j+1) for i, row\
    \ in enumerate(lst) for j, x in enumerate(row) if x == x]\n", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    lst = sorted(lst)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, ", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sorted(lst)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, ", "    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    lst = sorted(lst, key=lambda x: -x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=", "    \n    #\
    \ sort by rows in ascending order\n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    # sort by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda x: (-x[0], x[1]))\n    \n    # find x in lst\n    idx = lst.index(x)\n\
    \    \n    # return list of tuples - (row, column), starting with 0\n    return\
    \ [(idx, i) for i in range(len(lst[idx]))]\n</cell>\n<cell>", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    # sort coordinates initially by rows in\
    \ ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    \n    # sort\
    \ coordinates of the row by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda x: -x[1])\n    \n    # find x in the list\n    idx = lst.index(x)\n\
    \    \n    # return list of tuples [(x1, y1), (x2, y2) ...] such that\n    # each\
    \ tuple is a coordinate - (row, columns), starting with 0\n    return [(idx-1,\
    \ y) for y in range(len(lst[idx]))]\n</cell>\n<cell>", "    \n    # sort coordinates\
    \ by rows in ascending order\n    sorted_lst = sorted(lst, key=lambda lst: lst[0])\n\
    \    \n    # sort coordinates by columns in descending order\n    sorted_lst.sort(key=lambda\
    \ lst: lst[-1], reverse=True)\n    \n    # find x coordinate in sorted list\n\
    \    idx = sorted_lst.index(x)\n    \n    # return list of tuples [(row, column),\
    \ ...]\n    return [(sorted_lst[i][0], sorted_lst[i][-1]) for i in range(idx)]\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    # Your code here\n    \n    return []\n</cell>\n<cell>", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    # sort coordinates by rows in ascending\
    \ order\n    lst = sorted(lst, key=lambda row: row[0])\n    \n    # sort coordinates\
    \ by columns in descending order\n    lst = sorted(lst, key=lambda row: row[-1],\
    \ reverse=True)\n    \n    # find x in the list\n    row = next(i for i, row in\
    \ enumerate(lst) if row[0] == x)\n    \n    # return list of tuples - (row, columns)\n\
    \    return [(i, lst[i][-1]) for i in range(row)]\n", "    \n    # sort by row\n\
    \    lst = sorted(lst, key=lambda row: row.index(x))\n    \n    # sort by column\n\
    \    lst = sorted(lst, key=lambda row: row.index(min([i for i, j in zip(row, lst)\
    \ if j == x])), reverse=True)\n    \n    # return list of tuples\n    return [(i,\
    \ j) for i, j in zip(lst, lst[1:])]\n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], x[0]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    ", "    \n    lst\
    \ = sorted(lst)\n    \n    row, col = len(lst), 0\n    \n    while row > 0:\n\
    \        row -= 1\n        \n        col = lst[row].index(x)\n        \n     \
    \   if col != 0:\n            lst[row], lst[col] = lst[col], lst[row]\n      \
    \      \n    return lst\n", "    \n    # Your code here\n    \n    return sorted([(lst[row].index(x),\
    \ lst[row].index(x) + 1) \n                   for row in range(len(lst))], \n\
    \                  key=lambda x: (x[0], -x[1]))\n", "    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))",
  "    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, ", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    ", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sorted(lst)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, ", "    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: ", " \
    \   \n    # Your code here\n    \n    return []\n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: -x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(l", "    \n    # sort coordinates by rows in ascending order\n\
    \    lst = sorted(lst, key=lambda row: row[0])\n    \n    # sort coordinates by\
    \ columns in descending order\n    lst = sorted(lst, key=lambda row: row[-1],\
    \ reverse=True)\n    \n    # find x coordinate in each row\n    lst = [(x, y)\
    \ for y, row in enumerate(lst) for x, val in enumerate(row) if val == x]\n   \
    \ \n    # return list of tuples - (row, column), starting with 0\n    return lst\n",
  "    \n    lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda\
    \ x: -x[1])\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: -x[1])\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(l", "    \n    # Your code here\n    \n    return []\n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    lst = sorted(lst, key=lambda row: row.index(max(x)))\n    lst = sorted(lst,\
    \ key=lambda row: row.index(min(x)))\n    \n    lst = sorted(lst, key=lambda row:\
    \ (-row.index(min(x)), -row.index(max(x))))\n    \n    return lst\n</cell>\n<cell>",
  "    \n    lst = sorted(lst, key=lambda row: row.index(max(x)), reverse=True)\n\
    \    lst = sorted(lst, key=lambda row: row.index(min(x)), reverse=False)\n   \
    \ \n    lst = [(i, j) for i, row in enumerate(lst) for j, x in enumerate(row)\
    \ if x == x]\n    \n    return lst\n</cell>\n<cell>", "    \n    lst = sorted(lst)\n\
    \    \n    row = 0\n    \n    while row < len(lst):\n        \n        col = lst[row].index(x)\n\
    \        \n        if col == 0:\n            row += 1\n            continue\n\
    \        \n        lst[row], lst[col] = lst[col], lst[row]\n        \n       \
    \ row += 1\n        \n    return lst\n</cell>\n<cell>", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    # Your code here\n    \n    return []\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, ",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    # Your code here\n    \n    return []\n", "    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n", " \
    \   \n    lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda\
    \ x: -x[1])\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=", "    \n    # Your code here\n    \n    return []\n\
    </cell>\n<cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n\
    \    \n    lst = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row)\
    \ if val == x]\n    \n    return lst\n</cell>\n<cell>", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda row: row.index(max(x)))\n\
    \    \n    lst = sorted(lst, key=lambda row: row.index(min(x)))\n    \n    lst\
    \ = sorted(lst, key=lambda row: row.index(min(x)))\n    \n    lst = sorted(lst,\
    \ key=lambda row: row.index(min(x)))\n    \n    lst = sorted(lst, key=lambda row:\
    \ row.index(min(x)))\n    \n    lst = sorted(lst, key=lambda row: row.index(min(x)))\n\
    \    \n    lst = sorted(lst, key=lambda row: row.index(min(x)))\n    \n    lst\
    \ = sorted(lst, key=lambda row: row.index(min(x)))\n    \n    lst = sorted(lst,\
    \ key=lambda row: row.index(min(x)))\n    \n    lst = sorted(lst, key=lambda row:\
    \ row.index(min(x)))\n    \n    lst = sorted(lst, key=lambda row: row.index(min(x)))\n\
    \    \n    lst = sorted(lst, key=lambda row: row.index(min(x)))\n    \n    lst\
    \ = sorted(lst, key=lambda row: row.index(min(x)))\n    \n    lst = sorted(lst,\
    \ key=lambda row: row.index(min(x)))\n    \n    lst = sorted(lst, key=lambda row:\
    \ row.index(min(x)))\n    \n    lst = sorted(lst, key=lambda row: row.index(min(x)))\n\
    \    \n    lst = sorted(lst, key=lambda row: row.index(min(x)))\n    \n    lst\
    \ = sorted(lst, key=lambda row: row.index(min(x)))\n    \n    lst = sorted(lst,\
    \ key=lambda row: row.index(min(x)))\n    \n    lst = sorted(lst, key=lambda row:\
    \ row.index(min(x)))\n    \n    lst = sorted(lst, key=lambda row: row.index(min(x)))\n\
    \    \n    lst = sorted(lst, key=lambda row: row.index(min(x)))\n    \n    lst\
    \ = sorted(lst, key=lambda row: row.index(min(x)))\n    \n    lst = sorted(lst,\
    \ key=lambda row: row.index(min(x)))\n    \n    lst = sorted(lst, key=lambda row:\
    \ row.index(min(x)))\n    \n    lst = sorted(lst, key=lambda row: row.index(min(x)))\n\
    \    \n    lst = sorted(lst, key=lambda row: row.index(min(x)))\n    \n    lst\
    \ = sorted(lst, key=lambda row: row.index(min(x)))\n    \n    lst = sorted(lst,\
    \ key=lambda row: row.index(min(x)))\n    \n    lst = sorted(lst, key=lambda row:\
    \ row.index(min(x)))\n    \n    lst = sorted(lst, key=lambda row: row.index(min(x)))\n\
    \    \n    lst = sorted(lst, key=lambda row: row.index(min(x)))\n", "    \n  \
    \  # sort coordinates initially by rows in ascending order\n    lst = sorted(lst,\
    \ key=lambda row: row.index(max(x)))\n    \n    # sort coordinates of the row\
    \ by columns in descending order\n    lst = sorted(lst, key=lambda row: row.index(min(x)),\
    \ reverse=True)\n    \n    # return list of tuples [(x1, y1), (x2, y2) ...] such\
    \ that\n    # each tuple is a coordinate - (row, columns), starting with 0\n \
    \   return [tuple(map(lambda x: x + 1, row)) for row in lst]\n", "    \n    #\
    \ sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    \n    # sort coordinates by columns in descending order\n    lst\
    \ = sorted(lst, key=lambda x: x[1], reverse=True)\n    \n    # find x coordinate\
    \ in list\n    idx = lst.index([x])\n    \n    # return list of tuples, [(row,\
    \ column), ...]\n    return [(idx, i) for i in range(len(lst[idx]))]\n", "   \
    \ \n    lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda\
    \ x: -x[1])\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=", "    \n    # sort coordinates by rows in ascending\
    \ order\n    lst = sorted(lst, key=lambda row: row[0])\n    \n    # sort coordinates\
    \ by columns in descending order\n    lst = sorted(lst, key=lambda row: row[-1],\
    \ reverse=True)\n    \n    # find x in the list\n    lst = [(x, y) for (x, y)\
    \ in lst if x == x]\n    \n    # return list of tuples, [(row, columns), ...]\n\
    \    return lst\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    # sort coordinates by rows in ascending order\n    lst = sorted(lst,\
    \ key=lambda row: row[0])\n    \n    # sort coordinates of each row by columns\
    \ in descending order\n    lst = sorted(lst, key=lambda row: (-row[1], row[0]))\n\
    \    \n    # return coordinates of x in the list\n    return [(x, y) for y, row\
    \ in enumerate(lst) for x, val in enumerate(row) if val == x]\n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    # sort coordinates by\
    \ rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    \n \
    \   # sort coordinates by columns in descending order\n    lst = sorted(lst, key=lambda\
    \ x: x[-1], reverse=True)\n    \n    # find coordinates in list\n    lst = [(x,\
    \ y) for y, x in enumerate(lst) if x == x]\n    \n    # return list of tuples\n\
    \    return lst\n</cell>\n<cell>", "    \n    lst = sorted(lst)\n    \n    lst\
    \ = sorted(lst, key=lambda row: row[0])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n  \
    \  \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda ", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    ", "    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: -x[1])\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    # Your code here\n  \
    \  \n    return []\n    \n    ", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    lst = sorted(lst, key=lambda row: row.index(x))\n    lst = sorted(lst,\
    \ key=lambda row: -row.index(max(row)))\n    \n    lst = sorted(lst, key=lambda\
    \ row: -row.index(min(row)))\n    \n    return lst\n", "    \n    lst = sorted(lst,\
    \ key=lambda lst: lst[0])\n    lst = sorted(lst, key=lambda lst: lst[-1])\n  \
    \  \n    lst = sorted(lst, key=lambda lst: lst[x])\n    lst = sorted(lst, key=lambda\
    \ lst: lst[-x])\n    \n    return lst\n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    # Your code here\n    \n    return []\n", " \
    \   \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n \
    \   lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n \
    \   lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n \
    \   lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[1], -x[0]))\n    \n    lst = sorted(lst, ", "    \n    # Your code here\n\
    \    \n    return []\n    \n    ", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    row = []\n    \n    for x in lst:\n\
    \        if x[0] == x:\n            row.append((x, x[1]))\n        else:\n   \
    \         row.append((x, 0))\n    \n    row = sorted(row, key=lambda x: x[1])\n\
    \    \n    return row\n", "    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    ", " \
    \   \n    lst = sorted(lst)\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, ", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    ", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    # sort by rows in ascending order\n    lst = sorted(lst, key=lambda x:\
    \ x[0])\n    \n    # sort by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda x: x[::-1])\n    \n    # find x in lst\n    \n    \n    # return\
    \ list of tuples \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    lst = sorted(lst, key=lambda x: -x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=", "    \n    lst\
    \ = sorted(lst)\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    \n \
    \   lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda ", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n", "    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = ", "    \n    # sort coordinates initially by rows\
    \ in ascending order\n    lst = sorted(lst, key=lambda row: row.index(max(x)))\n\
    \    \n    # sort coordinates of the row by columns in descending order\n    lst\
    \ = sorted(lst, key=lambda row: row.index(min(x)), reverse=True)\n    \n    #\
    \ return list of tuples [(x1, y1), (x2, y2) ...] such that\n    # each tuple is\
    \ a coordinate - (row, columns), starting with 0\n    return [(i+1, j+1) for i,\
    \ row in enumerate(lst) for j, x in enumerate(row) if x == x]\n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    # Your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    \n    # sort coordinates by rows in ascending order\n    lst = sorted(lst,\
    \ key=lambda row: row[0])\n    \n    # sort coordinates of each row by columns\
    \ in descending order\n    lst = sorted(lst, key=lambda row: (-row[1], row[0]))\n\
    \    \n    # find x coordinate\n    x, y = 0, 0\n    for row in lst:\n       \
    \ if x == x:\n            return row\n        x, y = x + 1, y + 1\n    \n    #\
    \ x coordinate not found\n    return []\n", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    lst = sorted(lst)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, ", "    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n\
    \    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    ", "    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    lst = sorted(lst, key=lambda x: -x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    # sort coordinates by\
    \ rows in ascending order\n    lst = sorted(lst, key=lambda row: row[0])\n   \
    \ \n    # sort coordinates of each row by columns in descending order\n    lst\
    \ = sorted(lst, key=lambda row: (-row[1], row[0]))\n    \n    # find x coordinate\
    \ in each row\n    lst = [(x, y) for y, row in enumerate(lst) for x, val in enumerate(row)\
    \ if val == x]\n    \n    # return list of tuples - (row, column), starting with\
    \ 0\n    return lst\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    # sort coordinates initially by rows in ascending order\n\
    \    lst = sorted(lst, key=lambda row: row[0])\n    \n    # sort coordinates of\
    \ the row by columns in descending order\n    lst = sorted(lst, key=lambda row:\
    \ row[::-1])\n    \n    # find x in the list\n    idx = lst.index(x)\n    \n \
    \   # return list of tuples, [(row, columns), ...]\n    return [(i, lst[idx].index(lst[idx][::-1][i]))\
    \ for i in range(len(lst[idx]))]\n</cell>\n<cell>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    # sort coordinates initially by rows\
    \ in ascending order\n    lst = sorted(lst, key=lambda row: row[0])\n    \n  \
    \  # sort coordinates of the row by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    # find x in the list\n    idx = lst.index(x)\n\
    \    \n    # return list of tuples [(x1, y1), (x2, y2) ...] such that\n    # each\
    \ tuple is a coordinate - (row, columns), starting with 0\n    return [(idx-i,\
    \ idx-i-1) for i in range(len(lst))]\n</cell>\n<cell>", "    \n    # sort coordinates\
    \ by rows in ascending order\n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    \n    # sort coordinates by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda row: row[-1], reverse=True)\n    \n    # find x in the list\n   \
    \ lst = [(x, y) for x, y in lst if x == x]\n    \n    # return list of tuples,\
    \ [(row, columns), ...]\n    return lst\n", "    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n   \
    \ \n    lst = sorted(lst, key=lambda x: (x[1], x[0]), reverse=True)\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # Your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    # sort coordinates by rows in ascending order\n   \
    \ lst = sorted(lst, key=lambda row: row[0])\n    \n    # sort coordinates of row\
    \ by columns in descending order\n    lst = sorted(lst, key=lambda row: row[-1],\
    \ reverse=True)\n    \n    # find x coordinate in list\n    idx = lst.index([x])\n\
    \    \n    # return list of tuples [(x1, y1), (x2, y2) ...] such that\n    # each\
    \ tuple is a coordinate - (row, columns), starting with 0\n    return [(idx-1,\
    \ idx), (idx+1, idx), (idx, idx-1)]\n</cell>\n<cell>", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda row: row.index(x))\n\
    \    \n    lst = sorted(lst, key=lambda row: row.index(-1), reverse=True)\n  \
    \  \n    return lst\n    ", "    \n    lst = sorted(lst)\n    \n    lst = sorted(lst,\
    \ key=lambda x:x[0])\n    \n    lst = sorted(lst, key=lambda x:x[1])\n    \n \
    \   lst = sorted(lst, key=lambda x:-x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x:-x[1])\n    \n    lst = sorted(lst, key=lambda x:x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x:x[1])\n    \n    lst = sorted(lst, key=lambda x:-x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x:-x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x:x[0])\n    \n    lst = sorted(lst, key=lambda x:x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x:-x[0])\n    \n    lst = sorted(lst, key=lambda x:-x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x:x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x:x[1])\n    \n    lst = sorted(lst, key=lambda x:-x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x:-x[1])\n    \n    lst = sorted(lst, key=lambda x:x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x:x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x:-x[0])\n    \n    lst = sorted(lst, key=lambda x:-x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x:x[0])\n    \n    lst = sorted(lst, key=lambda x:x[1])\n    \n \
    \   lst = sorted(lst, key=lambda x:-x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x:-x[1])\n    \n    lst = sorted(lst, key=lambda x:x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x:x[1])\n    \n    lst = sorted(lst, key=lambda x:-x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x:-x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x:x[0])\n    \n    lst = sorted(lst, key=lambda x:x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x:-x[0])\n    \n    lst = sorted(lst, key=lambda x:-x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x:x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x:x[1])\n    \n    lst = sorted(lst, key=lambda x:-x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x:-x[1])\n    \n    lst = sorted(lst, key=lambda x:x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x:x[1])\n    \n    lst = sorted(lst, key=lambda ",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # sort coordinates\
    \ by rows in ascending order\n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    \n    # sort coordinates by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda row: row[-1], reverse=True)\n    \n    # find x in the list\n   \
    \ row = next(i for i, row in enumerate(lst) if row[0] == x)\n    \n    # return\
    \ list of tuples [(x1, y1), (x2, y2) ...] such that\n    # each tuple is a coordinate\
    \ - (row, columns), starting with 0.\n    return [(i + 1, j + 1) for i, j in lst[row]]\n",
  "    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    ", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    # Your code here\n    \n    return []\n    \n    ", "   \
    \ \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda\
    \ row: row[::-1])\n    \n    lst = [(x, y) for x, y in lst if x==x]\n    \n  \
    \  return lst\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
