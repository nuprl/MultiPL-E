language: py
name: HumanEval_104_unique_digits
results:
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num)\n    \n    digits = list(digits)\n    \n    digits.sort()\n\
    \    \n    unique_digits = []\n    \n    for num in digits:\n        if num %\
    \ 2 == 0:\n            unique_digits.append(num)\n    \n    return unique_digits\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_si_nbop.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_si_nbop.py\"\
    , line 40, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_si_nbop.py\"\
    , line 34, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(int(num))\n    \n    digits = list(digits)\n    digits.sort()\n\
    \    \n    unique_digits = []\n    \n    for num in x:\n        if int(num) not\
    \ in digits:\n            unique_digits.append(num)\n    \n    return unique_digits\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcjs9opcb.py\"\
    , line 31\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for num in x:\n \
    \       if num % 2 == 0:\n            unique_digits.append(num)\n    \n    return\
    \ sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqoga7ac.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqoga7ac.py\"\
    , line 31, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqoga7ac.py\"\
    , line 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            \n            if\
    \ digit % 2 == 0:\n                continue\n            else:\n             \
    \   return [num] + unique_digits(num // 10)\n    \n    return []\n</cell>\n<cell>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422,\
    \ 10])\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl9em6lt8.py\"\
    , line 31\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digit = num // 10\n        if digit in digits:\n            continue\n   \
    \     else:\n            digits.add(digit)\n            \n    return sorted(list(digits))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp98e94w16.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp98e94w16.py\"\
    , line 34, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp98e94w16.py\"\
    , line 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    digits.sort()\n    \n    unique = []\n    for num in x:\n       \
    \ if num % 10 in digits:\n            unique.append(num)\n    \n    return unique\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjb1sd02w.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjb1sd02w.py\"\
    , line 35, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjb1sd02w.py\"\
    , line 29, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            \n            if\
    \ digit % 2 == 0:\n                continue\n            else:\n             \
    \   return [num]\n    \n    return []\n</cell>\n<cell>\nunique_digits([15, 33,\
    \ 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes a list of integers and returns the number\
    \ of integers in the list that have no duplicates.\n\nFor example, given [5, 7,\
    \ 7, 8, 8, 8], return 3.\n\nNote: The order of the integers in the list does not\
    \ matter.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfqut0q9r.py\"\
    , line 31\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num % 10)\n    \n    return [num for num in x if num % 10 in digits]\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num)\n    \n    return [num for num in x if num in digits]\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj4x3uu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj4x3uu4.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj4x3uu4.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits_set = set()\n    \n    for num in\
    \ x:\n        digit = num // 10\n        if digit % 2 == 0:\n            unique_digits_set.add(num)\n\
    \    \n    return sorted(unique_digits_set)\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 3\nGiven a list of integers, return a new list containing only\
    \ the unique elements \n    that appear at least twice in this list. \n    \n\
    \    Can you do it without using any extra space?\n\n    Example 1:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 2]\n    \n    Example 2:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 3:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 4:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 5:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 6:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 7:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 8:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 9:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 10:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 11:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 12:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 13:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 14:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 15:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 16:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 17:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 18:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 19:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 20:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 21:\n    >>> unique_\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpty1uewqk.py\"\
    , line 24\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(int(num))\n    \n    sorted_digits = sorted(digits)\n    \n   \
    \ unique_digits = []\n    \n    for num in sorted_digits:\n        if num % 2\
    \ == 0:\n            unique_digits.append(num)\n    \n    return unique_digits\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 7\nWrite a function that takes a list\
    \ of integers and returns the number of elements in the list that are not unique.\n\
    \nFor example:\n>>> unique_elements([1, 2, 3, 1])\n1\n>>> unique_elements([1,\
    \ 2, 3, 2])\n0\n>>> unique_elements([1, 2, 3, 3])\n0\n>>> unique_elements([1,\
    \ 2, 3, 4])\n3\n>>> unique_elements([1, 2, 3, 5])\n0\n>>> unique_elements([1,\
    \ 2, 3, 6])\n0\n>>> unique_elements([1, 2, 3, 7])\n0\n>>> unique_elements([1,\
    \ 2, 3, 8])\n0\n>>> unique_elements([1, 2, 3, 9])\n0\n>>> unique_elements([1,\
    \ 2, 3, 10])\n0\n>>> unique_elements([1, 2, 3, 11])\n0\n>>> unique_elements([1,\
    \ 2, 3, 12])\n0\n>>> unique_elements([1, 2, 3, 13])\n0\n>>> unique_elements([1,\
    \ 2, 3, 14])\n0\n>>> unique_elements([1, 2, 3, 15])\n0\n>>> unique_elements([1,\
    \ 2, 3, 16])\n0\n>>> unique_elements([1, 2, 3, 17])\n0\n>>> unique_elements([1,\
    \ 2, 3, 18])\n0\n>>> unique_elements([1, 2, 3, 19])\n0\n>>> unique_elements([1,\
    \ 2, 3, 20])\n0\n>>> unique_elements([1, 2, 3, 21])\n0\n>>> unique_elements([1,\
    \ 2, 3, 22])\n0\n>>> unique_elements([1, 2, 3, 23])\n0\n>>> unique_elements([1,\
    \ 2, 3, 24])\n0\n>>> unique_elements([1, 2, 3, 25])\n0\n>>> unique_elements([1,\
    \ 2, 3, 26])\n0\n>>> unique_elements([1, 2, 3, 27])\n0\n>>> unique_elements([1,\
    \ 2, 3, 28])\n0\n>>> unique_elements([1, 2, 3, 29])\n0\n>>> unique_elements([1,\
    \ 2, 3, 30])\n0\n>>> unique_elements([1, 2, 3, 31])\n0\n>>> unique_elements([1,\
    \ 2, 3, 32])\n0\n>>> unique_elements([1, 2, 3, 33])\n0\n>>> unique_elements([1,\
    \ 2, 3, 34])\n0\n>>> unique_elements([1, 2, 3, 35])\n0\n>>> unique_elements([1,\
    \ 2, 3, 36])\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvrn240b.py\"\
    , line 30\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for num in x:\n        digits.add(num)\n\
    \    return sorted(list(digits))\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvw7l8pp1.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvw7l8pp1.py\"\
    , line 28, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvw7l8pp1.py\"\
    , line 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits_set = set()\n    unique_digits_set.update(x)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpomfwzibq.py\"\
    , line 83, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpomfwzibq.py\"\
    , line 81, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpomfwzibq.py\"\
    , line 75, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(int(num))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for num\
    \ in x:\n        if int(num) not in digits_set:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8d8io2_0.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8d8io2_0.py\"\
    , line 36, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8d8io2_0.py\"\
    , line 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ if n % 2 == 0:\n            digits.add(n)\n    \n    return sorted(list(digits))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzji_dvmk.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzji_dvmk.py\"\
    , line 31, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzji_dvmk.py\"\
    , line 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        if n % 2\
    \ == 0:\n            digits.append(n)\n    digits.sort()\n    return digits\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for n in x:\n   \
    \     \n        if n % 2 == 0:\n            unique_digits.append(n)\n    \n  \
    \  return sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdc83rhc1.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdc83rhc1.py\"\
    , line 32, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdc83rhc1.py\"\
    , line 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits.sort()\n    \n    return [num for num in x if num %\
    \ 10 in digits]\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that returns True if two strings are anagrams of each other. \nFor\
    \ example anagrams('abba', 'baab') is True.\n\nNotes:\n\nAll strings will be converted\
    \ to lowercase.\nThe order of the characters in a string does not matter.\nAll\
    \ input strings are guaranteed to be non-empty strings.\nThe anagrams function\
    \ should have a runtime of O(n) where n is the length of the first input string.\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5uhl4zdu.py\"\
    , line 24\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for i in x:\n       \
    \ if i not in digits:\n            digits.add(i)\n        else:\n            digits.remove(i)\n\
    \    \n    return sorted(list(digits))\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ovkcc91.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ovkcc91.py\"\
    , line 33, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ovkcc91.py\"\
    , line 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            \n            if\
    \ num % 10 == 0:\n                continue\n            else:\n              \
    \  digit_set.add(num % 10)\n                \n    return sorted(list(digit_set))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_w_grrc.py\"\
    , line 41, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_w_grrc.py\"\
    , line 39, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_w_grrc.py\"\
    , line 33, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = [int(d) for d in str(x)]\n    \n    even\
    \ = [d for d in digits if d % 2 == 0]\n    \n    return sorted(list(set(digits)\
    \ - set(even)))\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3yq6zn53.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3yq6zn53.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp3yq6zn53.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmp3yq6zn53.py\", line 16, in unique_digits\n    digits = [int(d) for\
    \ d in str(x)]\n  File \"/tmp/tmp3yq6zn53.py\", line 16, in <listcomp>\n    digits\
    \ = [int(d) for d in str(x)]\nValueError: invalid literal for int() with base\
    \ 10: '['\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(int(num))\n\
    \    digits.sort()\n    \n    unique_digits = []\n    \n    for num in digits:\n\
    \        if num % 2 == 0:\n            unique_digits.append(num)\n    \n    return\
    \ unique_digits\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvbmr7qcu.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvbmr7qcu.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpvbmr7qcu.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num % 10)\n    \n    return [num for num in x if num % 10 in digits]\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ if n % 2 == 0:\n            digits.add(n)\n    \n    return sorted(list(digits))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzji_dvmk.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzji_dvmk.py\"\
    , line 31, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzji_dvmk.py\"\
    , line 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        digits.append(str(n))\n\
    \    digits.sort()\n    \n    unique_digits = []\n    for d in digits:\n     \
    \   if int(d) % 2 == 0:\n            unique_digits.append(int(d))\n    \n    return\
    \ unique_digits\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjzcb3j5s.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpjzcb3j5s.py\", line 35,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpjzcb3j5s.py\", line\
    \ 29, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(int(num))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for num\
    \ in digits:\n        if num in digits_set:\n            digits_set.remove(num)\n\
    \        else:\n            unique_digits.append(num)\n    \n    return sorted(unique_digits)\n\
    \    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfcy__uzc.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpfcy__uzc.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpfcy__uzc.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num % 10)\n    \n    digits = list(digits)\n    digits.sort()\n\
    \    \n    return [num for num in x if num % 10 in digits]\n</cell>\n<cell>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422,\
    \ 10])\n</cell>\n<text>\nProblem 3\nWrite a function that returns True if a binary\
    \ tree is balanced else return False.\n\nA binary tree is considered balanced\
    \ if its height is less than or equal to log2(n).\n\nFor example:\nGiven binary\
    \ tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\
    return true.\n\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n \
    \ 9  20\n    /  \\\n   15   7\nreturn false.\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdbv4v7o2.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ digits.add(int(str(n)[0]))\n    \n    return [n for n in x if int(str(n)[0])\
    \ not in digits]\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfws3d195.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfws3d195.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpfws3d195.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num)\n    \n    sorted_digits = sorted(list(digits))\n    \n  \
    \  return [num for num in sorted_digits if not any(num % d for d in [2, 4, 6,\
    \ 8, 10])]\n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51k8rbtr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp51k8rbtr.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp51k8rbtr.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ digits.add(int(str(n)[0]))\n    \n    return [n for n in x if int(str(n)[0])\
    \ not in digits]\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfws3d195.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfws3d195.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpfws3d195.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for n in x:\n        digits.append(n)\n\
    \    \n    digits.sort()\n    \n    unique_digits = []\n    \n    for d in digits:\n\
    \        if d % 2 == 0:\n            unique_digits.append(d)\n    \n    return\
    \ unique_digits\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1k8fk41v.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp1k8fk41v.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1k8fk41v.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        digit_set.add(digit)\n        \n        if num % 10 == 0:\n         \
    \   continue\n        digit_set.add(num % 10)\n        \n    return sorted(list(digit_set))\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 4\nWrite a function that returns True\
    \ if a number is palindrome and False otherwise.\n\nA palindrome is a word, number,\
    \ or other sequence of characters which reads the same backward as forward.\n\n\
    For example:\n\n121\n12321\n321\n32121\n12321\n12321\n321\n321\n321\n321\n321\n\
    321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n\
    321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n\
    321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n\
    321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n\
    321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n\
    321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n\
    321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n321\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpurb3pgzx.py\", line 29\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num % 10)\n    \n    return [num for num in x if num % 10 in digits]\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for n in x:\n        digits.add(str(n))\n\
    \    \n    return [n for n in x if str(n) not in digits]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphk7ji8p6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphk7ji8p6.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmphk7ji8p6.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        if n % 2\
    \ == 0:\n            digits.append(n)\n    \n    return sorted(digits)\n\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5r0nkqpr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp5r0nkqpr.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp5r0nkqpr.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        digits.append(str(n))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for d in\
    \ digits:\n        if d not in digits_set:\n            unique_digits.append(d)\n\
    \    \n    return sorted(unique_digits)\n    \ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf9h6gvsh.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpf9h6gvsh.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpf9h6gvsh.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for num in x:\n \
    \       \n        if num % 2 == 0:\n            unique_digits.append(num)\n  \
    \          \n    return unique_digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa2nysh10.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpa2nysh10.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpa2nysh10.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ digits.add(int(n))\n    \n    sorted_digits = sorted(list(digits))\n    \n \
    \   return [n for n in sorted_digits if n % 2 == 0]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxjon3t4y.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxjon3t4y.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpxjon3t4y.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(int(num))\n    \n    digits = list(digits)\n    \n    digits.sort()\n\
    \    \n    unique_digits = []\n    \n    for num in x:\n        if num in digits:\n\
    \            continue\n        else:\n            unique_digits.append(num)\n\
    \            \n    return unique_digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbxhihfw_.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpbxhihfw_.py\", line 42,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpbxhihfw_.py\", line\
    \ 36, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        if n % 2\
    \ == 0:\n            digits.append(n)\n    digits.sort()\n    return digits\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num)\n        \n    return [num for num in x if num in digits]\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 9\nWrite a function that returns True\
    \ if a number is divisible by 7 and False otherwise. You may assume that the given\
    \ number is an integer type. \nThe function should work for negative numbers as\
    \ well.\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpazt26trw.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ // 10)\n    \n    digits = list(set(digits))\n    digits.sort()\n    \n    ans\
    \ = []\n    for num in x:\n        if num % 10 in digits:\n            ans.append(num)\n\
    \    \n    return ans\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt00j4evf.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpt00j4evf.py\", line 37,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpt00j4evf.py\", line\
    \ 31, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        if n % 2\
    \ == 0:\n            digits.append(n)\n    \n    return sorted(list(set(digits)))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfi6mg0n6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfi6mg0n6.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpfi6mg0n6.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for n in x:\n        if\
    \ n % 2 == 0:\n            digits.append(n)\n    \n    return sorted(digits)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_4v9702.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpq_4v9702.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpq_4v9702.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for i in x:\n       \
    \ if i not in digits:\n            digits.add(i)\n        else:\n            digits.discard(i)\n\
    \    \n    return sorted(list(digits))\n</cell>\n<cell>\nunique_digits([15, 33,\
    \ 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes a list of integers and returns the number\
    \ of elements in the list that have an even number of digits.\n\nFor example:\n\
    >>> count_digits([15, 33, 1422, 1])\n3\n>>> count_digits([152, 323, 1422, 10])\n\
    0\n>>> count_digits([])\n0\n>>> count_digits([-15, -33, -1422, -1])\n3\n>>> count_digits([-152,\
    \ -323, -1422, -10])\n0\n>>> count_digits([1, 2, 3, 4, 5])\n5\n>>> count_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])\n0\n>>> count_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n20\n>>> count_digits([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])\n0\n>>>\
    \ count_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,\
    \ 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,\
    \ 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,\
    \ 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,\
    \ 95, 96, 97, 98, 99])\n0\n>>> count_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpi3m48472.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for num in x:\n        digits.append(num)\n\
    \    \n    digits.sort()\n    \n    unique_digits = []\n    \n    for num in digits:\n\
    \        if num % 2 == 0:\n            unique_digits.append(num)\n    \n    return\
    \ unique_digits\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk6_detvd.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpk6_detvd.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpk6_detvd.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for num in x:\n        digits.add(int(num))\n\
    \    \n    return [num for num in x if int(num) not in digits]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqtb3gby4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqtb3gby4.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpqtb3gby4.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = [int(d) for d in str(x)]\n    \n    evens\
    \ = [d for d in digits if d % 2 == 0]\n    \n    return sorted(list(set(digits)\
    \ - set(evens)))\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9fetyv_c.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9fetyv_c.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9fetyv_c.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmp9fetyv_c.py\", line 16, in unique_digits\n    digits = [int(d) for\
    \ d in str(x)]\n  File \"/tmp/tmp9fetyv_c.py\", line 16, in <listcomp>\n    digits\
    \ = [int(d) for d in str(x)]\nValueError: invalid literal for int() with base\
    \ 10: '['\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for num in x:\n        digits.add(int(num))\n\
    \    \n    sorted_digits = sorted(list(digits))\n    \n    return [num for num\
    \ in sorted_digits if num % 2 == 0]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp561ln7fb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp561ln7fb.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp561ln7fb.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for num in x:\n \
    \       \n        if num % 2 == 0:\n            unique_digits.append(num)\n  \
    \          \n    return sorted(unique_digits)\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1sfknju8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp1sfknju8.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1sfknju8.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for num in x:\n \
    \       \n        digits = [int(digit) for digit in str(num)]\n        \n    \
    \    unique_digits.append(digits)\n        \n    unique_digits = list(set(unique_digits))\n\
    \    \n    unique_digits.sort()\n    \n    return unique_digits\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfw6bwbjm.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpfw6bwbjm.py\", line 37,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpfw6bwbjm.py\", line\
    \ 31, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpfw6bwbjm.py\", line 24, in unique_digits\n    unique_digits = list(set(unique_digits))\n\
    TypeError: unhashable type: 'list'\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(str(num))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for num\
    \ in x:\n        if str(num) not in digits_set:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw3ncw01x.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpw3ncw01x.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpw3ncw01x.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ if n % 2 == 0:\n            digits.add(n)\n    \n    digits = list(digits)\n\
    \    digits.sort()\n    \n    return digits\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_cs_5il.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw_cs_5il.py\", line 34,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpw_cs_5il.py\", line\
    \ 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num % 10)\n    \n    return [num for num in x if num % 10 in digits]\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 4\nWrite a function that returns True\
    \ if a binary tree is balanced else False.\n\nA binary tree is considered balanced\
    \ if its height is less than or equal to log2(n).\n\nFor example a binary tree\
    \ with height 5 would be considered balanced.\n\nA binary tree with height 5 would\
    \ not be considered balanced.\n\nFor this problem, we only need to consider nodes\
    \ with two children.\n\nWrite a function that takes in a binary tree and checks\
    \ if it is balanced.\n\nFor this problem, we only need to consider nodes with\
    \ two children.\n\nFor example:\n\n>>> is_balanced(TreeNode(0))\nTrue\n>>> is_balanced(TreeNode(1))\n\
    False\n>>> is_balanced(TreeNode(0))\nFalse\n>>> is_balanced(TreeNode(1))\nTrue\n\
    >>> is_balanced(TreeNode(2))\nTrue\n>>> is_balanced(TreeNode(3))\nFalse\n>>> is_balanced(TreeNode(4))\n\
    True\n>>> is_balanced(TreeNode(5))\nFalse\n>>> is_balanced(TreeNode(6))\nTrue\n\
    >>> is_balanced(TreeNode(7))\nFalse\n>>> is_balanced(TreeNode(8))\nTrue\n>>> is_balanced(TreeNode(9))\n\
    False\n>>> is_balanced(TreeNode(10))\nTrue\n>>> is_balanced(TreeNode(11))\nFalse\n\
    >>> is_balanced(TreeNode(12))\nTrue\n>>> is_balanced(TreeNode(13))\nFalse\n>>>\
    \ is_balanced(TreeNode(14))\nTrue\n>>> is_balanced(TreeNode(15))\nFalse\n>>> is_balanced(TreeNode(16))\n\
    True\n>>> is_balanced(TreeNode(17))\nFalse\n>>> is_balanced(TreeNode(18))\nTrue\n\
    >>> is_balanced(TreeNode(19))\nFalse\n>>> is_balanced(TreeNode(20))\nTrue\n>>>\
    \ is_balanced(TreeNode(21))\nFalse\n>>> is_balanced(TreeNode(22))\nTrue\n>>> is_balanced(TreeNode(23))\n\
    False\n>>> is_balanced(TreeNode(24))\nTrue\n>>> is_balanced(TreeNode(25))\nFalse\n\
    >>> is_balanced(TreeNode(26))\nTrue\n>>> is_balanced(TreeNode(27))\nFalse\n>>>\
    \ is_balanced(TreeNode(28))\nTrue\n>>> is_balanced(TreeNode(\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpzkcndlkr.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num)\n        \n    return [num for num in x if num in digits]\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_a6ufys1.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_a6ufys1.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp_a6ufys1.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for i in x:\n        if\
    \ int(i) % 2 == 0:\n            digits.append(i)\n    \n    return sorted(digits)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiftjue3i.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpiftjue3i.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpiftjue3i.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for n in x:\n        digits.add(int(str(n)[0]))\n\
    \    \n    return [n for n in x if int(str(n)[0]) not in digits]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8vagpju.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpc8vagpju.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpc8vagpju.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(int(num))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for num\
    \ in digits:\n        if num in digits_set:\n            digits_set.remove(num)\n\
    \        else:\n            unique_digits.append(num)\n    \n    return sorted(unique_digits)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp217n5fwo.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp217n5fwo.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp217n5fwo.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        if n % 2\
    \ == 0:\n            digits.append(n)\n    return sorted(digits)\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp72gjqyt_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp72gjqyt_.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp72gjqyt_.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        digit_set.add(digit)\n        \n        if num % 10 == 0:\n         \
    \   continue\n        \n        digit_set.add(num % 10)\n        \n    return\
    \ sorted(list(digit_set))\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprngvqhlq.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmprngvqhlq.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmprngvqhlq.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_dict = {}\n    for num in x:\n        if\
    \ num in digit_dict:\n            digit_dict[num] += 1\n        else:\n      \
    \      digit_dict[num] = 1\n    \n    sorted_list = []\n    for num in sorted(digit_dict):\n\
    \        if digit_dict[num] % 2 == 0:\n            sorted_list.append(num)\n \
    \   \n    return sorted_list\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbi07ijig.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpbi07ijig.py\", line 37,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpbi07ijig.py\", line\
    \ 31, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for num in x:\n        digits.add(num)\n\
    \    \n    return [num for num in x if num in digits]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpllayt5nj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpllayt5nj.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpllayt5nj.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num % 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            \n    return sorted(list(digit_set))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20pdr23p.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp20pdr23p.py\", line 34,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp20pdr23p.py\", line\
    \ 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_dict = {}\n    \n    for num in x:\n    \
    \    digit = num // 10\n        if digit in digit_dict:\n            digit_dict[digit].append(num)\n\
    \        else:\n            digit_dict[digit] = [num]\n    \n    unique_digits\
    \ = []\n    \n    for digits in digit_dict.values():\n        if len(digits) >\
    \ 1:\n            unique_digits.extend(digits)\n    \n    return sorted(unique_digits)\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 3\nWrite a function that returns True\
    \ if a binary tree is balanced, or False otherwise. \nFor example, a binary tree\
    \ is considered balanced if its depth does not exceed log2(n).\n\nHint:\nUse recursion.\n\
    \nDefinition:\nA binary tree is considered balanced if its depth does not exceed\
    \ log2(n).\n\nExample:\nGiven a binary tree with depth 1, the height is 1, the\
    \ height of the left subtree is 1, and the height of the right subtree is 1, the\
    \ binary tree is balanced.\n\nGiven a binary tree with depth 2, the height is\
    \ 2, the height of the left subtree is 2, and the height of the right subtree\
    \ is 2, the binary tree is balanced.\n\nGiven a binary tree with depth 3, the\
    \ height is 3, the height of the left subtree is 3, and the height of the right\
    \ subtree is 3, the binary tree is balanced.\n\nGiven a binary tree with depth\
    \ 4, the height is 4, the height of the left subtree is 4, and the height of the\
    \ right subtree is 4, the binary tree is balanced.\n\nGiven a binary tree with\
    \ depth 5, the height is 5, the height of the left subtree is 5, and the height\
    \ of the right subtree is 5, the binary tree is balanced.\n\nGiven a binary tree\
    \ with depth 6, the height is 6, the height of the left subtree is 6, and the\
    \ height of the right subtree is 6, the binary tree is balanced.\n\nGiven a binary\
    \ tree with depth 7, the height is 7, the height of the left subtree is 7, and\
    \ the height of the right subtree is 7, the binary tree is balanced.\n\nGiven\
    \ a binary tree with depth 8, the height is 8, the height of the left subtree\
    \ is 8, and the height of the right subtree is 8, the binary tree is balanced.\n\
    \nGiven a binary tree with depth 9, the height is 9, the height of the left subtree\
    \ is 9, and the height of the right subtree is 9, the binary tree is balanced.\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpuvm7kkrg.py\", line 32\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digit = num // 10\n        if digit in digits:\n            continue\n   \
    \     else:\n            digits.add(digit)\n            \n    return sorted(list(digits))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp98e94w16.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp98e94w16.py\"\
    , line 34, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp98e94w16.py\"\
    , line 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num)\n    \n    return [num for num in x if num in digits]\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj4x3uu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj4x3uu4.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj4x3uu4.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digit = num // 10\n        if digit in digits:\n            continue\n   \
    \     digits.add(digit)\n        \n        if num % 10 == 0:\n            return\
    \ [x]\n        else:\n            x.remove(num)\n            \n    return []\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcalmq8hw.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpcalmq8hw.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpcalmq8hw.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for num in x:\n        digits.add(num)\n\
    \    \n    digits = sorted(list(digits))\n    \n    unique_digits = []\n    for\
    \ num in x:\n        if num not in digits:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm3gse3e1.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpm3gse3e1.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpm3gse3e1.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for num in x:\n \
    \       \n        if num % 2 == 0:\n            unique_digits.append(num)\n  \
    \  \n    return sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdznh43oe.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpdznh43oe.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpdznh43oe.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        digits.append(str(n))\n\
    \    digits = list(set(digits))\n    digits.sort()\n    \n    return [int(d) for\
    \ d in digits]\n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1])\
    \ == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpitxpdlku.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpitxpdlku.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpitxpdlku.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for i in x:\n        if\
    \ i not in digits:\n            digits.append(i)\n    \n    digits = sorted(digits)\n\
    \    \n    even = []\n    \n    for i in digits:\n        if i % 2 == 0:\n   \
    \         even.append(i)\n    \n    return even\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 4\nWrite a function that takes a list of integers and returns\
    \ a list of all elements that appear more than once in the list.\n\nFor example:\n\
    >>> x = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, \ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpolj7qle_.py\", line 31\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        digit_set.add(digit)\n        \n        if digit % 2 == 0:\n        \
    \    continue\n        \n        digit_set.add(digit + 1)\n        \n    return\
    \ sorted(list(digit_set))\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp42y1fa7t.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp42y1fa7t.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp42y1fa7t.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits_set = set(digits)\n    \n    return [num for num in\
    \ x if num % 10 in digits_set]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0e6hzalk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp0e6hzalk.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp0e6hzalk.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ // 10)\n    \n    digits = list(set(digits))\n    digits.sort()\n    \n    return\
    \ digits\n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7plqnk95.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp7plqnk95.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp7plqnk95.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ digits.add(str(n))\n    \n    return [n for n in x if str(n) not in digits]\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnqz5p_67.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnqz5p_67.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpnqz5p_67.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits.sort()\n    \n    unique_digits = []\n    \n    for\
    \ digit in digits:\n        if digit != 0:\n            unique_digits.append(digit)\n\
    \    \n    return unique_digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpul7r3_bb.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpul7r3_bb.py\", line 37,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpul7r3_bb.py\", line\
    \ 31, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for i in x:\n       \
    \ if i not in digits:\n            digits.add(i)\n        else:\n            digits.discard(i)\n\
    \            \n    return sorted(list(digits))\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7b56ry5d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7b56ry5d.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp7b56ry5d.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for i in x:\n   \
    \     if i != 0:\n            unique_digits.append(i)\n    \n    unique_digits.sort()\n\
    \    \n    return unique_digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp68zd7nq7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp68zd7nq7.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp68zd7nq7.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        if n % 2\
    \ == 0:\n            digits.append(n)\n    digits.sort()\n    return digits\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        digit_set.add(digit)\n        \n        if digit % 2 == 0:\n        \
    \    digit_set.remove(digit)\n            \n    return sorted(list(digit_set))\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1])\
    \ == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmprt2ymtc7.py\", line 28\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ digits.add(int(str(n)[0]))\n    \n    return sorted(list(digits))\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpux1418mq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpux1418mq.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpux1418mq.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_dict = {}\n    \n    for num in x:\n    \
    \    digit = num // 10\n        if digit in digit_dict:\n            digit_dict[digit].append(num)\n\
    \        else:\n            digit_dict[digit] = [num]\n    \n    sorted_digit_dict\
    \ = sorted(digit_dict.items(), key=lambda x:x[0])\n    \n    return [num for num\
    \ in sorted_digit_dict if not num[1] % 2]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a string as input and returns a\
    \ list of all words in the string that start with a capital letter.\n\nFor example,\
    \ given the following string: \"Hello World\", your function should return [\"\
    Hello\", \"World\"].\n\nNote: The returned list should be sorted in alphabetical\
    \ order.\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpetr5fptr.py\", line 28\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits = list(set(digits))\n    digits.sort()\n    \n    return\
    \ [num for num in x if num % 10 in digits]\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpez5q1wzb.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpez5q1wzb.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpez5q1wzb.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        digits.append(str(n))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for d in\
    \ digits_set:\n        if d.isdigit():\n            if int(d) % 2 == 0:\n    \
    \            unique_digits.append(int(d))\n    \n    return sorted(unique_digits)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxqjx1n1f.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpxqjx1n1f.py\", line 37,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpxqjx1n1f.py\", line\
    \ 31, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits_set = set(digits)\n    \n    unique_digits = []\n  \
    \  for num in x:\n        if num % 10 in digits_set:\n            unique_digits.append(num)\n\
    \            digits_set.remove(num % 10)\n    \n    return sorted(unique_digits)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1rvgnkv.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpo1rvgnkv.py\", line 37,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpo1rvgnkv.py\", line\
    \ 31, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num % 10)\n    \n    return [num for num in x if num % 10 in digits]\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(int(num))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for num\
    \ in x:\n        if num in digits_set:\n            digits_set.remove(num)\n \
    \       else:\n            unique_digits.append(num)\n    \n    return sorted(unique_digits)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkf40zd7l.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpkf40zd7l.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpkf40zd7l.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ if n % 2 == 0:\n            digits.add(n)\n    \n    return sorted(list(digits))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzji_dvmk.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzji_dvmk.py\"\
    , line 31, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzji_dvmk.py\"\
    , line 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for n in x:\n        digits.append(n)\n\
    \    \n    digits.sort()\n    \n    unique_digits = []\n    \n    for d in digits:\n\
    \        if d % 2 == 0:\n            unique_digits.append(d)\n    \n    return\
    \ unique_digits\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1k8fk41v.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp1k8fk41v.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1k8fk41v.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits_set = set()\n    \n    for num in\
    \ x:\n        unique_digits_set.add(str(num))\n    \n    unique_digits_list =\
    \ list(unique_digits_set)\n    \n    unique_digits_list.sort()\n    \n    return\
    \ unique_digits_list\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps322i45z.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmps322i45z.py\", line 34,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmps322i45z.py\", line\
    \ 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for x in x:\n    \
    \    digit_set.add(str(x))\n    \n    digit_list = list(digit_set)\n    digit_list.sort()\n\
    \    \n    return [x for x in x if x % 2 == 0]\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0aj4ir5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpy0aj4ir5.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpy0aj4ir5.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpy0aj4ir5.py\", line 24, in unique_digits\n    return [x for x in x\
    \ if x % 2 == 0]\nTypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for num in x:\n \
    \       if num % 2 == 0:\n            unique_digits.append(num)\n    \n    return\
    \ sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqoga7ac.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqoga7ac.py\"\
    , line 31, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqoga7ac.py\"\
    , line 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for n in x:\n   \
    \     if n % 2 == 0:\n            unique_digits.append(n)\n    \n    return sorted(unique_digits)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn1gmnlnc.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpn1gmnlnc.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpn1gmnlnc.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits.sort()\n    \n    return [num for num in x if num %\
    \ 10 in digits]\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdql1sm8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxdql1sm8.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpxdql1sm8.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits_set = set()\n    \n    for num in x:\n \
    \       digits_set.add(int(num))\n    \n    return [num for num in x if int(num)\
    \ not in digits_set]\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpffxvvb2t.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits_set = set()\n    \n    for num in x:\n \
    \       digits_set.add(num % 10)\n    \n    return sorted(list(digits_set))\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8c9pbonc.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8c9pbonc.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp8c9pbonc.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            \n            if\
    \ num % 10 == 0:\n                return []\n            else:\n             \
    \   return [num]\n    \n    return []\n</cell>\n<cell>\nunique_digits([15, 33,\
    \ 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 3\nGiven a list of integers, return True if the array contains a 3 or\
    \ greater \nnumber. False otherwise.\n\nExample 1:\nInput: [1,2,3]\nOutput: True\n\
    \nExample 2:\nInput: [4,5,6,7]\nOutput: False\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp8s7erov_.py\", line 31\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num % 10)\n    \n    return [num for num in x if num % 10 in digits]\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = [int(i) for i in str(x)]\n    \n    even\
    \ = []\n    odd = []\n    \n    for i in digits:\n        if i % 2 == 0:\n   \
    \         even.append(i)\n        else:\n            odd.append(i)\n    \n   \
    \ return even + odd\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppfg9q8l3.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmppfg9q8l3.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmppfg9q8l3.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmppfg9q8l3.py\", line 16, in unique_digits\n    digits = [int(i) for\
    \ i in str(x)]\n  File \"/tmp/tmppfg9q8l3.py\", line 16, in <listcomp>\n    digits\
    \ = [int(i) for i in str(x)]\nValueError: invalid literal for int() with base\
    \ 10: '['\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        digits.append(str(n))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for d in\
    \ digits:\n        if d not in digits_set:\n            unique_digits.append(d)\n\
    \    \n    return sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpukc86cda.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpukc86cda.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpukc86cda.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for num in x:\n        if\
    \ num % 2 == 0:\n            digits.append(num)\n    \n    digits.sort()\n   \
    \ \n    return digits\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi42d0fxt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpi42d0fxt.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpi42d0fxt.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        digits.append(int(str(n)[0]))\n\
    \    \n    digits.sort()\n    \n    return [n for n in x if int(str(n)[0]) not\
    \ in digits]\n    \ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbzit73zf.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbzit73zf.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpbzit73zf.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        digit_set.add(digit)\n        \n        if digit % 2 == 0:\n        \
    \    continue\n        \n        digit_set.add(digit + 1)\n        \n    return\
    \ sorted(list(digit_set))\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n\
    </cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a positive integer and returns the number of\
    \ digits in it. \nFor example, \ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpxj6rxram.py\", line 30\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ digits.add(int(n))\n    \n    digits = list(digits)\n    digits.sort()\n   \
    \ \n    return [n for n in x if int(n) not in digits]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 3\nGiven a string, return a string where each character has been\
    \ repeated exactly twice.\n\nFor example:\nGiven \"abcabcbb\", return \"abcabcabcbb\"\
    .\nGiven \"bbbbb\", return \"abb\".\nGiven \"pwwkew\", return \"wke\".\nNote:\n\
    You may assume that the string contains at least 1 character,\nand that the characters\
    \ are in increasing order.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpo813ye__.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for i in x:\n       \
    \ if i not in digits:\n            digits.add(i)\n        else:\n            digits.discard(i)\n\
    \            \n    return sorted(list(digits))\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7b56ry5d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7b56ry5d.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp7b56ry5d.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for num in x:\n        digits.add(num)\n\
    \    \n    return [num for num in x if num in digits]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1,\
    \ 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpgtwhsiq6.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ digits.add(n % 10)\n    \n    return [n for n in x if n not in digits]\n</cell>\n\
    <cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 3\nWrite a function that returns True\
    \ if two integers x and y are palindromes.\n\nNotes:\n\nx and y are both integers.\n\
    x and y are both positive.\nx and y are both odd.\nx and y are both less than\
    \ or equal to 10^5.\nx and y are both less than or equal to 10^9.\n\nExamples:\n\
    \npalindrome(121)\npalindrome(122)\npalindrome(121)\npalindrome(121)\npalindrome(121)\n\
    palindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\n\
    palindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\n\
    palindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\n\
    palindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\n\
    palindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\n\
    palindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\n\
    palindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\n\
    palindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\npalindrome(121)\n\
    palindrome(121)\npalindrome\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpchyas_9j.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for n in x:\n        digits.append(n)\n\
    \        \n    digits.sort()\n    \n    unique_digits = []\n    \n    for d in\
    \ digits:\n        if d % 2 == 0:\n            unique_digits.append(d)\n    \n\
    \    return unique_digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdul8bd2e.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpdul8bd2e.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpdul8bd2e.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit_set.add(str(num))\n    \n    digit_list = list(digit_set)\n    \n\
    \    digit_list.sort()\n    \n    unique_digit_list = []\n    \n    for num in\
    \ digit_list:\n        if num.count('0') == 0:\n            unique_digit_list.append(int(num))\n\
    \    \n    return unique_digit_list\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw8qjhrwu.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpw8qjhrwu.py\", line 40,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpw8qjhrwu.py\", line\
    \ 34, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        if n % 2\
    \ == 0:\n            digits.append(n)\n    return sorted(set(digits))\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpemw1r_4o.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpemw1r_4o.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpemw1r_4o.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(int(num))\n    \n    digits = list(digits)\n    \n    digits.sort()\n\
    \    \n    unique_digits = []\n    \n    for num in x:\n        if num in digits:\n\
    \            continue\n        else:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnfmdr6w5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpnfmdr6w5.py\", line 42,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpnfmdr6w5.py\", line\
    \ 36, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num)\n    \n    sorted_digits = sorted(list(digits))\n    \n  \
    \  return [num for num in x if sorted_digits.count(num) == 1]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2_u48qfy.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2_u48qfy.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp2_u48qfy.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit_set.add(str(num))\n    \n    digit_list = list(digit_set)\n    digit_list.sort()\n\
    \    \n    return [num for num in x if str(num) not in digit_list]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwvp9sar5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpwvp9sar5.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpwvp9sar5.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        digit_set.add(digit)\n        \n        if digit % 2 == 0:\n        \
    \    continue\n        \n        digit_set.remove(digit)\n        \n        if\
    \ digit < 10:\n            digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(digit\
    \ - 1)\n        \n        digit_set.remove(digit + 1)\n        \n        digit_set.remove(\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpzgqrzo98.py\", line 124\n    digit_set.remove(\n     \
    \               ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for n in x:\n        if n %\
    \ 2 == 0:\n            digits.add(n)\n    return sorted(list(digits))\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5x2lw378.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5x2lw378.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp5x2lw378.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num % 10)\n    \n    return [num for num in x if num % 10 in digits]\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        digits.append(str(n))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for d in\
    \ digits_set:\n        if int(d) % 2 == 0:\n            unique_digits.append(int(d))\n\
    \    \n    unique_digits.sort()\n    return unique_digits\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 3\nGiven a list of integers, return a new list containing only\
    \ the unique elements \n    that appear at least twice in this list. \n    \n\
    \    Can you do this in place?\n\n    Example 1:\n    >>> x = [2, 2, 3, 3]\n \
    \   >>> unique_elements(x)\n    [2, 3]\n    \n    Example 2:\n    >>> x = [2,\
    \ 2, 3, 3, 3, 3]\n    >>> unique_elements(x)\n    [2, 3]\n    \n    Example 3:\n\
    \    >>> x = [2, 2]\n    >>> unique_elements(x)\n    []\n    \n    Example 4:\n\
    \    >>> x = [2, 2, 2, 2]\n    >>> unique_elements(x)\n    []\n    \n    Example\
    \ 5:\n    >>> x = [2, 2]\n    >>> unique_elements(x)\n    []\n    \n    Constraints:\n\
    \    0 <= len(x) <= 10\n    0 <= x[i] <= 10^9\n    \n    Follow up:\n    Could\
    \ you do it in O(n) time and O(1) space?\n    \n    What if you cannot use any\
    \ additional data structures?\n    Can you sort it first?\n    \n    What if there\
    \ are two equal elements, can you remove one of them?\n    \n    What if the list\
    \ input was very large?\n    \n    What if none of the above cases hold?\n   \
    \ \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1,\
    \ 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpy5zvodjt.py\", line 83\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 171)\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for num in x:\n        digits.append(num\
    \ // 10)\n        \n    digits = list(set(digits))\n    \n    return sorted([num\
    \ for num in x if num % 10 in digits])\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7oieo5tb.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp7oieo5tb.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp7oieo5tb.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_dict = {}\n    for num in x:\n        digit\
    \ = num // 10\n        if digit in digit_dict:\n            digit_dict[digit].append(num)\n\
    \        else:\n            digit_dict[digit] = [num]\n    \n    sorted_digit_dict\
    \ = sorted(digit_dict.items(), key=lambda x:x[0])\n    \n    return [num for num\
    \ in sorted_digit_dict if not any(num[1] % i == 0 for i in range(2, 10))]\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1,\
    \ 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpvx4crgcv.py\", line 27\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ digits.add(str(n))\n    \n    digits = list(digits)\n    digits.sort()\n   \
    \ \n    return [n for n in x if str(n) not in digits]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 4\nWrite a function that takes a string as input and returns a\
    \ list of all words in the string with lengths greater than or equal to 2.\n\n\
    Example:\n>>> count_words('The quick brown fox jumps over the lazy dog')\n['The',\
    \ 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n>>> count_words('The\
    \ quick brown fox jumps over the lazy dog')\n['The', 'quick', 'brown', 'fox',\
    \ 'jumps', 'over', 'the', 'lazy', 'dog']\n>>> count_words('The quick brown fox\
    \ jumps over the lazy dog.')\n['The', 'quick', 'brown', 'fox', 'jumps', 'over',\
    \ 'the', 'lazy', 'dog']\n>>> count_words('The quick brown fox jumps over the lazy\
    \ dog.', 0)\n['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy',\
    \ 'dog']\n>>> count_words('The quick brown fox jumps over the lazy dog.', 2)\n\
    ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n>>> count_words('The\
    \ quick brown fox jumps over the lazy dog.', 3)\n['The', 'quick', 'brown', 'fox',\
    \ 'jumps', 'over', 'the', 'lazy', 'dog']\n>>> count_words('The quick brown fox\
    \ jumps over the lazy dog.', 4)\n['The', 'quick', 'brown', 'fox', 'jumps', 'over',\
    \ 'the', 'lazy', 'dog']\n>>> count_words('The quick brown fox jumps over the lazy\
    \ dog.', 5)\n['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy',\
    \ 'dog']\n>>> count_words('The quick brown fox jumps over the lazy dog.', 6)\n\
    ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n>>> count_words('The\
    \ quick brown fox jumps over the lazy dog.', 7)\n['The', 'quick', 'brown', 'fox',\
    \ 'jumps', 'over', 'the', 'lazy', 'dog']\n>>> count_words('The quick brown fox\
    \ jumps over the lazy dog.', \ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp2tdy0g7k.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    digits.sort()\n    \n    unique_digits = []\n    for num in x:\n\
    \        if num in digits:\n            continue\n        else:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64wwr3y2.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp64wwr3y2.py\", line 37,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp64wwr3y2.py\", line\
    \ 31, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            yield num\n    \
    \        \n            \ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2jbe35r.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpq2jbe35r.py\", line 34,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpq2jbe35r.py\", line\
    \ 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ // 10)\n    digits = list(set(digits))\n    digits.sort()\n    \n    unique_digits\
    \ = []\n    for num in x:\n        if num in digits:\n            continue\n \
    \       unique_digits.append(num)\n    return unique_digits\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuj4ypxxe.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpuj4ypxxe.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpuj4ypxxe.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    digits.sort()\n    \n    unique_digits = []\n    for num in x:\n\
    \        if num in digits:\n            unique_digits.append(num)\n    \n    return\
    \ unique_digits\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt5e4jm93.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpt5e4jm93.py\", line 35,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpt5e4jm93.py\", line\
    \ 29, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num)\n    \n    return [num for num in x if num in digits]\n</cell>\n\
    <cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 7: Find all numbers that has exactly\
    \ two unique digits\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpew_m7_93.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits = list(set(digits))\n    digits.sort()\n    \n    return\
    \ [num for num in x if num % 10 in digits]\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpez5q1wzb.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpez5q1wzb.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpez5q1wzb.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for n in x:\n        digits.append(n)\n\
    \        \n    digits.sort()\n    \n    unique_digits = []\n    \n    for d in\
    \ digits:\n        if d % 2 == 0:\n            unique_digits.append(d)\n    \n\
    \    return unique_digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdul8bd2e.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpdul8bd2e.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpdul8bd2e.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for num in x:\n \
    \       \n        if num % 2 == 0:\n            unique_digits.append(num)\n  \
    \          \n    return sorted(unique_digits)\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1sfknju8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp1sfknju8.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1sfknju8.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits.sort()\n    \n    return [num for num in x if num %\
    \ 10 in digits]\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdql1sm8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxdql1sm8.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpxdql1sm8.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for n in x:\n        if\
    \ n % 2 == 0:\n            digits.append(n)\n    \n    return sorted(digits)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_4v9702.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpq_4v9702.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpq_4v9702.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for i in x:\n       \
    \ if i not in digits:\n            digits.add(i)\n        else:\n            digits.add(i)\n\
    \            \n    digits = list(digits)\n    digits.sort()\n    \n    return\
    \ digits\n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwqc9ptxv.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpwqc9ptxv.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpwqc9ptxv.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        if n % 2\
    \ == 0:\n            digits.append(n)\n    digits.sort()\n    return digits\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            \n            if\
    \ digit % 2 == 0:\n                return x\n            else:\n             \
    \   continue\n    \n    return []\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8m0m5qd9.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp8m0m5qd9.py\", line 39,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp8m0m5qd9.py\", line\
    \ 33, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    digits.sort()\n    \n    unique_digits = []\n    for num in x:\n\
    \        if num in digits:\n            continue\n        unique_digits.append(num)\n\
    \    return unique_digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcc8ylznz.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpcc8ylznz.py\", line 35,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpcc8ylznz.py\", line\
    \ 29, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for num in x:\n \
    \       digits = [int(d) for d in str(num)]\n        unique_digits.append(digits)\n\
    \    \n    unique_digits = list(set(unique_digits))\n    unique_digits.sort()\n\
    \    \n    return unique_digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp43mg9x37.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp43mg9x37.py\", line 34,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp43mg9x37.py\", line\
    \ 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmp43mg9x37.py\", line 22, in unique_digits\n    unique_digits = list(set(unique_digits))\n\
    TypeError: unhashable type: 'list'\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            \n    return sorted(list(digit_set))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_91ak4rw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_91ak4rw.py\", line 34,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp_91ak4rw.py\", line\
    \ 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for n in x:\n        digits.append(str(n))\n\
    \    \n    digits = list(set(digits))\n    \n    digits.sort()\n    \n    digits\
    \ = [int(d) for d in digits]\n    \n    digits = [d for d in digits if d % 2 ==\
    \ 0]\n    \n    return digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg3ztks4a.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpg3ztks4a.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpg3ztks4a.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num)\n    \n    return [num for num in x if num in digits]\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj4x3uu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj4x3uu4.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj4x3uu4.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(int(num))\n\
    \    digits.sort()\n    \n    unique_digits = []\n    for num in digits:\n   \
    \     if num % 2 == 0:\n            unique_digits.append(num)\n    \n    return\
    \ unique_digits\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgtucsanf.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpgtucsanf.py\", line 35,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpgtucsanf.py\", line\
    \ 29, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit_set.add(str(num))\n    \n    digit_list = list(digit_set)\n    \n\
    \    digit_list.sort()\n    \n    digit_list = [int(num) for num in digit_list]\n\
    \    \n    digit_list = [num for num in digit_list if num % 2 == 0]\n    \n  \
    \  return digit_list\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxg_6qjw2.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpxg_6qjw2.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpxg_6qjw2.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits = sorted(digits)\n    \n    unique_digits = []\n   \
    \ \n    for digit in digits:\n        if digit != 0:\n            unique_digits.append(digit)\n\
    \    \n    return unique_digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp1201n_a.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpp1201n_a.py\", line 37,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpp1201n_a.py\", line\
    \ 31, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for i in x:\n   \
    \     if i not in unique_digits:\n            unique_digits.append(i)\n    \n\
    \    return sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqdf23n2w.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqdf23n2w.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpqdf23n2w.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for num in x:\n \
    \       \n        digits = [int(digit) for digit in str(num)]\n        \n    \
    \    unique_digits.append(digits)\n        \n    unique_digits = list(set(unique_digits))\n\
    \    \n    unique_digits.sort()\n    \n    return unique_digits\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfw6bwbjm.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpfw6bwbjm.py\", line 37,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpfw6bwbjm.py\", line\
    \ 31, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmpfw6bwbjm.py\", line 24, in unique_digits\n    unique_digits = list(set(unique_digits))\n\
    TypeError: unhashable type: 'list'\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        digit_set.add(digit)\n        \n        if digit % 2 == 0:\n        \
    \    continue\n        \n        digit_set.add(digit + 1)\n        \n    return\
    \ sorted(list(digit_set))\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp42y1fa7t.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp42y1fa7t.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp42y1fa7t.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_dict = {}\n    \n    for num in x:\n    \
    \    digit = num // 10\n        if digit in digit_dict:\n            digit_dict[digit].append(num)\n\
    \        else:\n            digit_dict[digit] = [num]\n    \n    sorted_list =\
    \ []\n    \n    for digit, nums in digit_dict.items():\n        if len(nums) >\
    \ 1:\n            sorted_list.extend(nums)\n    \n    return sorted_list\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1,\
    \ 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp8837kd0b.py\", line 32\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        digits.append(str(n))\n\
    \    \n    digits_set = set(digits)\n    \n    return [n for n in x if str(n)\
    \ not in digits_set]\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8lxs2s3s.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp8lxs2s3s.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp8lxs2s3s.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for i in x:\n        if\
    \ i not in digits:\n            digits.append(i)\n    \n    digits_set = set(digits)\n\
    \    \n    unique_digits = []\n    \n    for i in digits:\n        if i not in\
    \ digits_set:\n            unique_digits.append(i)\n    \n    return sorted(unique_digits)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10f_nsg9.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp10f_nsg9.py\", line 39,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp10f_nsg9.py\", line\
    \ 33, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    digits.sort()\n    \n    return [num for num in x if num % 10 in\
    \ digits]\n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_7lejsx.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpm_7lejsx.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpm_7lejsx.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for num in x:\n        digits.add(num\
    \ % 10)\n    \n    return [num for num in x if num % 10 in digits]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe5jgx9u8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpe5jgx9u8.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpe5jgx9u8.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ // 10)\n    \n    digits = list(set(digits))\n    digits.sort()\n    \n    return\
    \ [num for num in x if num % 10 in digits]\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9neqh2ar.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp9neqh2ar.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9neqh2ar.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for n in x:\n        digits.append(n)\n\
    \        \n    digits.sort()\n    \n    unique_digits = []\n    \n    for d in\
    \ digits:\n        if d % 2 == 0:\n            continue\n        else:\n     \
    \       unique_digits.append(d)\n    \n    return unique_digits\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwnivihpn.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpwnivihpn.py\", line 40,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpwnivihpn.py\", line\
    \ 35, in check\n    assert candidate([152, 323, 1422, 10]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits_set = set(digits)\n    \n    return [num for num in\
    \ x if num % 10 in digits_set]\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdsq16gyf.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        if n % 2\
    \ == 0:\n            digits.append(n)\n    digits.sort()\n    return digits\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        digit_set.add(digit)\n        \n        if digit % 2 == 0:\n        \
    \    continue\n        \n        digit_set.add(digit + 1)\n        \n    return\
    \ sorted(list(digit_set))\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp42y1fa7t.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp42y1fa7t.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp42y1fa7t.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for i in x:\n   \
    \     if i not in unique_digits:\n            unique_digits.append(i)\n    \n\
    \    return sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqdf23n2w.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqdf23n2w.py\", line 31,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpqdf23n2w.py\", line\
    \ 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit_set.add(str(num))\n    \n    digit_list = list(digit_set)\n    \n\
    \    digit_list.sort()\n    \n    unique_digits = []\n    \n    for num in digit_list:\n\
    \        if num.count(str(0)) == 0:\n            unique_digits.append(int(num))\n\
    \    \n    return unique_digits\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpglwu4gpe.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpglwu4gpe.py\", line 40,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpglwu4gpe.py\", line\
    \ 34, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for num in x:\n \
    \       \n        if num % 2 == 0:\n            unique_digits.append(num)\n  \
    \  \n    return sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdznh43oe.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpdznh43oe.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpdznh43oe.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        digits.append(int(str(n)[0]))\n\
    \    \n    return sorted(list(set(digits)))\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphjdd_yjp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphjdd_yjp.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmphjdd_yjp.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for i in x:\n        if\
    \ i not in digits:\n            digits.append(i)\n    \n    digits = sorted(digits)\n\
    \    \n    even = []\n    \n    for i in digits:\n        if i % 2 == 0:\n   \
    \         even.append(i)\n    \n    return even\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 3\nGiven a list of integers, return a new list containing only\
    \ the unique elements \n    that appear in it.\n\nExample\nFor nums = [1,1,1,2,2,3],\
    \ the output should be\nunique_nums(nums) = [1,2,3].\n\nNote: The result should\
    \ not be sorted in any way.\n\n</text>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_lfltpx9.py\", line 31\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for n in x:\n        digits.append(n)\n\
    \    \n    digits.sort()\n    \n    unique_digits = []\n    \n    for d in digits:\n\
    \        if d % 2 == 0:\n            unique_digits.append(d)\n    \n    return\
    \ unique_digits\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1k8fk41v.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp1k8fk41v.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1k8fk41v.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for num in x:\n        digits.append(num\
    \ // 10)\n        \n    digits = list(set(digits))\n    digits.sort()\n    \n\
    \    return [num for num in x if num % 10 in digits]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwwbw2p4x.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpwwbw2p4x.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpwwbw2p4x.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        digits.append(str(n))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for d in\
    \ digits_set:\n        if int(d) % 2 == 0:\n            unique_digits.append(int(d))\n\
    \    \n    return sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp52t6g_os.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp52t6g_os.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp52t6g_os.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits_set = set()\n    \n    for num in x:\n \
    \       digits_set.add(num % 10)\n    \n    digits_set = sorted(list(digits_set))\n\
    \    \n    return [num for num in x if num % 10 in digits_set]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5j70l0i.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpw5j70l0i.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpw5j70l0i.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            \n        if num\
    \ % 10 == 0:\n            continue\n        else:\n            digit_set.add(num\
    \ % 10)\n            \n    return sorted(list(digit_set))\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsj19t036.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpsj19t036.py\", line 39,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpsj19t036.py\", line\
    \ 33, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits_set = set(digits)\n    \n    unique_digits = []\n  \
    \  for num in x:\n        if num % 10 in digits_set:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1nulme6n.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp1nulme6n.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1nulme6n.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(int(num))\n    \n    sorted_digits = sorted(digits)\n    \n   \
    \ return [num for num in sorted_digits if num % 2 == 0]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp070nvyc3.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp070nvyc3.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp070nvyc3.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for n in x:\n        digits.add(str(n))\n\
    \    \n    digits = list(digits)\n    digits.sort()\n    \n    return [n for n\
    \ in x if str(n) not in digits]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkd6yuzlm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkd6yuzlm.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpkd6yuzlm.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num)\n    \n    return [num for num in x if num in digits]\n  \
    \  \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp356z0h92.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp356z0h92.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp356z0h92.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = [i for i in x if i % 2 == 0]\n    \n \
    \   return sorted(list(set(digits)))\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprh7ihwr_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprh7ihwr_.py\", line 27,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmprh7ihwr_.py\", line\
    \ 21, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ // 10)\n    \n    digits = list(set(digits))\n    digits.sort()\n    \n    return\
    \ [num for num in x if num % 10 in digits]\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpesv8992i.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        digit_set.add(digit)\n        \n        if digit % 2 == 0:\n        \
    \    digit_set.remove(digit)\n            \n    return sorted(list(digit_set))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpndv08hsm.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpndv08hsm.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpndv08hsm.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit_set.add(num % 10)\n    \n    return [num for num in x if num % 10\
    \ in digit_set]\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvzm4ofj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvzm4ofj.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpgvzm4ofj.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for n in x:\n        if\
    \ n % 2 == 0:\n            digits.append(n)\n    \n    digits.sort()\n    \n \
    \   return [n for n in x if n not in digits]\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_cuom2o.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu_cuom2o.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpu_cuom2o.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        digit_set.add(digit)\n        \n        if digit % 2 == 0:\n        \
    \    continue\n        \n        digit_set.add(digit + 1)\n        \n    return\
    \ sorted(list(digit_set))\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp42y1fa7t.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp42y1fa7t.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp42y1fa7t.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit_set.add(num)\n    \n    digit_list = [num for num in x if num in\
    \ digit_set]\n    \n    return sorted(digit_list)\n\ndef check(candidate):\n \
    \   assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6tj4u_sg.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6tj4u_sg.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp6tj4u_sg.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits.sort()\n    \n    return [num for num in x if num %\
    \ 10 in digits]\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdql1sm8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxdql1sm8.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpxdql1sm8.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(int(num))\n\
    \    \n    digits.sort()\n    \n    unique_digits = []\n    \n    for num in digits:\n\
    \        if num % 2 == 0:\n            unique_digits.append(num)\n    \n    return\
    \ unique_digits\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2pwfpj3n.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp2pwfpj3n.py\", line 37,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp2pwfpj3n.py\", line\
    \ 31, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for num in x:\n \
    \       \n        if num % 2 == 0:\n            unique_digits.append(num)\n  \
    \          \n    return sorted(unique_digits)\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1sfknju8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp1sfknju8.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp1sfknju8.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num)\n    \n    return [num for num in x if num in digits]\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj4x3uu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj4x3uu4.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj4x3uu4.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for num in x:\n \
    \       if num % 2 == 0:\n            unique_digits.append(num)\n    \n    return\
    \ sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqoga7ac.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqoga7ac.py\"\
    , line 31, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqoga7ac.py\"\
    , line 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for num in x:\n        digits.add(num)\n\
    \    \n    digits = list(digits)\n    digits.sort()\n    \n    return [num for\
    \ num in digits if num % 2 == 0]\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnt6385oi.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpnt6385oi.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpnt6385oi.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for num in x:\n        digits.add(num\
    \ % 10)\n    return sorted(list(digits))\n\ndef check(candidate):\n    assert\
    \ candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323,\
    \ 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n\
    \    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2b4xxlui.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2b4xxlui.py\", line 28,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp2b4xxlui.py\", line\
    \ 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    digits.sort()\n    \n    return [num for num in x if num % 10 in\
    \ digits]\n\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_7lejsx.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpm_7lejsx.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpm_7lejsx.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for num in x:\n        digits.append(num\
    \ // 10)\n    \n    digits = list(set(digits))\n    \n    digits.sort()\n    \n\
    \    return [num for num in x if num % 10 in digits]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpge7vlonm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpge7vlonm.py\", line 34,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpge7vlonm.py\", line\
    \ 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(int(num))\n    \n    sorted_digits = sorted(list(digits))\n   \
    \ \n    return [num for num in x if int(num) not in sorted_digits]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5zgjol7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpg5zgjol7.py\", line 32,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpg5zgjol7.py\", line\
    \ 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            \n            if\
    \ digit % 2 == 0:\n                continue\n            else:\n             \
    \   return [num] + unique_digits([num - digit])\n    \n    return []\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv7b4rh00.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpv7b4rh00.py\", line 39,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpv7b4rh00.py\", line\
    \ 33, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits_set = set(digits)\n    \n    unique_digits = []\n  \
    \  for num in x:\n        if num % 10 in digits_set:\n            unique_digits.append(num)\n\
    \        else:\n            digits_set.remove(num % 10)\n    \n    return sorted(unique_digits)\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8pcz1hr.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpi8pcz1hr.py\", line 38,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpi8pcz1hr.py\", line\
    \ 32, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ digits.add(int(str(n)[0]))\n    \n    return sorted(list(digits))\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpux1418mq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpux1418mq.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpux1418mq.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for i in x:\n       \
    \ digits.add(i)\n    \n    digits = list(digits)\n    \n    digits.sort()\n  \
    \  \n    unique_digits = []\n    \n    for i in digits:\n        if i not in unique_digits:\n\
    \            unique_digits.append(i)\n    \n    return unique_digits\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hpy2aff.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp2hpy2aff.py\", line 40,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp2hpy2aff.py\", line\
    \ 34, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 0
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for num in x:\n \
    \       digits = [int(d) for d in str(num)]\n        \n        for digit in digits:\n\
    \            if digit % 2 == 0:\n                break\n        else:\n      \
    \      unique_digits.append(num)\n    \n    return sorted(unique_digits)\n\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ digits.add(int(str(n)[0]))\n    \n    return [n for n in x if int(str(n)[0])\
    \ not in digits]\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfws3d195.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfws3d195.py\", line 30,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpfws3d195.py\", line\
    \ 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = [int(d) for d in str(x)]\n    \n    evens\
    \ = [d for d in digits if d % 2 == 0]\n    \n    return sorted(list(set(digits)\
    \ - set(evens)))\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9fetyv_c.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9fetyv_c.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp9fetyv_c.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmp9fetyv_c.py\", line 16, in unique_digits\n    digits = [int(d) for\
    \ d in str(x)]\n  File \"/tmp/tmp9fetyv_c.py\", line 16, in <listcomp>\n    digits\
    \ = [int(d) for d in str(x)]\nValueError: invalid literal for int() with base\
    \ 10: '['\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digit = num // 10\n        if digit in digits:\n            continue\n   \
    \     digits.add(digit)\n        \n        if num % 10 == 0:\n            return\
    \ [x]\n        else:\n            x.remove(num)\n            x.sort()\n      \
    \      \n    return x\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc36f79r7.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpc36f79r7.py\", line 39,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpc36f79r7.py\", line\
    \ 33, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ digits.add(str(n))\n    \n    digits = list(digits)\n    \n    digits.sort()\n\
    \    \n    return [n for n in x if str(n) not in digits]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvr3wnbq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppvr3wnbq.py\", line 34,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmppvr3wnbq.py\", line\
    \ 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for n in x:\n        digits.add(str(n))\n\
    \    \n    return [n for n in x if str(n) not in digits]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphk7ji8p6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphk7ji8p6.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmphk7ji8p6.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = [int(i) for i in str(x)]\n    \n    even\
    \ = [i for i in digits if i % 2 == 0]\n    \n    return sorted(list(set(digits)\
    \ - set(even)))\n\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5a1kc9jq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5a1kc9jq.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmp5a1kc9jq.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  File\
    \ \"/tmp/tmp5a1kc9jq.py\", line 16, in unique_digits\n    digits = [int(i) for\
    \ i in str(x)]\n  File \"/tmp/tmp5a1kc9jq.py\", line 16, in <listcomp>\n    digits\
    \ = [int(i) for i in str(x)]\nValueError: invalid literal for int() with base\
    \ 10: '['\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            yield num\n\ndef\
    \ check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeovrxk8e.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpeovrxk8e.py\", line 33,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpeovrxk8e.py\", line\
    \ 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for num in x:\n        digits.add(num)\n\
    \    \n    return [num for num in x if num in digits]\n\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpllayt5nj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpllayt5nj.py\", line 29,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpllayt5nj.py\", line\
    \ 23, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: 1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        digits.append(str(n))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for d in\
    \ digits:\n        if d not in digits_set:\n            unique_digits.append(int(d))\n\
    \    \n    return sorted(unique_digits)\n</cell>\n<cell>\nunique_digits([15, 33,\
    \ 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns True if a binary string with exactly\
    \ two bits set to 1 is '10101'.\n\nFor example, 10101 is considered binary and\
    \ has two bits set to 1. Return False if such a binary string does not occur in\
    \ the given string.\n\nNote: Return False if the string does not consist of only\
    \ 0's and 1's. Return True otherwise.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf9s4dg57.py\", line 28\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659746998
- exit_code: -1
  program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(str(num))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for num\
    \ in x:\n        if str(num) not in digits_set:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw3ncw01x.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpw3ncw01x.py\", line 36,\
    \ in test_check\n    check(unique_digits)\n  File \"/tmp/tmpw3ncw01x.py\", line\
    \ 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nAssertionError\n"
  stdout: ''
  timestamp: 1659746998
