name: HumanEval_104_unique_digits
language: py
results:
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num)\n    \n    digits = list(digits)\n    \n    digits.sort()\n\
    \    \n    unique_digits = []\n    \n    for num in digits:\n        if num %\
    \ 2 == 0:\n            unique_digits.append(num)\n    \n    return unique_digits\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_si_nbop.py\"\
    , line 42, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_si_nbop.py\"\
    , line 40, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_si_nbop.py\"\
    , line 34, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(int(num))\n    \n    digits = list(digits)\n    digits.sort()\n\
    \    \n    unique_digits = []\n    \n    for num in x:\n        if int(num) not\
    \ in digits:\n            unique_digits.append(num)\n    \n    return unique_digits\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcjs9opcb.py\"\
    , line 31\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for num in x:\n \
    \       if num % 2 == 0:\n            unique_digits.append(num)\n    \n    return\
    \ sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqoga7ac.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqoga7ac.py\"\
    , line 31, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqoga7ac.py\"\
    , line 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            \n            if\
    \ digit % 2 == 0:\n                continue\n            else:\n             \
    \   return [num] + unique_digits(num // 10)\n    \n    return []\n</cell>\n<cell>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422,\
    \ 10])\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([15, 33,\
    \ 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n\
    \    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl9em6lt8.py\"\
    , line 31\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digit = num // 10\n        if digit in digits:\n            continue\n   \
    \     else:\n            digits.add(digit)\n            \n    return sorted(list(digits))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp98e94w16.py\"\
    , line 36, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp98e94w16.py\"\
    , line 34, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp98e94w16.py\"\
    , line 28, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    digits.sort()\n    \n    unique = []\n    for num in x:\n       \
    \ if num % 10 in digits:\n            unique.append(num)\n    \n    return unique\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjb1sd02w.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjb1sd02w.py\"\
    , line 35, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjb1sd02w.py\"\
    , line 29, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            \n            if\
    \ digit % 2 == 0:\n                continue\n            else:\n             \
    \   return [num]\n    \n    return []\n</cell>\n<cell>\nunique_digits([15, 33,\
    \ 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes a list of integers and returns the number\
    \ of integers in the list that have no duplicates.\n\nFor example, given [5, 7,\
    \ 7, 8, 8, 8], return 3.\n\nNote: The order of the integers in the list does not\
    \ matter.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfqut0q9r.py\"\
    , line 31\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num % 10)\n    \n    return [num for num in x if num % 10 in digits]\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0xdjzly.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(num)\n    \n    return [num for num in x if num in digits]\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj4x3uu4.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj4x3uu4.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj4x3uu4.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits_set = set()\n    \n    for num in\
    \ x:\n        digit = num // 10\n        if digit % 2 == 0:\n            unique_digits_set.add(num)\n\
    \    \n    return sorted(unique_digits_set)\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 3\nGiven a list of integers, return a new list containing only\
    \ the unique elements \n    that appear at least twice in this list. \n    \n\
    \    Can you do it without using any extra space?\n\n    Example 1:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 2]\n    \n    Example 2:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 3:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 4:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 5:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 6:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 7:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 8:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 9:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 10:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 11:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 12:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 13:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 14:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 15:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 16:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 17:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 18:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 19:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 20:\n    >>> unique_elements([1,\
    \ 1, 1, 2, 2, 3])\n    [1, 3]\n    \n    Example 21:\n    >>> unique_\ndef check(candidate):\n\
    \    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152,\
    \ 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111,\
    \ 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n\
    \    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpty1uewqk.py\"\
    , line 24\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for num in x:\n     \
    \   digits.add(int(num))\n    \n    sorted_digits = sorted(digits)\n    \n   \
    \ unique_digits = []\n    \n    for num in sorted_digits:\n        if num % 2\
    \ == 0:\n            unique_digits.append(num)\n    \n    return unique_digits\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 7\nWrite a function that takes a list\
    \ of integers and returns the number of elements in the list that are not unique.\n\
    \nFor example:\n>>> unique_elements([1, 2, 3, 1])\n1\n>>> unique_elements([1,\
    \ 2, 3, 2])\n0\n>>> unique_elements([1, 2, 3, 3])\n0\n>>> unique_elements([1,\
    \ 2, 3, 4])\n3\n>>> unique_elements([1, 2, 3, 5])\n0\n>>> unique_elements([1,\
    \ 2, 3, 6])\n0\n>>> unique_elements([1, 2, 3, 7])\n0\n>>> unique_elements([1,\
    \ 2, 3, 8])\n0\n>>> unique_elements([1, 2, 3, 9])\n0\n>>> unique_elements([1,\
    \ 2, 3, 10])\n0\n>>> unique_elements([1, 2, 3, 11])\n0\n>>> unique_elements([1,\
    \ 2, 3, 12])\n0\n>>> unique_elements([1, 2, 3, 13])\n0\n>>> unique_elements([1,\
    \ 2, 3, 14])\n0\n>>> unique_elements([1, 2, 3, 15])\n0\n>>> unique_elements([1,\
    \ 2, 3, 16])\n0\n>>> unique_elements([1, 2, 3, 17])\n0\n>>> unique_elements([1,\
    \ 2, 3, 18])\n0\n>>> unique_elements([1, 2, 3, 19])\n0\n>>> unique_elements([1,\
    \ 2, 3, 20])\n0\n>>> unique_elements([1, 2, 3, 21])\n0\n>>> unique_elements([1,\
    \ 2, 3, 22])\n0\n>>> unique_elements([1, 2, 3, 23])\n0\n>>> unique_elements([1,\
    \ 2, 3, 24])\n0\n>>> unique_elements([1, 2, 3, 25])\n0\n>>> unique_elements([1,\
    \ 2, 3, 26])\n0\n>>> unique_elements([1, 2, 3, 27])\n0\n>>> unique_elements([1,\
    \ 2, 3, 28])\n0\n>>> unique_elements([1, 2, 3, 29])\n0\n>>> unique_elements([1,\
    \ 2, 3, 30])\n0\n>>> unique_elements([1, 2, 3, 31])\n0\n>>> unique_elements([1,\
    \ 2, 3, 32])\n0\n>>> unique_elements([1, 2, 3, 33])\n0\n>>> unique_elements([1,\
    \ 2, 3, 34])\n0\n>>> unique_elements([1, 2, 3, 35])\n0\n>>> unique_elements([1,\
    \ 2, 3, 36])\ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvrn240b.py\"\
    , line 30\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    for num in x:\n        digits.add(num)\n\
    \    return sorted(list(digits))\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvw7l8pp1.py\"\
    , line 30, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvw7l8pp1.py\"\
    , line 28, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvw7l8pp1.py\"\
    , line 22, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits_set = set()\n    unique_digits_set.update(x)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpomfwzibq.py\"\
    , line 83, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpomfwzibq.py\"\
    , line 81, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpomfwzibq.py\"\
    , line 75, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for num in x:\n        digits.append(int(num))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for num\
    \ in x:\n        if int(num) not in digits_set:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8d8io2_0.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8d8io2_0.py\"\
    , line 36, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8d8io2_0.py\"\
    , line 30, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for n in x:\n       \
    \ if n % 2 == 0:\n            digits.add(n)\n    \n    return sorted(list(digits))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzji_dvmk.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzji_dvmk.py\"\
    , line 31, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzji_dvmk.py\"\
    , line 25, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    for n in x:\n        if n % 2\
    \ == 0:\n            digits.append(n)\n    digits.sort()\n    return digits\n\n\
    def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 30, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3sxuqb.py\"\
    , line 24, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    unique_digits = []\n    \n    for n in x:\n   \
    \     \n        if n % 2 == 0:\n            unique_digits.append(n)\n    \n  \
    \  return sorted(unique_digits)\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdc83rhc1.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdc83rhc1.py\"\
    , line 32, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdc83rhc1.py\"\
    , line 26, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = []\n    \n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits.sort()\n    \n    return [num for num in x if num %\
    \ 10 in digits]\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that returns True if two strings are anagrams of each other. \nFor\
    \ example anagrams('abba', 'baab') is True.\n\nNotes:\n\nAll strings will be converted\
    \ to lowercase.\nThe order of the characters in a string does not matter.\nAll\
    \ input strings are guaranteed to be non-empty strings.\nThe anagrams function\
    \ should have a runtime of O(n) where n is the length of the first input string.\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135,\
    \ 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5uhl4zdu.py\"\
    , line 24\n    </cell>\n    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digits = set()\n    \n    for i in x:\n       \
    \ if i not in digits:\n            digits.add(i)\n        else:\n            digits.remove(i)\n\
    \    \n    return sorted(list(digits))\n\ndef check(candidate):\n    assert candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) ==\
    \ []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert\
    \ candidate([135, 103, 31]) == [31, 135]\n\ndef test_check():\n    check(unique_digits)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ovkcc91.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ovkcc91.py\"\
    , line 33, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ovkcc91.py\"\
    , line 27, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
    \    \"\"\"Given a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any even digit.\n\n    Note: Returned list should be\
    \ sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\n    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            \n            if\
    \ num % 10 == 0:\n                continue\n            else:\n              \
    \  digit_set.add(num % 10)\n                \n    return sorted(list(digit_set))\n\
    \ndef check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    \    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
    \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31,\
    \ 135]\n\ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_w_grrc.py\"\
    , line 41, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_w_grrc.py\"\
    , line 39, in test_check\n    check(unique_digits)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_w_grrc.py\"\
    , line 33, in check\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
