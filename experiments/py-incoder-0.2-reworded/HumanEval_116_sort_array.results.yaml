name: HumanEval_116_sort_array
language: py
results:
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    pass\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcn51eqxq.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcn51eqxq.py\"\
    , line 30, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcn51eqxq.py\"\
    , line 20, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    pass\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppu_kzyv3.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppu_kzyv3.py\"\
    , line 30, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppu_kzyv3.py\"\
    , line 20, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp136eimff.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp136eimff.py\"\
    , line 31, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp136eimff.py\"\
    , line 21, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp136eimff.py\", line\
    \ 18, in sort_array\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp136eimff.py\", line\
    \ 18, in <lambda>\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\
    NameError: name 'count_ones' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwh2mqhak.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwh2mqhak.py\"\
    , line 30, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwh2mqhak.py\"\
    , line 20, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwh2mqhak.py\", line\
    \ 17, in sort_array\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwh2mqhak.py\", line\
    \ 17, in <lambda>\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\
    NameError: name 'count_ones' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8hui3f7.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8hui3f7.py\"\
    , line 30, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8hui3f7.py\"\
    , line 20, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8hui3f7.py\", line\
    \ 17, in sort_array\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8hui3f7.py\", line\
    \ 17, in <lambda>\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\
    NameError: name 'count_ones' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    pass\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjtx1k_jb.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjtx1k_jb.py\"\
    , line 30, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjtx1k_jb.py\"\
    , line 20, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_w3s4a0.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_w3s4a0.py\"\
    , line 31, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_w3s4a0.py\"\
    , line 21, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaasbe19t.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaasbe19t.py\"\
    , line 30, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaasbe19t.py\"\
    , line 20, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaasbe19t.py\", line\
    \ 17, in sort_array\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaasbe19t.py\", line\
    \ 17, in <lambda>\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\
    NameError: name 'count_ones' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpen35vcnw.py\"\
    , line 33, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpen35vcnw.py\"\
    , line 31, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpen35vcnw.py\"\
    , line 21, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    pass\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppt6xm2fz.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppt6xm2fz.py\"\
    , line 30, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppt6xm2fz.py\"\
    , line 20, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    pass\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4dc2b6nt.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4dc2b6nt.py\"\
    , line 30, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4dc2b6nt.py\"\
    , line 20, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8rzou8_6.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8rzou8_6.py\"\
    , line 30, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8rzou8_6.py\"\
    , line 20, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8rzou8_6.py\", line\
    \ 17, in sort_array\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8rzou8_6.py\", line\
    \ 17, in <lambda>\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\
    NameError: name 'count_ones' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    pass\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv30oo7i1.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv30oo7i1.py\"\
    , line 30, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv30oo7i1.py\"\
    , line 20, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn9lwz30k.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn9lwz30k.py\"\
    , line 30, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn9lwz30k.py\"\
    , line 20, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn9lwz30k.py\", line\
    \ 17, in sort_array\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn9lwz30k.py\", line\
    \ 17, in <lambda>\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\
    NameError: name 'count_ones' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), int(x)))\n\ndef\
    \ check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3wdx44i.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3wdx44i.py\"\
    , line 30, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3wdx44i.py\"\
    , line 20, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3wdx44i.py\", line\
    \ 17, in sort_array\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\
    \  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3wdx44i.py\", line\
    \ 17, in <lambda>\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\
    NameError: name 'count_ones' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    pass\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb494xfiy.py\"\
    , line 32, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb494xfiy.py\"\
    , line 30, in test_check\n    check(sort_array)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb494xfiy.py\"\
    , line 20, in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), int(x)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
