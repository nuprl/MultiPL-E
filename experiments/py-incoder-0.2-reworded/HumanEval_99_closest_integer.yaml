name: HumanEval_99_closest_integer
language: py
prompt: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
  \ that takes a value (string) representing a number\n    and returns the closest\
  \ integer to it. If the number is equidistant\n    from two integers, round it away\
  \ from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n    >>> closest_integer('15.3')\n\
  \    15\n\n    Note:\n    Rounding away from zero means that if the given number\
  \ is equidistant\n    from two integers, the one you should return is the one that\
  \ is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n\
  \    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
  \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n\
  \    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
  \ntest_check()\n"
completions: ["    number = float(value)\n    difference = abs(number - int(number))\n\
    \    if difference < 0.5:\n        return int(number)\n    else:\n        return\
    \ int(number) + 1\n\n", "    number = float(value)\n    difference = abs(number\
    \ - int(number))\n    if difference < 0.5:\n        return int(number)\n    else:\n\
    \        return int(number) + 1\n\n", "    number = float(value)\n    difference\
    \ = abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n", "    number = float(value)\n\
    \    if number % 1 == 0:\n        return int(number)\n    else:\n        difference\
    \ = abs(number - int(number))\n        if difference < 0.5:\n            return\
    \ int(number)\n        else:\n            return int(number) + 1\n\n", "    number\
    \ = float(value)\n    differences = []\n    for value in range(-10, 10):\n   \
    \     differences.append(abs(value - number))\n    return max(differences)\n\n",
  "    number = float(value)\n    difference = abs(number - int(number))\n    if difference\
    \ < 0.5:\n        return int(number)\n    else:\n        return int(number) +\
    \ 1\n\n", "    number = float(value)\n    closest_integer = int(round(number))\n\
    \    if abs(number - closest_integer) < abs(number - number % 1):\n        return\
    \ closest_integer\n    else:\n        return closest_integer + 1\n\n", "    number\
    \ = float(value)\n    difference = abs(number - int(number))\n    if difference\
    \ < 0.5:\n        return int(number)\n    else:\n        return int(number) +\
    \ 1\n\n", "    number = float(value)\n    if number == int(number):\n        return\
    \ int(number)\n    differences = [abs(number - int(number)) for number in str(number)]\n\
    \    return int(min(differences, key=differences.count))\n\n", "    number = float(value)\n\
    \    if number % 1 != 0:\n        raise ValueError(\"value must be an integer\"\
    )\n    differences = [abs(number - int(number)) for number in sorted([int(number)\
    \ for number in str(number)])]\n    return int(differences.index(0) + 1)\n\n",
  "    number = float(value)\n    difference = abs(number - int(number))\n    if difference\
    \ < 0.5:\n        return int(number)\n    else:\n        return int(number - difference)\n\
    \n", "    number = float(value)\n    difference = abs(number - int(number))\n\
    \    if difference < 0.5:\n        return int(number)\n    else:\n        return\
    \ int(number - difference)\n\n", "    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n", "    number = float(value)\n\
    \    difference = abs(number - int(number))\n    if difference < 0.5:\n      \
    \  return int(number)\n    else:\n        return int(number) + 1\n\n", "    number\
    \ = float(value)\n    difference = abs(number - int(number))\n    if difference\
    \ < 0.5:\n        return int(number)\n    else:\n        return int(number - difference)\n\
    \n", "    number = float(value)\n    difference = abs(number - int(number))\n\
    \    if difference < 0.5:\n        return int(number)\n    else:\n        return\
    \ int(number) + 1\n\n", "    number = float(value)\n    difference = abs(number\
    \ - int(number))\n    if difference < 0.5:\n        return int(number)\n    else:\n\
    \        return int(number) + 1\n\n", "    number = float(value)\n    difference\
    \ = abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n", "    number = float(value)\n\
    \    if number == int(number):\n        return int(number)\n    difference = abs(number\
    \ - int(number))\n    if difference < 0.5:\n        return int(number)\n    else:\n\
    \        return int(number) + 1\n\n", "    number = float(value)\n    difference\
    \ = abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
